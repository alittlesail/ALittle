
namespace ALittleDeploy;

public class DPLTabChild : ALittle.UIEventDispatcher
{
	private string _name;           // 当前控件名
    private string _module;		// 当前模块
	private bool _save;             // 是否已保存

	private ALittle.RevokeList _revoke_list;         // 撤销操作列表
    private ALittle.ControlSystem _ctrl_sys;	// 控件系统

	public ctor(ALittle.ControlSystem ctrl_sys, string module, string name, bool save)
	{
		this._name = name;
        this._module = module;
		this._save = save;
		// 撤销列表
		this._revoke_list = new ALittle.RevokeList(10000);
    }

	public get id() : string { return this._name; }
	public get name() : string { return this._name; }
    public get module() : string { return this._module; }
	public get save() : bool { return this._save; }
	public set save(bool value) {}
	public fun Save() { this.save = true; }
	public get revoke_list() : ALittle.RevokeList { return this._revoke_list; }
	public get title() : string { return this._name; }
	public get tab_body() : ALittle.DisplayObject { return null; }

	public fun OnUndo() {}
	public fun OnRedo() {}
	public fun OnHide() {}
	public fun OnShow() {}
	public fun OnClose() {}
	public fun OnOpen() {}
	public fun OnTabRightMenu(AUIPlugin.AUIRightMenu menu) {}
}

public class DPLContentEdit : ALittle.DisplayLayout
{
	private ALittle.DisplayObject _cur_tab;		// 当前标签页
	private ALittle.Quad _main_tab_bg;
	private ALittle.Tab _main_tab;				// tab标签管理器

	public fun TCtor()
	{
		// 接听tab的相关事件以及回调
		this._main_tab.AddEventListener(this, this.HandleMainTabSelectChange);
		this._main_tab.AddEventListener(this, this.HandleMainTabRightClick);
		this._main_tab.AddEventListener(this, this.HandleMainTabKeyDown);
		this._main_tab.close_callback = bind(this.MainTabTabCloseYesOrNot, this);
		this._main_tab.close_post_callback = bind(this.MainTabTabClose, this);
	}

	public get cur_tab() : ALittle.DisplayObject { return this._cur_tab; }
	public get main_tab() : ALittle.Tab { return this._main_tab; }
	public get cur_tab_child() : DPLTabChild
	{
		if (this._cur_tab == null) return null;
		return this._cur_tab._user_data;
	}

	////////////////////////////////////////////////////////////////////////-	
	// 按照id遍历Tab是否已存在某个名字的控件
	public fun GetTabById<T:DPLTabChild>(string id) : ALittle.DisplayObject
	{
		//遍历
		var tab_childs = this._main_tab.childs;
		for (var index, child in tab_childs)
		{
			var tab_child = ALittle.Cast{T, DPLTabChild}(child._user_data);
			if (tab_child != null && tab_child.id == id)
				return child;
		}
		return null;
	}

    // 按照id遍历Tab是否已存在某个名字的TabChild
	public fun GetTabChildById<T:DPLTabChild>(string id) : T
	{
		//遍历
		var tab_childs = this._main_tab.childs;
		for (var index, child in tab_childs)
		{
			var tab_child = ALittle.Cast{T, DPLTabChild}(child._user_data);
			if (tab_child != null && tab_child.id == id)
				return tab_child;
		}
		return null;
	}

	// 获取控件映射表
	public fun GetTabIdMap<T:DPLTabChild>() : Map<string, T>
	{
		//遍历
		var info = new Map<string, T>();
		var tab_childs = this._main_tab.childs;
		for (var index, child in tab_childs)
		{
			var tab_child = ALittle.Cast{T, DPLTabChild}(child._user_data);
			if (tab_child != null)
				info[tab_child.id] = tab_child;
        }

		return info;
	}

	// 获取当前标签的下标
	public fun GetCurTabIndex() : int
	{
		return this._main_tab.tab_index;
	}

	// 获取当前标签的下标
	public fun SetCurTabIndex(int index)
	{
		if (this._main_tab.tab_index == index) return;
		this._main_tab.tab_index = index;
		this.ChangeTabEdit(this._cur_tab, this._main_tab.tab);
	}

	// 检查是否已经都保存了
	public fun IsSaveAll() : bool
	{
		//遍历
		var tab_childs = this._main_tab.childs;
		for (var index, child in tab_childs)
		{
			if (cast<DPLTabChild>(child._user_data).save == false)
				return false;
		}
		return true;
	}

	// 切换tab编辑, 从from切换到to
	public fun ChangeTabEdit(ALittle.DisplayObject child_from, ALittle.DisplayObject child_to)
	{
		if (child_from == child_to) return;
            // 把控件树区域的结构保存到from的info, 判断是否为Tab栏的第一个子控件
		if (child_from != null)
		{
			var tab_child:DPLTabChild = child_from._user_data;
			tab_child.OnHide();
		}
	
		if (child_to != null)
		{
			var tab_child:DPLTabChild = child_to._user_data;
			tab_child.OnShow();
		}
        
            // 保存当前分页
		this._cur_tab = child_to;
	}

	// 关闭某个分页
	public fun CloseTab(ALittle.DisplayObject child)
	{
		var tab_child:DPLTabChild = child._user_data;
        if (this._main_tab.tab == child)
        	tab_child.OnHide();
		tab_child.OnClose();
		this._main_tab.RemoveChild(child);

		// 切换到当前标签页
		this.ChangeTabEdit(null, this._main_tab.tab);
	}

    // 关闭某个标签页
    public fun CloseTabChild(DPLTabChild tab_child)
    {
        this.CloseTab(tab_child.tab_body);
    }

	public fun CloseTabByName<T:DPLTabChild>(string name)
	{
		for (var index, child in this._main_tab.childs)
		{
            var tab_child:DPLTabChild = child._user_data;
            var target_child = ALittle.Cast{T}(tab_child);
			if (target_child != null && this._main_tab.GetChildText(child) == name)
			{
                this.CloseTab(tab_child.tab_body);
				break;
            }
        }
    }

	// 保存某个分页
	public fun SaveTab(ALittle.DisplayObject child)
	{
        var tab_child:DPLTabChild = child._user_data;
		tab_child.save = true;
    }

	// 关闭全部分页
	public fun CloseAllTab()
	{
		this.ChangeTabEdit(this._main_tab.tab, null);

		for (var k, child in this._main_tab.childs)
		{
			var tab_child:DPLTabChild = child._user_data;
			tab_child.OnClose();
		}
		this._main_tab.RemoveAllChild();
	}

	// 保存全部分页
	public fun SaveAllTab()
	{
		for (var k, child in this._main_tab.childs)
		{
			var tab_child:DPLTabChild = child._user_data;
			tab_child.save = true;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////-
	// Tab栏的选中项发生改变时执行的操作
	private fun HandleMainTabSelectChange(ALittle.UISelectChangedEvent event)
	{
		this.ChangeTabEdit(this._cur_tab, this._main_tab.tab);
	}

	// Tab栏中有子控件被关闭执行的操作
	private fun MainTabTabClose(ALittle.DisplayObject child)
	{
		this.CloseTab(child);
	}

	// 判断能否直接关闭
	private fun MainTabTabCloseYesOrNot(ALittle.DisplayObject child) : bool
	{
		var tab_child:DPLTabChild = child._user_data;
		if (tab_child.save)
        {
            if (this._main_tab.tab == child)
            	tab_child.OnHide();
            tab_child.OnClose();
            return true;
        }
	
		this.MainTabTabCloseImpl(tab_child, child);
		return false;
	}

	private async fun MainTabTabCloseImpl(DPLTabChild tab_child, ALittle.DisplayObject child)
	{
		var cancel_callback = bind(this.CloseTab, this, child);
		var result = g_AUITool.SaveNotice("提示", "是否保存?");
        if (result == AUIPlugin.AUIToolOption.CANCEL)
        	return;
		if (result == AUIPlugin.AUIToolOption.YES)
			tab_child.save = true;
		this.CloseTab(child);
    }

	// Tab右键事件
	private fun HandleMainTabRightClick(ALittle.UIRButtonDownEvent event)
	{
		var tab_child:DPLTabChild = event.target._user_data;

		var menu = new AUIPlugin.AUIRightMenu();
		menu.AddItem("保存", bind(tab_child.Save, tab_child));
		tab_child.OnTabRightMenu(menu);
		menu.AddItem("关闭自己", bind(this.CloseTabWithAsk, this, tab_child.tab_body));
		menu.AddItem("关闭左侧", bind(this.CloseLeftTab, this, tab_child.tab_body));
		menu.AddItem("关闭右侧", bind(this.CloseRightTab, this, tab_child.tab_body));
		menu.Show();
	}

	// Tab按键事件
	private async fun HandleMainTabKeyDown(ALittle.UIKeyDownEvent event)
	{
	}

	// Tab界面右上角菜单按钮
	private fun HandleTabRightExMenu(ALittle.UIEvent event)
	{
		//遍历
		var tab_childs = this._main_tab.childs;
		if (tab_childs[1] == null) return;

		var menu = new AUIPlugin.AUIRightMenu();
		for (var index, child in tab_childs)
		{
			var tab_child:DPLTabChild = child._user_data;
			menu.AddItem(tab_child.title, bind(this.SelectItemClick, this, child));
		}
		menu.Show();
	}

	private fun SelectItemClick(ALittle.DisplayObject child_to)
	{
		// 获取当前tab
		var child_from = this._main_tab.tab;
		// 设置索引
		this._main_tab.SetChildIndex(child_to, 1);
		this._main_tab.tab = child_to;
		// 切换
		this.ChangeTabEdit(child_from, child_to);
	}

	public async fun CloseTabWithAsk(ALittle.DisplayObject child)
	{
		var tab_child:DPLTabChild = child._user_data;
    
		if (tab_child.save)
		{
			this.CloseTab(child);
			return;
		}
		var result = g_AUITool.SaveNotice("提示", "是否保存当前标签页?");
        if (result == AUIPlugin.AUIToolOption.CANCEL)
            return;
		if (result == AUIPlugin.AUIToolOption.YES)
			tab_child.save = true;
		this.CloseTab(child);
    }

	public fun CloseLeftTab(ALittle.DisplayObject child)
	{
		var close_list = new List<ALittle.DisplayObject>();
		for (var index, child_v in this._main_tab.childs)
		{
			if (child_v == child) break;
			var tab_child:DPLTabChild = child_v._user_data;
			if (tab_child.save)
				ALittle.List_Push(close_list, child_v);
		}
		for (var index, child_v in close_list)
			this.CloseTab(child_v);
	}

	public fun CloseRightTab(ALittle.DisplayObject child)
	{
		var close_list = new List<ALittle.DisplayObject>();
		var child_list = this._main_tab.childs;
		var cur_index = this._main_tab.GetChildIndex(child);
		var child_count = this._main_tab.child_count;
		for (var index = cur_index + 1; index <= child_count; 1)
		{
			var child_v = child_list[index];
			var tab_child:DPLTabChild = child_v._user_data;
			if (tab_child.save)
				ALittle.List_Push(close_list, child_v);
		}
		for (var index, child_v in close_list)
			this.CloseTab(child_v);
    }
}