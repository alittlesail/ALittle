
register namespace lua;

public class __CPPAPIRenderSystem
{
    public fun CreateView(string title, int width, int height, int flag, double scale) : bool {}
    public fun SetViewSize(int width, int height) {}
    public fun ShowView() {}
    public fun HideView() {}
    public fun SetViewTitle(string title) : bool {}
    public fun SetViewIcon(string path) : bool {}
    public fun GetMaxTextureWidth() : int {}
    public fun GetMaxTextureHeight() : int {}
    public fun Render() {}
}

public var __CPPAPI_RenderSystem:__CPPAPIRenderSystem;

public class __CPPAPIDisplayObject : ALittle.IDisplayObject
{
    public fun SetX(double value) {}
    public fun SetY(double value) {}
    public fun SetScaleX(double value) {}
    public fun SetScaleY(double value) {}
    public fun SetCenterX(double value) {}
    public fun SetCenterY(double value) {}
    public fun SetAngle(double value) {}
    public fun SetRed(double value) {}
    public fun SetGreen(double value) {}
    public fun SetBlue(double value) {}
    public fun SetAlpha(double value) {}
    public fun SetClip(bool value) {}
    public fun SetWidth(double value) {}
    public fun SetHeight(double value) {}
    public fun SetVisible(bool value) {}
    public fun RemoveChild(ALittle.IDisplayObject value) {}
    public fun AddChild(ALittle.IDisplayObject value) {}
    public fun AddChildBefore(ALittle.IDisplayObject value1, ALittle.IDisplayObject value2) {}
    public fun RemoveAllChild() {}
    public fun SetFont(string path, int size) {}
    public fun ClearTexture() {}
    public fun SetTexture(ALittle.IRenderTexture texture) {}
    public fun SetTextureCoord(double t, double b, double l, double r) {}
    public fun SetFlip(int value) {}
    public fun SetRowColCount(int row_count, int col_count) {}
    public fun SetRowColIndex(int row, int col) {}
    public fun NeedDraw() {}
    public fun SetText(string value) {}
    public fun SetBold(bool value) {}
    public fun SetItalic(bool value) {}
    public fun SetUnderline(bool value) {}
    public fun SetDeleteline(bool value) {}
    public fun GetRealWidth() : int {}
    public fun GetRealHeight() : int {}
    public fun GetFontHeight() : int {}
    public fun SetHAlign(int value) {}
    public fun SetVAlign(int value) {}
    public fun SetCursorAlpha(double value) {}
    public fun GetLineWidth(int value) : int {}
    public fun GetLineCount() : int {}
    public fun GetScrollOffset() : int {}
    public fun IsDefaultText() : bool {}
    public fun SetDefaultText(bool default, string value) {}
    public fun SetDefaultTextAlpha(double value) {}
    public fun GetCursorX() : int {}
    public fun GetCursorY() : int {}
    public fun GetText() : string {}
    public fun SetCursorToEnd() {}
    public fun SetCursorToHome() {}
    public fun ShowCursor(bool value) {}
    public fun ClickCursor(double x, double y) {}
    public fun ClickWordCursor(double x, double y) : bool {}
    public fun SelectAll() {}
    public fun GetSelectText() : string {}
    public fun InsertText(string value) : bool {}
    public fun CursorOffsetLR(bool value) {}
    public fun SelectCursorOffsetLR(bool value) {}
    public fun CursorOffsetUD(bool value) {}
    public fun SelectCursorOffsetUD(bool value) {}
    public fun DeleteText(bool value) : bool {}
    public fun DeleteSelectText() : bool {}
    public fun DragCursorBegin() {}
    public fun DragCursor(double x, double y) {}
    public fun SetCursorRed(double value) {}
    public fun SetCursorGreen(double value) {}
    public fun SetCursorBlue(double value) {}
    public fun SetPasswordMode(bool value) {}
    public fun CursorOffset(bool value) {}
    public fun SelectCursorOffset(bool value) {}
    public fun SetTexUV(int index, double u, double v) {}
    public fun SetPosXY(int index, double x, double y) {}
    public fun SetLeftSize(double value) {}
    public fun SetRightSize(double value) {}
    public fun SetTopSize(double value) {}
    public fun SetBottomSize(double value) {}
    public fun CutTextByWidth(int remain_width, string text, int total_width) : int {}
    public fun ClearCutWidthCache() {}
    public fun GetCutWidthListCount() : int {}
    public fun GetCutWidthByIndex(int index) : int {}
    public fun CalcTextWidth(string value) : int {}
}

public class __CPPAPIDisplayObjects : __CPPAPIDisplayObject {}
public class __CPPAPIDisplayView : __CPPAPIDisplayObject {}
public class __CPPAPIImage : __CPPAPIDisplayObject {}
public class __CPPAPIQuad : __CPPAPIDisplayObject {}
public class __CPPAPISprite : __CPPAPIDisplayObject {}
public class __CPPAPIText : __CPPAPIDisplayObject {}
public class __CPPAPITextArea : __CPPAPIDisplayObject {}
public class __CPPAPITextEdit : __CPPAPIDisplayObject {}
public class __CPPAPITextInput : __CPPAPIDisplayObject {}
public class __CPPAPITriangle : __CPPAPIDisplayObject {}
public class __CPPAPIVertexImage : __CPPAPIDisplayObject {}
public class __CPPAPIGrid9Image : __CPPAPIDisplayObject {}

public class __CPPAPIDisplaySystem : ALittle.IDisplaySystem
{
    public fun AddSpecialChild(ALittle.IDisplayObject value) {}
    public fun AddChild(ALittle.IDisplayObject value) {}
    public fun AddChildBefore(ALittle.IDisplayObject value1, ALittle.IDisplayObject value2) {}
    public fun RemoveChild(ALittle.IDisplayObject value) {}
    public fun RemoveAllChild() {}
}

public var __CPPAPI_DisplaySystem:__CPPAPIDisplaySystem;

public class __CPPAPIRenderTexture : ALittle.IRenderTexture
{
    public fun Save(string file_path, ALittle.IDisplayObject show, int width, int height, double scale) : bool {}
    public fun Clear() {}
    public fun Draw(ALittle.IDisplayObject show, int width, int height, double scale) : bool {}
}

public class __CPPAPIDynamicTexture : ALittle.ITexture
{
    public fun GetSurface(bool need_draw) : carp.CarpSurface {}
    public fun Clear() {}
	// 0: nearest pixel sampling
	// 1: linear filtering
	// 2: anisotropic filtering
    public fun SetRenderMode(int mode) {}
    public fun SetSurfaceSize(int width, int height, int color) {}
}

public class __CPPAPITextureLoader : ALittle.ITextureLoader
{
    public fun SetPath(string big_path, string altas, int big_width, int big_height, bool crypt_mode) {}
    public fun Start() {}
    public fun GetID() : int {}
    public fun GetPath() : string {}
}

public class __CPPAPITextureCutLoader : ALittle.ITextureCutLoader
{
    public fun SetPath(string path, int max_width, int max_height) {}
    public fun Start() {}
    public fun GetID() : int {}
    public fun GetPath() : string {}
    public fun GetMaxWidth() : int {}
    public fun GetMaxHeight() : int {}
}

public class __CPPAPITextureWrap : ALittle.ITexture
{
    public fun SetTexture(ALittle.ITexture texture) {}
    public fun Clear() {}
    public fun GetTexture() : ALittle.ITexture {}
    public fun GetWidth() : int {}
    public fun GetHeight() : int {}
}
