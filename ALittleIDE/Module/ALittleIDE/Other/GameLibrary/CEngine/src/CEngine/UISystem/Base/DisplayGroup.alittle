
namespace ALittle;

private var __remove = List_Remove;
private var __insert = List_Insert;
private var __splice = List_Splice;
private var __cos = Math_Cos;
private var __sin = Math_Sin;

public class DisplayGroup : DisplayObject
{
    protected List<DisplayObject> _childs;    // 控件的子控件
    protected int _child_count;               // 子控件个数
    
    public ctor(ControlSystem ctrl_sys)
    {
        this._childs = new List<DisplayObject>();       // 控件的子控件
        this._child_count = 0;                           // 子控件个数
        [Language(Lua)]
        this._show = new lua.__CPPAPIDisplayObjects();           // 创建显示控件
        [Language(JavaScript)]
        this._show = new JavaScript.JDisplayObjects();
    
        this._pickup_rect = false;                       // 默认不判断拾取矩形
        this._pickup_child = true;                       // 默认拾取子控件
        this._pickup_this = false;                       // 是否拾取自己
    }
    
    // 获取子控件的索引
    public fun GetChildIndex(DisplayObject child):int
    {
        if (child == null)
            return 0;
        // 判定child的父控件是否是自己，如果不是则返回无效值0
        if (child._show_parent != this && child._logic_parent != this)
            return 0;
        // 遍历子控件列表，找到控件所对应的索引
        for (var index, value in this._childs)
        {
            if (value == child)
                return index;
        }
        // 没有找到直接返回无效值0
        return 0;
    }
    
    // 设置子控件的索引
    public fun SetChildIndex(DisplayObject child, int index) : bool
    {
        // 获取当前索引
        var cur_index = this.GetChildIndex(child);
        if (cur_index == 0)
            return false;
        if (cur_index == index)
            return true;
        if (index < 1)
            index = 1;
        if (index > this._child_count)
            index = this._child_count;
        // 先移出，再插入
        __remove(this._childs, cur_index);
        this._show.RemoveChild(child._show);
        var back_child = this._childs[index];
        if (back_child != null)
            this._show.AddChildBefore(back_child._show, child._show);
        else
            this._show.AddChild(child._show);
        __insert(this._childs, index, child);
        return true;
    }
    
    // 根据索引获取子控件
    public fun GetChildByIndex(int index) : DisplayObject
    {
        return this._childs[index];
    }
    
    // 获取所有子控件
    public get childs() : List<DisplayObject>
    {
        return this._childs;
    }
    
    // 获取子控件数量
    public get child_count() : int
    {
        return this._child_count;
    }
    
    // 添加子控件
    public fun AddChild(DisplayObject child, [Nullable] int index):bool
    {
        if (child == null || child == this)
            return false;
        
        // 判定child的父控件是否是自己，如果不是则返回false
        if (child._show_parent == this || child._logic_parent == this)
            return true;
        
        // 判定child是否有父控件，如果有则父控件移除child
        if (child._logic_parent != null)
            child._logic_parent.RemoveChild(child);
        elseif (child._show_parent != null)
            child._show_parent.RemoveChild(child);
        
        // 把child的父控件设置为自己
        child._show_parent = this;
        child._logic_parent = null;

        if (index == null || index > this._child_count || this._child_count < 1)
        {
            ++ this._child_count;
            // 把child插入到队尾
            this._childs[this._child_count] = child;
            // 把child的show添加到自己的show中
            this._show.AddChild(child._show);
        }
        else
        {
            if (index < 1) index = 1;
            // 获取对应插入的子控件
            var back_child = this._childs[index];
            // 把child的show添加到自己的show中
            this._show.AddChildBefore(back_child._show, child._show);
            // 把child插入到队首
            __insert(this._childs, index, child);

            ++ this._child_count;
        }
    
        // 刷新child的一些属性
        child.visible = child._visible;
        child.alpha = child._alpha;
        child.disabled = child._disabled;
        // 更新布局
        child.UpdateLayout();
        return true;
    }
    
    // 移除子控件
    public fun RemoveChild(DisplayObject child) : bool
    {
        if (child == null)
            return false;
        
        // 判定child的父控件是否是自己，如果不是则返回false
        if (child._show_parent != this && child._logic_parent != this)
            return false;
        
        for (var index, value in this._childs)
        {
            if (value == child)
            {
                __remove(this._childs, index);
                // 移除show
                this._show.RemoveChild(child._show);
                // child的父控件设置为空
                child._show_parent = null;
                child._logic_parent = null;
                // 从child队列中移除
                -- this._child_count;
                return true;
            }
        }
        return false;
    }

    public fun SpliceChild(int index, [Nullable] int count) : int
    {
        var remain_count = this._child_count - index + 1;
        if (count == null) count = remain_count;
        elseif (count > remain_count) count = remain_count;
        if (count <= 0) return 0;

        var old_count = this._child_count;

        var endv = index + count;
        for (var i = index; i < endv; 1)
        {
            var child = this._childs[i];
            if (child == null) break;

            // 移除show
            this._show.RemoveChild(child._show);
            // child的父控件设置为空
            child._show_parent = null;
            child._logic_parent = null;
            // 从child队列中移除
            -- this._child_count;
        }

        __splice(this._childs, index, count);

        return old_count - this._child_count;
    }
    
    // 检查是否存在某个子控件
    public fun HasChild(DisplayObject child) : bool
    {
        if (child == null)
            return false;
        return child._show_parent == this || child._logic_parent == this;
    }
    
    // 移除所有子控件
    public fun RemoveAllChild()
    {
        for (var index, value in this._childs)
        {
            // child的父控件设置为空
            value._show_parent = null;
            value._logic_parent = null;
        }
        // 移除show
        this._show.RemoveAllChild();
        this._childs = new List<DisplayObject>();
        this._child_count = 0;
    }
    //////////////////////////////////////////////////////////////////////////////////
    // 设置alpha值
    public set alpha(double value)
    {
        // 设置控件自身的alpha
        this._alpha = value;
        // 计算控件的绝对alpha
        if (this._show_parent != null)
            this._abs_alpha = this._show_parent._abs_alpha * value;
        else
            this._abs_alpha = value;
        
        // 刷新子控件的alpha
        for (var index, child in this._childs)
            child.alpha = child.alpha;
    }
    
    // 设置是否可见
    public set visible(bool value)
    {
        // 设置控件自身的visible
        this._visible = value;
        // 设置控件绝对的visible
        if (this._show_parent != null)
            this._abs_visible = this._show_parent._abs_visible && value;
        else
            this._abs_visible = value;
        
        // 设置控件组的visible
        this._show.SetVisible(this._abs_visible);
    
        // 刷新子控件的visible
        for (var index, child in this._childs)
            child.visible = child.visible;
    }
    
    // 设置是否禁用
    public set disabled(bool value)
    {
        // 设置控件自身的disabled
        this._disabled = value;
        // 设置控件绝对的disabled
        if (this._show_parent != null)
            this._abs_disabled = this._show_parent._abs_disabled || value;
        else
            this._abs_disabled = value;
            
        // 刷新子控件的disable
        for (var index, child in this._childs)
            child.disabled = child.disabled;
    }
    
    // 检查坐标(x, y)是否在控件范围内，返回被点中的控件
    public fun PickUp(double x, double y) : DisplayObject, double, double
    {
        // 检查是否被禁用，是否可见
        if (this._ignore || this._abs_disabled || this._abs_visible == false)
            return null, null, null;
    
        // 计算出相对于控件的点
        var xx = x - this._x;
        var yy = y - this._y;
    
        // 处理旋转
        if (this._angle != 0)
        {
            // 逆旋转
            var rad = 3.1415926 * -this._angle / 180.0;
            var cos = __cos(rad);
            var sin = __sin(rad);
            var xxx = xx * cos + yy * -sin;
            var yyy = xx * sin + yy * cos;

            xx = xxx;
            yy = yyy;
        }
    
        // 处理缩放
        if (this._scale_x > 0) xx /= this._scale_x;
        if (this._scale_y > 0) yy /= this._scale_y;
    
        // 移动到原来的位置
        var rel_x = xx + this._center_x;
        var rel_y = yy + this._center_y;
    
        if (this._scale_x <= 0 || this._scale_y <= 0)
        {
            if (this._modal)
                return this, rel_x, rel_y;
            return null, rel_x, rel_y;
        }
    
        // 检查是否在当前矩形范围
        if (this._pickup_rect && (rel_x < 0 || rel_y < 0 || rel_x >= this._width || rel_y >= this._height))
        {
            if (this._modal)
                return this, rel_x, rel_y;
            return null, rel_x, rel_y;
        }
    
        // 检查是否拾取子控件
        if (this._pickup_child)
        {
            // 开始检测子控件
            var childs = this._childs;
            // 计算点是否在子控件内部
            for (var index = this._child_count; index >= 1; -1)
            {
                // 获取滚动焦点和移动焦点
                var v_focus, v_x, v_y = childs[index].PickUp(rel_x, rel_y);
                // 如果有移动焦点，那个可以直接返回
                if (v_focus != null)
                    return v_focus, v_x, v_y;
            }
        }
        if (this._modal || (this._pickup_rect && this._pickup_child == false) || this._pickup_this)
            return this, rel_x, rel_y;

        return null, null, null;
    }
    
    public set width(double value)
    {
        this._show.SetWidth(value);
    }
    
    public set height(double value)
    {
        this._show.SetHeight(value);
    }

    // 获取控件的宽高
    public get width() : double
    {
        if (this._pickup_rect)
            return this._width;
        return this.bound_width;
    }
    
    // 获取控件的宽高
    public get height() : double
    {
        if (this._pickup_rect)
            return this._height;
        return this.bound_height;
    }
    
    public get bound_width() : double
    {
        // 初始化控件组范围
        var min_x:double = null;
        var max_x:double = null;
        // 遍历子控件计算实际宽高
        for (var index, value in this._childs)
        {
            // 取min_x, min_y最小
            if (min_x == null || min_x > value._x)
                min_x = value._x;
            // 取max_x, max_y最大
            var width = value.width;
            var right = width + value._x;
            if (max_x == null || max_x < right)
                max_x = right;
        }
        if (max_x == null)
            max_x = 0;
        if (min_x == null)
            min_x = 0;
        // 计算实际的宽高
        var real_width = max_x - min_x;
        if (real_width < 0) real_width = 0;
        // 返回结果
        return real_width;
    }
    
    public get bound_height() : double
    {
        // 初始化控件组范围
        var min_y:double = null;
        var max_y:double = null;
        // 遍历子控件计算实际宽高
        for (var index, value in this._childs)
        {
            // 取min_x, min_y最小
            if (min_y == null || min_y > value._y)
                min_y = value._y;
            // 取max_x, max_y最大
            var height = value.height;
            var bottom = height + value._y;
            if (max_y == null || max_y < bottom)
                max_y = bottom;
        }
        if (max_y == null)
            max_y = 0;
        if (min_y == null)
            min_y = 0;
        // 计算实际的宽高
        var real_height = max_y - min_y;
        if (real_height < 0) real_height = 0;
        // 返回结果
        return real_height;
    }
    
    public get max_right() : double
    {
        var max_x:double = null;
        // 遍历子控件计算实际宽高
        for (var index, value in this._childs)
        {
            // 取max_x, max_y最大
            var width = value.width;
            var right = width + value.x;
            if (max_x == null || max_x < right)
                max_x = right;
        }
        if (max_x == null)
            max_x = 0;
        // 返回结果
        return max_x;
    }
    
    public get max_bottom() : double
    {
        var max_y:double = null;
        // 遍历子控件计算实际宽高
        for (var index, value in this._childs)
        {
            // 取max_x, max_y最大
            var height = value.height;
            var bottom = height + value.y;
            if (max_y == null || max_y < bottom)
                max_y = bottom;
        }
        if (max_y == null) max_y = 0;
        // 返回结果
        return max_y;
    }
    
    public fun UpdateXLayout(DisplayObject child)
    {
    }
    public fun UpdateYLayout(DisplayObject child)
    {
    }
    public fun UpdateWidthLayout(DisplayObject child)
    {
    }
    public fun UpdateHeightLayout(DisplayObject child)
    {
    }
}