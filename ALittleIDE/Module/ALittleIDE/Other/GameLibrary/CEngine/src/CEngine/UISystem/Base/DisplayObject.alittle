
namespace ALittle;

private var __cos = Math_Cos;
private var __sin = Math_Sin;
private var __byte = String_Byte;
private var __type = String_Type;

public struct EventInfo
{
    string type;
    string func;
}

public struct DisplayInfo
{
    List<string> __target_class;
    any __class_func;               // 缓存target_class的缓存
    
    Map<string, any> __base_attr;   // 缓存基本属性
    Map<string, DisplayInfo> __show_attr;   // 缓存show属性
    
    Map<string, LoopGroupInfo> loop_map; // 动画信息
    
    string __module;	// 如果为null，那么就表示当前模块。否则指定某个模块
    string __class;
    string __include;
    string __extends;
    
    List<DisplayInfo> __childs;
    List<EventInfo> __event;
    string __link;
    
    bool __shows_included;
    bool __childs_included;
    bool __extends_included;

    string description;
    string text;
    string font_path;
    int font_size;
    double red;
    double green;
    double blue;
    double alpha;
    bool bold;
    bool italic;
    bool underline;
    bool deleteline;
    
    double x;
    double y;
    int x_type;
    double x_value;
    int y_type;
    double y_value;

    double width;
    double height;
    int width_type;
    double width_value;
    int height_type;
    double height_value;

    double scale_x;
    double scale_y;
    double center_x;
    double center_y;
    double angle;
    int flip;
    
    bool hand_cursor;
    bool visible;
    bool disabled;

    double left_size;
    double right_size;
    double top_size;
    double bottom_size;

    string texture_name;
    
    int interval;
    int play_loop_count;
    bool var_play;
    double base_y;
    
    double head_size;

    double gap;
    double up_size;
    double down_size;

    double cursor_red;
    double cursor_green;
    double cursor_blue;
    double default_text_alpha;
    double ims_padding;
    
    double margin_left;
    double margin_right;
    double margin_top;
    double margin_bottom;

    int show_count;
    double body_margin;
    double screen_margin_left;
    double screen_margin_right;
    double screen_margin_top;
    double screen_margin_bottom;
    
    double start_degree;
    double end_degree;
    
    double line_spacing;
    int max_line_count;

    double font_red;
    double font_green;
    double font_blue;

    double margin_halign;
    double margin_valign;
    double cursor_margin_up;
    double cursor_margin_down;

    double total_size;
    double show_size;
    double offset_rate;
    double offset_step;
    
    int grade;

    int row_count;
    int col_count;
    int row_index;
    int col_index;
    
    double u1;
    double v1;
    double u2;
    double v2;
    double u3;
    double v3;
    
    double x1;
    double y1;
    double x2;
    double y2;
    double x3;
    double y3;
    
    double x_gap;
    double y_gap;
    double x_start_gap;
    double y_start_gap;
    
    double button_gap;
    double button_start;
    double button_margin;
    double tab_index;
    double view_margin;
    double child_width_margin;
}

public class DisplayObject : UIEventDispatcher
{
    protected ControlSystem _ctrl_sys;      // 控件所归属的ControlSystem
    protected bool _clip;                   // 是否被裁减	如果为true，不管怎么样都看不到
    protected bool _ignore;                 // 是否忽略		如果为true，不管怎么样都操作不到
    protected IDisplayObject _show;// 显示控件
    
    protected DisplayGroup _show_parent;    // 显示级父控件，最直接的父控件
    protected DisplayGroup _logic_parent;   // 逻辑级父控件，用于跳级管理

    protected string _description;          // 描述
    protected Map<string, LoopGroupInfo> _loop_map;  // 动画集合

    protected double _x;                    // 控件的x坐标
    protected double _y;                    // 控件的y坐标
    protected int _x_type;                  // x坐标类型
    protected double _x_value;              // x坐标类型值
    protected int _y_type;                  // y坐标类型
    protected double _y_value;              // y坐标类型值

    protected double _width;                // 控件的宽度
    protected double _height;               // 控件的高度
    protected int _width_type;              // 宽度类型
    protected double _width_value;          // 宽度类型值
    protected int _height_type;             // 高度类型
    protected double _height_value;         // 高度类型值

    protected double _scale_x;              // 宽度缩放
    protected double _scale_y;              // 高度缩放
    protected double _angle;                // 旋转角度
    protected double _center_x;             // 旋转中心
    protected double _center_y;             // 旋转中心

    protected double _red;                  // 控件的红色分量
    protected double _green;                // 控件的绿色分量
    protected double _blue;                 // 控件的蓝色分量

    protected double _alpha;                // 控件的alpha
    protected double _abs_alpha;            // 控件的绝对alpha

    protected bool _visible;        // 控件相对是否可见
    protected bool _abs_visible;    // 控件绝对是否可见

    protected bool _hand_cursor;    // 鼠标移入时，是否变成手势光标

    protected bool _disabled;       // 控件是否禁用
    protected bool _modal;          // 是否是模态控件
    protected bool _pickup_rect;    // 拾取的时候是否判断矩形区域
    protected bool _pickup_child;   // 是否拾取子控件
    protected bool _pickup_this;    // 是否拾取自己
    protected bool _can_scroll;     // 是否是滚动控件

    // 数据携带变量，不要使用以下变量名作为成员变量
    public any _user_data;		// 专门给逻辑使用
    public any __right_data;    // 右键菜单使用
    
    public ctor(ControlSystem ctrl_sys)
    {
        this._ctrl_sys = ctrl_sys;    // 控件所归属的ControlSystem
        this._clip = false;            // 是否被裁减	如果为true，不管怎么样都看不到
        this._ignore = false;        // 是否忽略		如果为true，不管怎么样都操作不到
        // this._show = null;            // 显示控件
    
        // this._show_parent = null;        // 显示级父控件，最直接的父控件
        // this._logic_parent = null;    // 逻辑级父控件，用于跳级管理
    
        // this._description = null;        // 描述
    
        this._x = 0;                    // 控件的x坐标
        this._y = 0;                   // 控件的y坐标
        this._x_type = UIEnumTypes.POS_ABS;    // x坐标类型
        this._x_value = 0;                    // x坐标类型值
        this._y_type = UIEnumTypes.POS_ABS;    // y坐标类型
        this._y_value = 0;                    // y坐标类型值
    
        this._width = 0;                // 控件的宽度
        this._height = 0;            // 控件的高度
        this._width_type = UIEnumTypes.SIZE_ABS;    // 宽度类型
        this._width_value = 0;                    // 宽度类型值
        this._height_type = UIEnumTypes.SIZE_ABS;    // 高度类型
        this._height_value = 0;                    // 高度类型值
    
        this._scale_x = 1;            // 宽度缩放
        this._scale_y = 1;            // 高度缩放
        this._angle = 0;                // 旋转角度
        this._center_x = 0;            // 旋转中心
        this._center_y = 0;            // 旋转中心
    
        this._red = 1;                // 控件的红色分量
        this._green = 1;                // 控件的绿色分量
        this._blue = 1;                // 控件的蓝色分量
    
        this._alpha = 1;                // 控件的alpha
        this._abs_alpha = 1;            // 控件的绝对alpha
    
        this._visible = true;        // 控件相对是否可见
        this._abs_visible = true;    // 控件绝对是否可见

        this._hand_cursor = false;    // 鼠标移入时，是否变成手势光标
    
        this._disabled = false;        // 控件是否禁用
        this._modal = false;            // 是否是模态控件
        this._pickup_rect = true;    // 拾取的时候是否判断矩形区域
        this._pickup_child = false;    // 是否拾取子控件
        this._pickup_this = false;    // 是否拾取自己
        this._can_scroll = false;    // 是否是滚动控件

        // this._user_data = null;
    }

    //////////////////////////////////////////////////////////////////////

    // 设置手势光标
    public set hand_cursor(bool value)
    {
        if (this._hand_cursor == value) return;
        this._hand_cursor = value;
        if (value)
        {
            this.AddEventListener(this, this.HandleMoveInForCursor);
            this.AddEventListener(this, this.HandleMoveOutForCursor);
        }
        else
        {
            this.RemoveEventListener(this, this.HandleMoveInForCursor);
            this.RemoveEventListener(this, this.HandleMoveOutForCursor);
        }
    }

    public get hand_cursor() : bool
    {
        return this._hand_cursor;
    }

    protected fun HandleMoveInForCursor(UIMoveInEvent event)
    {
        if (this._hand_cursor == false) return;
        System_SetHandCursor();
    }

    protected fun HandleMoveOutForCursor(UIMoveOutEvent event)
    {
        if (this._hand_cursor == false) return;
        System_SetNormalCursor();
    }

    //////////////////////////////////////////////////////////////////////

    public get native_show() : IDisplayObject { return this._show; }
    public get text() : string { return null; }
    public set text(any value) {}
    public get group() : Map<any, bool> { return null; }
    public set group(Map<any, bool> group) { }
    public get selected() : bool { return null; }
    public set selected(bool value) {}
    public get font_height() : int { return null; }
    
    public fun SetTextureCoord(double t, double b, double l, double r) {}
    public get texture() : ITexture { return null; }
    public set texture(ITexture value) {}
    public get texture_name() : string { return null; }
    public set texture_name(string value) {}
    public fun Redraw() {}

    public get childs() : List<DisplayObject> { return null; }
    public get child_count() : int { return null; }
    public fun SetChildIndex(DisplayObject child, int index) : bool { return false; }
    public fun AddChild(DisplayObject child, [Nullable] int index) : bool { return false; }
    public fun RemoveChild(DisplayObject child) : bool { return false; }
    public fun SpliceChild(int index, [Nullable] int count) : int { return 0; }
    public fun RemoveAllChild() {}
    public fun GetChildOffset() : double, double { return 0, 0; }

    // 是否可编辑
    public get editable() : bool { return false; }
    public get font_size() :int { return null; }
    public get cursor_x() : double { return null; }
    public get cursor_y() : double { return null; }
    // 光标底部
    public get cursor_b() : double { return null; }

    // 控件焦点
    public get is_focus() : bool
    {
        return A_UISystem.focus == this;
    }

    // 下一帧获取焦点
    public fun DelayFocus()
    {
        var loop = new LoopTimer(bind(this.HandleDelayFocus, this), 1);
        loop.Start();
    }

    private fun HandleDelayFocus() { this.focus = true; }

    // 下一帧获取禁用
    public fun DelayDisable()
    {
        var loop = new LoopTimer(bind(this.HandleDelayDisable, this), 1);
        loop.Start();
    }

    private fun HandleDelayDisable() { this.disabled = true; }

    // 控件焦点
    public set focus(bool value)
    {
        if (value)
            A_UISystem.focus = this;
        else
        {
            if (A_UISystem.focus == this)
                A_UISystem.focus = null;
        }
    }

    // 是否是输入控件
    public get is_input() : bool
    {
        return false;
    }
    
    // 设置滚动
    public set can_scroll(bool value)
    {
        this._can_scroll = value;
    }

    // 获取是否可滚动
    public get can_scroll() : bool
    {
        return this._can_scroll;
    }

    public set description(string value)
    {
        this._description = value;
    }
    public get description() :string
    {
        return this._description;
    }

    public set loop_map(Map<string, LoopGroupInfo> value)
    {
        this._loop_map = value;
    }
    public get loop_map() : Map<string, LoopGroupInfo>
    {
        return this._loop_map;
    }
    public fun CreateLoopAnimation(string name) : LoopAnimation
    {
        if (this._loop_map == null) return null;
        var info = this._loop_map[name];
        if (info == null) return null;
        return new LoopAnimation(this, info);
    }

    // 设置模态
    public set modal(bool value)
    {
        this._modal = value;
    }
    // 获取ID
    public get modal() : bool
    {
        return this._modal;
    }

    // 设置是否裁减
    public set clip(bool value)
    {
        this._clip = value;
        this._show.SetClip(value);
    }
    // 获取是否裁减
    public get clip() : bool
    {
        return this._clip;
    }

    // 设置是否忽略
    public set ignore(bool value)
    {
        this._ignore = value;
    }

    // 获取是否忽略
    public get ignore() : bool
    {
        return this._ignore;
    }

    // 检查鼠标是否在当前控件范围之内
    public fun IsMouseIn() : bool
    {
        var abs_x, abs_y = this.LocalToGlobal();
        var mouse_x = A_UISystem.mouse_x;
        var mouse_y = A_UISystem.mouse_y;
        if (mouse_x < abs_x) return false;
        if (mouse_y < abs_y) return false;
        if (mouse_x > abs_x + this.width * this.scale_x) return false;
        if (mouse_y > abs_y + this.height * this.scale_y) return false;
        return true;
    }

    // 当前控件，相对于窗口的坐标，不考虑旋转
    public fun LocalToGlobal([Nullable] DisplayObject target) : double, double
    {
        var x = 0.0;
        var y = 0.0;
        var parent = this;
        while (parent != null)
        {
            var scale_x = 1.0;
            var scale_y = 1.0;
            var show_parent = parent._show_parent;
            if (show_parent != null)
            {
                scale_x = show_parent.scale_x;
                scale_y = show_parent.scale_y;
            }
            x += scale_x * parent.x;
            y += scale_y * parent.y;
            if (target == show_parent)
                break;
            parent = show_parent;
        }

        return x, y;
    }

    // 当前控件，相对于窗口的坐标
    public fun LocalToGlobalMatrix2D(DisplayObject target) : Matrix2D
    {
        var result = new Matrix2D();

        var list = new List<DisplayObject>();
        var count = 0;

        var parent = this;
        while (parent != null)
        {
            if (target == parent) break;
            ++ count;
            list[count] = parent;
            parent = parent._show_parent;
        }

        for (var index = count; index >= 1; -1)
        {
            var object = list[index];
            var m = new Matrix2D();
            if (index == 1)
                m.Scale(object.width, object.height);

            m.Translation(-object.center_x, -object.center_y);
            m.Rotate(3.1415926 * object.angle / 180);
            m.Translation(object.center_x, object.center_y);
            m.Scale(object.scale_x, object.scale_y);
            m.Translation(object.x, object.y);

            m.Multiply(result);
            result = m;
        }

        return result;
    }

    // 窗口的坐标，相对于当前控件的坐标
    public fun GlobalToLocalMatrix2D(double x, double y, [Nullable] DisplayObject target) : double, double
    {
        var list = new List<DisplayObject>();
        var count = 0;

        var parent = this;
        while (parent != null)
        {
            if (target == parent) break;
            ++ count;
            list[count] = parent;
            parent = parent._show_parent;
        }

        var pick:DisplayObject;
        for (var index = count; index >= 1; -1)
        {
            pick, x, y = list[index].PickUpSelf(x, y);
        }

        return x, y;
    }

    // 从父控件移除
    public fun RemoveFromParent()
    {
        var parent = this._show_parent;
        if (parent == null) parent = this._logic_parent;
        if (parent == null) return;
        parent.RemoveChild(this);
    }

    // 当前控件，相对于窗口的坐标
    public fun IsGrandParent(DisplayObject target) : bool
    {
        var parent = this;
        while (parent != null)
        {
            parent = parent._show_parent;
            if (target == parent)
                return true;
        }
        return false;
    }
    // 获取父节点
    public get parent() : DisplayGroup
    {
        if (this._logic_parent != null)
            return this._logic_parent;
        return this._show_parent;
    }
    // 获取显示父节点
    public get show_parent() : DisplayGroup
    {
        return this._show_parent;
    }
    // 获取逻辑父节点
    public get logic_parent() : DisplayGroup
    {
        return this._logic_parent;
    }

    // 移动到父控件的顶层
    public fun MoveToTop()
    {
        if (this._show_parent != null)
            this._show_parent.SetChildIndex(this, this._show_parent.child_count);
    }

    // 设置控件的x坐标
    public set x(double value)
    {
        if (this._x == value) return;
        // 设置x坐标
        this._x = value;
        if (this._x_type == UIEnumTypes.POS_ABS)
            this._x_value = value;
        // 设置到show中
        this._show.SetX(value);
    }
    public get x() : double
    {
        return this._x;
    }

    public set x_type(int value)
    {
        if (this._x_type == value) return;

        this._x_type = value;
        if (this._show_parent != null)
            this._show_parent.UpdateXLayout(this);
    }
    public set x_value(double value)
    {
        if (this._x_value == value) return;

        this._x_value = value;
        if (this._show_parent != null)
            this._show_parent.UpdateXLayout(this);
    }
    public get x_type() : int
    {
        return this._x_type;
    }
    public get x_value() : double
    {
        return this._x_value;
    }

    // 设置控件的y坐标
    public set y(double value)
    {
        if (this._y == value) return;

        // 设置y坐标
        this._y = value;
        if (this._y_type == UIEnumTypes.POS_ABS)
            this._y_value = value;

        // 设置到show中
        this._show.SetY(value);
    }
    public get y() : double
    {
        return this._y;
    }
    public set y_type(int value)
    {
        if (this._y_type == value) return;

        this._y_type = value;
        if (this._show_parent != null)
            this._show_parent.UpdateYLayout(this);
    }
    public set y_value(double value)
    {
        if (this._y_value == value) return;

        this._y_value = value;
        if (this._show_parent != null)
            this._show_parent.UpdateYLayout(this);
    }
    public get y_type() : int
    {
        return this._y_type;
    }
    public get y_value() : double
    {
        return this._y_value;
    }

    // 设置控件的宽
    public set width(double value)
    {
        if (this._width == value) return;

        // 设置宽
        this._width = value;
        if (this._width_type == UIEnumTypes.SIZE_ABS)
            this._width_value = value;
        // 设置到show中
        this._show.SetWidth(value);
    }
    public get width() : double
    {
        return this._width;
    }
    public set width_type(int value)
    {
        if (this._width_type == value) return;
        this._width_type = value;

        if (this._show_parent != null)
        {
            this._show_parent.UpdateWidthLayout(this);
            if (this._x_type != UIEnumTypes.POS_ABS && this._x_type != UIEnumTypes.POS_ALIGN_STARTING &&
                    this._x_type != UIEnumTypes.POS_PERCENT_STARTING)
                this._show_parent.UpdateXLayout(this);
        }
        elseif (this._width_type == UIEnumTypes.SIZE_ABS)
        {
            this.width = this._width_value;
        }
    }

    public set width_value(double value)
    {
        if (this._width_value == value) return;
        this._width_value = value;
        if (this._show_parent != null)
        {
            this._show_parent.UpdateWidthLayout(this);
            if (this._x_type != UIEnumTypes.POS_ABS && this._x_type != UIEnumTypes.POS_ALIGN_STARTING &&
                    this._x_type != UIEnumTypes.POS_PERCENT_STARTING)
                this._show_parent.UpdateXLayout(this);
        }
        elseif (this._width_type == UIEnumTypes.SIZE_ABS)
            this.width = this._width_value;
    }
    public get width_type() : int
    {
        return this._width_type;
    }
    public get width_value() : double
    {
        return this._width_value;
    }

    // 设置控件的高
    public set height(double value)
    {
        if (this._height == value) return;

        // 设置高
        this._height = value;
        if (this._height_type == UIEnumTypes.SIZE_ABS)
            this._height_value = value;
        // 设置到show中
        this._show.SetHeight(value);
    }
    public get height() : double
    {
        return this._height;
    }
    public set height_type(int value)
    {
        if (this._height_type == value) return;
        this._height_type = value;

        if (this._show_parent != null)
        {
            this._show_parent.UpdateHeightLayout(this);
            if (this._y_type != UIEnumTypes.POS_ABS && this._y_type != UIEnumTypes.POS_ALIGN_STARTING &&
                    this._y_type != UIEnumTypes.POS_PERCENT_STARTING)
                this._show_parent.UpdateYLayout(this);
        }
        elseif (this._height_type == UIEnumTypes.SIZE_ABS)
            this.height = this._height_value;
    }
    public set height_value(double value)
    {
        if (this._height_value == value) return;
        this._height_value = value;

        if (this._show_parent != null)
        {
            this._show_parent.UpdateHeightLayout(this);
            if (this._y_type != UIEnumTypes.POS_ABS && this._y_type != UIEnumTypes.POS_ALIGN_STARTING &&
                    this._y_type != UIEnumTypes.POS_PERCENT_STARTING)
                this._show_parent.UpdateYLayout(this);
        }
        elseif (this._height_type == UIEnumTypes.SIZE_ABS)
            this.height = this._height_value;
    }
    public get height_type() : int
    {
        return this._height_type;
    }
    public get height_value() : double
    {
        return this._height_value;
    }
    public set scale_x(double value)
    {
        this._scale_x = value;
        this._show.SetScaleX(value);
    }
    public get scale_x() : double
    {
        return this._scale_x;
    }
    public set scale_y(double value)
    {
        this._scale_y = value;
        this._show.SetScaleY(value);
    }
    public get scale_y() : double
    {
        return this._scale_y;
    }
    public set center_x(double value)
    {
        this._center_x = value;
        this._show.SetCenterX(value);
    }
    public get center_x() : double
    {
        return this._center_x;
    }
    public set center_y(double value)
    {
        this._center_y = value;
        this._show.SetCenterY(value);
    }
    public get center_y() : double
    {
        return this._center_y;
    }
    public set angle(double value)
    {
        this._angle = value;
        this._show.SetAngle(value);
    }
    public get angle() : double
    {
        return this._angle;
    }

    // 设置控件的Red颜色
    public set red(double value)
    {
        // 设置颜色
        this._red = value;
        // 设置到show中
        this._show.SetRed(value);
    }
    public get red() : double
    {
        return this._red;
    }
    // 设置控件的Green颜色
    public set green(double value)
    {
        // 设置颜色
        this._green = value;
        // 设置到show中
        this._show.SetGreen(value);
    }
    public get green() : double
    {
        return this._green;
    }
    // 设置控件的RGB颜色
    public set blue(double value)
    {
        // 设置颜色
        this._blue = value;
        // 设置到show中
        this._show.SetBlue(value);
    }
    public get blue() : double
    {
        return this._blue;
    }

    // 设置控件的alpha
    public set alpha(double value)
    {
        this._alpha = value;
        this._abs_alpha = 1;
        // 如果有父控件，那么绝对alpha=父控件的绝对alpha*相对alpha
        if (this._show_parent != null)
            this._abs_alpha = this._show_parent.abs_alpha * value;
        else
            this._abs_alpha = value;

        // 设置到show中
        this._show.SetAlpha(this._abs_alpha);
    }
    public get alpha() : double
    {
        return this._alpha;
    }
    public get abs_alpha() : double { return this._abs_alpha; }

    // 设置控件是否可见
    public set visible(bool value)
    {
        // 如果是隐藏起来，则不会是焦点
        if (value == false && this == A_UISystem.focus)
            A_UISystem.focus = null;
        
        this._visible = value;
        // 如果有父控件，那么绝对visible=父控件的绝对visible && 相对visible
        if (this._show_parent != null)
            this._abs_visible = this._show_parent.abs_visible && value;
        else
            this._abs_visible = value;
        // 设置到show中
        this._show.SetVisible(this._abs_visible);
    }

    // 获取是否显示
    public get visible() : bool
    {
        return this._visible;
    }
    public get abs_visible() : bool { return this._abs_visible; }

    // 设置控件是否禁用
    public set disabled(bool value)
    {
        if (value == true && this == A_UISystem.focus)
            A_UISystem.focus = null;
        this._disabled = value;
        // 如果有父控件，那么绝对disabled = 父控件的绝对disabled || 相对disabled
        // 意思就是说，如果父控件是禁用，那么不管子控件怎么样都是禁用的
        if (this._show_parent != null)
            this._abs_disabled = this._show_parent.abs_disabled || value;
        else
            this._abs_disabled = value;   
    }

    // 获取是否禁用
    public get disabled() : bool
    {
        return this._disabled;
    }
    public get abs_disabled() : bool { return this._abs_disabled; }

    // 更新布局
    public fun UpdateLayout()
    {
        if (this._show_parent == null) return;
        this._show_parent.UpdateWidthLayout(this);
        this._show_parent.UpdateHeightLayout(this);
        this._show_parent.UpdateXLayout(this);
        this._show_parent.UpdateYLayout(this);
    }

    // 检测(x, y)点是否在控件内部，并获取滚动控件和移动焦点控件
    public fun PickUp(double x, double y) : DisplayObject, double, double
    {
        // 检查是否被禁用，是否可见
        if (this._ignore || this._abs_disabled || this._abs_visible == false)
            return null, null, null;

        // 计算出相对于控件的点
        var xx = x - this._x;
        var yy = y - this._y;

        // 处理旋转
        if (this._angle != 0)
        {
            // 逆旋转
            var rad = 3.1415926 * -this._angle / 180.0;
            var cos = __cos(rad);
            var sin = __sin(rad);
            var xxx = xx * cos + yy * -sin;
            var yyy = xx * sin + yy * cos;

            xx = xxx;
            yy = yyy;
        }

        // 处理缩放
        if (this._scale_x > 0) xx /= this._scale_x;
        if (this._scale_y > 0) yy /= this._scale_y;

        // 移动到原来的位置
        var rel_x = xx + this._center_x;
        var rel_y = yy + this._center_y;

        if (this._scale_x <= 0 || this._scale_y <= 0)
        {
            if (this._modal)
                return this, rel_x, rel_y;

            return null, rel_x, rel_y;
        }

        // 如果是模态则直接返回自己
        if (this._modal)
            return this, rel_x, rel_y;
        // 检查位置是否在控件范围内
        if (this._pickup_rect && rel_x >= 0 && rel_y >= 0 && rel_x < this._width && rel_y < this._height)
            return this, rel_x, rel_y;
        else
            return null, rel_x, rel_y;
    }

    // 检测是否可以拾取到自己，用于编辑器
    public fun PickUpSelf(double x, double y) : DisplayObject, double, double
    {
        // 计算出相对于控件的点
        var xx = x - this._x;
        var yy = y - this._y;

        // 处理旋转
        if (this._angle != 0)
        {
            // 逆旋转
            var rad = 3.1415926 * -this._angle / 180.0;
            var cos = __cos(rad);
            var sin = __sin(rad);
            var xxx = xx * cos + yy * -sin;
            var yyy = xx * sin + yy * cos;

            xx = xxx;
            yy = yyy;
        }

        // 处理缩放
        if (this._scale_x > 0) xx /= this._scale_x;
        if (this._scale_y > 0) yy /= this._scale_y;

        // 移动到原来的位置
		var rel_x = xx + this._center_x;
        var rel_y = yy + this._center_y;

        if (this._scale_x <= 0 || this._scale_y <= 0)
            return null, rel_x, rel_y;

        // 检查位置是否在控件范围内
        if (this._abs_visible
                && rel_x >= 0 && rel_y >= 0
                && rel_x < this.width && rel_y < this.height)
            return this, rel_x, rel_y;

        return null, rel_x, rel_y;
    }

    // 裁剪，优化渲染速度
    public fun ClipRect(double x, double y, double width, double height, double h_move, double v_move)
    {
    }

    public fun DeepLayout()
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////-

    // 设置普通属性
    protected fun DeserializeSetter(DisplayInfo info)
    {
        // 缓存基本属性
        var base_attr = info.__base_attr;
        if (base_attr == null)
        {
            base_attr = new Map<string, any>();
            for (var key, value in cast<Map<string, any>>(info))
            {
                if (__byte(key, 1) != 95 && (__type(value) != "table" || cast<DisplayInfo>(value).__class == null))
                    base_attr[key] = value;
            }
            info.__base_attr = base_attr;
        }

        // 设置基本属性
        for (var key, value in base_attr)
             cast<Map<string,any>>(this)[key] = value;
    }

    // 设置show属性
    protected fun DeserializeShowChild(DisplayInfo info, any target_logic)
    {
        // 如果有目标类，就把逻辑对象指向自己
        if (info.__target_class != null && this._ctrl_sys._use_plugin_class)
            target_logic = this;

        // 缓存show属性
        var show_attr = info.__show_attr;
        if (show_attr == null)
        {
            show_attr = new Map<string, any>();
            for (var key, value in cast<Map<string, any>>(info))
            {
                if (__byte(key, 1) != 95 && __type(value) == "table" && cast<DisplayInfo>(value).__class != null)
                    show_attr[key] = value;
            }
            info.__show_attr = show_attr;
        }

        // 反序列化show属性
        for (var key, value in show_attr)
        {
            var object = this._ctrl_sys.CreateControlObject(value);
            if (object != null)
            {
                object.DeserializeSetter(value);
                cast<Map<string, DisplayObject>>(this)[key] = object;
                object.DeserializeShowChild(value, target_logic);
                if (target_logic != null)
                    object.DeserializeLinkEvent(value, target_logic);

                // 如果当前是插件，那么就调用一下初始化函数
                if (value.__target_class != null && this._ctrl_sys._use_plugin_class)
                {
                    var tctor:Functor<(DisplayObject)> = cast<Map<string, Functor<(DisplayObject)>>>(object)["TCtor"]; 
                    if (tctor != null)
                    {
                        [Language(Lua)]
                        tctor(object);
                        [Language(JavaScript)]
                        cast<javascript.Function>(tctor).call(object);
                    }   
                }
            }
        }
        // 反序列化子控件
        var childs = info.__childs;
        if (childs != null)
        {
            for (var index, value in childs)
            {
                var object = this._ctrl_sys.CreateControlObject(value);
                if (object != null) object.Deserialize(value, target_logic, cast<DisplayGroup>(this));
            }
        }
    }

    // 反序列化link和event
    protected fun DeserializeLinkEvent(DisplayInfo info, DisplayObject target_logic)
    {
        // 反序列化事件
        var event_list = info.__event;
        if (event_list != null)
        {
            for (var index, einfo in event_list)
            {   
                // 从logic里取出对应的函数对象
                var func:Functor<(any, UIEvent)> = null;
                if (einfo.func != null)
                {
                    func = cast<Map<string, Functor<(any, UIEvent)>>>(target_logic)[einfo.func];
                    if (func == null && this._ctrl_sys.log_error)
                        Log("can't find event func:\"" .. einfo.func .. "\" in "..String_ToString(target_logic));
                }
                // 把这三个串起来
                if (einfo.type != null && func != null)
                    this.AddEventListenerImpl(einfo.type, target_logic, func);
            }
        }
        
        // 处理映射关联
        if (info.__link != null)
            cast<Map<string, DisplayObject>>(target_logic)[info.__link] = this;
    }

    protected fun Deserialize(DisplayInfo info, any target_logic, DisplayGroup parent)
    {
        // 处理基本属性
        this.DeserializeSetter(info);

        if (this._pickup_rect)
        {
            // 添加到父控件
            if (parent != null) parent.AddChild(this);

            // 处理高级属性
            this.DeserializeShowChild(info, target_logic);
            // 处理Link,event
            if (target_logic != null)
                this.DeserializeLinkEvent(info, target_logic);
        }
        else
        {
            this.DeserializeShowChild(info, target_logic);
            // 处理Link,event
            if (target_logic != null)
                this.DeserializeLinkEvent(info, target_logic);

            // 添加到父控件
            if (parent != null) parent.AddChild(this);
        }
        
        // 如果当前是插件，那么就调用一下初始化函数
        if (info.__target_class != null && this._ctrl_sys._use_plugin_class)
        {
            var tctor:Functor<(DisplayObject)> = cast<Map<string, Functor<(DisplayObject)>>>(this)["TCtor"]; 
            if (tctor != null)
            {
                [Language(Lua)]
                tctor(this);
                [Language(JavaScript)]
                cast<javascript.Function>(tctor).call(this);
            }   
        }
    }
}