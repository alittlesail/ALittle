
namespace ALittle;

public class Image : DisplayObject
{
    private string _texture_name;
    private TextureCutInfo _texture_cut;
    private ITexture _texture;
    
    private int _texture_width;
    private int _texture_height;
    
    private double _tex_coord_t;
    private double _tex_coord_b;
    private double _tex_coord_l;
    private double _tex_coord_r;
    
    private int _flip;
    
    public ctor(ControlSystem ctrl_sys)
    {
        // 创建image显示对象
        [Language(Lua)]
        this._show = new lua.__CPPAPIImage();
        [Language(JavaScript)]
        this._show = new JavaScript.JImage();
    
        // 当前的纹理名称
        // this._texture_name = null;
        // this._texture_cut = null;
        // 当前纹理对象
        // this._texture = null;
        // 保存纹理的宽高
        this._texture_width = 0;
        this._texture_height = 0;
    
        this._tex_coord_t = 0;
        this._tex_coord_b = 1;
        this._tex_coord_l = 0;
        this._tex_coord_r = 1;
    
        this._flip = 0;
    
        [Language(Lua)]
        A_LoadTextureManager.RegisterRedrawControl(this);
    
        this.AddEventListener(this, this.HandleLButtonUp);
        this.AddEventListener(this, this.HandleMButtonUp);
        this.AddEventListener(this, this.HandleFLButtonUp);
    }
    
    protected fun HandleLButtonUp(UILButtonUpEvent event)
    {
        if (event.rel_x >= 0 && event.rel_y >= 0 && event.rel_x < event.target._width && event.rel_y < event.target._height)
        {
            var c_event = new UIClickEvent();
            c_event.is_drag = event.is_drag;
            c_event.count = event.count;
            this.DispatchEvent(c_event);
        }
    }
    
    protected fun HandleMButtonUp(UIMButtonUpEvent event)
    {
        if (event.rel_x >= 0 && event.rel_y >= 0 && event.rel_x < event.target._width && event.rel_y < event.target._height)
        {
            var c_event = new UIMClickEvent();
            c_event.is_drag = event.is_drag;
            this.DispatchEvent(c_event);
        }
    }
    
    protected fun HandleFLButtonUp(UIFingerUpEvent event)
    {
        if (event.rel_x >= 0 && event.rel_y >= 0 && event.rel_x < event.target._width && event.rel_y < event.target._height)
        {
            var c_event = new UIFClickEvent();
            c_event.is_drag = event.is_drag;
            this.DispatchEvent(c_event);
        }
    }
    
    // 重新绘制
    protected fun Redraw()
    {
        this._show.ClearTexture();
    
        if (this._texture != null)
        {
            this._texture.Clear();
            this._texture = null;
        }
    
        if (this._texture_name == null)
            return;
    
        if (this._texture_cut != null)
            A_LoadTextureManager.SetTextureCut(this, this._texture_name, this._texture_cut.max_width, this._texture_cut.max_height, this._texture_cut.cache);
        else
            this._ctrl_sys.SetTexture(this, this._texture_name);
    }
    
    // 从另一个Image中获取图片缓存
    public fun CopyTextureRef(Image image)
    {
        if (image == null || image._texture == null)
            return;
        // 当前的纹理名称
        this._texture_name = image._texture_name;
        this._texture_cut = null;
        if (image._texture_cut != null)
        {
            this._texture_cut = new TextureCutInfo();
            this._texture_cut.max_width = image._texture_cut.max_width;
            this._texture_cut.max_height = image._texture_cut.max_height;
            this._texture_cut.cache = image._texture_cut.cache;
        }
        // 当前纹理对象
        this._texture = image._texture;
        this._show.SetTexture(image._texture.GetTexture());
        this.SetTextureCoord(image._tex_coord_t, image._tex_coord_b, image._tex_coord_l, image._tex_coord_r);
        // 保存纹理的宽高
        this._texture_width = image._texture_width;
        this._texture_height = image._texture_height;
    }
    
    // 这个函数逻辑模块不能调用
    public set texture_name(string value)
    {
        if (this._texture_name == value)
            return;
            
        if (this._texture_name != null)
        {
            this._show.ClearTexture();
            this._texture = null;
        }
        this._texture_name = value;
        if (this._texture_name != null)
        {
            this._texture_cut = null;
            this._ctrl_sys.SetTexture(this, value);
        }
    }
    
    // 强制设置图片路径
    // texture_name 可以本地路径，也可以是网络图片支持HTTP协议
    // max_width 最大宽度，不限制可以填0
    // max_height 最大高度，不限制可以填0
    // cache 图片管理器是否缓存这个图片
    // callback 当前纹理设置完毕后，调用一下这个函数(函数格式 function callback(image, result) ... })
    public fun SetTextureCut(string texture_name, int max_width, int max_height, bool cache, [Nullable] Functor<(DisplayObject, bool)> callback)
    {
        if (this._texture_name != null)
        {
            this._show.ClearTexture();
            this._texture = null;
        }
        this._texture_name = texture_name;
        if (this._texture_name != null)
        {
            this._texture_cut = new TextureCutInfo();
            if (max_width == null) max_width = 0;
            this._texture_cut.max_width = max_width;
            if (max_height == null) max_height = 0;
            this._texture_cut.max_height = max_height;
            this._texture_cut.cache = cache;
            A_LoadTextureManager.SetTextureCut(this, texture_name, max_width, max_height, cache, callback);
        }
    }
    
    public set texture_cut(TextureCutInfo param)
    {
        this.SetTextureCut(param.texture_name, param.max_width, param.max_height, param.cache);
    }
    
    public get texture_cut() : TextureCutInfo
    {
        if (this._texture_cut == null)
            return null;

        var texture_cut = new TextureCutInfo();
        texture_cut.max_width = this._texture_cut.max_width;
        texture_cut.max_height = this._texture_cut.max_height;
        texture_cut.texture_name = this._texture_name;
        return texture_cut;
    }
    
    public get texture_name() : string
    {
        return this._texture_name;
    }
    
    public set texture(ITexture value)
    {
        this._show.SetTexture(value.GetTexture());
        this._texture_width = value.GetWidth();
        this._texture_height = value.GetHeight();
        this._texture = value;
    }
    public get texture() : ITexture
    {
        return this._texture;
    }
    
    public fun SetTextureCoord(double t, double b, double l, double r)
    {
        this._tex_coord_t = t;
        this._tex_coord_b = b;
        this._tex_coord_l = l;
        this._tex_coord_r = r;
        this._show.SetTextureCoord(t, b, l, r);
    }
    
    public get texture_width() : int
    {
        return this._texture_width;
    }
    
    public get texture_height() : int
    {
        return this._texture_height;
    }
    
    public get flip() : int
    {
        return this._flip;
    }
    
    public set flip(int value)
    {
        this._flip = value;
        this._show.SetFlip(value);
    }
}