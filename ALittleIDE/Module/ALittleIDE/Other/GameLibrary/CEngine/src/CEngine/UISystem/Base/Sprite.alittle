
namespace ALittle;

public class Sprite : DisplayObject
{
    private string _texture_name;
    private TextureCutInfo _texture_cut;
    private ITexture _texture;

    private int _texture_width;
    private int _texture_height;

    private double _tex_coord_t;
    private double _tex_coord_b;
    private double _tex_coord_l;
    private double _tex_coord_r;

    private int _flip;
    
    private int _row_count;
    private int _col_count;
    private int _row_index;
    private int _col_index;

    public ctor(ControlSystem ctrl_sys)
    {
        // 创建image显示对象
        [Language(Lua)]
        this._show = new lua.__CPPAPISprite();
        [Language(JavaScript)]
        this._show = new JavaScript.JSprite();
    
        // 当前的纹理名称
        // this._texture_name = null;
        // this._texture_cut = null;
        // 当前纹理对象
        // this._texture = null;
        // 保存纹理的宽高
        this._texture_width = 0;
        this._texture_height = 0;
    
        this._tex_coord_t = 0;
        this._tex_coord_b = 1;
        this._tex_coord_l = 0;
        this._tex_coord_r = 1;
    
        // 行列
        this._row_count = 1;
        this._col_count = 1;
        this._row_index = 1;
        this._col_index = 1;
    
        this._flip = 0;
    
        [Language(Lua)]
        A_LoadTextureManager.RegisterRedrawControl(this);
    
        this.AddEventListener(this, this.HandleLButtonUp);
        this.AddEventListener(this, this.HandleMButtonUp);
        this.AddEventListener(this, this.HandleFLButtonUp);
    }
    
    protected fun HandleLButtonUp(UILButtonUpEvent event)
    {
        if (event.rel_x >= 0 && event.rel_y >= 0 && event.rel_x < event.target._width && event.rel_y < event.target._height)
        {
            var c_event = new UIClickEvent();
            c_event.is_drag = event.is_drag;
            c_event.count = event.count;
            this.DispatchEvent(c_event);
        }
    }
    
    protected fun HandleMButtonUp(UIMButtonUpEvent event)
    {
        if (event.rel_x >= 0 && event.rel_y >= 0 && event.rel_x < event.target._width && event.rel_y < event.target._height)
        {
            var c_event = new UIMClickEvent();
            c_event.is_drag = event.is_drag;
            this.DispatchEvent(c_event);
        }
    }
    
    protected fun HandleFLButtonUp(UIFingerUpEvent event)
    {
        if (event.rel_x >= 0 && event.rel_y >= 0 && event.rel_x < event.target._width && event.rel_y < event.target._height)
        {
            var c_event = new UIFClickEvent();
            c_event.is_drag = event.is_drag;
            this.DispatchEvent(c_event);
        }
    }
    
    // 重新绘制
    protected fun Redraw()
    {
        this._show.ClearTexture();
        if (this._texture != null)
        {
            this._texture.Clear();
            this._texture = null;
        }
    
        if (this._texture_name == null)
            return;
    
        if (this._texture_cut != null)
            A_LoadTextureManager.SetTextureCut(this, this._texture_name, 0, 0, this._texture_cut.cache);
        else
            this._ctrl_sys.SetTexture(this, this._texture_name);   
    }
    
    // 从另一个Sprite中获取图片缓存
    public fun CopyTextureRef(Sprite sprite)
    {
        if (sprite == null || sprite._texture == null)
            return;

        // 当前的纹理名称
        this._texture_name = sprite._texture_name;
        this._texture_cut = null;
        if (sprite._texture_cut != null)
        {
            this._texture_cut = new TextureCutInfo();
            this._texture_cut.max_width = sprite._texture_cut.max_width;
            this._texture_cut.max_height = sprite._texture_cut.max_height;
            this._texture_cut.cache = sprite._texture_cut.cache;
        }
        // 当前纹理对象
        this._texture = sprite._texture;
        this._show.SetTexture(sprite._texture.GetTexture());
        this.SetTextureCoord(sprite._tex_coord_t, sprite._tex_coord_b, sprite._tex_coord_l, sprite._tex_coord_r);
        // 保存纹理的宽高
        this._texture_width = sprite._texture_width;
        this._texture_height = sprite._texture_height;
        // 设置行列
        this.row_count = sprite.row_count;
        this.col_count = sprite.col_count;
        this.row_index = sprite.row_index;
        this.col_index = sprite.col_index;
    }
    
    // 这个函数逻辑模块不能调用
    public set texture_name(string value)
    {
        if (this._texture_name == value)
            return;

        if (this._texture_name != null)
        {
            this._show.ClearTexture();
            this._texture = null;
        }
        this._texture_name = value;
        if (this._texture_name != null)
        {
            this._texture_cut = null;
            this._ctrl_sys.SetTexture(this, value);
        }
    }
    
    // 强制设置图片路径
    // texture_name 可以本地路径，也可以是网络图片支持HTTP协议
    // index 如果填写表示加载ios图库的图片（注意c++下标从0开始）
    // auto_rejust 当纹理加载完毕时，是否支持自动调整大小
    public fun SetTextureCut(string texture_name, bool cache, int index)
    {
        if (this._texture_name != null)
        {
            this._show.ClearTexture();
            this._texture = null;
        }
        this._texture_name = texture_name;
        if (this._texture_name != null)
        {
            this._texture_cut = new TextureCutInfo();
            this._texture_cut.cache = cache;
            A_LoadTextureManager.SetTextureCut(this, texture_name, 0, 0, cache);
        }
    }
    
    public get texture_name() : string
    {
        return this._texture_name;
    }
    
    public set texture(ITexture value)
    {
        this._show.SetTexture(value.GetTexture());
        this._texture_width = value.GetWidth();
        this._texture_height = value.GetHeight();
        this._texture = value;
    }
    public get texture() : ITexture
    {
        return this._texture;
    }
    
    public fun SetTextureCoord(double t, double b, double l, double r)
    {
        this._tex_coord_t = t;
        this._tex_coord_b = b;
        this._tex_coord_l = l;
        this._tex_coord_r = r;
        this._show.SetTextureCoord(t, b, l, r);
    }
    
    public get texture_width() : int
    {
        return this._texture_width;
    }
    
    public get texture_height() : int
    {
        return this._texture_height;
    }
    
    public set row_count(int value)
    {
        this._row_count = value;
        this._show.SetRowColCount(this._row_count, this._col_count);
    }
    public get row_count() : int
    {
        return this._row_count;
    }
    
    public set col_count(int value)
    {
        this._col_count = value;
        this._show.SetRowColCount(this._row_count, this._col_count);
    }
    public get col_count() : int
    {
        return this._col_count;
    }
    
    public set row_index(int value)
    {
        this._row_index = value;
        this._show.SetRowColIndex(this._row_index, this._col_index);
    }
    public get row_index() : int
    {
        return this._row_index;
    }
    
    public set col_index(int value)
    {
        this._col_index = value;
        this._show.SetRowColIndex(this._row_index, this._col_index);
    }
    public get col_index() : int
    {
        return this._col_index;
    }
    
    public fun SetRowCol(int row, int col)
    {
        this._row_index = row;
        this._col_index = col;
        this._show.SetRowColIndex(this._row_index, this._col_index);
    }
    
    public get flip() : int
    {
        return this._flip;
    }
    
    public set flip(int value)
    {
        this._flip = value;
        this._show.SetFlip(value);
    }
}