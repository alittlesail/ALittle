
namespace ALittle;

private var __type = String_Type;
private var __tonumber = Math_ToDouble;
private var __tostring = String_ToString;
private var __floor = Math_Floor;
private var __sub = String_Sub;
private var __find = String_Find;

public class TextInput : DisplayObject
{
    private double _cursor_red;
    private double _cursor_green;
    private double _cursor_blue;

    private bool _bold;
    private bool _italic;
    private bool _underline;
    private bool _deleteline;
    private bool _password_mode;
    private string _font_path;
    private int _font_size;

    private string _default_text;
    private double _default_text_alpha;

    private int _flip;

    // 光标闪烁
    private double _current_flash_alpha;
    private double _current_flash_dir;
    // 是否是选择状态
    private bool _is_selecting;
    // 是否可编辑
    private bool _editable;
    // 额外的ims范围
    private int _ims_padding;
    // 正则表达式
    private string _regex;        // 正则表达式
    private int _limit_len;    // 文本长度限制

    private LoopFunction _loop; // 光标动画

    [Language(JavaScript)]
    private bool _move_in;
    [Language(JavaScript)]
    private bool _focus_in;

    public ctor(ControlSystem ctrl_sys)
    {
        // 创建text对象
        [Language(Lua)]
        this._show = new lua.__CPPAPITextInput();
        [Language(JavaScript)]
        this._show = new JavaScript.JTextInput();
    
        this._cursor_red = 1;
        this._cursor_green = 1;
        this._cursor_blue = 1;
    
        this._bold = false;
        this._italic = false;
        this._underline = false;
        this._deleteline = false;
        this._password_mode = false;
        // this._font_path = null;
        // this._font_size = null;

        this._default_text = "";
        this._default_text_alpha = 1;
    
        this._flip = 0;
    
        // 光标闪烁
        this._current_flash_alpha = 1;
        this._current_flash_dir = -0.05;
        // 是否是选择状态
        this._is_selecting = false;
        // 是否可编辑
        this._editable = true;
        // 额外的ims范围
        this._ims_padding = 0;
        // 正则表达式
        this._regex = "";        // 正则表达式
        this._limit_len = 0;    // 文本长度限制
    
        // 侦听事件（这里是自己侦听自己，说明控件自己也可以是一个逻辑对象）
        this.AddEventListener(this, this.HandleFocusIn);
        this.AddEventListener(this, this.HandleFocusOut);
        this.AddEventListener(this, this.HandleMoveIn);
        this.AddEventListener(this, this.HandleMoveOut);
        this.AddEventListener(this, this.HandleLButtonDown);
        this.AddEventListener(this, this.HandleTextInput);
        this.AddEventListener(this, this.HandleKeyDown);
        this.AddEventListener(this, this.HandleDragBegin);
        this.AddEventListener(this, this.HandleDrag);

        [Language(JavaScript)]
        this._move_in = false;
        [Language(JavaScript)]
        this._focus_in = false;
        [Language(JavaScript)]
        cast<PIXI.TextInput>(cast<JavaScript.JTextInput>(this._show).native).htmlInput.onchange = bind(this.HandleHtmlInputChanged, this);

        [Language(Lua)]
        A_LoadTextureManager.RegisterRedrawControl(this);
    }

    [Language(JavaScript)]
    private fun HandleHtmlInputChanged()
    {
        this.DispatchEvent(new UIChangedEvent());
    }
    
    // 重新绘制
    protected fun Redraw()
    {
        this._show.NeedDraw();
    }
    
    public get is_input() : bool
    {
        return true;
    }
    
    public set default_text(string value)
    {
        this._default_text = value;
        if (this._default_text == null)
            this._default_text = "";
        if (this._show.IsDefaultText())
            this._show.SetDefaultText(true, this._default_text);
    }
    public get default_text() : string
    {
        return this._default_text;
    }
    
    public set default_text_alpha(double value)
    {
        if (this._default_text_alpha == value)
            return;
        this._default_text_alpha = value;
        this._show.SetDefaultTextAlpha(value);
    }
    public get default_text_alpha() : double
    {
        return this._default_text_alpha;
    }

    protected fun Update()
    {
        if (this._is_selecting == false)
        {
            this._current_flash_alpha = this._current_flash_alpha + this._current_flash_dir;
            if ((this._current_flash_dir < 0 && this._current_flash_alpha < -0.05) || (this._current_flash_dir > 0 && this._current_flash_alpha > 1.5))
                this._current_flash_dir = -this._current_flash_dir;
        }
        else
            this._current_flash_alpha = 0.5;

        this._show.SetCursorAlpha(this._current_flash_alpha);
    }
    
    // 获取光标偏移位置X
    public get cursor_x() : int
    {
        return this._show.GetCursorX();
    }
    
    // 获取光标偏移位置Y
    public get cursor_y() : int
    {
        return this._show.GetCursorY();
    }

    // 获取光标底部
    public get cursor_b() : double
    {
        return (this._show.GetCursorY() + this._show.GetCursorHeight()) * this.scale_y + this._ims_padding;
    }
    
    // 设置是否可编辑
    public set editable(bool value)
    {
        this._editable = value;
    }
    
    // 获取是否可编辑
    public get editable() : bool
    {
        return this._editable;
    }
    
    // 设置字体，以及字体大小
    public set font_path(string value)
    {
        this._font_path = value;
        if (this._font_path == null || this._font_size == null)
            return;
        this._ctrl_sys.SetFont(this, this._font_path, this._font_size);
    }
    public set font_size(int value)
    {
        this._font_size = value;
        if (this._font_path == null || this._font_size == null)
            return;
        this._ctrl_sys.SetFont(this, this._font_path, this._font_size);
    }
    
    public get font_path() : string
    {
        return this._font_path;
    }
    public get font_size() : int
    {
        return this._font_size;
    }
    
    // 设置文本
    public set text(any value)
    {
        if (value == null)
            return;
        value = __tostring(value);
        this._is_selecting = false;
    
        if (value == "")
        {
            if (this._default_text == null)
                this._default_text = "";
            this._show.SetDefaultText(true, this._default_text);
        }
        else
        {
            this._show.SetDefaultText(false, "");
            this._show.SetText(value);
        }
    }
    
    // 获取文本
    public get text() : string
    {
        if (this._show.IsDefaultText())
            return "";
        return this._show.GetText();
    }
    
    // 设置粗体
    public set bold(bool value)
    {
        if (this._bold == value)
            return;
        this._bold = value;
        this._show.SetBold(value);
    }
    public get bold() : bool
    {
        return this._bold;
    }

    // 设置斜体
    public set italic(bool value)
    {
        if (this._italic == value)
            return;
        this._italic = value;
        this._show.SetItalic(value);
    }
    public get italic() : bool
    {
        return this._italic;
    }

    // 设置下划线
    public set underline(bool value)
    {
        if (this._underline == value)
            return;
        this._underline = value;
        this._show.SetUnderline(value);
    }
    public get underline() : bool
    {
        return this._underline;
    }

    // 设置删除线
    public set deleteline(bool value)
    {
        if (this._deleteline == value)
            return;
        this._deleteline = value;
        this._show.SetDeleteline(value);
    }
    public get deleteline() : bool
    {
        return this._deleteline;
    }
    
    // 设置密码模式
    public set password_mode(bool value)
    {
        this._is_selecting = false;
        if (this._password_mode == value)
            return;
        this._password_mode = value;
        this._show.SetPasswordMode(value);
    }
    public get password_mode() : bool
    {
        return this._password_mode;
    }
    
    public set ims_padding(int value)
    {
        this._ims_padding = value;
    }
    
    public get ims_padding() : int
    {
        return this._ims_padding;
    }
    
    public get regex() : string
    {
        return this._regex;
    }
    
    public set regex(string value)
    {
        if (value == null) value = "";
        this._regex = value;
    }
    
    public get limit_len() : int
    {
        return this._limit_len;
    }
    
    public set limit_len(int value)
    {
        if (value == null) value = 0;
        this._limit_len = value;
    }
    
    // 处理获取焦点事件，不考虑旋转
    protected fun HandleFocusIn(UIFocusInEvent event)
    {
        this._show.ShowCursor(true);
        if (this._loop == null)
            this._loop = new LoopFunction(bind(this.Update, this), -1, 1, 1);
        A_LoopSystem.AddUpdater(this._loop);
    
        if (this._editable)
        {
            var global_x, global_y = this.LocalToGlobal();
            System_SetIMERect(__floor(global_x), __floor(global_y)
                             , __floor(this._width * this.scale_x)
                             , __floor(this._height * this.scale_y) + this._ims_padding);
            System_OpenIME();
        }
    
        if (this._show.IsDefaultText())
            this._show.SetDefaultText(false, "");
        
        [Language(JavaScript)]
        this._focus_in = true;

        [Language(JavaScript)]
        cast<JavaScript.JTextInput>(this._show).SetDisabled(false);
    }
    
    // 处理失去焦点事件
    protected fun HandleFocusOut(UIFocusOutEvent event)
    {
        [Language(JavaScript)]
        this._focus_in = false;

        [Language(JavaScript)]
        cast<JavaScript.JTextInput>(this._show).SetDisabled(!this._move_in);

        this._is_selecting = false;
        this._show.ShowCursor(false);
        A_LoopSystem.RemoveUpdater(this._loop);
    
        System_CloseIME();
    
        if (this.text == "")
        {
            if (this._default_text == null)
                this._default_text = "";
            this._show.SetDefaultText(true, this._default_text);
        }
    }
    
    // 处理点击事件，不考虑旋转
    protected fun HandleLButtonDown(UILButtonDownEvent event)
    {
        if (this._editable)
        {
            var global_x, global_y = this.LocalToGlobal();
            System_SetIMERect(__floor(global_x), __floor(global_y)
                             , __floor(this._width * this.scale_x)
                             , __floor(this._height * this.scale_y) + this._ims_padding);
            System_OpenIME();
        }
        if (event.count % 3 == 1)
        {
            this._is_selecting = false;
            this._show.ClickCursor(event.rel_x, 0.0);
        }
        elseif (event.count % 3 == 2)
        {
            this._is_selecting = this._show.ClickWordCursor(event.rel_x, 0.0);
        }
        else
        {
            this._is_selecting = true;
            this._show.SelectAll();
        }
    }
    
    // 检测正则表达式
    protected fun CheckTextRegexLimit(string text) : bool
    {
        // 判断长度问题
        if (this._limit_len > 0)
        {
            var text_len = String_GetWordCount(text);
            // 输入文本超过限制
            if (text_len > this._limit_len)
                return false;
            // 获取选中文本长度
            var select_len = String_GetWordCount(this._show.GetSelectText());

            var total_len = String_GetWordCount(this.text);
            if (total_len - select_len + text_len > this._limit_len)
                return false;
        }
    
        //  首先判断输入的文件是否满足正则表达式
        if (this._regex != "")
        {
            while (text != "")
            {
                var byte_count = String_GetByteCount(text, 1);
                var sub_text = __sub(text, 1, byte_count);

                var start_it = __find(sub_text, this._regex);
                if (start_it == null)
                    return false;
    
                text = __sub(text, byte_count + 1);
            }
        }
    
        return true;
    }
    
    // 处理文本输入
    protected fun HandleTextInput(UITextInputEvent event)
    {
        if (this._editable || event.custom)
        {
            this._is_selecting = false;
            if (this.CheckTextRegexLimit(event.text) == false)
                return;
            var is_change = this._show.InsertText(event.text);
            if (is_change) this.DispatchEvent(new UIChangedEvent());
        }
    }
    
    // 处理键盘按键
    protected fun HandleKeyDown(UIKeyDownEvent event)
    {
        // 标记是否需要发送CHANGE事件
        var is_change = false;
        // 处理键盘按键
        if (event.sym == 1073741904)
        {
            // 左键
            if (event.mod & UIEnumTypes.KMOD_SHIFT == 0)
            {
                this._is_selecting = false;
                this._show.CursorOffset(true);
            }
            else
            {
                this._is_selecting = true;
                this._show.SelectCursorOffset(true);
            }
			event.handled = true;
        }
        elseif (event.sym == 1073741903)
        {
            // 右键
            if (event.mod & UIEnumTypes.KMOD_SHIFT == 0)
            {
                this._is_selecting = false;
                this._show.CursorOffset(false);
            }
            else
            {
                this._is_selecting = true;
                this._show.SelectCursorOffset(false);
            }
			event.handled = true;
        }
        elseif (event.sym == 8)
        {
            // 退格键
            if (this._editable || event.custom)
            {
                this._is_selecting = false;
                is_change = this._show.DeleteText(true);
				event.handled = true;
            }
        }
        elseif (event.sym == 127)
        {
            // 删除键
            if (this._editable || event.custom)
            {
                this._is_selecting = false;
                is_change = this._show.DeleteText(false);
				event.handled = true;
            }
        }
        elseif (event.sym == 1073741898)
        {
            // Home键
            this._is_selecting = false;
            this._show.SetCursorToHome();
			event.handled = true;
        }
        elseif (event.sym == 1073741901)
        {
            // End键
            this._is_selecting = false;
            this._show.SetCursorToEnd();
			event.handled = true;
        }
        elseif (event.sym == 13 || event.sym == 1073741912)
        {
            // 回车键
            if (this._editable || event.custom)
            {
                // this._is_selecting = false
                this.DispatchEvent(new UIEnterKeyEvent());
				event.handled = true;
            }
        }
        elseif (event.sym == 120 && event.mod & UIEnumTypes.KMOD_CTRL != 0)
        {
            // x键
            if (this._editable || event.custom)
            {
                this._is_selecting = false;
                // 如果是密码模式，是不能剪切的
                var select_text = this._show.GetSelectText();
                if (select_text != "" && (!this._password_mode))
                {
                    System_SetClipboardText(select_text);
                    is_change = this._show.DeleteSelectText();
                }
				event.handled = true;
            }
        }
        elseif (event.sym == 99 && event.mod & UIEnumTypes.KMOD_CTRL != 0)
        {
            // c键
            // 如果是密码模式，是不能复制的
            var select_text = this._show.GetSelectText();
            if (select_text != "" && (!this._password_mode))
                System_SetClipboardText(select_text);
			event.handled = true;
        }
        elseif (event.sym == 118 && event.mod & UIEnumTypes.KMOD_CTRL != 0)
        {
            // v键
            if (this._editable || event.custom)
            {
                this._is_selecting = false;
                if (System_HasClipboardText())
                {
                    var clip_board_text = System_GetClipboardText();
                    if (this.CheckTextRegexLimit(clip_board_text) == false)
                        return;
                    is_change = this._show.InsertText(clip_board_text);
                }
				event.handled = true;
            }
        }
        elseif (event.sym == 97 && event.mod & UIEnumTypes.KMOD_CTRL != 0)
        {
            // a键
            this._is_selecting = true;
            this._show.SelectAll();
			event.handled = true;
        }
        elseif (event.sym == 9)
        {
            // tab键
            this.DispatchEvent(new UITabKeyEvent());
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_ESC)
        {
            // Esc键
            this.DispatchEvent(new UIEscKeyEvent());
			event.handled = true;
        }
        // 检查是否发送CHANGE事件
        if (is_change)
        {
            this.DispatchEvent(new UIChangedEvent());
            this._current_flash_alpha = 1.5;
        }

    }
    
    // 设置光标到开始位置
    public fun SetCursorToHome()
    {
        this._is_selecting = false;
        this._show.SetCursorToHome();
    }
    
    // 设置光标到结尾位置
    public fun SetCursorToEnd()
    {
        this._is_selecting = false;
        this._show.SetCursorToEnd();
    }
    
    // 全选
    public fun SelectAll()
    {
        this._is_selecting = true;
        this._show.SelectAll();
    }
    
    // 复制选中
    public fun CopyText()
    {
        var select_text = this._show.GetSelectText();
        if (select_text == "")
            select_text = this.text;
    
        if (select_text != "")
            System_SetClipboardText(select_text);
    }
    
    // 粘帖
    public fun PasteText()
    {
        if (this._editable == false)
            return;
    
        if (this._show.IsDefaultText())
            this._show.SetDefaultText(false, "");
    
        this._is_selecting = false;
        if (System_HasClipboardText())
        {
            var clip_board_text = System_GetClipboardText();
            if (this.CheckTextRegexLimit(clip_board_text) == false)
                return;
            this._show.InsertText(clip_board_text);
        }
    }
    
    // 剪切
    public fun CutText()
    {
        if (this._editable == false)
            return;
        this._is_selecting = false;
        var select_text = this._show.GetSelectText();
        if (select_text != "")
        {
            System_SetClipboardText(select_text);
            this._show.DeleteSelectText();
        }
    }
    
    // 插入文本
    public fun InsertText(string text)
    {
        if (this._editable == false)
            return;
    
        if (this._show.IsDefaultText())
            this._show.SetDefaultText(false, "");
    
        this._is_selecting = false;
        if (text != null)
        {
            if (this.CheckTextRegexLimit(text) == false)
                return;
            this._show.InsertText(text);
        }
    }
    
    // 处理拖拽开始
    protected fun HandleDragBegin(UIButtonDragBeginEvent event)
    {
        this._is_selecting = true;
        this._show.DragCursorBegin();
    }
    
    // 处理拖拽
    protected fun HandleDrag(UIButtonDragEvent event)
    {
        if (this._is_selecting == false)
            return;
        this._show.DragCursor(event.rel_x, event.rel_y);
    }
    
    // 鼠标移入
    protected fun HandleMoveIn(UIMoveInEvent event)
    {
        [Language(JavaScript)]
        this._move_in = true;
        
        [Language(JavaScript)]
        cast<JavaScript.JTextInput>(this._show).SetDisabled(false);

        System_SetEditCursor();
    }
    // 鼠标移出
    protected fun HandleMoveOut(UIMoveOutEvent event)
    {
        [Language(JavaScript)]
        this._move_in = false;
        
        [Language(JavaScript)]
        cast<JavaScript.JTextInput>(this._show).SetDisabled(!this._focus_in);

        System_SetNormalCursor();
    }
    
    public set cursor_red(double value)
    {
        if (this._cursor_red == value)
            return;
        this._cursor_red = value;
        this._show.SetCursorRed(value);
    }
    public get cursor_red() : double
    {
        return this._cursor_red;
    }
    public set cursor_green(double value)
    {
        if (this._cursor_green == value)
            return;
        this._cursor_green = value;
        this._show.SetCursorGreen(value);
    }
    public get cursor_green() : double
    {
        return this._cursor_green;
    }
    public set cursor_blue(double value)
    {
        if (this._cursor_blue == value)
            return;
        this._cursor_blue = value;
        this._show.SetCursorBlue(value);
    }
    public get cursor_blue() : double
    {
        return this._cursor_blue;
    }
    
    public get flip() : int
    {
        return this._flip;
    }
    
    public set flip(int value)
    {
        this._flip = value;
        this._show.SetFlip(value);
    }
}