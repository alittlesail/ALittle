
namespace ALittle;

public struct DialogDragEvent : UIEvent
{
    double delta_x;
    double delta_y;
}
public struct DialogDragBeginEvent : UIEvent {}
public struct DialogDragEndEvent : UIEvent {}

public class Dialog : DisplayLayout
{
    private string          _title_text;
    private DisplayObject   _background;
    private DisplayObject   _head_drag;
    private DisplayObject   _title;
    
    private DisplayObject   _close_button;
    private Functor<():bool>     _close_callback;
    
    private DisplayLayout   _head;
    private DisplayLayout   _head_container;
    private double		  _head_left_margin;
    private double		  _head_right_margin;
    private double          _head_top_margin;
    private double          _head_bottom_margin;
    private DisplayLayout   _body;
    
    private Grid3           _grid3;

    public ctor(ControlSystem ctrl_sys)
    {
        this._pickup_rect = true;
        this._pickup_child = true;
    
        this._title_text = "";
        
        // 背景
        // this._background = null;
        // 可拖动控件
        // this._head_drag = null;
        // 标题
        // this._title = null;
        // 关闭按钮
        // this._close_button = null;
        // this._close_callback = null;
    
        // 对话框头部
        this._head = new DisplayLayout(this._ctrl_sys);
        this._head_container = new DisplayLayout(this._ctrl_sys);
        this._head_container.width_type = UIEnumTypes.SIZE_MARGIN;
        this._head_container.height_type = UIEnumTypes.SIZE_MARGIN;
        this._head.AddChild(this._head_container);
        this._head_left_margin = 0;
        this._head_right_margin = 0;
        this._head_top_margin = 0;
        this._head_bottom_margin = 0;
        // 对话框身体
        this._body = new DisplayLayout(this._ctrl_sys);
    
        // 三宫格
        this._grid3 = new Grid3(this._ctrl_sys);
        this._grid3.width_type = UIEnumTypes.SIZE_MARGIN;
        this._grid3.width_value = 0;
        this._grid3.height_type = UIEnumTypes.SIZE_MARGIN;
        this._grid3.height_value = 0;
        this._grid3.type = UIEnumTypes.TYPE_V;
        this._grid3.show_up = this._head;
        this._grid3.show_center = this._body;
    
        // 将三宫格添加进来
        DisplayLayout.AddChild(this, this._grid3);
    }

    public fun GetChildOffset() : double, double { return 0, this._grid3.up_size; }
    
    //////////////////////////////////////////////////////////////////////////////////////////////-
    public set head_size(double value)
    {
        this._grid3.up_size = value;
        if (this._background != null)
            this._background.height_value = this._grid3.up_size;
        if (this._close_button != null)
            this._close_button.x_value = (value - this._close_button.height) / 2;
    }
    public get head_size() : double
    {
        return this._grid3.up_size;
    }

    public get head_left_margin() : double { return this._head_left_margin; }
    public set head_left_margin(double value)
    {
        this._head_left_margin = value;
        this._head_container.x = value;
        this._head_container.width_value = this._head_left_margin + this._head_right_margin;
    }

    public get head_right_margin() : double { return this._head_right_margin; }
    public set head_right_margin(double value)
    {
        this._head_right_margin = value;
        this._head_container.width_value = this._head_left_margin + this._head_right_margin;
    }

    public get head_top_margin() : double { return this._head_top_margin; }
    public set head_top_margin(double value)
    {
        this._head_top_margin = value;
        this._head_container.y = value;
        this._head_container.height_value = this._head_top_margin + this._head_bottom_margin;
    }

    public get head_bottom_margin() : double { return this._head_bottom_margin; }
    public set head_bottom_margin(double value)
    {
        this._head_bottom_margin = value;
        this._head_container.height_value = this._head_top_margin + this._head_bottom_margin;
    }

    //////////////////////////////////////////////////////////////////////////////////////////////-
    public set show_background(DisplayObject value)
    {
        if (this._background != null)
            DisplayLayout.RemoveChild(this, this._background);
        this._background = value;
        if (this._background != null)
        {
            this._background.width_type = UIEnumTypes.SIZE_MARGIN;
            this._background.width_value = 0;
            this._background.height_type = UIEnumTypes.SIZE_MARGIN;
            this._background.height_value = this._grid3.up_size;
            this._background.y_type = UIEnumTypes.POS_ALIGN_ENDING;
            DisplayLayout.AddChild(this, this._background, 1);
        }
    }
    public get show_background() : DisplayObject
    {
        return this._background;
    }
    public set show_head_drag(DisplayObject value)
    {
        if (this._head_drag != null)
        {
            this._head.RemoveChild(this._head_drag);
    
            this._head_drag.RemoveEventListener(this, this.HandleHeadDragBegin);
            this._head_drag.RemoveEventListener(this, this.HandleHeadDrag);
            this._head_drag.RemoveEventListener(this, this.HandleHeadDragEnd);
        }
        this._head_drag = value;
        if (this._head_drag != null)
        {
            this._head_drag.width_type = UIEnumTypes.SIZE_MARGIN;
            this._head_drag.width_value = 0;
            this._head_drag.height_type = UIEnumTypes.SIZE_MARGIN;
            this._head_drag.height_value = 0;
            this._head.AddChild(this._head_drag, 1);
    
            this._head_drag.AddEventListener(this, this.HandleHeadDragBegin);
            this._head_drag.AddEventListener(this, this.HandleHeadDrag);
            this._head_drag.AddEventListener(this, this.HandleHeadDragEnd);
        }
    }
    public get show_head_drag() : DisplayObject
    {
        return this._head_drag;
    }
    public set show_title(DisplayObject value)
    {
        if (this._title != null)
        {
            this._title_text = this._title.text;
            this._head_container.RemoveChild(this._title);
        }
    
        this._title = value;
        if (this._title != null)
        {
            this._title.text = this._title_text;
            this._title.disabled = true;
            this._title.y_type = UIEnumTypes.POS_ALIGN_CENTER;
            this._title.y_value = 0;
            this._title.x = 0;
            this._head_container.AddChild(this._title);
        }
    }
    public get show_title() : DisplayObject
    {
        return this._title;
    }
    public set title(string value)
    {
        this._title_text = value;
        if (this._title != null)
            this._title.text = value;
    }
    public get title() : string
    {
        if (this._title != null)
            return this._title.text;
        return this._title_text;
    }

    public set show_close_button(DisplayObject value)
    {
        if (this._close_button != null)
        {
            this._head_container.RemoveChild(this._close_button);
            this._close_button.RemoveEventListener(this, this.HandleCloseButtonClicked);
        }
        this._close_button = value;
        if (this._close_button != null)
        {
            this._close_button.y_value = 0;
            this._close_button.y_type = UIEnumTypes.POS_ALIGN_CENTER;
            this._head_container.AddChild(this._close_button);
    
            this._close_button.x_type = UIEnumTypes.POS_ALIGN_ENDING;
            this._close_button.x_value = (this._grid3.up_size - this._close_button.height) / 2;
    
            this._close_button.AddEventListener(this, this.HandleCloseButtonClicked);
        }
    }
    public get show_close_button() : DisplayObject
    {
        return this._close_button;
    }
    
    public set close_callback(Functor<():bool> value)
    {
        this._close_callback = value;
    }
    public get close_callback() : Functor<():bool>
    {
        return this._close_callback;
    }
    //////////////////////////////////////////////////////////////////////////////////////////////-
    protected fun HandleCloseButtonClicked(UIClickEvent event)
    {
        if (this._close_callback != null && !this._close_callback())
            return;
        this.visible = false;
    }

    protected fun HandleHeadDragBegin(UIButtonDragBeginEvent event)
    {
        this.DispatchEvent(new DialogDragBeginEvent());
    }
    
    protected fun HandleHeadDrag(UIButtonDragEvent event)
    {
        this.x += event.delta_x;
        this.y += event.delta_y;
        
        var new_event = new DialogDragEvent();
        new_event.target = this;
        new_event.delta_x = event.delta_x;
        new_event.delta_y = event.delta_y;
        this.DispatchEvent(new_event);
    }

    protected fun HandleHeadDragEnd(UIButtonDragEndEvent event)
    {
        this.DispatchEvent(new DialogDragEndEvent());
    }
    //////////////////////////////////////////////////////////////////////////////////////////////-
    // 获取子控件的索引
    public fun GetChildIndex(DisplayObject child) : int
    {
        return this._body.GetChildIndex(child);
    }
    // 设置子控件的索引
    public fun SetChildIndex(DisplayObject child, int index) : bool
    {
        return this._body.SetChildIndex(child, index);
    }
    // 根据索引获取子控件
    public fun GetChildByIndex(int index) : DisplayObject
    {
        return this._body.GetChildByIndex(index);
    }
    // 获取子控件的索引
    public fun GetChildIndex(DisplayObject child) : int
    {
        return this._body.GetChildIndex(child);
    }
    // 获取子控件
    public get childs() : List<DisplayObject>
    {
        return this._body.childs;
    }
    // 获取子控件数量
    public get child_count() : int
    {
        return this._body.child_count;
    }
    // 添加子控件
    public fun AddChild(DisplayObject child, [Nullable] int index) : bool
    {
        if (child == null || child == this)
            return false;
            
        // 判定child的父控件是否是自己，如果不是则返回false
        if (child._show_parent == this._body || child._logic_parent == this)
            return true;
        
        // 添加到容器中，讲逻辑父控件设置为自己
        var result = this._body.AddChild(child, index);
        child._logic_parent = this;
        return result;
    }
    // 移除子控件
    public fun RemoveChild(DisplayObject child) : bool
    {
        if (child == null)
            return false;
            
        // 判定child的父控件是否是自己，如果不是则返回false
        if (child._show_parent != this._body && child._logic_parent != this)
            return false;

        var index = this._body.GetChildIndex(child);
        if (index == 0)
            return false;
        return this._body.RemoveChild(child);
    }
    // 批量移除子控件
    public fun SpliceChild(int index, [Nullable] int count) : int
    {
        return this._body.SpliceChild(index, count);
    }
    // 检查是否存在某个子控件
    public fun HasChild(DisplayObject child) : bool
    {
        return this._body.HasChild(child);
    }
    // 移除所有子控件
    public fun RemoveAllChild()
    {
        this._body.RemoveAllChild();
    }
}