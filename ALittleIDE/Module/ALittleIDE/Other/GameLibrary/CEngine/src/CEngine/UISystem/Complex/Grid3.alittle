
namespace ALittle;

public class Grid3 : DisplayGroup
{
    private int _type;
    private List<DisplayObject> _child_map;
    
    private double  _logic_up;
    private double  _logic_down;
    private double  _logic_gap;
    
    private double  _real_up;
    private double  _real_down;
    private double _real_gap;
    
    public ctor(ControlSystem ctrl_sys)
    {
        this._type = UIEnumTypes.TYPE_V;    // 默认垂直
    
        this._child_map = new List<DisplayObject>();            // 子控件列表
    
        // 逻辑数据
        this._logic_up = 0;
        this._logic_down = 0;
        this._logic_gap = 0;
    
        // 实际数据
        this._real_up = 0;
        this._real_down = 0;
        this._real_gap = 0;
    
        this._pickup_rect = true;
        this._pickup_child = true;
    }
    
    public set type(int value)
    {
        if (this._type == value)
            return;
        this._type = value;
    
        this.CalcRealWidthCutting();
        this.CalcRealHeightCutting();
    }
    public get type() : int
    {
        return this._type;
    }
    
    public set show_up(DisplayObject child)
    {
        this.SetShow(1, child);
    }
    public get show_up() : DisplayObject
    {
        return this._child_map[1];
    }
    public set show_center(DisplayObject child)
    {
        this.SetShow(2, child);
    }
    public get show_center() : DisplayObject
    {
        return this._child_map[2];
    }
    public set show_down(DisplayObject child)
    {
        this.SetShow(3, child);
    }
    public get show_down() : DisplayObject
    {
        return this._child_map[3];
    }
    
    public fun SetShow(int index, DisplayObject child)
    {
        if (this._child_map[index] != null)
            DisplayGroup.RemoveChild(this, this._child_map[index]);

        this._child_map[index] = null;
        if (child == null)
            return;
    
        this._child_map[index] = child;
        DisplayGroup.AddChild(this, child);
    
        if (this._type == UIEnumTypes.TYPE_V)
        {
            child.x = 0;
            child.width = this._width;

            var y = 0.0;
            var height = 0.0;
            if (index == 1)
            {
                y = 0;
                height = this._real_up;
            }
            elseif (index == 2)
            {
                y = this._real_up + this._real_gap;
                height = this._height - this._real_gap * 2 - this._real_up - this._real_down;
            }
            elseif (index == 3)
            {
                y = this._height - this._real_down;
                height = this._real_down;
            }
            child.y = y;
            child.height = height;
        }
        else
        {
            child.y = 0;
            child.height = this._height;

            var x = 0.0;
            var width = 0.0;
            if (index == 1)
            {
                x = 0;
                width = this._real_up;
            }
            elseif (index == 2)
            {
                x = this._real_up + this._real_gap;
                width = this._width - this._real_gap * 2 - this._real_up - this._real_down;
            }
            elseif (index == 3)
            {
                x = this._width - this._real_down;
                width = this._real_down;
            }
            child.x = x;
            child.width = width;
        }
    }
    
    public get center_size() : double
    {
        var size = 0.0;
        if (this._type == UIEnumTypes.TYPE_V)
            size = this._height - this._real_gap * 2 - this._real_up - this._real_down;
        else
            size = this._width - this._real_gap * 2 - this._real_up - this._real_down;

        return size;
    }
    
    public get real_gap() : double
    {
        return this._real_gap;
    }
    public get gap() : double
    {
        return this._logic_gap;
    }
    public get real_up_size() : double
    {
        return this._real_up;
    }
    public get up_size() : double
    {
        return this._logic_up;
    }
    public get real_down_size() : double
    {
        return this._real_down;
    }
    public get down_size() : double
    {
        return this._logic_down;
    }
    
    public set up_size(double value)
    {
        this._logic_up = value;
    
        this.CalcRealWidthCutting();
        this.CalcRealHeightCutting();
    }
    
    public set down_size(double value)
    {
        this._logic_down = value;
    
        this.CalcRealWidthCutting();
        this.CalcRealHeightCutting();
    }
    
    public set gap(double value)
    {
        this._logic_gap = value;
    
        this.CalcRealWidthCutting();
        this.CalcRealHeightCutting();
    }
    
    public set width(double value)
    {
        if (value == this._width) return;

        this._width = value;
        if (this._width_type == UIEnumTypes.SIZE_ABS)
            this._width_value = this._width;

        this.CalcRealWidthCutting();
    }
    
    public set height(double value)
    {
        if (value == this._height) return;

        this._height = value;
        if (this._height_type == UIEnumTypes.SIZE_ABS)
            this._height_value = this._height;

        this.CalcRealHeightCutting();
    }

    protected fun CalcRealWidthCutting()
    {
        if (this._type == UIEnumTypes.TYPE_V)
        {
            for (var index = 1; index <= 3; 1)
            {
                if (this._child_map[index] != null)
                {
                    this._child_map[index].x = 0;
                    this._child_map[index].width = this._width;
                }
            }
            return;
        }
    
        if (this._width == 0)
        {
            this._real_up = 0;
            this._real_down = 0;
            this._real_gap = 0;
        }
        elseif (this._width >= this._logic_up + this._logic_down + this._logic_gap * 2)
        {
            this._real_up = this._logic_up;
            this._real_down = this._logic_down;
            this._real_gap = this._logic_gap;
        }
        elseif (this._width >= this._logic_up + this._logic_down)
        {
            var last_gap = this._width - this._logic_up - this._logic_down;
            this._real_up = this._logic_up;
            this._real_down = this._logic_down;
            this._real_gap = last_gap / 2;
        }
        else
        {
            var logic_up_add_down = this._logic_up + this._logic_down;
            if (logic_up_add_down == 0)
            {
                this._real_up = 0;
                this._real_down = 0;
                this._real_gap = 0;
            }
            else
            {
                var rate_up = this._logic_up / logic_up_add_down;
                var rate_down = this._logic_down / logic_up_add_down;
                this._real_up = this._width * rate_up;
                this._real_down = this._width * rate_down;
                this._real_gap = 0;
            }
        }

        var offset_list = new List<double>();
        offset_list[1] = 0;
        offset_list[2] = this._real_up + this._real_gap;
        offset_list[3] = this._width - this._real_down;
        var width_list = new List<double>();
        width_list[1] = this._real_up;
        width_list[2] = this._width - this._real_gap * 2 - this._real_up - this._real_down;
        width_list[3] = this._real_down;
    
        for (var index = 1; index <= 3; 1)
        {
            if (this._child_map[index] != null)
            {
                this._child_map[index].x = offset_list[index];
                this._child_map[index].width = width_list[index];
            }
        }
    }

    protected fun CalcRealHeightCutting()
    {
        if (this._type == UIEnumTypes.TYPE_H)
        {
            for (var index = 1; index <= 3; 1)
            {
                if (this._child_map[index] != null)
                {
                    this._child_map[index].y = 0;
                    this._child_map[index].height = this._height;
                }
            }
            return;
        }
    
        if (this._height == 0)
        {
            this._real_up = 0;
            this._real_down = 0;
            this._real_gap = 0;
        }
        elseif (this._height >= this._logic_up + this._logic_down + this._logic_gap * 2)
        {
            this._real_up = this._logic_up;
            this._real_down = this._logic_down;
            this._real_gap = this._logic_gap;
        }
        elseif (this._height >= this._logic_up + this._logic_down)
        {
            var last_gap = this._height - this._logic_up - this._logic_down;
            this._real_up = this._logic_up;
            this._real_down = this._logic_down;
            this._real_gap = last_gap / 2;
        }
        else
        {
            var logic_up_add_down = this._logic_up + this._logic_down;
            if (logic_up_add_down == 0)
            {
                this._real_up = 0;
                this._real_down = 0;
                this._real_gap = 0;
            }
            else
            {
                var rate_up = this._logic_up / logic_up_add_down;
                var rate_down = this._logic_down / logic_up_add_down;
                this._real_up = this._height * rate_up;
                this._real_down = this._height * rate_down;
                this._real_gap = 0;
            }
        }

        var offset_list = new List<double>();
        offset_list[1] = 0;
        offset_list[2] = this._real_up + this._real_gap;
        offset_list[3] = this._height - this._real_down;
        var height_list = new List<double>();
        height_list[1] = this._real_up;
        height_list[2] = this._height - this._real_gap * 2 - this._real_up - this._real_down;
        height_list[3] = this._real_down;
    
        for (var index = 1; index <= 3; 1)
        {
            if (this._child_map[index] != null)
            {
                this._child_map[index].y = offset_list[index];
                this._child_map[index].height = height_list[index];
            }
        }
    }
}