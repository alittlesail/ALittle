
namespace ALittle;

private var __ceil = Math_Ceil;

public class Grid9 : DisplayGroup
{
    private Map<int, Map<int, DisplayObject>> _child_map;
    
    private double  _logic_left;
    private double  _logic_top;
    private double  _logic_right;
    private double  _logic_bottom;

    // 实际数据
    private double  _real_left;
    private double  _real_top;
    private double  _real_right;
    private double  _real_bottom;

    public ctor(ControlSystem ctrl_sys)
    {
        // 子控件列表
        this._child_map = new Map<int, Map<int, DisplayObject>>();
        this._child_map[1] = new Map<int, DisplayObject>();
        this._child_map[2] = new Map<int, DisplayObject>();
        this._child_map[3] = new Map<int, DisplayObject>();
    
        // 逻辑数据
        this._logic_left = 0;
        this._logic_top = 0;
        this._logic_right = 0;
        this._logic_bottom = 0;
    
        // 实际数据
        this._real_left = 0;
        this._real_top = 0;
        this._real_right = 0;
        this._real_bottom = 0;
    
        this._pickup_rect = true;
        this._pickup_child = true;
    }
    
    public set show_left_top(DisplayObject child)
    {
        this.SetShow(1, 1, child);
    }
    public get show_left_top() : DisplayObject
    {
        return this._child_map[1][1];
    }
    
    public set show_left_center(DisplayObject child)
    {
        this.SetShow(1, 2, child);
    }
    public get show_left_center() : DisplayObject
    {
        return this._child_map[1][2];
    }
    
    public set show_left_bottom(DisplayObject child)
    {
        this.SetShow(1, 3, child);
    }
    public get show_left_bottom() : DisplayObject
    {
        return this._child_map[1][3];
    }
    
    public set show_center_top(DisplayObject child)
    {
        this.SetShow(2, 1, child);
    }
    public get show_center_top() : DisplayObject
    {
        return this._child_map[2][1];
    }
    
    public set show_center_center(DisplayObject child)
    {
        this.SetShow(2, 2, child);
    }
    public get show_center_center(): DisplayObject
    {
        return this._child_map[2][2];
    }
    
    public set show_center_bottom(DisplayObject child)
    {
        this.SetShow(2, 3, child);
    }
    public get show_center_bottom() : DisplayObject
    {
        return this._child_map[2][3];
    }
    
    public set show_right_top(DisplayObject child)
    {
        this.SetShow(3, 1, child);
    }
    public get show_right_top() : DisplayObject
    {
        return this._child_map[3][1];
    }
    
    public set show_right_center(DisplayObject child)
    {
        this.SetShow(3, 2, child);
    }
    public get show_right_center() : DisplayObject
    {
        return this._child_map[3][2];
    }
    
    public set show_right_bottom(DisplayObject child)
    {
        this.SetShow(3, 3, child);
    }
    public get show_right_bottom() : DisplayObject
    {
        return this._child_map[3][3];
    }
    
    public fun SetShow(int col, int row, DisplayObject child)
    {
        if (this._child_map[col][row] != null)
            this.RemoveChild(this._child_map[col][row]);
    
        this._child_map[col][row] = child;
        if (child == null)
            return;
        this.AddChild(child);

        var x = 0.0;
        var y = 0.0;
        var width = 0.0;
        var height = 0.0;
    
        if (col == 1)
        {
            x = 0;
            width = this._real_left;
        }
        elseif (col == 2)
        {
            x = this._real_left;
            width = this._width - this._real_left - this._real_right;
        }
        elseif (col == 3)
        {
            x = this._width - this._real_right;
            width = this._real_right;
        }
    
        if (row == 1)
        {
            y = 0;
            height = this._real_top;
        }
        elseif (row == 2)
        {
            y = this._real_top;
            height = this._height - this._real_top - this._real_bottom;
        }
        elseif (row == 3)
        {
            y = this._height - this._real_bottom;
            height = this._real_bottom;
        }
    
        child.x = x;
        child.y = y;
        child.width = width;
        child.height = height;
    }
    
    public set width(double value)
    {
        if (value == this._width) return;

        this._width = value;
        if (this._width_type == UIEnumTypes.SIZE_ABS)
            this._width_value = this._width;

        this.CalcRealWidthCutting();
    }
    
    public set height(double value)
    {
        if (value == this._height) return;

        this._height = value;
        if (this._height_type == UIEnumTypes.SIZE_ABS)
            this._height_value = this._height;

        this.CalcRealHeightCutting();
    }
    
    public set left_size(double value)
    {
        this._logic_left = value;
        this.CalcRealWidthCutting();
    }
    public get left_size() : double
    {
        return this._logic_left;
    }
    public set right_size(double value)
    {
        this._logic_right = value;
        this.CalcRealWidthCutting();
    }
    public get right_size() : double
    {
        return this._logic_right;
    }
    public set top_size(double value)
    {
        this._logic_top = value;
        this.CalcRealHeightCutting();
    }
    public get top_size() : double
    {
        return this._logic_top;
    }
    public set bottom_size(double value)
    {
        this._logic_bottom = value;
        this.CalcRealHeightCutting();
    }
    public get bottom_size() : double
    {
        return this._logic_bottom;
    }

    protected fun CalcRealWidthCutting()
    {
        var real_center = 0.0;
        var logic_left = __ceil(this._logic_left);
        var logic_right = __ceil(this._logic_right);
        if (this._width == 0)
        {
            this._real_left = 0;
            this._real_right = 0;
            real_center = 0;
        }
        elseif (this._width >= logic_left + logic_right)
        {
            this._real_left = logic_left;
            this._real_right = logic_right;
            real_center = __ceil(this._width - this._real_left - this._real_right);
        }
        else
        {
            var logic_left_add_right = this._logic_left + this._logic_right;
            real_center = 0;
            if (logic_left_add_right == 0)
            {
                this._real_left = 0;
                this._real_right = 0;
            }
            else
            {
                var rate_left = this._logic_left / logic_left_add_right;
                var rate_right = this._logic_right / logic_left_add_right;
                this._real_left = this._width * rate_left;
                this._real_right = this._width * rate_right;
            }
        }

        var offset_list = new List<double>();
        offset_list[1] = 0;
        offset_list[2] = this._real_left;
        offset_list[3] = this._real_left + real_center;
        var width_list = new List<double>();
        width_list[1] = this._real_left;
        width_list[2] = real_center;
        width_list[3] = this._real_right;

        for (var col = 1; col <= 3; 1)
        {
            var row_childs = this._child_map[col];
            for (var row = 1; row <= 3; 1)
            {
                if (row_childs[row] != null)
                {
                    row_childs[row].x = offset_list[col];
                    row_childs[row].width = width_list[col];
                }
            }
        }
    }

    protected fun CalcRealHeightCutting()
    {
        var real_center = 0.0;
        var logic_top = __ceil(this._logic_top);
        var logic_bottom = __ceil(this._logic_bottom);
        if (this._height == 0)
        {
            this._real_top = 0;
            this._real_bottom = 0;
            real_center = 0;
        }
        elseif (this._height >= logic_top + logic_bottom)
        {
            this._real_top = logic_top;
            this._real_bottom = logic_bottom;
            real_center = __ceil(this._height - this._real_top - this._real_bottom);
        }
        else
        {
            var logic_top_add_bottom = this._logic_top + this._logic_bottom;
            real_center = 0;
            if (logic_top_add_bottom == 0)
            {
                this._real_top = 0;
                this._real_bottom = 0;
            }
            else
            {
                var rate_top = this._logic_top / logic_top_add_bottom;
                var rate_bottom = this._logic_bottom / logic_top_add_bottom;
                this._real_top = this._height * rate_top;
                this._real_bottom = this._height * rate_bottom;
            }
        }

        var offset_list = new List<double>();
        offset_list[1] = 0;
        offset_list[2] = this._real_top;
        offset_list[3] = this._real_top + real_center;
        var height_list = new List<double>();
        height_list[1] = this._real_top;
        height_list[2] = real_center;
        height_list[3] = this._real_bottom;
        for (var col = 1; col <= 3; 1)
        {
            var row_childs = this._child_map[col];
            for (var row = 1; row <= 3; 1)
            {
                if (row_childs[row] != null)
                {
                    row_childs[row].y = offset_list[row];
                    row_childs[row].height = height_list[row];
                }
            }
        }
    }
}