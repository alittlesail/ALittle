
namespace ALittle;

private var __ceil = Math_Ceil;

public class Linear : DisplayGroup
{
    private int _type;
    private bool _size_fixed;
    private double _gap;
    private int _clip_up_index;
    private int _clip_down_index;
    
    private Map<DisplayObject, double> _child_width_map;
    private Map<DisplayObject, double> _child_height_map;
    private Map<DisplayObject, bool> _show_child_map;

    public ctor(ControlSystem ctrl_sys)
    {
        this._type = UIEnumTypes.TYPE_H;
        this._size_fixed = true;
    
        this._gap = 0;
        this._clip_up_index = 0; // 裁剪下标
        this._clip_down_index = 0; // 裁剪下标
    
        this._child_width_map = CreateKeyWeakMap();
        this._child_height_map = CreateKeyWeakMap();
        this._show_child_map = CreateKeyWeakMap();
    
        this._pickup_rect = false;
        this._pickup_child = true;
    }
    
    public get clip_up_index() : int
    {
        return this._clip_up_index;
    }
    
    public get clip_down_index() : int
    {
        return this._clip_down_index;
    }

    public get size_fixed() : bool
    {
        return this._size_fixed;
    }

    public set size_fixed(bool value)
    {
        if (this._size_fixed == value) return;
        this._size_fixed = value;
        this.UpdateSize();
    }
    
    public set type(int value)
    {
        if (this._type == value) return;
        this._type = value;
        this.UpdateSize();
        this.Layout(1);
    }
    
    public get type() : int
    {
        return this._type;
    }
    
    public set gap(double value)
    {
        if (this._gap == value)
            return;
        this._gap = value;
        this.Layout(1);
    }
    
    public get gap() : double
    {
        return this._gap;
    }

    public fun GetShowMap() : Map<DisplayObject, bool> { return this._show_child_map; }

    public fun AddChild(DisplayObject child, [Nullable] int index) : bool
    {
        if (DisplayGroup.AddChild(this, child, index) == false)
            return false;
        
        if (index == null)
            this.Layout(this.child_count);
        else
            this.Layout(index);
    
        // 把原来的大小保存起来
        this._child_width_map[child] = child.width;
        this._child_height_map[child] = child.height;
    
        // 设置大小
        if (this._size_fixed)
        {
            if (this._type == UIEnumTypes.TYPE_H)
                child.height = this._height;
            else
                child.width = this._width;
        }

        // 侦听大小发生变化
        child.AddEventListener(this, this.HandleChildResize);

        return true;
    }
    
    public fun RemoveChild(DisplayObject child) : bool
    {
        var child_index = this.GetChildIndex(child);
        if (child_index == 0)
            return false;
        if (DisplayGroup.RemoveChild(this, child) == false)
            return false;
    
        // 删除记录
        this._child_width_map[child] = null;
        this._child_height_map[child] = null;
        this._show_child_map[child] = null;
        // 侦听大小发生变化
        child.RemoveEventListener{UIResizeEvent}(this);
     
        this.Layout(child_index);
        return true;
    }

    public fun SpliceChild(int index, [Nullable] int count) : int
    {
        var remain_count = this._child_count - index + 1;
        if (count == null) count = remain_count;
        elseif (count > remain_count) count = remain_count;
        if (count <= 0) return 0;

        var endv = index + count;
        for (var i = index; i < endv; 1)
        {
            var child = this._childs[i];
            if (child == null) break;

            // 删除记录
            this._child_width_map[child] = null;
            this._child_height_map[child] = null;
            this._show_child_map[child] = null;
            // 侦听大小发生变化
            child.RemoveEventListener{UIResizeEvent}(this);
        }

        var result = DisplayGroup.SpliceChild(this, index, count);
        if (result != 0) this.Layout(index);

        this._clip_up_index = 0;
        this._clip_down_index = 0;
    
        return result;
    }
    
    public fun RemoveAllChild()
    {
        for (var i, child in this._childs)
            child.RemoveEventListener{UIResizeEvent}(this);
        this._child_width_map = CreateKeyWeakMap();
        this._child_height_map = CreateKeyWeakMap();
        this._show_child_map = CreateKeyWeakMap();
    
        this._clip_up_index = 0;
        this._clip_down_index = 0;
    
        DisplayGroup.RemoveAllChild(this);
    }
    
    public fun SetChildIndex(DisplayObject child, int index) : bool
    {
        DisplayGroup.SetChildIndex(this, child, index);
        this.Layout(1);
        return true;
    }
    
    public set width(double value)
    {
        if (this._width == value) return;

        this._width = value;
        if (this._width_type == UIEnumTypes.SIZE_ABS)
            this._width_value = this._width;
        if (this._type != UIEnumTypes.TYPE_H && this._size_fixed)
        {
            for (var index, child in this._childs)
                child.width = value;
        }
    }
    public get width() : double
    {
        if (this._size_fixed)
        {
            if (this._type == UIEnumTypes.TYPE_H)
            {
                if (this._child_count == 0)
                    return 0;

                var child = this._childs[this._child_count];
                return child.x + child.width;
            }
            return this._width;
        }

        return DisplayGroup.max_right(this);
    }
    
    public set height(double value)
    {
        if (this._height == value) return;

        this._height = value;
        if (this._height_type == UIEnumTypes.SIZE_ABS)
            this._height_value = this._height;
        if (this._type != UIEnumTypes.TYPE_V && this._size_fixed)
        {
            for (var index, child in this._childs)
                child.height = value;
        }
    }
    public get height() : double
    {
        if (this._size_fixed)
        {
            if (this._type == UIEnumTypes.TYPE_V)
            {
                if (this._child_count == 0)
                    return 0;
                var child = this._childs[this._child_count];
                return child.y + child.height;
            }
            return this._height;
        }
        return DisplayGroup.max_bottom(this);
    }

    protected fun UpdateSize()
    {
        if (this._size_fixed)
        {
            if (this._type == UIEnumTypes.TYPE_H)
            {
                for (var k, v in this._child_width_map)
                {
                    k.width = v;
                    k.height = this._height;
                }
            }
            else
            {
                for (var k, v in this._child_height_map)
                {
                    k.width = this._width;
                    k.height = v;
                }
            }
        }
        else
        {
            for (var k, v in this._child_width_map)
                k.width = v;
            for (var k, v in this._child_height_map)
                k.height = v;
        }
    }

    protected fun Layout(int index)
    {
        this._clip_up_index = 0;
        this._clip_down_index = 0;

        var child_count = this.child_count;
        if (index <= 0 || index > child_count) return;
    
        if (this._type == UIEnumTypes.TYPE_H)
        {
            var offset = 0.0;
            if (index > 1)
                offset = this._childs[index - 1].x + this._childs[index - 1].width + this._gap;
            for (var i = index; i <= child_count; 1)
            {
                this._childs[i].x = offset;
                this._childs[i].y = 0;
                offset = offset + this._childs[i].width + this._gap;
            }
        }
        else
        {
            var offset = 0.0;
            if (index > 1)
                offset = this._childs[index - 1].y + this._childs[index - 1].height + this._gap;
            for (var i = index; i <= child_count; 1)
            {
                this._childs[i].y = offset;
                this._childs[i].x = 0;
                offset = offset + this._childs[i].height + this._gap;
            }
        }
    }

    protected fun DeepLayout()
    {
        this._clip_up_index = 0;
        this._clip_down_index = 0;

        var child_count = this.child_count;
        if (child_count == 0)
            return;
    
        if (this._type == UIEnumTypes.TYPE_H)
        {
            var offset = 0.0;
            for (var i = 1; i <= child_count; 1)
            {
                var child = this._childs[i];
                if (child.DeepLayout != null)
                    child.DeepLayout();
                child.x = offset;
                child.y = 0;
                offset = offset + child.width + this._gap;
            }
        }
        else
        {
            var offset = 0.0;
            for (var i = 1; i <= child_count; 1)
            {
                var child = this._childs[i];
                if (child.DeepLayout != null)
                    child.DeepLayout();
                child.y = offset;
                child.x = 0;
                offset = offset + child.height + this._gap;
            }
        }
    }

    protected fun HandleChildResize(UIResizeEvent event)
    {
        // 重新布局
        this.Layout(this.GetChildIndex(event.target));
        if (this._show_parent != null)
        {
            if (this._type == UIEnumTypes.TYPE_H)
                this._show_parent.UpdateXLayout(this);
            else
                this._show_parent.UpdateYLayout(this);
        }
        // 发送大小发生变化消息
        this.DispatchEvent(new UIResizeEvent());
    }
    
    public get max_right() : double
    {
        if (this._size_fixed) return this.width;
        return DisplayGroup.max_right(this);
    }
    
    public get max_bottom() : double
    {
        if (this._size_fixed) return this.height;
        return DisplayGroup.max_bottom(this);
    }
    
    public fun UpdateWidthLayout(DisplayObject child)
    {
        this.Layout(this.GetChildIndex(child));
    }
    public fun UpdateHeightLayout(DisplayObject child)
    {
        this.Layout(this.GetChildIndex(child));
    }

    protected fun ClipRect(double left, double top, double right, double bottom, double h_move, double v_move)
    {
        // 转换成本地坐标
        left = left - this._x;
        if (left < 0)
            left = 0;
        top -= this._y;
        if (top < 0)
            top = 0;
        right -= this._x;
        if (right > this.width)
            right = this.width;
        bottom -= this._y;
        if (bottom > this.height)
            bottom = this.height;
    
        // 如果自己都超出可视范围，那么就直接裁剪掉
        if (left >= right || top >= bottom)
        {
            this.clip = true;
            return;
        }
        this.clip = false;

        var child_count = this.child_count;
        if (child_count == 0)
            return;
        var childs = this.childs;

        var new_show_map:Map<DisplayObject, bool> = CreateKeyWeakMap();
        this._show.RemoveAllChild(); // 移除所有显示列表
        var max_index = child_count;
        var min_index = 1;
        var index = min_index;
        // 处理水平
        if (this._type == UIEnumTypes.TYPE_H)
        {
            if (h_move == null || this._clip_up_index == 0)
            {
                do
                {
                    if (childs[index].x > left)
                    {
                        max_index = index;
                        index = __ceil((max_index + min_index) / 2);
                    }
                    elseif (childs[index].x + childs[index].width < left)
                    {
                        min_index = index;
                        index = __ceil((max_index + min_index) / 2);
                    }
                    else
                    {
                        break;
                    }
                }
                while (index != min_index && index != max_index);
            }
            else
            {
                index = this._clip_up_index;
                if (h_move < 0)
                {
                    while (index < max_index)
                    {
                        if (childs[index].x + childs[index].width >= left)
                            break;
                        ++ index;
                    }
                }
                elseif (h_move > 0)
                {
                    while (index > min_index)
                    {
                        if (childs[index].x <= left)
                            break;
                        -- index;
                    }
                }
            }

            this._clip_up_index = index;
            for (var i = index; i <= child_count; 1)
            {
                if (childs[i].x < right)
                {
                    this._show.AddChild(childs[i]._show);
                    new_show_map[childs[i]] = true;
                    childs[i].ClipRect(left, top, right, bottom, h_move, v_move);
                    this._clip_down_index = i;
                }
                else
                {
                    break;
                }
            }
        }
        // 处理垂直
        else
        {
            if (v_move == null || this._clip_up_index == 0)
            {
                do
                {
                    if (childs[index].y > top)
                    {
                        max_index = index;
                        index = __ceil((max_index + min_index) / 2);
                    }
                    elseif (childs[index].y + childs[index].height < top)
                    {
                        min_index = index;
                        index = __ceil((max_index + min_index) / 2);
                    }
                    else
                    {
                        break;
                    }
                }
                while (index != min_index && index != max_index);
            }
            else
            {
                index = this._clip_up_index;
                if (v_move < 0)
                {
                    while (index < max_index)
                    {
                        if (childs[index].y + childs[index].height >= top)
                            break;
                        ++ index;
                    }
                }
                elseif (v_move > 0)
                {
                    while (index > min_index)
                    {
                        if (childs[index].y <= top)
                            break;
                        -- index;
                    }
                }
            }
    
            this._clip_up_index = index;
            for (var i = index; i <= child_count; 1)
            {
                if (childs[i].y < bottom)
                {
                    this._show.AddChild(childs[i]._show);
                    new_show_map[childs[i]] = true;
                    childs[i].ClipRect(left, top, right, bottom, h_move, v_move);
                    this._clip_down_index = i;
                }
                else
                {
                    break;
                }
            }
        }
    
        // 通知所有显示的控件
        for (var child, v in new_show_map)
        {
            if (this._show_child_map[child] == null)
                child.DispatchEvent(new UIShowEvent());
            else
                this._show_child_map[child] = null;
        }
        // 通知所有隐藏的控件
        for (var child, v in this._show_child_map)
            child.DispatchEvent(new UIHideEvent());
        this._show_child_map = new_show_map;
    }
}