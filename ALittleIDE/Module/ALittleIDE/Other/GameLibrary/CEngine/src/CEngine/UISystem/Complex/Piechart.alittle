
namespace ALittle;

public class Piechart : DisplayLayout
{
    private double _start_degree;
    private double _end_degree;
    private string _pie_texture_name;

    private List<Triangle> _tri_list;
    
    public ctor(ControlSystem ctrl_sys)
    {
    	this._start_degree = 0;  	// 起始度数
    	this._end_degree = 0; 		// 结束度数
    
    	// 创建子控件
    	this._tri_list = new List<Triangle>();
    	for (var i = 1; i <= 5; 1)
    	{
			var triangle = new Triangle(this._ctrl_sys);
    		triangle.u2 = 0.5;
    		triangle.v2 = 0.5;
    		triangle.width_type = UIEnumTypes.SIZE_MARGIN;
    		triangle.width_value = 0;
    		triangle.height_type = UIEnumTypes.SIZE_MARGIN;
    		triangle.height_value = 0;
    		this._tri_list[i] = triangle;
    		DisplayLayout.AddChild(this, triangle);
    	}
    
    	// 默认显示全图
    	this._start_degree = 0;
    	this._end_degree = 360;
    	this.SetDegree(0, 360);
    	this._pie_texture_name = null; // 饼图纹理
    }
    
    // 起始度数
    public set start_degree(double value)
    {
		var tmp = value % 360; // 对输入的度数取余
    	if (tmp < 0) tmp += 360;
    	if (tmp == 0 && value / 360 != 0) tmp = 360; // 对度数360作特殊处理
    	this._start_degree = tmp;
    	this.SetDegree(tmp, this._end_degree);
    }
    public get start_degree() : double
    {
    	return this._start_degree;
    }
    
    // 结束度数
    public set end_degree(double value)
    {
		var tmp = value % 360; // 对输入的度数取余
    	if (tmp < 0) tmp += 360;
    	if (tmp == 0 && value / 360 != 0) tmp = 360; // 对度数360作特殊处理
    	this._end_degree = tmp;
    	this.SetDegree(this._start_degree, tmp);
    }
    // 结束度数
    public get end_degree() : double
    {
    	return this._end_degree;
    }
    
    // 设置控件的Red颜色
    public set red(double value)
    {
    	if (this.red == value) return;
    	this.red = value;
    	for (var i = 1; i <= 5; 1)
    		this._tri_list[i].red = value;
    }
    // 设置控件的Green颜色
    public set green(double value)
    {
    	if (this.green == value) return;
    	this.green = value;
    	for (var i = 1; i <= 5; 1)
    		this._tri_list[i].green = value;
    }
    // 设置控件的RGB颜色
    public set blue(double value)
    {
    	if (this.blue == value) return;
    	this.blue = value;
    	for (var i = 1; i <= 5; 1)
    		this._tri_list[i].blue = value;
    }

    // 重载width
    public set width(double value)
    {
    	if (value == this._width) return;

    	this._width = value;
    	if (this._width_type == UIEnumTypes.SIZE_ABS) this._width_value = this._width;
    
    	for (var k, v in this._tri_list)
    	{
    	    // 宽发生变化，需重新设置各个三角形点x的位置
    	    v.x1 = v.u1 * value;
    	    v.x2 = v.u2 * value;
    	    v.x3 = v.u3 * value;

    		this.UpdateWidthLayout(v);
    		this.UpdateXLayout(v);
    	}

    	this._show.SetWidth(value);
    }
    
    // 重载height
    public set height(double value)
    {
    	if (value == this._height) return;

    	this._height = value;
    	if (this._height_type == UIEnumTypes.SIZE_ABS) this._height_value = this._height;
    
    	for (var k, v in this._tri_list)
    	{
    	    // 高发生变化，需重新设置各个三角形点y的位置
    	    v.y1 = v.v1 * value;
            v.y2 = v.v2 * value;
            v.y3 = v.v3 * value;
    		this.UpdateHeightLayout(v);
    		this.UpdateYLayout(v);
    	}
    	this._show.SetHeight(value);
    }
    
    // 设置饼图的纹理
    public set texture_name(string value)
    {
    	if (this._pie_texture_name == value) return;
    	this._pie_texture_name = value;

    	for (var k, v in this._tri_list)
    		v.texture_name = value;
    }
    public get texture_name() : string
    {
    	return this._pie_texture_name;
    }
    
    // 根据度数设置各个三角形
    public fun SetDegree(double start_c, double end_c)
    {
    	if (end_c <= start_c) return; // 结束度数需大于起始度数
    	// 把所有三角形隐藏
		var width = this.width;
		var height = this.height;

    	for (var k, v in this._tri_list)
    		v.visible = false;

		var e_offset = 0.0; // 结束度数u、v的偏移量（0~1）
		var s_offset = 0.0; // 开始度数u、v的偏移量（0~1）
    	if (end_c >= 0 && end_c <= 45)
    	{
    		s_offset = (45 - start_c) / 90;  				// 0 <= end_c <= 45, 0 <= start_c <= 45
    		e_offset = (45 - end_c) / 90;
    		this.SetTriangleUV(this._tri_list[1], 1, e_offset, 1, s_offset);
    		this.SetTriangleXY(this._tri_list[1], width, e_offset*height, width, s_offset*height);
    	}
    	elseif (end_c <= 135)
    	{
    		e_offset = (135 - end_c) / 90;
    		if (start_c < 45) 						// 45 < end_c <= 135, 0 <= start_c < 45
    		{
    			s_offset = (45 - start_c) / 90;
    			this.SetTriangleUV(this._tri_list[1], 1, 0, 1, s_offset);
    			this.SetTriangleXY(this._tri_list[1], width, 0, width, s_offset*height);
    			this.SetTriangleUV(this._tri_list[2], e_offset, 0, this._tri_list[1].u1, this._tri_list[1].v1);
    			this.SetTriangleXY(this._tri_list[2], e_offset*width, 0, this._tri_list[1].x1, this._tri_list[1].y1);
    		}
    		else 										// 45 < end_c <= 135, 45 <= start_c < 135
    		{
    			e_offset = (135 - end_c) / 90;
    			s_offset = (135 - start_c) / 90;
    			this.SetTriangleUV(this._tri_list[2], e_offset, 0, s_offset, 0);
    			this.SetTriangleXY(this._tri_list[2], e_offset*width, 0, s_offset*width, 0);
    		}
    	}
    	elseif (end_c <= 225)
    	{
    		e_offset = (end_c - 135) / 90;
    		if (start_c < 45) 						// 135 < end_c <= 225, 0 <= start_c < 45
    		{
    			s_offset = (45 - start_c) / 90;
    			this.SetTriangleUV(this._tri_list[1], 1, 0, 1, s_offset);
    			this.SetTriangleXY(this._tri_list[1], width, 0, width, s_offset*height);
    			this.SetTriangleUV(this._tri_list[2], 0, 0, this._tri_list[1].u1, this._tri_list[1].v1);
    			this.SetTriangleXY(this._tri_list[2], 0, 0, this._tri_list[1].x1, this._tri_list[1].y1);
    			this.SetTriangleUV(this._tri_list[3], this._tri_list[2].u1, this._tri_list[2].v1, 0, e_offset);
    			this.SetTriangleXY(this._tri_list[3], this._tri_list[2].x1, this._tri_list[2].y1, 0, e_offset*height);
    		}
    		elseif (start_c < 135) 					// 135 < end_c <= 225, 45 <= start_c < 135
    		{
    			s_offset = (135 - start_c) / 90;
    			this.SetTriangleUV(this._tri_list[2], 0, 0, s_offset, 0);
    			this.SetTriangleXY(this._tri_list[2], 0, 0, s_offset*width, 0);
    			this.SetTriangleUV(this._tri_list[3], this._tri_list[2].u1, this._tri_list[2].v1, 0, e_offset);
    			this.SetTriangleXY(this._tri_list[3], this._tri_list[2].x1, this._tri_list[2].y1, 0, e_offset*height);
    		}
    		else 										// 135 < end_c <= 225, 135 <= start_c < 225
    		{
    			s_offset = (start_c - 135) / 90;
    			this.SetTriangleUV(this._tri_list[3], 0, s_offset, 0, e_offset);
    			this.SetTriangleXY(this._tri_list[3], 0, s_offset*height, 0, e_offset*height);
    		}
    	}
    	elseif (end_c <= 315)
    	{
    		e_offset = (end_c - 225) / 90;
    		if (start_c < 45) 						// 225 < end_c <= 315, 0 <= start_c < 45
    		{
    			s_offset = (45 - start_c) / 90;
    			this.SetTriangleUV(this._tri_list[1], 1, 0, 1, s_offset);
    			this.SetTriangleXY(this._tri_list[1], width, 0, width, s_offset*height);
    			this.SetTriangleUV(this._tri_list[2], 0, 0, this._tri_list[1].u1, this._tri_list[1].v1);
    			this.SetTriangleXY(this._tri_list[2], 0, 0, this._tri_list[1].x1, this._tri_list[1].y1);
    			this.SetTriangleUV(this._tri_list[3], this._tri_list[2].u1, this._tri_list[2].v1, 0, 1);
    			this.SetTriangleXY(this._tri_list[3], this._tri_list[2].x1, this._tri_list[2].y1, 0, height);
    			this.SetTriangleUV(this._tri_list[4], this._tri_list[3].u3, this._tri_list[3].v3, e_offset, 1);
    			this.SetTriangleXY(this._tri_list[4], this._tri_list[3].x3, this._tri_list[3].y3, e_offset*width, height);
    		}
    		elseif (start_c < 135) 					// 225 < end_c <= 315, 45 <= start_c < 135
    		{
    			s_offset = (135 - start_c) / 90;
    			this.SetTriangleUV(this._tri_list[2], 0, 0, s_offset, 0);
    			this.SetTriangleXY(this._tri_list[2], 0, 0, s_offset*width, 0);
    			this.SetTriangleUV(this._tri_list[3], this._tri_list[2].u1, this._tri_list[2].v1, 0, 1);
    			this.SetTriangleXY(this._tri_list[3], this._tri_list[2].x1, this._tri_list[2].y1, 0, height);
    			this.SetTriangleUV(this._tri_list[4], this._tri_list[3].u3, this._tri_list[3].v3, e_offset, 1);
    			this.SetTriangleXY(this._tri_list[4], this._tri_list[3].x3, this._tri_list[3].y3, e_offset*width, height);
    		}
    		elseif (start_c < 225) 					// 225 < end_c <= 315, 135 <= start_c < 225
    		{
    			s_offset = (start_c - 135) / 90;
    			this.SetTriangleUV(this._tri_list[3], 0, s_offset, 0, 1);
    			this.SetTriangleXY(this._tri_list[3], 0, s_offset*height, 0, height);
    			this.SetTriangleUV(this._tri_list[4], this._tri_list[3].u3, this._tri_list[3].v3, e_offset, 1);
    			this.SetTriangleXY(this._tri_list[4], this._tri_list[3].x3, this._tri_list[3].y3, e_offset*width, height);
    		}
    		else 										 // 225 < end_c <= 315, 225 <= start_c < 315
    		{
    			s_offset = (start_c - 225) / 90;
    			this.SetTriangleUV(this._tri_list[4], s_offset, 1, e_offset, 1);
    			this.SetTriangleXY(this._tri_list[4], s_offset*width, height, e_offset*width, height);
    		}
    	}
    	else
    	{
    	 	e_offset = (405 - end_c) / 90;
    	 	if (start_c < 45) 						 // 315 < end_c <= 360, 0 <= start_c < 45
    	 	{
    			s_offset = (45 - start_c) / 90;
    			this.SetTriangleUV(this._tri_list[1], 1, 0, 1, s_offset);
    			this.SetTriangleXY(this._tri_list[1], width, 0, width, s_offset*height);
    			this.SetTriangleUV(this._tri_list[2], 0, 0, this._tri_list[1].u1, this._tri_list[1].v1);
    			this.SetTriangleXY(this._tri_list[2], 0, 0, this._tri_list[1].x1, this._tri_list[1].y1);
    			this.SetTriangleUV(this._tri_list[3], this._tri_list[2].u1, this._tri_list[2].v1, 0, 1);
    			this.SetTriangleXY(this._tri_list[3], this._tri_list[2].x1, this._tri_list[2].y1, 0, height);
    			this.SetTriangleUV(this._tri_list[4], this._tri_list[3].u3, this._tri_list[3].v3, 1, 1);
    			this.SetTriangleXY(this._tri_list[4], this._tri_list[3].x3, this._tri_list[3].y3, width, height);
    			this.SetTriangleUV(this._tri_list[5], 1, e_offset, this._tri_list[4].u3, this._tri_list[4].v3);
    			this.SetTriangleXY(this._tri_list[5], width, e_offset*height, this._tri_list[4].x3, this._tri_list[4].y3);
    		}
    	 	elseif (start_c < 135)  						// 315 < end_c <= 360, 45 <= start_c < 135
    		{
    			s_offset = (135 - start_c) / 90;
    			this.SetTriangleUV(this._tri_list[2], 0, 0, s_offset, 0);
    			this.SetTriangleXY(this._tri_list[2], 0, 0, s_offset*width, 0);
    			this.SetTriangleUV(this._tri_list[3], this._tri_list[2].u1, this._tri_list[2].v1, 0, 1);
    			this.SetTriangleXY(this._tri_list[3], this._tri_list[2].x1, this._tri_list[2].y1, 0, height);
    			this.SetTriangleUV(this._tri_list[4], this._tri_list[3].u3, this._tri_list[3].v3, 1, 1);
    			this.SetTriangleXY(this._tri_list[4], this._tri_list[3].x3, this._tri_list[3].y3, width, height);
    			this.SetTriangleUV(this._tri_list[1], 1, e_offset, this._tri_list[4].u3, this._tri_list[4].v3);
    			this.SetTriangleXY(this._tri_list[1], width, e_offset*height, this._tri_list[4].x3, this._tri_list[4].y3);
    		}
    		elseif (start_c < 225) 						 // 315 < end_c <= 360, 135 <= start_c < 225
    		{
    			s_offset = (start_c - 135) / 90;
    			this.SetTriangleUV(this._tri_list[3], 0, s_offset, 0, 1);
    			this.SetTriangleXY(this._tri_list[3], 0, s_offset*height, 0, height);
    			this.SetTriangleUV(this._tri_list[4], this._tri_list[3].u3, this._tri_list[3].v3, 1, 1);
    			this.SetTriangleXY(this._tri_list[4], this._tri_list[3].x3, this._tri_list[3].y3, width, height);
    			this.SetTriangleUV(this._tri_list[1], 1, e_offset, this._tri_list[4].u3, this._tri_list[4].v3);
    			this.SetTriangleXY(this._tri_list[1], width, e_offset*height, this._tri_list[4].x3, this._tri_list[4].y3);
    		}
    		elseif (start_c < 315)  						// 315 < end_c <= 360, 225 <= start_c < 315
    		{
    			s_offset = (start_c - 225) / 90;
    			this.SetTriangleUV(this._tri_list[4], s_offset, 1, 1, 1);
    			this.SetTriangleXY(this._tri_list[4], s_offset*width, height, width, height);
    			this.SetTriangleUV(this._tri_list[1], 1, e_offset, this._tri_list[4].u3, this._tri_list[4].v3);
    			this.SetTriangleXY(this._tri_list[1], width, e_offset*height, this._tri_list[4].x3, this._tri_list[4].y3);
    		}
    		else 										  // 315 < end_c <= 360, 315 <= start_c < 360
    		{
    			s_offset = (405 - start_c) / 90;
    			this.SetTriangleUV(this._tri_list[1], 1, e_offset, 1, s_offset);
    			this.SetTriangleXY(this._tri_list[1], width, e_offset*height, width, s_offset*height);
    		}
    	}
    }
    
    public fun SetTriangleXY(Triangle tri, double x1, double y1, double x3, double y3)
    {
    	tri.x1 = x1;
    	tri.y1 = y1;
    	tri.x3 = x3;
    	tri.y3 = y3;
    	tri.visible = true;
    }
    
    // 设置对应三角形的属性
    public fun SetTriangleUV(Triangle tri, double u1, double v1, double u3, double v3)
    {
    	tri.u1 = u1;
    	tri.v1 = v1;
    	tri.u3 = u3;
    	tri.v3 = v3;
    }
}