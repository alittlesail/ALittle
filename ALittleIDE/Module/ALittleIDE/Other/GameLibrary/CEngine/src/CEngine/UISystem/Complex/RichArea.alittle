
namespace ALittle;

private var __find = String_Find;
private var __sub = String_Sub;
private var __floor = Math_Floor;

struct RichAreaLineInfo
{
    List<DisplayObject> childs;        // 子控件列表
    int child_count;    // 子控件个数
    double height;        // 最大高度，初始化为换行的高度
    double width;            // 子控件宽度的总和
}

public class RichArea : DisplayLayout
{
    public fun SplitText(DisplayInfo char_info, List<DisplayInfo> char_info_list, int char_info_list_count) : int
    {
        var text = char_info.text;
    
        while (true)
        {
            var start_index_1 = __find(text, "\n");
            var start_index_2 = __find(text, "\t");
            if (start_index_1 != null && start_index_2 != null)
            {
                if (start_index_1 < start_index_2)
                    start_index_2 = null;
                else
                    start_index_1 = null;
            }
            if (start_index_1 != null)
            {
                var new_char_info = String_CopyTable(char_info);
                new_char_info.text = __sub(text, 1, start_index_1 - 1);
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = new_char_info;
                new_char_info = String_CopyTable(char_info);
                new_char_info.text = "\n";
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = new_char_info;
                text = __sub(text, start_index_1 + 1);
            }
            elseif (start_index_2 != null)
            {
                var new_char_info = String_CopyTable(char_info);
                new_char_info.text = __sub(text, 1, start_index_2 - 1);
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = new_char_info;
                new_char_info = String_CopyTable(char_info);
                new_char_info.text = "\t";
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = new_char_info;
                text = __sub(text, start_index_2 + 1);
            }
            else
            {
                if (text != "")
                {
                    var new_char_info = String_CopyTable(char_info);
                    new_char_info.text = text;
                    ++ char_info_list_count;
                    char_info_list[char_info_list_count] = new_char_info;
                }
                break;
            }
        }

        return char_info_list_count;
    }
    
    private int _enter_key_height;
    private int _line_spacing;
    private int _halign;
    private int _valign;
    private List<DisplayInfo> _display_list;
    private List<RichAreaLineInfo> _line_list;
    private int _line_count;
    private double _real_height;
    private Map<string, DisplayObject> _link_map;
    private int _max_line_count;
    
    public ctor(ControlSystem ctrl_sys)
    {
        this._enter_key_height = 20;                // 默认回车高度
        this._line_spacing = 0;                    // 每行之间的间隔
        this._halign = UIEnumTypes.HALIGN_LEFT;    // 水平对齐方式
        this._valign = UIEnumTypes.VALIGN_TOP;    // 垂直对齐方式
        this._display_list = null;                // 输入显示控件列表
        this._line_list = new List<RichAreaLineInfo>();                    // 行控件列表
        this._line_count = 0;
        this._real_height = 0;                    // 内容的真实高度
        this._link_map = CreateValueWeakMap();                        // 内部控件绑定的逻辑对象
        this._max_line_count = 0;                // 最大的行数，表示不限制
    }
    
    // 获取内部控件的逻辑对象
    public get link_map() : Map<string, DisplayObject>
    {
        return this._link_map;
    }
    
    // 清空link_map
    public fun ClearLinkMap()
    {
        this._link_map = CreateValueWeakMap();                        // 内部控件绑定的逻辑对象
    }
    
    // 设置宽度
    public set width(double value)
    {
        if (this.width == value) return;

        DisplayLayout.width(this, value);
        this.Refresh();
    }
    
    // 设置显示控件列表
    public set display_list(List<DisplayInfo> value)
    {
        this._display_list = value;
        this.Refresh();
    }
    
    public get display_list() : List<DisplayInfo>
    {
        return this._display_list;
    }
    
    // 设置水平对齐
    public set halign(int value)
    {
        if (this._halign == value)
            return;
        this._halign = value;
        this.RefreshX();
    }
    public get halign() : int
    {
        return this._halign;
    }
    
    // 设置垂直对齐
    public set valign(int value)
    {
        if (this._valign == value)
            return;
        this._valign = value;
        this.RefreshY();
    }
    public get valign() : int
    {
        return this._valign;
    }
    
    // 获取行的数量
    public get lin_count() : int
    {
        return this._line_count;
    }
    
    // 获取最大的行数量
    public get max_line_count() : int
    {
        return this._max_line_count;
    }
    
    // 设置最大的行数量
    public set max_line_count(int value)
    {
        if (this._max_line_count == value)
            return;
        this._max_line_count = value;
        this.Refresh();
    }
    
    // 根据行的获取宽度
    public fun GetLineWidth(int line_index) : double
    {
        var count = this._line_count;
        if (line_index < 1 || line_index > count) return 0;
        var line = this._line_list[line_index];
        return line.width;
    }
    
    // 获取真实高度
    public get real_height() : double
    {
        return this._real_height;
    }
    
    // 设置行间距
    public set line_spacing(int line_spacing)
    {
        if (this._line_spacing == line_spacing)
            return;
        this._line_spacing = line_spacing;
        this.RefreshY();
    }
    public get line_spacing() : int
    {
        return this._line_spacing;
    }

    protected fun Refresh()
    {
        // 移除掉所有控件
        this.RemoveAllChild();
        // 清空所有行信息
        this._line_list = new List<RichAreaLineInfo>();
        this._line_count = 0;
        // 如果宽度为0，那么直接返回
        var total_width = this.width;
        if (total_width == 0)
            return;
        // 如果显示列表啥都没有，那么直接返回
        if (this._display_list == null)
            return;
    
        // 遍历display_list，遇到text的，按照\n,\t来拆分
        var display_list = new List<DisplayInfo>();
        var display_list_count = 0;
        for (var index, display_info in this._display_list)
        {
            if (display_info.__class == "Text")
                display_list_count = this.SplitText(display_info, display_list, display_list_count);
            else
            {
                ++display_list_count;
                display_list[display_list_count] = display_info;
            }
        }

        var line_info:RichAreaLineInfo = null;        // 当前行控件列表的索引
        var display_info:DisplayInfo = null;    // 当前正在处理的信息
        var display_object:DisplayObject = null;    // 当前正在处理的对象
        var display_index = 1;    // 输入列表的索引
        var remain_width = total_width; // 当前行剩余宽度
    
        while (true)
        {
            // 获取下一个列表信息
            if (display_info == null)
            {
                display_info = display_list[display_index];
                if (display_info == null)
                    break;
            }
    
            // 初始化行信息
            if (line_info == null)
            {
                // 如果有设置最大的行数，那么就判断一下，如果超过了就直接跳过
                if (this._max_line_count > 0 && this._line_count >= this._max_line_count)
                    break;

                line_info = new RichAreaLineInfo();
                line_info.childs = new List<DisplayObject>();        // 子控件列表
                line_info.child_count = 0;    // 子控件个数
                line_info.height = 0;        // 最大高度，初始化为换行的高度
                line_info.width = 0;            // 子控件宽度的总和
            }
    
            // 判断类型
            if (display_info.__class == "Text")
            {
                // 处理换行
                if (display_info.text == "\n")
                {
                    // 调整最大高度
                    if (line_info.height < this._enter_key_height)
                        line_info.height = this._enter_key_height;
                    // 添加到行列表中
                    ++ this._line_count;
                    this._line_list[this._line_count] = line_info;
                    // 置空当前行
                    line_info = null;
                    // 置空当前正在处理的信息
                    display_info = null;
                    display_object = null;
                    // 下表向后移动
                    ++ display_index;
                    // 初始化最大宽度
                    remain_width = total_width;
                }
                elseif (display_info.text == "\t")
                {
                    // 创建控件
                    if (display_object == null)
                    {
                        var name = "nkacbjbsakcvuqocbakcbjcbvjhciqwojqppwvnwe";
                        this._ctrl_sys.RegisterInfo(name, String_CopyTable(display_info));
                        display_object = this._ctrl_sys.CreateControl{ALittle.DisplayObject}(name, this._link_map);
                        this._ctrl_sys.UnRegisterInfo(name);
                        display_object.text = "    "; // 用四个空格代替\t
                    }

                    var object_width = display_object.width;
                    var object_height = display_object.height;
                    // 如果可以放进去，就放进去
                    if (remain_width >= object_width)
                    {
                        // 添加到行列表
                        ++ line_info.child_count;
                        line_info.childs[line_info.child_count] = display_object;
                        // 添加到自己
                        this.AddChild(display_object);
                        line_info.width = line_info.width + object_width;
                        // 调整最大高度
                        if (line_info.height < object_height)
                            line_info.height = object_height;
                        // 计算剩余宽度
                        remain_width = remain_width - object_width;
                        if (remain_width <= 0)
                        {
                            // 添加到行列表中
                            ++ this._line_count;
                            this._line_list[this._line_count] = line_info;
                            // 另起一行
                            line_info = null;
                            // 初始化最大宽度
                            remain_width = total_width;
                        }
                        // 清空处理后的对象
                        display_object = null;
                        display_info = null;
                        // 指向下一个下标
                        ++ display_index;
                    }
                    // 如果放不进去，那就开始切文本
                    else
                    {
                        // 计算最多可以当多少字节的文本
                        var count = display_object._show.CutTextByWidth(__floor(remain_width), display_info.text, __floor(total_width));
                        // 字节大于0，说明要开始切文本
                        if (count > 0)
                        {
                            // 设置裁剪后的值
                            display_object.text = __sub(display_info.text, 1, count);
                            // 创建新的显示信息
                            var new_display_info = String_CopyTable(display_info);
                            new_display_info.text = __sub(display_info.text, count + 1);
                            // 添加到行列表
                            ++ line_info.child_count;
                            line_info.childs[line_info.child_count] = display_object;
                            // 添加到自己
                            this.AddChild(display_object);
                            line_info.width = line_info.width + display_object.width;
                            // 调整最大高度
                            if (line_info.height < object_height)
                                line_info.height = object_height;
                            // 添加到行列表中
                            ++ this._line_count;
                            this._line_list[this._line_count] = line_info;
                            // 另起一行
                            line_info = null;
                            // 初始化最大宽度
                            remain_width = total_width;
                            // 清空处理后的对象
                            display_object = null;
                            display_info = new_display_info;
                            // 指向下一个下标
                            // display_index = display_index + 1
                        }
                        // 需要另起一行
                        else
                        {
                            // 添加到行列表中
                            ++ this._line_count;
                            this._line_list[this._line_count] = line_info;
                            // 另起一行
                            line_info = null;
                            // 初始化最大宽度
                            remain_width = total_width;
                        }
                    }
                }
                // 处理文本
                else
                {
                    // 创建控件
                    if (display_info.text == "")
                    {
                        display_info = null;
                        ++ display_index;
                    }
                    else
                    {
                        // 创建控件
                        if (display_object == null)
                        {
                            var name = "nkacbjbsakcvuqocbakcbjcbvjhciqwojqppwvnwe";
                            this._ctrl_sys.RegisterInfo(name, String_CopyTable(display_info));
                            display_object = this._ctrl_sys.CreateControl{ALittle.DisplayObject}(name, this._link_map);
                            this._ctrl_sys.UnRegisterInfo(name);
                        }

                        var object_width = display_object.width;
                        var object_height = display_object.height;
                        // 计算最多可以当多少字节的文本
                        var count = display_object._show.CutTextByWidth(__floor(remain_width), display_info.text, __floor(total_width));
                        // 不够塞一个字，且本行无控件的情况下，要塞一个字进去
                        if (count == 0 && line_info.child_count == 0)
                            count = String_GetByteCount(display_info.text, 1);

                        // 字节大于0，说明要开始切文本
                        if (count == 0)
                            remain_width = 0;
                        else
                        {
                            // 设置裁剪后的值
                            display_object.text = __sub(display_info.text, 1, count);
                            // 创建新的显示信息
                            var new_display_info = String_CopyTable(display_info);
                            new_display_info.text = __sub(display_info.text, count + 1);
                            // 添加到行列表
                            ++ line_info.child_count;
                            line_info.childs[line_info.child_count] = display_object;
                            // 添加到自己
                            this.AddChild(display_object);
                            // 子控件个数加1
                            line_info.width = line_info.width + display_object.width;
                            // 调整最大高度
                            if (line_info.height < object_height)
                                line_info.height = object_height;
                            // 初始化最大宽度
                            remain_width = remain_width - display_object.width;
                            // 清空处理后的对象
                            display_object = null;
                            display_info = new_display_info;
                            // 指向下一个下标
                            // display_index = display_index + 1
                            // 需要另起一行
                        }

                        if (remain_width <= 0)
                        {
                            // 添加到行列表中
                            ++ this._line_count;
                            this._line_list[this._line_count] = line_info;
                            // 另起一行
                            line_info = null;
                            // 初始化最大宽度
                            remain_width = total_width;
                        }
                    }
                }
            }
            else
            {
                // 创建控件
                if (display_object == null)
                {
                    var name = "nkacbjbsakcvuqocbakcbjcbvjhciqwojqppwvnwe";
                    this._ctrl_sys.RegisterInfo(name, String_CopyTable(display_info));
                    display_object = this._ctrl_sys.CreateControl{ALittle.DisplayObject}(name, this._link_map);
                    this._ctrl_sys.UnRegisterInfo(name);
                }
    
                // 计算大小，处理换行
                var object_width = display_object.width;
                var object_height = display_object.height;
                if (remain_width >= object_width || (line_info.child_count == 0 && total_width <= object_width))
                {
                    // 添加到行列表
                    ++ line_info.child_count;
                    line_info.childs[line_info.child_count] = display_object;
                    // 添加到自己
                    this.AddChild(display_object);
                    // 子控件个数加1
                    line_info.width = line_info.width + display_object.width;
                    // 调整最大高度
                    if (line_info.height < object_height)
                        line_info.height = object_height;
                    // 计算剩余宽度
                    remain_width = remain_width - object_width;
                    if (remain_width <= 0)
                    {
                        // 添加到行列表中
                        ++ this._line_count;
                        this._line_list[this._line_count] = line_info;
                        // 另起一行
                        line_info = null;
                        // 初始化最大宽度
                        remain_width = total_width;
                    }
                    // 清空处理后的对象
                    display_object = null;
                    display_info = null;
                    // 指向下一个下标
                    ++ display_index;
                }
                else
                {
                    // 添加到行列表中
                    ++ this._line_count;
                    this._line_list[this._line_count] = line_info;
                    // 另起一行
                    line_info = null;
                    // 初始化最大宽度
                    remain_width = total_width;
                }
            }
        }
        // 如果还有行没有处理，那么就直接添加到列表中
        if (line_info != null)
        {
            ++ this._line_count;
            this._line_list[this._line_count] = line_info;
        }
    
        this.RefreshX();
        this.RefreshY();
    }

    protected fun RefreshX()
    {
        if (this._line_list == null)
            return;
        for (var k, line in this._line_list)
        {
            var offset_x = 0.0;
            if (this._halign == UIEnumTypes.HALIGN_CENTER)
                offset_x = (this.width - line.width) / 2;
            elseif (this._halign == UIEnumTypes.HALIGN_RIGHT)
                offset_x = this.width - line.width;

            for (var index, child in line.childs)
            {
                child.x = offset_x;
                offset_x = offset_x + child.width;
            }
        }
    }

    protected fun RefreshY()
    {
        if (this._line_list == null)
            return;
    
        this._real_height = 0;
        var line_count = 0;
        for (var k, line in this._line_list)
        {
            this._real_height = this._real_height + line.height;
            ++ line_count;
        }
        this._real_height = this._real_height + (line_count - 1) * this._line_spacing;

        var offset_y = 0.0;
        if (this._valign == UIEnumTypes.VALIGN_CENTER)
            offset_y = (this.height - this._real_height) / 2;
        elseif (this._valign == UIEnumTypes.VALIGN_BOTTOM)
            offset_y = this.height - this._real_height;
    
        for (var k, line in this._line_list)
        {
            for (var index, child in line.childs)
                child.y = line.height - child.height + offset_y;
            offset_y = offset_y + line.height + this._line_spacing;
        }
    }
}