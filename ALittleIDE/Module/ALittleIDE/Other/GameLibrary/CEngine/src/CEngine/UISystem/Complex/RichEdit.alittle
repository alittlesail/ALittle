
//[[ RichEdit为图文输入控件，插入矩形控件时调用RichEdit:AddImage(table_image),
//	var table = {}
//	table.__class = "Image"
//	table.texture_name = "xxx"
//	....
//	RichEdit:AddImage(table)
//	获取当前控件内部数据调用RichEdit:GetDisplayList()
//]]

namespace ALittle;

private var __byte = String_Byte;
private var __sub = String_Sub;
private var __find = String_Find;
private var __floor = Math_Floor;
private var __len = String_Len;
private var __abs = Math_Abs;
private var __type = String_Type;

struct RichEditCharInfo
{
    double acc_width;
    double pre_width;
    DisplayInfo text_info;
    Text text_object;
    string text;
    DisplayInfo ctrl_info;
    DisplayObject ctrl;
}

struct RichEditLineInfo
{
    List<RichEditCharInfo> char_list;
    int char_count;
    List<DisplayObject> child_list;
    int child_count;
    DisplayLayout container;
    double acc_height;
    double pre_height;
    bool force_line;
}

public struct RichEditFontChangedEvent : UIEvent {}
public struct RichEditCursorClickEvent : UIEvent {}
public struct RichEditMultiDragBeginEvent : UIEvent {}
public struct RichEditMultiDragEvent : UIEvent {}
public struct RichEditMultiDragEndEvent : UIEvent {}

public struct UIRichEditLongClickEvent : UIEvent
{
    double abs_x;
    double abs_y;
    double rel_x;
    double rel_y;
}

public class RichEdit : DisplayLayout
{
    //内部使用的函数，不能再外面使用////////////////////////////////////////////////////////////////-
    // 判断一个字符是否是数字
    protected fun CharIsNumber(string str) : bool
    {
        var c = __byte(str, 1);
        return c >= 48 && c <= 57;
    }
    
    // 判断一个字符是否是字母
    protected fun CharIsLetter(string str) : bool
    {
        var c = __byte(str, 1);
        return c >= 65 && c <= 90 || c >= 97 && c <= 122;
    }

    protected fun CompareTextInfo(DisplayInfo a, DisplayInfo b) : bool
    {
        if (a.font_path != b.font_path)
            return false;
            
        if (a.font_size != b.font_size)
            return false;
            
        if (a.red != b.red)
            return false;
            
        if (a.green != b.green)
            return false;
            
        if (a.blue != b.blue)
            return false;
    
        if (a.bold != b.bold)
            return false;
            
        if (a.italic != b.italic)
            return false;
            
        if (a.underline != b.underline)
            return false;
            
        if (a.deleteline != b.deleteline)
            return false;
            
        return true;
    }

    protected fun CopyTextInfo(DisplayInfo b) : DisplayInfo
    {
        var a = new DisplayInfo();
        a.__class = "Text";
        a.font_path = b.font_path;
        a.font_size = b.font_size;
        a.red = b.red;
        a.green = b.green;
        a.blue = b.blue;
    
        a.bold = b.bold;
        a.italic = b.italic;
        a.underline = b.underline;
        a.deleteline = b.deleteline;
    
        return a;
    }

    protected fun InitTextInfo() : DisplayInfo
    {
        var font_text = this._font_text;

        var a = new DisplayInfo();
        a.__class = "Text";
        a.font_path = font_text.font_path;
        a.font_size = font_text.font_size;
        a.red = font_text.red;
        a.green = font_text.green;
        a.blue = font_text.blue;
    
        a.bold = font_text.bold;
        a.italic = font_text.italic;
        a.underline = font_text.underline;
        a.deleteline = font_text.deleteline;
    
        return a;
    }

    protected fun SetDrawText(Text font_text)
    {
        var draw_text = this._draw_text;
        draw_text.font_path = font_text.font_path;
        draw_text.font_size = font_text.font_size;
        draw_text.red = font_text.red;
        draw_text.green = font_text.green;
        draw_text.blue = font_text.blue;
    
        draw_text.bold = font_text.bold;
        draw_text.italic = font_text.italic;
        draw_text.underline = font_text.underline;
        draw_text.deleteline = font_text.deleteline;
    }

    protected fun UpdateFontText()
    {
        var line_list = this._line_list;
    
        // 设置当前的字体样式
        var char_info = line_list[this._line_cursor_it].char_list[this._char_cursor_it];

        var is_change = false;
        var font_text = this._font_text;
        var text_info = char_info.text_info;
    
        if (font_text.font_path != text_info.font_path)
        {
            font_text.font_path = text_info.font_path;
            is_change = true;
        }
        if (font_text.font_size != text_info.font_size)
        {
            font_text.font_size = text_info.font_size;
            is_change = true;
        }
        if (font_text.red != text_info.red)
        {
            font_text.red = text_info.red;
            is_change = true;
        }
        if (font_text.green != text_info.green)
        {
            font_text.green = text_info.green;
            is_change = true;
        }
        if (font_text.blue != text_info.blue)
        {
            font_text.blue = text_info.blue;
            is_change = true;
        }
    
        if (font_text.bold != text_info.bold)
        {
            font_text.bold = text_info.bold;
            is_change = true;
        }
        if (font_text.italic != text_info.italic)
        {
            font_text.italic = text_info.italic;
            is_change = true;
        }
        if (font_text.underline != text_info.underline)
        {
            font_text.underline = text_info.underline;
            is_change = true;
        }
        if (font_text.deleteline != text_info.deleteline)
        {
            font_text.deleteline = text_info.deleteline;
            is_change = true;
        }
        if (is_change)
            this.DispatchEvent(new RichEditFontChangedEvent());
    }

    protected fun CheckDisplayList(List<DisplayInfo> content) : bool
    {
        for (var k, v in content)
        {
            if (v.__class == null)
                return false;
        }
        return true;
    }

    protected fun DisplayListToCharInfoList(List<DisplayInfo> display_list, [Nullable] DisplayInfo default_text_info) : List<RichEditCharInfo>
    {
        var char_info_list = new List<RichEditCharInfo>();
        var char_info_list_count = 0;
        var last_text_info = default_text_info;
        for (var display_index, display_info in display_list)
        {
            if (display_info.__class == "Text")
            {
                var new_char_info = new RichEditCharInfo();
                new_char_info.acc_width = 0;
                new_char_info.pre_width = 0;
                new_char_info.text_info = this.CopyTextInfo(display_info);
                new_char_info.text_object = null;
                new_char_info.text = display_info.text;
                new_char_info.ctrl_info = null;
                new_char_info.ctrl = null;
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = new_char_info;
    
                last_text_info = new_char_info.text_info;
            }
            else
            {
                if (last_text_info == null)
                    last_text_info = this.InitTextInfo();
                var new_char_info = new RichEditCharInfo();
                new_char_info.acc_width = 0;
                new_char_info.pre_width = 0;
                new_char_info.text_info = last_text_info;
                new_char_info.text_object = null;
                new_char_info.text = "";
                new_char_info.ctrl_info = display_info;
                new_char_info.ctrl = null;
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = new_char_info;
            }
        }
        return char_info_list;
    }

    protected fun GetCharInfoList() : List<RichEditCharInfo>
    {
        var char_info_list = new List<RichEditCharInfo>();
        var char_info_list_count = 0;
        for (var line_index, line_info in this._line_list)
        {
            for (var char_index, char_info in line_info.char_list)
            {
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = char_info;
            }
        }
        return char_info_list;
    }

    protected fun JoinCharInfoList(List<RichEditCharInfo> char_info_list) : List<RichEditCharInfo>
    {
        // 获取文本
        var new_char_info_list = new List<RichEditCharInfo>();
        var new_char_info_list_count = 0;

        var text_info:DisplayInfo = null;
        var text_list:List<string> = null;
        var text_list_count = 0;
        for (var char_index, char_info in char_info_list)
        {
            // 处理文本的情况
            if (char_info.ctrl_info == null)
            {
                if (text_info == null)
                {
                    text_info = char_info.text_info;
                    text_list = new List<string>();
                    text_list_count = 1;
                    text_list[text_list_count] = char_info.text;
                }
                elseif (text_info == char_info.text_info)
                {
                    ++ text_list_count;
                    text_list[text_list_count] = char_info.text;
                }
                else
                {
                    // 对比一下内容
                    if (this.CompareTextInfo(text_info, char_info.text_info))
                    {
                        ++ text_list_count;
                        text_list[text_list_count] = char_info.text;
                    }
                    else
                    {
                        // 整理一下文本
                        var text = String_Join(text_list, "");
                        if (text != "")
                        {
                            var new_char_info = new RichEditCharInfo();
                            new_char_info.acc_width = 0;
                            new_char_info.pre_width = 0;
                            new_char_info.text_info = text_info;
                            new_char_info.text_object = null;
                            new_char_info.text = text;
                            new_char_info.ctrl_info = null;
                            new_char_info.ctrl = null;
                            ++ new_char_info_list_count;
                            new_char_info_list[new_char_info_list_count] = new_char_info;
                        }
                        // 另起一个
                        text_info = char_info.text_info;
                        text_list = new List<string>();
                        text_list_count = 1;
                        text_list[text_list_count] = char_info.text;
                    }
                }
            }
            // 处理控件的情况
            else
            {
                // 如果之前的文本还没处理，那就处理掉
                if (text_info != null)
                {
                    var text = String_Join(text_list, "");
                    if (text != "")
                    {
                        var new_char_info = new RichEditCharInfo();
                        new_char_info.acc_width = 0;
                        new_char_info.pre_width = 0;
                        new_char_info.text_info = text_info;
                        new_char_info.text_object = null;
                        new_char_info.text = text;
                        new_char_info.ctrl_info = null;
                        new_char_info.ctrl = null;
                        ++ new_char_info_list_count;
                        new_char_info_list[new_char_info_list_count] = new_char_info;
                    }
                    text_info = null;
                    text_list = null;
                    text_list_count = 0;
                }

                var new_char_info = new RichEditCharInfo();
                new_char_info.acc_width = 0;
                new_char_info.pre_width = 0;
                new_char_info.text_info = text_info;
                new_char_info.text_object = null;
                new_char_info.text = null;
                new_char_info.ctrl_info = char_info.ctrl_info;
                new_char_info.ctrl = char_info.ctrl;
                ++ new_char_info_list_count;
                new_char_info_list[new_char_info_list_count] = new_char_info;
            }
        }
        // 最后检查一下没有处理的文本
        if (text_info != null)
        {
            var text = String_Join(text_list, "");
            if (text != "")
            {
                var new_char_info = new RichEditCharInfo();
                new_char_info.acc_width = 0;
                new_char_info.pre_width = 0;
                new_char_info.text_info = text_info;
                new_char_info.text_object = null;
                new_char_info.text = text;
                new_char_info.ctrl_info = null;
                new_char_info.ctrl = null;
                ++ new_char_info_list_count;
                new_char_info_list[new_char_info_list_count] = new_char_info;
            }
        }
    
        return new_char_info_list;
    }

    protected fun CharInfoListToDisplayList(List<RichEditCharInfo> list) : List<DisplayInfo>
    {
        // 获取文本
        var display_list = new List<DisplayInfo>();
        var display_list_count = 0;

        var text_info:DisplayInfo = null;
        var text_list:List<string> = null;
        var text_list_count = 0;
        for (var char_index, char_info in list)
        {
            // 处理文本的情况
            if (char_info.ctrl_info == null)
            {
                if (text_info == null)
                {
                    text_info = char_info.text_info;
                    text_list = new List<string>();
                    text_list_count = 1;
                    text_list[text_list_count] = char_info.text;
                }
                elseif (text_info == char_info.text_info)
                {
                    ++ text_list_count;
                    text_list[text_list_count] = char_info.text;
                }
                else
                {
                    // 对比一下内容
                    if (this.CompareTextInfo(text_info, char_info.text_info))
                    {
                        ++ text_list_count;
                        text_list[text_list_count] = char_info.text;
                    }
                    else
                    {
                        // 整理一下文本
                        var text = String_Join(text_list, "");
                        if (text != "")
                        {
                            var text_ctrl = String_CopyTable(text_info);
                            text_ctrl.__class = "Text";
                            text_ctrl.text = text;
                            ++ display_list_count;
                            display_list[display_list_count] = text_ctrl;
                        }
                        // 另起一个
                        text_info = char_info.text_info;
                        text_list = new List<string>();
                        text_list_count = 1;
                        text_list[text_list_count] = char_info.text;
                    }
                }
            }
            // 处理控件的情况
            else
            {
                // 如果之前的文本还没处理，那就处理掉
                if (text_info != null)
                {
                    var text = String_Join(text_list, "");
                    if (text != "")
                    {
                        var text_ctrl = String_CopyTable(text_info);
                        text_ctrl.__class = "Text";
                        text_ctrl.text = text;
                        ++ display_list_count;
                        display_list[display_list_count] = text_ctrl;
                    }
                    text_info = null;
                    text_list = null;
                    text_list_count = 0;
                }
                ++ display_list_count;
                display_list[display_list_count] = String_CopyTable(char_info.ctrl_info);
            }
        }
        // 最后检查一下没有处理的文本
        if (text_info != null)
        {
            var text = String_Join(text_list, "");
            if (text != "")
            {
                var text_ctrl = String_CopyTable(text_info);
                text_ctrl.__class = "Text";
                text_ctrl.text = text;
                ++ display_list_count;
                display_list[display_list_count] = text_ctrl;
            }
        }
    
        return display_list;
    }
    
    // 元素列表中得到文字
    protected fun CharInfoListToWord(List<RichEditCharInfo> list) : string
    {
        // 获取文本
        var text_list = new List<string>();
        var text_list_count = 0;
        for (var char_index, char_info in list)
        {
            // 处理文本的情况
            if (char_info.ctrl_info == null)
            {
                ++ text_list_count;
                text_list[text_list_count] = char_info.text;
            }
        }
    
        return String_Join(text_list, "");
    }

    protected fun SplitText(RichEditCharInfo char_info, List<RichEditCharInfo> char_info_list, int char_info_list_count) : int
    {
        var text = char_info.text;
    
        while (true)
        {
            var start_index_1 = __find(text, "\n");
            var start_index_2 = __find(text, "\t");
            if (start_index_1 != null && start_index_2 != null)
            {
                if (start_index_1 < start_index_2)
                    start_index_2 = null;
                else
                    start_index_1 = null;
            }
            if (start_index_1 != null)
            {
                var new_char_info = String_CopyTable(char_info);
                new_char_info.text = __sub(text, 1, start_index_1 - 1);
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = new_char_info;
                new_char_info = String_CopyTable(char_info);
                new_char_info.text = "\n";
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = new_char_info;
                text = __sub(text, start_index_1 + 1);
            }
            elseif (start_index_2 != null)
            {
                var new_char_info = String_CopyTable(char_info);
                new_char_info.text = __sub(text, 1, start_index_2 - 1);
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = new_char_info;
                new_char_info = String_CopyTable(char_info);
                new_char_info.text = "\t";
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = new_char_info;
                text = __sub(text, start_index_2 + 1);
            }
            else
            {
                if (text != "")
                {
                    var new_char_info = String_CopyTable(char_info);
                    new_char_info.text = text;
                    ++ char_info_list_count;
                    char_info_list[char_info_list_count] = new_char_info;
                }
                break;
            }
        }
        
        return char_info_list_count;
    }

    protected fun GetCursorWidth(int font_size) : int
    {
        if (font_size == null || font_size < 15)
            return 1;
            
        if (font_size > 100)
            return 10;
    
        return __floor((font_size / 100) * 10);
    }
    
    //////////////////////////////////////////////////////////////////
    
    private int _enter_key_height;
    private List<RichEditLineInfo> _line_list;
    private int _line_count;

    private Text _font_text;
    private Text _draw_text;
    
    private int _line_start_it;
    private int _line_cursor_it;
    private int _char_cursor_it;
    private int _line_select_it;
    private int _char_select_it;
    
    private ScrollList _scroll_list;
    
    private double _current_flash_alpha;
    private double _current_flash_dir;
    private Quad _cursor;
    private Quad _select_1;
    private Quad _select_2;
    private Quad _select_3;
    private DisplayObject _start_cursor;
    private DisplayObject _end_cursor;
    
    private string _start_cursor_data;
    private string _end_cursor_data;
    
    private bool _focus_cursor;
    private bool _is_focus;
    
    private double _event_start_x;
    private double _event_end_x;
    private double _event_start_y;
    private double _event_end_y;
    
    private double _start_it_delta;
    private double _click_drag_delta_x;
    private double _click_drag_delta_y;
    private bool _is_click;
    private bool _is_longclick;
    private bool _is_click_cursor;
    private string _is_click_cursor_name;
    private double _drag_delta_x;
    private double _drag_delta_y;
    
    private double _cursor_margin_up;
    private double _cursor_margin_down;
    private double _margin_halign;
    private double _margin_valign;
    private double _line_spacing;
    
    private bool _is_drag_begin;
    private double _ims_padding;
    
    private TextArea _default_text_area;
    private Map<string, DisplayObject> _link_map;
    
    private bool _editable;
    private bool _is_selecting;
    private bool _can_drag_text;
    private bool _auto_ims;
    private bool _multi_cursor;
    
    private string _regex;
    private int _limit_len;
    
    private LoopFunction _draw_loop;

    private LoopFunction _loop; // 光标动画
    
    public ctor(ControlSystem ctrl_sys)
    {
        this._enter_key_height = 20;        // 空行时的高度
        this._line_list = new List<RichEditLineInfo>();            // 行列表
        this._line_count = 0;            // 行的总数
    
        // 用于计算文本
        this._font_text = new Text(this._ctrl_sys);
        this._draw_text = new Text(this._ctrl_sys);
    
        // 显示范围部分
        this._line_start_it = null;        // 显示起始行
        this._line_cursor_it = null;        // 编辑光标所在的行
        this._char_cursor_it = null;       // 编辑光标所在的字符位置
        this._line_select_it = null;        // 选中光标所在的行
        this._char_select_it = null;       // 选中光标所在的字符位置
    
        // 显示容器部分
        this._scroll_list = new ScrollList(this._ctrl_sys);
        this._scroll_list.right_scrollbar = new ScrollBar(this._ctrl_sys);    // 设置默认滚动条，这样至少是可以滚动的
        this._scroll_list.width_type = UIEnumTypes.SIZE_MARGIN;            // 全部撑满
        this._scroll_list.height_type = UIEnumTypes.SIZE_MARGIN;            // 全部撑满
        this._scroll_list.x_type = UIEnumTypes.POS_ALIGN_CENTER;        // 水平居中
        this._scroll_list.y_type = UIEnumTypes.POS_ALIGN_CENTER;        // 水平居中
        this.AddChild(this._scroll_list);
    
        // 光标部分
        this._current_flash_alpha = 1;
        this._current_flash_dir = -0.05;
        this._cursor = new Quad(this._ctrl_sys);
        this.AddChild(this._cursor);
        this._cursor.visible = false;
        this._cursor.width = 1;
        this._select_1 = new Quad(this._ctrl_sys);
        this.AddChild(this._select_1);
        this._select_1.visible = false;
        this._select_1.alpha = 0.5;
        this._select_2 = new Quad(this._ctrl_sys);
        this.AddChild(this._select_2);
        this._select_2.visible = false;
        this._select_2.alpha = 0.5;
        this._select_3 = new Quad(this._ctrl_sys);
        this.AddChild(this._select_3);
        this._select_3.visible = false;
        this._select_3.alpha = 0.5;
    
        // 双光标
        this._start_cursor = new Quad(this._ctrl_sys);  // 显示在前面的光标控件
        this._start_cursor.width = 1;
        this._end_cursor = new Quad(this._ctrl_sys);  // 显示在后面的光标控件
        this._end_cursor.width = 1;
    
        this._start_cursor_data = null;  // 开始光标对应的光标类型
        this._end_cursor_data = null;  // 结束光标对应的光标类型
    
        // 失去焦点是否隐藏单光标
        this._focus_cursor = true;
        this._is_focus = false;
    
        // 用于事件
        this._event_start_x = 0;
        this._event_end_x = 0;
        this._event_start_y = 0;
        this._event_end_y = 0;
    
        this._start_it_delta = 0;    // 开始行的偏移量
        this._click_drag_delta_x = 0;  // 标记按下到弹起的拖动间隔
        this._click_drag_delta_y = 0;  // 标记按下到弹起的拖动间隔
        this._is_click = false;
        this._is_longclick = false;  // 标记按下弹起过程中是否触发长按
        this._is_click_cursor = false; // 标记按下时点在开始或结束光标内
        this._is_click_cursor_name = "";  // 按下时是哪个光标
        this._drag_delta_x = 0;            // 记录开始拖动时的偏移位置
        this._drag_delta_y = 0;
    
        this.AddChild(this._start_cursor);
        this.AddChild(this._end_cursor);
    
        this._start_cursor.visible = false;
        this._end_cursor.visible = false;
    
        // 双光标，记录光标的上下拉伸长度
        this._cursor_margin_up = 0;
        this._cursor_margin_down = 0;
    
        this._margin_halign = 0; // 水平边距
        this._margin_valign = 0; // 垂直边距
        this._line_spacing = 0;    // 行间距
    
        this._is_drag_begin = false; // 标记拖动是否有效

        // 额外的ims范围
        this._ims_padding = 0;
    
        // 默认文本
        this._default_text_area = new TextArea(this._ctrl_sys);
        this._default_text_area.width_type = UIEnumTypes.SIZE_MARGIN;            // 全部撑满
        this._default_text_area.height = 0;        // 0
        this._default_text_area.x_type = UIEnumTypes.POS_ALIGN_CENTER;        // 水平居中
        this._default_text_area.y = 0;    // 0
        this.AddChild(this._default_text_area);
    
        this._link_map = CreateValueWeakMap();
    
        this._pickup_rect = true;
        this._pickup_child = false;
        this._pickup_this = true;
    
        this._editable = true;
        this._is_selecting = false;
        this._can_drag_text = true;
        this._auto_ims = true;
        this._multi_cursor = false;  // 标记当前是否是双光标模式
        this._can_scroll = true;
    
        // 正则表达式
        this._regex = "";            // 正则表达式
        this._limit_len = 0;        // 文本长度
    
        this.AddEventListener(this, this.HandleFocusOut);
        this.AddEventListener(this, this.HandleFocusIn);
        this.AddEventListener(this, this.HandleMoveIn);
        this.AddEventListener(this, this.HandleMoveOut);
        this.AddEventListener(this, this.HandleLButtonDown);
        this.AddEventListener(this, this.HandleLButtonUp);
        this.AddEventListener(this, this.HandleTextInput);
        this.AddEventListener(this, this.HandleKeyDown);
        this.AddEventListener(this, this.HandleDragBegin);
        this.AddEventListener(this, this.HandleDrag);
        this.AddEventListener(this, this.HandleDragEnd);
        this.AddEventListener(this, this.HandleMButtonWheel);
        this.AddEventListener(this, this.HandleLongLButtonDown);
    
        // 清空
        this.ClearText();
    
        // 添加光标闪烁
        if (this._loop == null)
            this._loop = new LoopFunction(bind(this.Update, this), -1, 1, 1);
        A_LoopSystem.AddUpdater(this._loop);
    }
    
    // 获取光标的位置
    public fun GetCursor() : Quad
    {
        return this._cursor;
    }
    
    public get link_map() : Map<string, DisplayObject>
    {
        return this._link_map;
    }
    
    // 清空link_map
    public fun ClearLinkMap()
    {
        this._link_map = CreateValueWeakMap();
    }
    
    // 获取内容高度，如果最后一行是空行，不会算上去
    public get real_height() : double
    {
        return this._line_list[this._line_count].acc_height;
    }
    
    // 获取内容高度，如果最后一行是空行，那么也会算上去（最后一个空行算字体的高度）
    // 1. 如果最后一行是空行，那么算上最后一个空行的高度
    // 2. 如果最后一行不是空行，那么再加上一个空行的高度
    public get real_edit_height() : double
    {
        var line_list = this._line_list;
        var last_line = line_list[this._line_count];
        if (last_line.acc_height != last_line.pre_height)
            return last_line.acc_height;
        return last_line.acc_height + this._enter_key_height;
    }
    
    // 获取是否可以拖拽文本
    public get can_drag_text() : bool
    {
        return this._can_drag_text;
    }
    
    // 设置是否可以拖拽文本
    public set can_drag_text(bool value)
    {
        this._can_drag_text = value;
    }
    
    // 设置是否自动
    public set auto_ims(bool value)
    {
        this._auto_ims = value;
    }
    public get auto_ims() : bool
    {
        return this._auto_ims;
    }
    
    // 获取当前光标模式
    public get multi_cursor() : bool
    {
        return this._multi_cursor;
    }
    
    // 设置宽度
    public set width(double value)
    {
        if (this.width == value) return;
            
        DisplayLayout.width(this, value);

        var char_info_list = this.GetCharInfoList();
        this.ClearText();
        this.InsertTextImpl(char_info_list, false);
        this.ResetCursor();
    }
    
    // 设置高度
    public set height(double value)
    {
        if (this.height == value) return;

        DisplayLayout.height(this, value);
    
        this._default_text_area.y = this._scroll_list.y;
        this._default_text_area.height = this._default_text_area.real_height;
        if (this._default_text_area.height > this._scroll_list.height)
            this._default_text_area.height = this._scroll_list.height;
    
        this.ResetCursorLine();
        this.ResetCursor();
    }
    
    // 设置光标颜色R
    public set cursor_red(double value)
    {
        this._cursor.red = value;
        this._select_1.red = value;
        this._select_2.red = value;
        this._select_3.red = value;
    }
    
    // 获取光标颜色R
    public get cursor_red() : double
    {
        return this._cursor.red;
    }
    
    // 设置光标颜色G
    public set cursor_green(double value)
    {
        this._cursor.green = value;
        this._select_1.green = value;
        this._select_2.green = value;
        this._select_3.green = value;
    }
    
    // 设置光标颜色G
    public get cursor_green() : double
    {
        return this._cursor.green;
    }
    
    // 设置光标颜色B
    public set cursor_blue(double value)
    {
        this._cursor.blue = value;
        this._select_1.blue = value;
        this._select_2.blue = value;
        this._select_3.blue = value;
    }
    
    // 设置光标颜色B
    public get cursor_blue() : double
    {
        return this._cursor.blue;
    }
    
    // 显示光标
    // 如果show为true，那么如果不是选中状态，光标就会显示出来，否则也是隐藏的
    // 如果show为false，那么就按照控件原本的逻辑处理
    public fun ShowCursor(bool value)
    {
        // 单光标模式
        if (this._multi_cursor == false)
        {
            if (value)
            {
                if (this._select_1.visible == false)
                    this._cursor.visible = value;
                else
                    this._cursor.visible = false;
            }
            else
                this._cursor.visible = (this._select_1.visible == false);
        }
    }
    
    // 设置粗体
    public set font_bold(bool value)
    {
        if (this._font_text.bold == value)
            return;
            
        this._font_text.bold = value;
        this._default_text_area.bold = value;

        var char_info_list = this.GetCharInfoList();
        this.ClearText();
        this.InsertTextImpl(char_info_list, false);
        this.ResetCursor();
    }
    
    // 设置下划线
    public set font_underline(bool value)
    {
        if (this._font_text.underline == value)
            return;
            
        this._font_text.underline = value;
        this._default_text_area.underline = value;
    }
    
    // 设置下划线
    public set font_deleteline(bool value)
    {
        if (this._font_text.deleteline == value)
            return;
            
        this._font_text.deleteline = value;
        this._default_text_area.deleteline = value;
    }
    
    // 设置斜体
    public set font_italic(bool value)
    {
        if (this._font_text.italic == value)
            return;
            
        this._font_text.italic = value;
        this._default_text_area.italic = value;
    }
    
    // 设置字体，以及字体大小,获取默认行高
    public set font_path(string value)
    {
        if (this._font_text.font_path == value)
            return;
        this._font_text.font_path = value;
        this._default_text_area.font_path = value;
    
        this._default_text_area.height = this._default_text_area.real_height;
        if (this._default_text_area.height > this._scroll_list.height)
            this._default_text_area.height = this._scroll_list.height;
    
        if (this._font_text.font_path != null && this._font_text.font_size != null)
        {
            this._enter_key_height = this._font_text.native_show.GetFontHeight();

            var char_info_list = this.GetCharInfoList();
            this.ClearText();
            this.InsertTextImpl(char_info_list, false);
            this.ResetCursor();
        }
    }
    
    public set font_size(int value)
    {
        if (this._font_text.font_size == value)
            return;
            
        this._font_text.font_size = value;
        this._default_text_area.font_size = value;
    
        this._default_text_area.height = this._default_text_area.real_height;
        if (this._default_text_area.height > this._scroll_list.height)
            this._default_text_area.height = this._scroll_list.height;
    
        if (this._font_text.font_path != null && this._font_text.font_size != null)
        {
            this._enter_key_height = this._font_text.native_show.GetFontHeight();

            var char_info_list = this.GetCharInfoList();
            this.ClearText();
            this.InsertTextImpl(char_info_list, false);
            this.ResetCursor();
        }
    }
    
    public get font_path() : string
    {
        return this._font_text.font_path;
    }
    
    public get font_size() : int
    {
        return this._font_text.font_size;
    }
    
    // 设置字体颜色
    public set font_red(double value)
    {
        if (this._font_text.red == value)
            return;
        this._font_text.red = value;
        this._default_text_area.red = value;
    }
    public get font_red() : double
    {
        return this._font_text.red;
    }
    public set font_green(double value)
    {
        if (this._font_text.green == value)
            return;
        this._font_text.green = value;
        this._default_text_area.green = value;
    }
    public get font_green() : double
    {
        return this._font_text.green;
    }
    public set font_blue(double value)
    {
        if (this._font_text.blue == value)
            return;
        this._font_text.blue = value;
        this._default_text_area.blue = value;
    }
    public get font_blue() : double
    {
        return this._font_text.blue;
    }
    
    public set default_text(string value)
    {
        this._default_text_area.text = value;
        this._default_text_area.height = this._default_text_area.real_height;
        if (this._default_text_area.height > this._scroll_list.height)
            this._default_text_area.height = this._scroll_list.height;
    }
    
    // 设置纯文本
    public set text(any value)
    {
        this.ClearText();
        this.InsertTextNative(value);
        this.ShowDefaultText();
    }
    public get text() : string
    {
        var displaylist = this.CharInfoListToDisplayList(this.GetCharInfoList());
        var text = "";
        for (var k, v in displaylist)
        {
            if (v.__class == "Text")
                text = text .. v.text;
        }
    
        return text;
    }
    
    public get default_text() : string
    {
        return this._default_text_area.text;
    }
    
    public set default_text_alpha(double value)
    {
        this._default_text_area.alpha = value;
    }
    
    public get default_text_alpha() : double
    {
        return this._default_text_area.alpha;
    }
    
    // 设置表现
    public set display_list(List<DisplayInfo> value)
    {
        var char_info_list = this.DisplayListToCharInfoList(value);
        this.ClearText();
        this.InsertTextImpl(char_info_list, false);
        this.ResetCursor();
        this.ShowDefaultText();
    }
    
    public get display_list() : List<DisplayInfo>
    {
        // 计算显示列表
        return this.CharInfoListToDisplayList(this.GetCharInfoList());
    }
    
    // 设置双光标前面光标
    public set start_cursor(DisplayObject value)
    {
        if (value == this._start_cursor)
            return;
    
        this.RemoveChild(this._start_cursor);
    
        value.x_type = UIEnumTypes.POS_ABS;
        value.y_type = UIEnumTypes.POS_ABS;
        value.width_type = UIEnumTypes.SIZE_ABS;
        value.height_type = UIEnumTypes.SIZE_ABS;
    
        this._start_cursor = value;
        this.AddChild(this._start_cursor);
        this._start_cursor.visible = false;
    
        // 设置光标
        this.ResetCursor();
    }
    
    public get start_cursor() : DisplayObject
    {
        return this._start_cursor;
    }
    
    // 设置双光标后面光标
    public set end_cursor(DisplayObject value)
    {
        if (value == this._end_cursor)
            return;
    
        this.RemoveChild(this._end_cursor);
    
        value.x_type = UIEnumTypes.POS_ABS;
        value.y_type = UIEnumTypes.POS_ABS;
        value.width_type = UIEnumTypes.SIZE_ABS;
        value.height_type = UIEnumTypes.SIZE_ABS;
    
        this._end_cursor = value;
        this.AddChild(this._end_cursor);
        this._end_cursor.visible = false;
    
        // 设置光标
        this.ResetCursor();
    }
    
    public get end_cursor() : DisplayObject
    {
        return this._end_cursor;
    }
    
    public set cursor_margin_up(double value)
    {
        if (value == this._cursor_margin_up)
            return;
        this._cursor_margin_up = value;
        // 设置光标
        this.ResetCursor();
    }
    
    public get cursor_margin_up() : double
    {
        return this._cursor_margin_up;
    }
    
    public set cursor_margin_down(double value)
    {
        if (value == this._cursor_margin_down)
            return;
        this._cursor_margin_down = value;
        // 设置光标
        this.ResetCursor();
    }
    
    public get cursor_margin_down() : double
    {
        return this._cursor_margin_down;
    }
    
    // 水平边距
    public set margin_halign(double value)
    {
        if (value == this._margin_halign)
            return;
            
        this._margin_halign = value;
        this._scroll_list.width_value = this._margin_halign * 2;
        this._default_text_area.width_value = this._margin_halign * 2;

        var char_info_list = this.GetCharInfoList();
        this.ClearText();
        this.InsertTextImpl(char_info_list, false);
        this.ResetCursor();
    }
    
    public get margin_halign() : double
    {
        return this._margin_halign;
    }
    
    // 垂直边距
    public set margin_valign(double value)
    {
        if (value == this._margin_valign)
            return;
        this._margin_valign = value;
        this._scroll_list.height_value = this._margin_valign * 2;
    
        this._default_text_area.y = this._scroll_list.y;
        this._default_text_area.height = this._default_text_area.real_height;
        if (this._default_text_area.height > this._scroll_list.height)
            this._default_text_area.height = this._scroll_list.height;

        var char_info_list = this.GetCharInfoList();
        this.ClearText();
        this.InsertTextImpl(char_info_list, false);
        this.ResetCursor();
    }
    
    // 设置行间距
    public set line_spacing(double value)
    {
        if (this._line_spacing == this._line_spacing)
            return;
        this._line_spacing = value;
        this._scroll_list.gap = value;
    }
    public get line_spacing() : double
    {
        return this._line_spacing;
    }
    
    public get margin_valign() : double
    {
        return this._margin_valign;
    }
    
    public set focus_cursor(bool value)
    {
        this._focus_cursor = value;
    }
    
    public get focus_cursor() : bool
    {
        return this._focus_cursor;
    }
    
    // 获取光标偏移位置X
    public get cursor_x() : double
    {
        return this._cursor.x;
    }
    
    // 获取光标偏移位置Y
    public get cursor_y() : double
    {
        return this._cursor.y;
    }

    // 获取光标底部
    public get cursor_b() : double
    {
        return (this._cursor.y + this._cursor.height) * this.scale_y + this._ims_padding;
    }
    
    public get start_cursor_x() : double
    {
        return this._event_start_x;
    }
    
    public get start_cursor_y() : double
    {
        return this._event_start_y;
    }
    
    public get end_cursor_x() : double
    {
        return this._event_end_x;
    }
    
    public get end_cursor_y() : double
    {
        return this._event_end_y;
    }
    
    public get regex() : string
    {
        return this._regex;
    }
    
    public set regex(string value)
    {
        if (value == null) value = "";
        this._regex = value;
    }
    
    public get limit_len() : int
    {
        return this._limit_len;
    }
    
    public set limit_len(int value)
    {
        if (value == null) value = 0;
        this._limit_len = value;
    }
    
    // 获取某一行的总宽度
    public fun GetLineWidth(int value) : double
    {
        var line = this._line_list[value];
        if (line == null)
            return 0;
        return line.char_list[line.char_count].acc_width;
    }
    
    // 获取偏移###
    public fun GetScrollOffset() : double
    {
        if (this._line_start_it == null)
            return 0;
        return this._line_list[this._line_start_it].pre_height + this._start_it_delta;
    }
    
    // 获取行的数量
    public fun GetLineCount() : int
    {
        return this._line_count;
    }
    
    ////////////////////////////////////////-内部函数，谨慎使用////////////////////////////////////////////
    protected fun Update()
    {
        if (this._cursor.abs_visible)
        {
            this._current_flash_alpha = this._current_flash_alpha + this._current_flash_dir;
            if ((this._current_flash_dir < 0 && this._current_flash_alpha < -0.05) || (this._current_flash_dir > 0 && this._current_flash_alpha > 1.5))
                this._current_flash_dir = -this._current_flash_dir;
            this._cursor.alpha = this._current_flash_alpha;
        }
    }
    ////////////////////////////////////////-内部函数1，谨慎使用////////////////////////////////////////////
    // 获取选中文本
    public fun GetSelectText() : List<DisplayInfo>
    {
        var line_list = this._line_list;
    
        // 最终结果
        var select_text = new List<RichEditCharInfo>();
        var select_text_count = 0;
    
        // 检查是否有选中文本
        if (this._char_select_it > line_list[this._line_select_it].char_count)
            return new List<DisplayInfo>();
    
        // 从下到上遍历
        if (line_list[this._line_select_it].pre_height > line_list[this._line_cursor_it].pre_height)
        {
            // 初始化当前行
            var line_it = this._line_cursor_it;
            // 循环遍历
            while (true)
            {
                var char_it:int;
                var char_end:int;
    
                if (line_it == this._line_cursor_it)
                {
                    char_it = this._char_cursor_it;
                    char_it = char_it + 1;
                }
                else
                    char_it = 1;

                if (line_it == this._line_select_it)
                {
                    char_end = this._char_select_it;
                    char_end = char_end + 1;
                }
                else
                    char_end = line_list[line_it].char_count + 1;

                var line = line_list[line_it];
                while (char_it != char_end)
                {
                    ++ select_text_count;
                    select_text[select_text_count] = line.char_list[char_it];
                    char_it = char_it + 1;
                }
    
                if (line_it == this._line_select_it)
                    break;
                line_it = line_it + 1;
            }
        }
        // 从上到下遍历
        elseif (line_list[this._line_select_it].pre_height < line_list[this._line_cursor_it].pre_height)
        {
            // 初始化当前行
            var line_it = this._line_select_it;
    
            // 循环遍历
            while (true)
            {
                var char_it:int;
                var char_end:int;
    
                if (line_it == this._line_select_it)
                {
                    char_it = this._char_select_it;
                    char_it = char_it + 1;
                }
                else
                    char_it = 1;
    
                if (line_it == this._line_cursor_it)
                {
                    char_end = this._char_cursor_it;
                    char_end = char_end + 1;
                }
                else
                    char_end = line_list[line_it].char_count + 1;

                var line = line_list[line_it];
                while (char_it != char_end)
                {
                    ++ select_text_count;
                    select_text[select_text_count] = line.char_list[char_it];
                    char_it = char_it + 1;
                }
    
                if (line_it == this._line_cursor_it)
                    break;
                line_it = line_it + 1;
            }
        }
        // 说明只有当前行
        else
        {
            if (line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width > line_list[this._line_select_it].char_list[this._char_select_it].acc_width)
            {
                var char_it = this._char_select_it;
                var char_end = this._char_cursor_it;
                char_end = char_end + 1;
                char_it = char_it + 1;

                var line = line_list[this._line_cursor_it];
                while (char_it != char_end)
                {
                    ++ select_text_count;
                    select_text[select_text_count] = line.char_list[char_it];
                    char_it = char_it + 1;
                }
            }
            elseif (line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width < line_list[this._line_select_it].char_list[this._char_select_it].acc_width)
            {
                var char_it = this._char_cursor_it;
                var char_end = this._char_select_it;
                char_end = char_end + 1;
                char_it = char_it + 1;

                var line = line_list[this._line_cursor_it];
                while (char_it != char_end)
                {
                    ++ select_text_count;
                    select_text[select_text_count] = line.char_list[char_it];
                    char_it = char_it + 1;
                }
            }
        }
    
        return this.CharInfoListToDisplayList(select_text);
    }
    
    // 获取选中文字
    public fun GetSelectWord() : string
    {
        var line_list = this._line_list;
    
        // 最终结果
        var select_text = new List<RichEditCharInfo>();
        var select_text_count = 0;
    
        // 检查是否有选中文本
        if (this._char_select_it > line_list[this._line_select_it].char_count)
            return "";
    
        // 从下到上遍历
        if (line_list[this._line_select_it].pre_height > line_list[this._line_cursor_it].pre_height)
        {
            // 初始化当前行
            var line_it = this._line_cursor_it;
            // 循环遍历
            while (true)
            {
                var char_it:int;
                var char_end:int;
    
                if (line_it == this._line_cursor_it)
                {
                    char_it = this._char_cursor_it;
                    char_it = char_it + 1;
                }
                else
                    char_it = 1;
                
                if (line_it == this._line_select_it)
                {
                    char_end = this._char_select_it;
                    char_end = char_end + 1;
                }
                else
                    char_end = line_list[line_it].char_count + 1;

                var line = line_list[line_it];
                while (char_it != char_end)
                {
                    ++ select_text_count;
                    select_text[select_text_count] = line.char_list[char_it];
                    char_it = char_it + 1;
                }
    
                if (line_it == this._line_select_it)
                    break;
                line_it = line_it + 1;
            }
        }
        // 从上到下遍历
        elseif (line_list[this._line_select_it].pre_height < line_list[this._line_cursor_it].pre_height)
        {
            // 初始化当前行
            var line_it = this._line_select_it;
            // 循环遍历
            while (true)
            {
                var char_it:int;
                var char_end:int;
    
                if (line_it == this._line_select_it)
                {
                    char_it = this._char_select_it;
                    char_it = char_it + 1;
                }
                else
                    char_it = 1;
    
                if (line_it == this._line_cursor_it)
                {
                    char_end = this._char_cursor_it;
                    char_end = char_end + 1;
                }
                else
                    char_end = line_list[line_it].char_count + 1;

                var line = line_list[line_it];
                while (char_it != char_end)
                {
                    ++ select_text_count;
                    select_text[select_text_count] = line.char_list[char_it];
                    char_it = char_it + 1;
                }
    
                if (line_it == this._line_cursor_it)
                    break;
                line_it = line_it + 1;
            }
        }
        // 说明只有当前行
        else
        {
            if (line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width > line_list[this._line_select_it].char_list[this._char_select_it].acc_width)
            {
                var char_it = this._char_select_it;
                var char_end = this._char_cursor_it;
                char_end = char_end + 1;
                char_it = char_it + 1;

                var line = line_list[this._line_cursor_it];
                while (char_it != char_end)
                {
                    ++ select_text_count;
                    select_text[select_text_count] = line.char_list[char_it];
                    char_it = char_it + 1;
                }
            }
            elseif (line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width < line_list[this._line_select_it].char_list[this._char_select_it].acc_width)
            {
                var char_it = this._char_cursor_it;
                var char_end = this._char_select_it;
                char_end = char_end + 1;
                char_it = char_it + 1;

                var line = line_list[this._line_cursor_it];
                while (char_it != char_end)
                {
                    ++ select_text_count;
                    select_text[select_text_count] = line.char_list[char_it];
                    char_it = char_it + 1;
                }
            }
        }
    
        return this.CharInfoListToWord(select_text);
    }
    
    // 删除选中文本
    public fun DeleteSelectText() : bool
    {
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return false;

        var line_list = this._line_list;
    
        // 检查是否是选中状态
        if (this._char_select_it > line_list[this._line_select_it].char_count)
            return false;
    
        // 调整光标位置
        var line_begin_it:int;
        var begin_it:int;
        var line_end_it:int;
        var end_it:int;
        if (line_list[this._line_select_it].pre_height > line_list[this._line_cursor_it].pre_height)
        {
            line_begin_it = this._line_cursor_it;
            begin_it = this._char_cursor_it;
            line_end_it = this._line_select_it;
            end_it = this._char_select_it;
        }
        elseif (line_list[this._line_select_it].pre_height < line_list[this._line_cursor_it].pre_height)
        {
            line_begin_it = this._line_select_it;
            begin_it = this._char_select_it;
            line_end_it = this._line_cursor_it;
            end_it = this._char_cursor_it;
        }
        else
        {
            line_begin_it = this._line_select_it;
            line_end_it = this._line_cursor_it;
            begin_it = this._char_select_it;
            end_it = this._char_cursor_it;
            if (line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width > line_list[this._line_select_it].char_list[this._char_select_it].acc_width)
            {
                begin_it = this._char_select_it;
                end_it = this._char_cursor_it;
            }
            elseif (line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width < line_list[this._line_select_it].char_list[this._char_select_it].acc_width)
            {
                begin_it = this._char_cursor_it;
                end_it = this._char_select_it;
            }
        }
    
        // 调整起始行
        if (begin_it == 1)
        {
            if (line_begin_it != 1 && line_list[line_begin_it].force_line == false)
            {
                line_begin_it = line_begin_it - 1;
                begin_it = line_list[line_begin_it].char_count + 1;
                begin_it = begin_it - 1;
            }
        }
        // 删除文本
        this.DeleteTextImpl(line_begin_it, begin_it, line_end_it, end_it);
        // 重置光标
        this.ResetCursor();
    
        return true;
    }
    
    // 检测正则表达式
    protected fun CheckTextRegexLimit(string text) : bool
    {
        // 判断长度
        if (this._limit_len != 0)
        {
            var text_len = String_GetWordCount(text);
            // 先判断输入的文本是否满足条件
            if (text_len > this._limit_len)
                return false;
    
            // 选中文本长度
            var select_len = 0;
            var displaylist = this.GetSelectText();
            for (var k, v in displaylist)
            {
                if (v.__class == "Text")
                    select_len = select_len + String_GetWordCount(v.text);
            }
    
            // 计算最后文本长度
            displaylist = this.display_list;
            var total_len = 0;
            for (var k, v in displaylist)
            {
                if (v.__class == "Text")
                    total_len = total_len + String_GetWordCount(v.text);
            }
            if (total_len - select_len + text_len > this._limit_len)
                return false;
        }
    
        //  首先判断输入的文件是否满足正则表达式
        if (this._regex != "")
        {
            while (text != "")
            {
                var byte_count = String_GetByteCount(text, 1);
                var sub_text = __sub(text, 1, byte_count);

                var start_it = __find(sub_text, this._regex);
                if (start_it == null)
                    return false;
    
                text = __sub(text, byte_count + 1);
            }
        }
    
        return true;
    }
    
    // 插入文本
    protected fun InsertTextNative(string text) : bool
    {
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return false;
    
        // 检测输入规则
        if (this.CheckTextRegexLimit(text) == false)
            return false;
        // 删除选中文本
        this.DeleteSelectText();
    
        // 构建char_info_list
        var char_info_list = new List<RichEditCharInfo>();
        var char_info_list_count = 0;

        var new_char_info = new RichEditCharInfo();
        new_char_info.acc_width = 0;
        new_char_info.pre_width = 0;
        new_char_info.text_info = this.InitTextInfo();
        new_char_info.text_object = null;
        new_char_info.text = text;
        new_char_info.ctrl_info = null;
        new_char_info.ctrl = null;
        ++ char_info_list_count;
        char_info_list[char_info_list_count] = new_char_info;
        // 插入文本
        this.InsertTextImpl(char_info_list, false);
        // 调整起始行靠近光标
        this.ResetCursorLine();
        // 重置光标
        this.ResetCursor();
    
        return true;
    }

    protected fun CheckDisplayListRegexLimit(List<DisplayInfo> display_list) : bool
    {
        if (this._regex == "")
            return false;
    
        // 取出所有字符
        var text = "";
        for (var k, v in display_list)
        {
            if (v.__class != "Text")
                return false;
            text = text .. v.text;
        }
    
        return this.CheckTextRegexLimit(text);
    }
    
    // 插入
    // displaylist 显示列表
    // select 如果填true，那么表示选中显示选中
    protected fun InsertDisplayListNative(List<DisplayInfo> display_list, bool selected) : bool
    {
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return false;
    
        if (this.CheckDisplayListRegexLimit(display_list) == false)
            return false;
        // 删除选中文本
        this.DeleteSelectText();
    
        // 获取当前光标所指向的字符
        var line_list = this._line_list;
        var char_info = line_list[this._line_cursor_it].char_list[this._char_cursor_it];
    
        // 构建char_info_list
        var char_info_list = this.DisplayListToCharInfoList(display_list, char_info.text_info);
    
        // 插入文本
        this.InsertTextImpl(char_info_list, selected);
    
        // 更新字体样式
        this.UpdateFontText();
    
        // 调整起始行靠近光标
        this.ResetCursorLine();
    
        // 重置光标
        this.ResetCursor();
    
        return true;
    }
    
    // 向一个方向删除控件，可以是文本，也可以是其他控件
    protected fun DeleteText(bool left) : bool
    {
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return false;
    
        // 如果有选中文本，那么就直接删除，并且返回
        if (this.DeleteSelectText())
            return true;

        var line_list = this._line_list;
    
        if (left)
        {
            // 如果已经是开头了，那么就直接返回
            if (this._line_cursor_it == 1 && this._char_cursor_it == 1)
                return false;

            var line_begin_it = this._line_cursor_it;
            var begin_it = this._char_cursor_it;
            var line_end_it = this._line_cursor_it;
            var end_it = this._char_cursor_it;
    
            // 如果光标在当前行的最后一个字符，那么删除后，直接删除这一行
            if (begin_it == 1)
            {
                if (line_begin_it != 1)
                {
                    line_begin_it = line_begin_it - 1;
                    begin_it = line_list[line_begin_it].char_count + 1;
                    begin_it = begin_it - 1;
                }
            }
            else
            {
                begin_it = begin_it - 1;
                // 如果调整的方向是软换行，那么删除后，直接删除这一行
                if (begin_it == 1 && line_list[line_begin_it].force_line == false)
                {
                    if (line_begin_it != 1)
                    {
                        line_begin_it = line_begin_it - 1;
                        begin_it = line_list[line_begin_it].char_count + 1;
                        begin_it = begin_it - 1;
                    }
                }
            }
            // 删除文本
            this.DeleteTextImpl(line_begin_it, begin_it, line_end_it, end_it);
        }
        else
        {
            // 检查是否是最后一行的最后一个字符
            var end_line = this._line_count + 1;
            end_line = end_line - 1;
            var end_char = line_list[end_line].char_count + 1;
            end_char = end_char - 1;
            if (this._line_cursor_it == end_line && this._char_cursor_it == end_char)
                return false;

            var line_begin_it = this._line_cursor_it;
            var begin_it = this._char_cursor_it;
            var line_end_it = this._line_cursor_it;
            var end_it = this._char_cursor_it;
    
            end_char = line_list[line_end_it].char_count + 1;
            end_char = end_char - 1;
            // 如果在当前行的最后一个字符，那么就调整下一行的第一个字符
            if (end_it == end_char)
            {
                if (line_end_it != end_line)
                {
                    // 设置起始位置
                    line_end_it = line_end_it + 1;
                    end_it = 1;
                    // 如果是软交换，那么end_it减一
                    if (line_list[line_end_it].force_line == false)
                    {
                        end_it = end_it + 1;
                        // 检查参数
                        if (end_it > line_list[line_end_it].char_count)
                            end_it = end_it - 1;
                    }
                }
            }
            else
                end_it = end_it + 1;
            // 删除文本
            this.DeleteTextImpl(line_begin_it, begin_it, line_end_it, end_it);
        }
    
        // 调整光标
        this.ResetCursorLine();
        this.ResetCursor();
    
        return true;
    }
    ////////////////////////////////////////-内部函数2，谨慎使用////////////////////////////////////////////
    
    // 删除所有内容
    protected fun ClearText()
    {
        // 初始化行列表
        this._line_list = new List<RichEditLineInfo>();
        this._line_count = 0;
    
        // 添加一个空行，空行内部添加一个空元素
        var line_info = new RichEditLineInfo();
        line_info.char_list = new List<RichEditCharInfo>();
        line_info.child_list = new List<DisplayObject>();
        line_info.char_count = 0;
        line_info.child_count = 0;
        line_info.pre_height = 0;
        line_info.acc_height = 0;
        line_info.force_line = false;
        line_info.container = null;
        ++ this._line_count;
        this._line_list[this._line_count] = line_info;

        var char_info = new RichEditCharInfo();
        char_info.acc_width = 0;
        char_info.pre_width = 0;
        char_info.text_info = this.InitTextInfo();
        char_info.text_object = null;
        char_info.text = "";
        char_info.ctrl_info = null;
        char_info.ctrl = null;
        ++ line_info.char_count;
        line_info.char_list[line_info.char_count] = char_info;
    
        // 初始起始行
        this._line_start_it = 1;
        this._start_it_delta = 0;
        // 初始化编辑光标
        this._line_cursor_it = 1;
        this._char_cursor_it = 1;
        // 初始化选中光标
        this._line_select_it = 1;
        this._char_select_it = 2;
    
        this.Draw();
    }
    
    // 直接指定开始行是第几行
    protected fun SetStartIt(int line_index)
    {
        if (line_index < 1 || line_index > this._line_count)
            return;
        this._line_start_it = line_index;
        this._start_it_delta = 0;
        this.AdjustContentY();
    }
    
    // 重置光标
    protected fun ResetCursor()
    {
        // 检查是否有字体
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return;

        var line_list = this._line_list;
    
        // 处理没有选中文本
        if ((this._char_select_it > line_list[this._line_select_it].char_count)
            || (this._line_select_it == this._line_cursor_it && this._char_select_it == this._char_cursor_it))
        {
            // 隐藏选中光标
            this._select_1.visible = false;
            this._select_2.visible = false;
            this._select_3.visible = false;
    
            // 隐藏双光标
            this._start_cursor.visible = false;
            this._end_cursor.visible = false;
    
            this._start_cursor_data = null;
            this._end_cursor_data = null;
    
            this._event_start_x = 0;
            this._event_end_x = 0;
            this._event_start_y = 0;
            this._event_end_y = 0;
    
            // 显示单光标
            if (this._focus_cursor)
                this._cursor.visible = this._is_focus;
            else
                this._cursor.visible = true;

            var cursor_width = 0.0;
            var line = line_list[this._line_cursor_it];
            var char = line.char_list[this._char_cursor_it];
            if (char.ctrl != null)
            {
                this._cursor.height = char.ctrl.height;
                cursor_width = 2;
            }
            else
            {
                if (char.text_object != null)
                {
                    this._cursor.height = char.text_object.height;
                    cursor_width = this.GetCursorWidth(char.text_object.font_size);
                }
                else
                {
                    var next_char = line.char_list[this._char_cursor_it + 1];
                    if (next_char != null)
                    {
                        if (next_char.ctrl != null)
                        {
                            this._cursor.height = next_char.ctrl.height;
                            cursor_width = 2;
                        }
                        elseif (next_char.text_object != null)
                        {
                            this._cursor.height = next_char.text_object.height;
                            cursor_width = this.GetCursorWidth(next_char.text_object.font_size);
                        }
                        else
                        {
                            this._cursor.height = this._font_text.native_show.GetFontHeight();
                            cursor_width = this.GetCursorWidth(this._font_text.font_size);
                        }
                    }
                    else
                    {
                        this._cursor.height = this._font_text.native_show.GetFontHeight();
                        cursor_width = this.GetCursorWidth(this._font_text.font_size);
                    }
                }
            }
            this._cursor.width = cursor_width;
            var line_height = line_list[this._line_cursor_it].acc_height - line_list[this._line_cursor_it].pre_height;
            var offset_y = line_height - this._cursor.height;
            if (offset_y <= 0)
                offset_y = 0;
            this._cursor.y = this._scroll_list.y + line_list[this._line_cursor_it].pre_height - line_list[this._line_start_it].pre_height + offset_y - this._start_it_delta;
            this._cursor.x = this._scroll_list.x + line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width;
            return;
        }
    
        // 单光标模式，显示选中时，编辑光标隐藏
        if (this._multi_cursor == false)
            this._cursor.visible = false;
    
        //  处理选中文本的光标
        //  编辑光标位置在前
        if (line_list[this._line_select_it].pre_height > line_list[this._line_cursor_it].pre_height)
        {
            // 初始化光标行
            var line_it = this._line_cursor_it;
            this._select_1.visible = true;
            var select_1_y = line_list[this._line_cursor_it].pre_height - line_list[this._line_start_it].pre_height - this._start_it_delta;
            var select_1_height = line_list[this._line_cursor_it].acc_height - line_list[this._line_cursor_it].pre_height;
            if (select_1_y < 0)
            {
                select_1_height = select_1_y + select_1_height;
                select_1_y = 0;
            }
            if (select_1_y + select_1_height > this._scroll_list.height)
                select_1_height = this._scroll_list.height - select_1_y;
            if (select_1_height <= 0)
                this._select_1.visible = false;
                
            this._select_1.y = this._scroll_list.y + select_1_y;
            this._select_1.x = this._scroll_list.x + line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width;
            this._select_1.height = select_1_height;
            this._select_1.width = this._scroll_list.width - line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width;
    
            this._select_3.visible = (line_list[this._line_cursor_it].acc_height != line_list[this._line_select_it].pre_height);
            var select_3_y = line_list[this._line_cursor_it].acc_height - line_list[this._line_start_it].pre_height - this._start_it_delta;
            var select_3_height = line_list[this._line_select_it].pre_height - line_list[this._line_cursor_it].acc_height;
            if (select_3_y < 0)
            {
                select_3_height = select_3_y + select_3_height;
                select_3_y = 0;
            }
            if (select_3_y + select_3_height > this._scroll_list.height)
                select_3_height = this._scroll_list.height - select_3_y;
            if (select_3_height <= 0)
                this._select_3.visible = false;
                
            this._select_3.y = this._scroll_list.y + select_3_y;
            this._select_3.x = this._scroll_list.x;
            this._select_3.height = select_3_height;
            this._select_3.width = this._scroll_list.width;
    
            line_it = this._line_select_it;
            this._select_2.visible = true;
            var select_2_y = line_list[this._line_select_it].pre_height - line_list[this._line_start_it].pre_height - this._start_it_delta;
            var select_2_height = line_list[this._line_select_it].acc_height - line_list[this._line_select_it].pre_height;
            if (select_2_y < 0)
            {
                select_2_height = select_2_y + select_2_height;
                select_2_y = 0;
            }
            if (select_2_y + select_2_height > this._scroll_list.height)
                select_2_height = this._scroll_list.height - select_2_y;
            if (select_2_height <= 0)
                this._select_2.visible = false;
                
            this._select_2.y = this._scroll_list.y + select_2_y;
            this._select_2.x = this._scroll_list.x;
            this._select_2.height = select_2_height;
            this._select_2.width = line_list[this._line_select_it].char_list[this._char_select_it].acc_width;
    
            // 双光标模式设置光标位置
            if (this._multi_cursor == true)
            {
                this._cursor.visible = false;
    
                this._start_cursor.x = this._select_1.x - this._start_cursor.width;
                this._start_cursor.height = this._select_1.height + this._cursor_margin_up + this._cursor_margin_down;
                this._start_cursor.y = this._select_1.y - this._cursor_margin_up;
    
                this._end_cursor.x = this._select_2.x + this._select_2.width;
                this._end_cursor.height = this._select_2.height + this._cursor_margin_up + this._cursor_margin_down;
                this._end_cursor.y = this._select_2.y - this._cursor_margin_up;
    
                this._start_cursor.visible = this._select_1.visible;
                this._end_cursor.visible = this._select_2.visible;
    
                this._start_cursor_data = "cursor";
                this._end_cursor_data = "select";
    
                this._event_start_x = this._select_1.x;
                this._event_start_y = this._select_1.y;
                this._event_end_x = this._select_2.x + this._select_2.width;
                this._event_end_y = this._select_2.y + this._select_2.height;
            }
        }
        // 选择光标位置在前
        elseif (line_list[this._line_select_it].pre_height < line_list[this._line_cursor_it].pre_height)
        {
            var line_it = this._line_select_it;
            this._select_1.visible = true;
            var select_1_y = line_list[this._line_select_it].pre_height - line_list[this._line_start_it].pre_height - this._start_it_delta;
            var select_1_height = line_list[this._line_select_it].acc_height - line_list[this._line_select_it].pre_height;
            if (select_1_y < 0)
            {
                select_1_height = select_1_y + select_1_height;
                select_1_y = 0;
            }
            if (select_1_y + select_1_height > this._scroll_list.height)
                select_1_height = this._scroll_list.height - select_1_y;
            if (select_1_height <= 0)
                this._select_1.visible = false;
                
            this._select_1.y = this._scroll_list.y + select_1_y;
            this._select_1.x = this._scroll_list.x + line_list[this._line_select_it].char_list[this._char_select_it].acc_width;
            this._select_1.height = select_1_height;
            this._select_1.width = this._scroll_list.width - line_list[this._line_select_it].char_list[this._char_select_it].acc_width;
    
            line_it = this._line_cursor_it;
            this._select_2.visible = true;
            var select_2_y = line_list[this._line_cursor_it].pre_height - line_list[this._line_start_it].pre_height - this._start_it_delta;
            var select_2_height = line_list[this._line_cursor_it].acc_height - line_list[this._line_cursor_it].pre_height;
            if (select_2_y < 0)
            {
                select_2_height = select_2_y + select_2_height;
                select_2_y = 0;
            }
            if (select_2_y + select_2_height > this._scroll_list.height)
                select_2_height = this._scroll_list.height - select_2_y;
            if (select_2_height <= 0)
                this._select_2.visible = false;
                
            this._select_2.y = this._scroll_list.y + select_2_y;
            this._select_2.x = this._scroll_list.x;
            this._select_2.height = select_2_height;
            this._select_2.width = line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width;
    
            this._select_3.visible = (line_list[this._line_select_it].acc_height != line_list[this._line_cursor_it].pre_height);
            var select_3_y = line_list[this._line_select_it].acc_height - line_list[this._line_start_it].pre_height - this._start_it_delta;
            var select_3_height = line_list[this._line_cursor_it].pre_height - line_list[this._line_select_it].acc_height;
            if (select_3_y < 0)
            {
                select_3_height = select_3_y + select_3_height;
                select_3_y = 0;
            }
            if (select_3_y + select_3_height > this._scroll_list.height)
                select_3_height = this._scroll_list.height - select_3_y;
            if (select_3_height <= 0)
                this._select_3.visible = false;
                
            this._select_3.y = this._scroll_list.y + select_3_y;
            this._select_3.x = this._scroll_list.x;
            this._select_3.width = this._scroll_list.width;
            this._select_3.height = select_3_height;
    
            // 双光标模式设置光标位置
            if (this._multi_cursor == true)
            {
                this._cursor.visible = false;
    
                this._start_cursor.x = this._select_1.x - this._start_cursor.width;
                this._start_cursor.height = this._select_1.height + this._cursor_margin_up + this._cursor_margin_down;
                this._start_cursor.y = this._select_1.y - this._cursor_margin_up;
    
                this._end_cursor.x = this._select_2.x + this._select_2.width;
                this._end_cursor.height = this._select_2.height + this._cursor_margin_up + this._cursor_margin_down;
                this._end_cursor.y = this._select_2.y - this._cursor_margin_up;
    
                this._start_cursor.visible = this._select_1.visible;
                this._end_cursor.visible = this._select_2.visible;
    
                this._start_cursor_data = "select";
                this._end_cursor_data = "cursor";
    
                this._event_start_x = this._select_1.x;
                this._event_start_y = this._select_1.y;
                this._event_end_x = this._select_2.x + this._select_2.width;
                this._event_end_y = this._select_2.y + this._select_2.height;
            }
        }
        else
        {
            this._select_1.visible = false;
            this._select_2.visible = false;
            this._select_3.visible = false;
            // 选择光标位置在前
            if (line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width > line_list[this._line_select_it].char_list[this._char_select_it].acc_width)
            {
                this._select_1.visible = true;
                var select_1_y = line_list[this._line_cursor_it].pre_height - line_list[this._line_start_it].pre_height - this._start_it_delta;
                var select_1_height = line_list[this._line_cursor_it].acc_height - line_list[this._line_cursor_it].pre_height;
                if (select_1_y < 0)
                {
                    select_1_height = select_1_y + select_1_height;
                    select_1_y = 0;
                }
                if (select_1_y + select_1_height > this._scroll_list.height)
                    select_1_height = this._scroll_list.height - select_1_y;
                if (select_1_height <= 0)
                    this._select_1.visible = false;
                    
                this._select_1.x = this._scroll_list.x + line_list[this._line_select_it].char_list[this._char_select_it].acc_width;
                this._select_1.y = this._scroll_list.y + select_1_y;
    
                this._select_1.height = select_1_height;
                this._select_1.width = line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width - line_list[this._line_select_it].char_list[this._char_select_it].acc_width;
    
                // 双光标模式设置光标位置
                if (this._multi_cursor == true)
                {
                    this._cursor.visible = false;
    
                    this._start_cursor.x = this._select_1.x - this._start_cursor.width;
                    this._start_cursor.height = this._select_1.height + this._cursor_margin_up + this._cursor_margin_down;
                    this._start_cursor.y = this._select_1.y - this._cursor_margin_up;
    
                    this._end_cursor.x = this._select_1.x + this._select_1.width;
                    this._end_cursor.height = this._start_cursor.height;
                    this._end_cursor.y = this._start_cursor.y;
    
                    this._start_cursor.visible = this._select_1.visible;
                    this._end_cursor.visible = this._select_1.visible;
    
                    this._start_cursor_data = "select";
                    this._end_cursor_data = "cursor";
    
                    this._event_start_x = this._select_1.x;
                    this._event_start_y = this._select_1.y;
                    this._event_end_x = this._select_1.x + this._select_1.width;
                    this._event_end_y = this._select_1.y + this._select_1.height;
                }
            }
            // 编辑光标位置在前
            elseif (line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width < line_list[this._line_select_it].char_list[this._char_select_it].acc_width)
            {
                this._select_1.visible = true;
                var select_1_y = line_list[this._line_cursor_it].pre_height - line_list[this._line_start_it].pre_height - this._start_it_delta;
                var select_1_height = line_list[this._line_cursor_it].acc_height - line_list[this._line_cursor_it].pre_height;
                if (select_1_y < 0)
                {
                    select_1_height = select_1_y + select_1_height;
                    select_1_y = 0;
                }
                if (select_1_y + select_1_height > this._scroll_list.height)
                    select_1_height = this._scroll_list.height - select_1_y;
                if (select_1_height <= 0)
                    this._select_1.visible = false;
                    
                this._select_1.x = this._scroll_list.x + line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width;
                this._select_1.y = this._scroll_list.y + select_1_y;
    
                this._select_1.height = select_1_height;
                this._select_1.width = line_list[this._line_select_it].char_list[this._char_select_it].acc_width - line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width;
    
                // 双光标模式设置光标位置
                if (this._multi_cursor == true)
                {
                    this._cursor.visible = false;
    
                    this._start_cursor.x = this._select_1.x - this._start_cursor.width;
                    this._start_cursor.height = this._select_1.height + this._cursor_margin_up + this._cursor_margin_down;
                    this._start_cursor.y = this._select_1.y - this._cursor_margin_up;
    
                    this._end_cursor.x = this._select_1.x + this._select_1.width;
                    this._end_cursor.height = this._start_cursor.height;
                    this._end_cursor.y = this._start_cursor.y;
    
                    this._start_cursor.visible = this._select_1.visible;
                    this._end_cursor.visible = this._select_1.visible;
    
                    this._start_cursor_data = "cursor";
                    this._end_cursor_data = "select";
    
                    this._event_start_x = this._select_1.x;
                    this._event_start_y = this._select_1.y;
                    this._event_end_x = this._select_1.x + this._select_1.width;
                    this._event_end_y = this._select_1.y + this._select_1.height;
                }
            }
        }
    }
    // 删除指定位置的内容
    protected fun DeleteTextImpl(int line_begin_it, int begin_it, int line_end_it, int end_it)
    {
        // 检查是否有字体
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return;

        var line_list = this._line_list;
    
        // 初始化位置
        var line_delete_begin = line_begin_it;
        var line_delete_end = line_end_it;
        var char_delete_begin = begin_it;
        var char_delete_end = end_it;
        // 调整起始位置和结束位置
        if (line_list[line_begin_it].pre_height > line_list[line_end_it].pre_height)
        {
            line_delete_begin = line_end_it;
            char_delete_begin = end_it;
    
            line_delete_end = line_begin_it;
            char_delete_end = begin_it;
        }
        elseif (line_list[line_begin_it].pre_height == line_list[line_end_it].pre_height)
        {
            if (line_list[line_begin_it].char_list[begin_it].acc_width > line_list[line_end_it].char_list[end_it].acc_width)
            {
                char_delete_begin = end_it;
                char_delete_end = begin_it;
            }
        }
    
        // 如果起始行在中间，那么删除行调整为新的起始行
        if (line_list[this._line_start_it].pre_height >= line_list[line_delete_begin].pre_height)
        {
            this._line_start_it = line_delete_begin;
            this._start_it_delta = 0;
        }
    
        // 计算文本 calc text
        var calc_text_1 = new List<RichEditCharInfo>();
        var calc_text_1_count = 0;
    
        // 计算这行的删除开始位置
        var char_it = 1;
        char_it = char_it + 1;
        char_delete_begin = char_delete_begin + 1;
        var line = line_list[line_delete_begin];
        while (char_it != char_delete_begin)
        {
            ++ calc_text_1_count;
            calc_text_1[calc_text_1_count] = line.char_list[char_it];
            char_it = char_it + 1;
        }

        var calc_text_2 = new List<RichEditCharInfo>();
        var calc_text_2_count = 0;
        // 计算当前当的结束位置
        char_it = char_delete_end;
        char_it = char_it + 1;
        line = line_list[line_delete_end];
        while (char_it <= line.char_count)
        {
            ++ calc_text_2_count;
            calc_text_2[calc_text_2_count] = line.char_list[char_it];
            char_it = char_it + 1;
        }
    
        // 操作剩下的行
        var line_it = line_delete_end;
        line_it = line_it + 1;
        var free_line_it = 0;
        while (line_it <= this._line_count)
        {
            char_it = 1;
            line = line_list[line_it];
    
            // 如果第一个字符是强制换行，那么接下来的文本布局都不会发生变化，只是y轴的坐标变化
            if (line.force_line)
            {
                free_line_it = line_it;
                break;
            }
    
            while (char_it <= line.char_count)
            {
                ++ calc_text_2_count;
                calc_text_2[calc_text_2_count] = line.char_list[char_it];
                char_it = char_it + 1;
            }
            line_it = line_it + 1;
        }
    
        // 从line_delete_begin（不包括自己）开始删除直至结束，然后重新计算
        var char_info = line_list[line_delete_begin].char_list[1];
        line_list[line_delete_begin].char_list = new List<RichEditCharInfo>();
        line_list[line_delete_begin].char_count = 1;
        line_list[line_delete_begin].char_list[1] = char_info;
        line_list[line_delete_begin].child_list = new List<DisplayObject>();
        line_list[line_delete_begin].child_count = 0;
        line_list[line_delete_begin].acc_height = line_list[line_delete_begin].pre_height;
        line_list[line_delete_begin].container = null;
    
        // 把不需要处理的内容保存起来
        var free_line_list:List<RichEditLineInfo> = null;
        var free_line_list_count = 0;
        if (free_line_it > 0)
        {
            free_line_list = new List<RichEditLineInfo>();
            for (var i = free_line_it; i <= this._line_count; 1)
            {
                ++ free_line_list_count;
                free_line_list[free_line_list_count] = line_list[i];
            }
        }
    
        line_it = line_delete_begin;
        line_it = line_it + 1;
        for (var i = line_it; i <= this._line_count; 1)
            line_list[i] = null;
        this._line_count = line_delete_begin;
    
        calc_text_1 = this.JoinCharInfoList(calc_text_1);
        calc_text_2 = this.JoinCharInfoList(calc_text_2);
    
        // 计算文本，并且获得编辑光标位置
        this._line_cursor_it, this._char_cursor_it = this.InsertTextUtil(calc_text_1);
        // 继续插入文本
        this.InsertTextUtil(calc_text_2);
    
        // 直接把行添加到尾巴
        if (free_line_list != null)
        {
            // 获取最后一行的高度
            var last_line = line_list[this._line_count];
            if (last_line.char_count == 1 && last_line.force_line)
                last_line.acc_height = last_line.pre_height + this._enter_key_height;

            var start_y = last_line.acc_height;
            // 遍历剩下的行
            for (var k, line_v in free_line_list)
            {
                // 添加一行
                this._line_count = this._line_count + 1;
                line_list[this._line_count] = line_v;
    
                // 设置行的高度
                var line_height = line_v.acc_height - line_v.pre_height;
                line_v.pre_height = start_y;
                start_y = start_y + line_height;
                line_v.acc_height = start_y;
            }
        }
    
        // 设置为非选中状态
        this._line_select_it = this._line_count + 1;
        this._line_select_it = this._line_select_it - 1;
        this._char_select_it = line_list[this._line_select_it].char_count + 1;
    
        this.Draw();
    }
    
    // 插入文本
    protected fun InsertTextImpl(List<RichEditCharInfo> char_info_list, bool selected)
    {
        // 检查是否有字体
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return;
        if (char_info_list[1] == null)
            return;

        var line_list = this._line_list;
    
        // 记住插入之前光标的位置
        var line_cursor_it_tmp = this._line_cursor_it;
        var char_cursor_it_tmp = this._char_cursor_it;
    
        //处理当前行的文本///////////////////////////////////////////////////////////////////////////////

        var calc_text_1 = new List<RichEditCharInfo>();
        var calc_text_1_count = 0;
        // 准备文本prepare text forword
        var char_it = 1;
        char_it = char_it + 1;
        var char_end_it = this._char_cursor_it;
        char_end_it = char_end_it + 1;
        var line = line_list[this._line_cursor_it];
        while (char_it != char_end_it)
        {
            ++ calc_text_1_count;
            calc_text_1[calc_text_1_count] = line.char_list[char_it];
            char_it = char_it + 1;
        }
    
        // 添加新的文本
        for (var k, v in char_info_list)
        {
            ++ calc_text_1_count;
            calc_text_1[calc_text_1_count] = v;
        }

        var calc_text_2 = new List<RichEditCharInfo>();
        var calc_text_2_count = 0;
        // 添加旧的文本
        char_it = this._char_cursor_it;
        char_it = char_it + 1;
        line = line_list[this._line_cursor_it];
        while (char_it <= line.char_count)
        {
            ++ calc_text_2_count;
            calc_text_2[calc_text_2_count] = line.char_list[char_it];
            char_it = char_it + 1;
        }
    
        // 添加剩余的行///////////////////////////////////////////////////////////////////////////////
        var line_it = this._line_cursor_it;
        line_it = line_it + 1;
        // 标记不需要处理的位置
        var free_line_it = 0;
        while (line_it <= this._line_count)
        {
            char_it = 1;
            line = line_list[line_it];
    
            // 如果第一个字符是强制换行，那么接下来的文本布局都不会发生变化，只是y轴的坐标变化
            if (line.force_line)
            {
                free_line_it = line_it;
                break;
            }
    
            // 如果不是换行那么直接添加进去处理
            while (char_it <= line.char_count)
            {
                ++ calc_text_2_count;
                calc_text_2[calc_text_2_count] = line.char_list[char_it];
                char_it = char_it + 1;
            }
            line_it = line_it + 1;
        }
    
        // 删除行并且添加结束字符
        var char_info = line_list[this._line_cursor_it].char_list[1];
        line_list[this._line_cursor_it].char_list = new List<RichEditCharInfo>();
        line_list[this._line_cursor_it].char_count = 1;
        line_list[this._line_cursor_it].char_list[1] = char_info;
        line_list[this._line_cursor_it].child_list = new List<DisplayObject>();
        line_list[this._line_cursor_it].child_count = 0;
        line_list[this._line_cursor_it].acc_height = line_list[this._line_cursor_it].pre_height;
        line_list[this._line_cursor_it].container = null;
    
        // 把不需要处理的内容保存起来
        var free_line_list:List<RichEditLineInfo> = null;
        var free_line_list_count = 0;
        if (free_line_it > 0)
        {
            free_line_list = new List<RichEditLineInfo>();
            for (var i = free_line_it; i <= this._line_count; 1)
            {
                ++ free_line_list_count;
                free_line_list[free_line_list_count] = line_list[i];
            }
        }
    
        // 清空掉所有的行
        line_it = this._line_cursor_it;
        line_it = line_it + 1;
        for (var i = line_it; i <= this._line_count; 1)
            line_list[i] = null;
        this._line_count = this._line_cursor_it;
    
        calc_text_1 = this.JoinCharInfoList(calc_text_1);
        calc_text_2 = this.JoinCharInfoList(calc_text_2);
    
        // 计算文本获取编辑光标的位置
        this._line_cursor_it, this._char_cursor_it = this.InsertTextUtil(calc_text_1);
    
        // 继续插入文本
        this.InsertTextUtil(calc_text_2);
    
        // 直接把行添加到尾巴
        if (free_line_list != null)
        {
            // 获取最后一行的高度
            var last_line = line_list[this._line_count];
            if (last_line.char_count == 1 && last_line.force_line)
                last_line.acc_height = last_line.pre_height + this._enter_key_height;
            var start_y = last_line.acc_height;
            // 遍历剩下的行
            for (var k1, line_v in free_line_list)
            {
                // 添加一行
                this._line_count = this._line_count + 1;
                line_list[this._line_count] = line_v;
    
                // 设置行的高度
                var line_height = line_v.acc_height - line_v.pre_height;
                line_v.pre_height = start_y;
                start_y = start_y + line_height;
                line_v.acc_height = start_y;
            }
        }
    
        // 设置为非选中状态
        if (selected)
        {
            this._line_select_it = line_cursor_it_tmp;
            this._char_select_it = char_cursor_it_tmp;
        }
        else
        {
            this._line_select_it = this._line_count + 1;
            this._line_select_it = this._line_select_it - 1;
            this._char_select_it = line_list[this._line_select_it].char_count + 1;
        }
    
        this.Draw();
    }

    protected fun InsertTextUtil(List<RichEditCharInfo> char_info_list) : int, int
    {
        var line_list = this._line_list;
    
        // 如果宽度为0，那么直接返回
        var total_width = this._scroll_list.width;
    
        // 遍历char_info_list，遇到text的，按照\n,\t来拆分
        var new_char_info_list = new List<RichEditCharInfo>();
        var new_char_info_list_count = 0;
        for (var index, char_info in char_info_list)
        {
            if (char_info.ctrl_info == null)
                new_char_info_list_count = this.SplitText(char_info, new_char_info_list, new_char_info_list_count);
            else
            {
                ++ new_char_info_list_count;
                new_char_info_list[new_char_info_list_count] = char_info;
            }
        }
        char_info_list = new_char_info_list;
    
        // 初始化行位置，字符位置
        var line_it = this._line_count + 1;
        line_it = line_it - 1;

        var line_info = line_list[line_it];    // 当前行控件列表的索引
        var begin_it = line_info.char_count + 1;
        begin_it = begin_it - 1;
        if (line_it == 1 && begin_it == 1)
            line_info.char_list[1].text_info = this.InitTextInfo();

        var display_info:RichEditCharInfo = null;                // 当前正在处理的信息
        var display_object:DisplayObject = null;                // 当前正在处理的对象
        var display_index = 1;                // 输入列表的索引
        var remain_width = total_width - line_info.char_list[line_info.char_count].acc_width; // 当前行剩余宽度
        while (true)
        {
            // 获取下一个列表信息
            if (display_info == null)
            {
                display_info = char_info_list[display_index];
                if (display_info == null)
                    break;
            }
            // 判断类型
            if (display_info.ctrl_info == null)
            {
                // 处理换行
                if (display_info.text == "\n")
                {
                    // 处理上一行的高度
                    if (line_info.char_count == 1)
                        line_info.acc_height = line_info.pre_height + this._enter_key_height;
    
                    // 结束之前的行，启动新的行
                    var new_line_info = new RichEditLineInfo();
                    new_line_info.char_list = new List<RichEditCharInfo>();
                    new_line_info.child_list = new List<DisplayObject>();
                    new_line_info.char_count = 0;
                    new_line_info.child_count = 0;
                    new_line_info.pre_height = line_info.acc_height + this._line_spacing;
                    new_line_info.acc_height = line_info.acc_height;
                    new_line_info.force_line = true;
                    new_line_info.container = null;
                    this._line_count = this._line_count + 1;
                    line_list[this._line_count] = new_line_info;

                    var char_info = new RichEditCharInfo();
                    char_info.acc_width = 0;
                    char_info.pre_width = 0;
                    char_info.text_info = display_info.text_info;        // 文本的内容
                    char_info.text_object = null;
                    char_info.text = "\n";
                    char_info.ctrl_info = null;
                    char_info.ctrl = null;
                    new_line_info.char_count = new_line_info.char_count + 1;
                    new_line_info.char_list[new_line_info.char_count] = char_info;

                    // 保存为当前行
                    line_info = new_line_info;
    
                    // 置空当前正在处理的信息
                    display_info = null;
                    display_object = null;
                    // 下表向后移动
                    display_index = display_index + 1;
                    // 初始化最大宽度
                    remain_width = total_width;
                }
                elseif (display_info.text == "\t")
                {
                    // 创建控件
                    if (display_object == null)
                    {
                        var name = "nkacbjbsakcvuqocbakcbjcbvjhciqwojqppwvnwe";
                        this._ctrl_sys.RegisterInfo(name, String_CopyTable(display_info.text_info));
                        display_object = this._ctrl_sys.CreateControl{DisplayObject}(name, this._link_map);
                        this._ctrl_sys.UnRegisterInfo(name);
                        display_object.text = "    "; // 用四个空格代替\t
                    }

                    var object_width = display_object.width;
                    var object_height = display_object.height;
                    // 初始化绘制文本
                    this.SetDrawText(cast<Text>(display_object));
                    // 把所有的字符全部切割取出大小，然后排成列表
                    var calc_text = "\t";
                    while (calc_text != "")
                    {
                        var byte_count = String_GetByteCount(calc_text, 1);
                        var sub_text = __sub(calc_text, 1, byte_count);
                        var text_width = this._draw_text.native_show.CalcTextWidth("    ");
                        var char_info = new RichEditCharInfo();
                        char_info.pre_width = line_info.char_list[line_info.char_count].acc_width;
                        char_info.acc_width = char_info.pre_width + text_width;
                        char_info.text_info = display_info.text_info;        // 文本的内容
                        char_info.text_object = cast<Text>(display_object);
                        char_info.text = sub_text;
                        char_info.ctrl_info = null;
                        char_info.ctrl = null;
                        line_info.char_count = line_info.char_count + 1;
                        line_info.char_list[line_info.char_count] = char_info;

                        calc_text = __sub(calc_text, byte_count + 1);
                    }
    
                    // 添加到行列表
                    ++ line_info.child_count;
                    line_info.child_list[line_info.child_count] = display_object;
                    // 调整最大高度
                    if (line_info.acc_height - line_info.pre_height < object_height)
                        line_info.acc_height = line_info.pre_height + object_height;

                    // 计算剩余宽度
                    remain_width = remain_width - object_width;
                    if (remain_width <= 0)
                    {
                        // 结束之前的行，启动新的行
                        var new_line_info = new RichEditLineInfo();
                        new_line_info.char_list = new List<RichEditCharInfo>();
                        new_line_info.child_list = new List<DisplayObject>();
                        new_line_info.char_count = 0;
                        new_line_info.child_count = 0;
                        new_line_info.pre_height = line_info.acc_height + this._line_spacing;
                        new_line_info.acc_height = line_info.acc_height;
                        new_line_info.force_line = false;
                        new_line_info.container = null;
                        this._line_count = this._line_count + 1;
                        line_list[this._line_count] = new_line_info;

                        var char_info = new RichEditCharInfo();
                        char_info.acc_width = 0;
                        char_info.pre_width = 0;
                        char_info.text_info = display_info.text_info;        // 文本的内容
                        char_info.text_object = null;
                        char_info.text = "";
                        char_info.ctrl_info = null;
                        char_info.ctrl = null;
                        new_line_info.char_count = new_line_info.char_count + 1;
                        new_line_info.char_list[new_line_info.char_count] = char_info;

                        // 保存为当前行
                        line_info = new_line_info;
    
                        // 初始化最大宽度
                        remain_width = total_width;
                    }
                    // 清空处理后的对象
                    display_object = null;
                    display_info = null;
                    // 指向下一个下标
                    display_index = display_index + 1;
                }
                // 处理文本
                else
                {
                    while (true)
                    {
                        // 创建控件
                        if (display_info.text == "")
                        {
                            display_info = null;
                            display_index = display_index + 1;
                            break;
                        }
                        if (display_object == null)
                        {
                            var name = "nkacbjbsakcvuqocbakcbjcbvjhciqwojqppwvnwe";
                            this._ctrl_sys.RegisterInfo(name, String_CopyTable(display_info.text_info));
                            display_object = this._ctrl_sys.CreateControl{DisplayObject}(name, this._link_map);
                            this._ctrl_sys.UnRegisterInfo(name);
                        }
                        // 计算最多可以当多少字节的文本
                        var count = display_object._show.CutTextByWidth(__floor(remain_width), display_info.text, __floor(total_width));
                        // 不够塞一个字，且本行无控件的情况下，要塞一个字进去
                        if (count == 0 && line_info.char_count <= 1)
                            count = String_GetByteCount(display_info.text, 1);
    
                        if (count == 0)
                            remain_width = 0;
                        else
                        {
                            // 设置裁剪后的值
                            var calc_text = __sub(display_info.text, 1, count);
                            display_object.text = calc_text;
                            var object_width = display_object.width;
                            var object_height = display_object.height;
    
                            // 初始化绘制文本
                            this.SetDrawText(cast<Text>(display_object));
                            // 把所有的字符全部切割取出大小，然后排成列表
                            var char_count = display_object._show.GetCutWidthListCount();
                            for (var i = 1; i <= char_count; 1)
                            {
                                var byte_count = String_GetByteCount(calc_text, 1);
                                var sub_text = __sub(calc_text, 1, byte_count);
                                var text_width = display_object._show.GetCutWidthByIndex(i - 1);
                                var char_info = new RichEditCharInfo();
                                char_info.pre_width = line_info.char_list[line_info.char_count].acc_width;
                                char_info.acc_width = text_width;
                                char_info.text_info = display_info.text_info;        // 文本的内容
                                char_info.text_object = cast<Text>(display_object);
                                char_info.text = sub_text;
                                char_info.ctrl_info = null;
                                char_info.ctrl = null;
                                line_info.char_count = line_info.char_count + 1;
                                line_info.char_list[line_info.char_count] = char_info;
                                calc_text = __sub(calc_text, byte_count + 1);
                            }
                            remain_width = remain_width - object_width;
                            display_object._show.ClearCutWidthCache();
    
                            // 创建新的显示信息
                            var new_display_info = String_CopyTable(display_info);
                            new_display_info.text = __sub(display_info.text, count + 1);
                            // 添加到行列表
                            ++ line_info.child_count;
                            line_info.child_list[line_info.child_count] = display_object;
                            // 调整最大高度
                            if (line_info.acc_height - line_info.pre_height < object_height)
                                line_info.acc_height = line_info.pre_height + object_height;

                            display_info = new_display_info;
                            // 清空处理后的对象
                            display_object = null;
                        }
    
                        if (remain_width <= 0)
                        {
                            // 结束之前的行，启动新的行
                            var new_line_info = new RichEditLineInfo();
                            new_line_info.char_list = new List<RichEditCharInfo>();
                            new_line_info.child_list = new List<DisplayObject>();
                            new_line_info.char_count = 0;
                            new_line_info.child_count = 0;
                            new_line_info.pre_height = line_info.acc_height + this._line_spacing;
                            new_line_info.acc_height = line_info.acc_height;
                            new_line_info.force_line = false;
                            new_line_info.container = null;
                            this._line_count = this._line_count + 1;
                            line_list[this._line_count] = new_line_info;

                            var char_info = new RichEditCharInfo();
                            char_info.acc_width = 0;
                            char_info.pre_width = 0;
                            char_info.text_info = display_info.text_info;        // 文本的内容
                            char_info.text_object = null;
                            char_info.text = "";
                            char_info.ctrl_info = null;
                            char_info.ctrl = null;
                            new_line_info.char_count = new_line_info.char_count + 1;
                            new_line_info.char_list[new_line_info.char_count] = char_info;

                            // 保存为当前行
                            line_info = new_line_info;
                            // 初始化最大宽度
                            remain_width = total_width;
                        }
                    }
                }
            }
            else
            {
                // 创建控件
                if (display_object == null)
                {
                    if (display_info.ctrl == null)
                    {
                        var name = "nkacbjbsakcvuqocbakcbjcbvjhciqwojqppwvnwe";
                        this._ctrl_sys.RegisterInfo(name, String_CopyTable(display_info.ctrl_info));
                        display_object = this._ctrl_sys.CreateControl{DisplayObject}(name, this._link_map);
                        this._ctrl_sys.UnRegisterInfo(name);
                    }
                    else
                        display_object = display_info.ctrl;
                }
    
                // 计算大小，处理换行
                var object_width = display_object.width;
                var object_height = display_object.height;
                if (remain_width >= object_width || (line_info.char_count == 1 && total_width <= object_width))
                {
                    // 添加进去
                    var char_info = new RichEditCharInfo();
                    char_info.pre_width = line_info.char_list[line_info.char_count].acc_width;
                    char_info.acc_width = char_info.pre_width + display_object.width;
                    char_info.text_info = line_info.char_list[line_info.char_count].text_info;        // 文本的内容
                    char_info.text_object = null;
                    char_info.text = null;
                    char_info.ctrl_info = display_info.ctrl_info;
                    char_info.ctrl = display_object;
                    line_info.char_count = line_info.char_count + 1;
                    line_info.char_list[line_info.char_count] = char_info;

                    // 添加到行列表
                    ++ line_info.child_count;
                    line_info.child_list[line_info.child_count] = display_object;
                    // 调整最大高度
                    if (line_info.acc_height - line_info.pre_height < object_height)
                        line_info.acc_height = line_info.pre_height + object_height;
                    // 计算剩余宽度
                    remain_width = remain_width - object_width;
                    if (remain_width <= 0)
                    {
                        // 结束之前的行，启动新的行
                        var new_line_info = new RichEditLineInfo();
                        new_line_info.char_list = new List<RichEditCharInfo>();
                        new_line_info.child_list = new List<DisplayObject>();
                        new_line_info.char_count = 0;
                        new_line_info.child_count = 0;
                        new_line_info.pre_height = line_info.acc_height + this._line_spacing;
                        new_line_info.acc_height = line_info.acc_height;
                        new_line_info.force_line = false;
                        new_line_info.container = null;
                        this._line_count = this._line_count + 1;
                        line_list[this._line_count] = new_line_info;

                        char_info = new RichEditCharInfo();
                        char_info.acc_width = 0;
                        char_info.pre_width = 0;
                        char_info.text_info = line_info.char_list[line_info.char_count].text_info;        // 文本的内容
                        char_info.text_object = null;
                        char_info.text = "";
                        char_info.ctrl_info = null;
                        char_info.ctrl = null;
                        new_line_info.char_count = new_line_info.char_count + 1;
                        new_line_info.char_list[new_line_info.char_count] = char_info;

                        // 保存为当前行
                        line_info = new_line_info;
                        // 初始化最大宽度
                        remain_width = total_width;
                    }
                    // 清空处理后的对象
                    display_object = null;
                    display_info = null;
                    // 指向下一个下标
                    display_index = display_index + 1;
                }
                else
                {
                    // 结束之前的行，启动新的行
                    var new_line_info = new RichEditLineInfo();
                    new_line_info.char_list = new List<RichEditCharInfo>();
                    new_line_info.child_list = new List<DisplayObject>();
                    new_line_info.char_count = 0;
                    new_line_info.child_count = 0;
                    new_line_info.pre_height = line_info.acc_height + this._line_spacing;
                    new_line_info.acc_height = line_info.acc_height;
                    new_line_info.force_line = false;
                    new_line_info.container = null;
                    this._line_count = this._line_count + 1;
                    line_list[this._line_count] = new_line_info;

                    var char_info = new RichEditCharInfo();
                    char_info.acc_width = 0;
                    char_info.pre_width = 0;
                    char_info.text_info = line_info.char_list[line_info.char_count].text_info;        // 文本的内容
                    char_info.text_object = null;
                    char_info.text = "";
                    char_info.ctrl_info = null;
                    char_info.ctrl = null;
                    new_line_info.char_count = new_line_info.char_count + 1;
                    new_line_info.char_list[new_line_info.char_count] = char_info;

                    // 保存为当前行
                    line_info = new_line_info;
                    // 初始化最大宽度
                    remain_width = total_width;
                }
            }
        }
        // 全部处理完后，最后一行是空行，设置行高为回车高度
        if (line_info.char_count == 1)
            line_info.acc_height = line_info.pre_height + this._enter_key_height;

        var line_begin_it = this._line_count + 1;
        line_begin_it = line_begin_it - 1;
        begin_it = line_list[line_begin_it].char_count + 1;
        begin_it = begin_it - 1;
        return line_begin_it, begin_it;
    }

    protected fun DrawImpl()
    {
        // 移除所有的子控件
        this._scroll_list.RemoveAllChild();
    
        // 遍历所有的行
        for (var line_index, line_info in this._line_list)
        {
            var displayout = line_info.container;
            if (displayout == null)
            {
                displayout = new DisplayLayout(this._ctrl_sys);
                line_info.container = displayout;
                displayout.width_type = UIEnumTypes.SIZE_MARGIN;
                displayout.height = line_info.acc_height - line_info.pre_height;

                var offset_x = 0.0;
                for (var child_index, child in line_info.child_list)
                {
                    child.x = offset_x;
                    offset_x = offset_x + child.width;
                    child.y = displayout.height - child.height;
                    displayout.AddChild(child);
                }
            }
            this._scroll_list.AddChild(displayout);
        }
    
        // 根据光标的位置设置linear的偏移量
        var child = this._scroll_list.GetChildByIndex(this._line_start_it);
        this._scroll_list.scroll_offset = -child.y - this._start_it_delta;
        // 最后裁剪
        this._scroll_list.RefreshClipDisLine();
        this._scroll_list.AdjustScrollBar();
    
        this._draw_loop = null;
    }

    protected fun AdjustContentY()
    {
        if (this._draw_loop != null)
            return;
    
        // 根据光标的位置设置linear的偏移量
        var child = this._scroll_list.GetChildByIndex(this._line_start_it);
        this._scroll_list.scroll_offset = -child.y - this._start_it_delta;
    
        // 最后裁剪
        this._scroll_list.RefreshClipDisLine();
        this._scroll_list.AdjustScrollBar();
    }

    protected fun Draw()
    {
        if (this._draw_loop != null)
            return;
            
        this._draw_loop = new LoopFunction(bind(this.DrawImpl, this), 1, 0, 1);
        A_LoopSystem.AddUpdater(this._draw_loop);
    }
    
    ////////////////////////////////////////-内部函数3，谨慎使用////////////////////////////////////////////

    protected fun CursorOffsetLR(bool left)
    {
        var line_list = this._line_list;
        // 检查是否选中状态
        if (this._char_select_it <= line_list[this._line_select_it].char_count)
        {
            this._char_select_it = line_list[this._line_select_it].char_count + 1;
            // 重置光标
            this.ResetCursor();
            return;
        }
    
        this.CursorOffsetLRImpl(left);
    }

    protected fun CursorOffsetUD(bool up)
    {
        var line_list = this._line_list;
        // 检查是否选中状态
        if (this._char_select_it <= line_list[this._line_select_it].char_count)
        {
            this._char_select_it = line_list[this._line_select_it].char_count + 1;
            // 重置光标
            this.ResetCursor();
            return;
        }
    
        this.CursorOffsetUDImpl(up);
    }

    protected fun SelectCursorOffsetLR(bool left)
    {
        var line_list = this._line_list;
        // 初始化选中下标
        if (this._char_select_it > line_list[this._line_select_it].char_count)
        {
            this._line_select_it = this._line_cursor_it;
            this._char_select_it = this._char_cursor_it;
        }
    
        this.CursorOffsetLRImpl(left);
    }

    protected fun SelectCursorOffsetUD(bool up)
    {
        var line_list = this._line_list;
        // 初始化选中下标
        if (this._char_select_it > line_list[this._line_select_it].char_count)
        {
            this._line_select_it = this._line_cursor_it;
            this._char_select_it = this._char_cursor_it;
        }
    
        this.CursorOffsetUDImpl(up);
    }

    protected fun SetCursorToHome()
    {
        var line_list = this._line_list;
    
        this._char_select_it = line_list[this._line_select_it].char_count + 1;
        this._char_cursor_it = 1;
    
        this.ResetCursor();
    }

    protected fun SetCursorToEnd()
    {
        var line_list = this._line_list;
    
        this._char_select_it = line_list[this._line_select_it].char_count + 1;
        this._char_cursor_it = line_list[this._line_cursor_it].char_count + 1;
        this._char_cursor_it = this._char_cursor_it - 1;
    
        this.ResetCursor();
    }
    
    public fun SelectAll()
    {
        var line_list = this._line_list;
    
        this._line_select_it = 1;
        this._char_select_it = 1;
    
        this._line_cursor_it = this._line_count + 1;
        this._line_cursor_it = this._line_cursor_it - 1;
        this._char_cursor_it = line_list[this._line_cursor_it].char_count + 1;
        this._char_cursor_it = this._char_cursor_it - 1;
    
        this.ResetCursorLine();
    
        this.ResetCursor();
    }
    
    // 调整光标行进入边界范围################
    protected fun ResetCursorLine()
    {
        var line_list = this._line_list;
        // 光标在最后一行
        if (this._line_cursor_it == this._line_count)
        {
            // 最后一行
            if (line_list[this._line_cursor_it].acc_height > this._scroll_list.height && this._scroll_list.scroll_offset < 0)
            {
                //  把光标所在行和下边界对齐
                this._scroll_list.scroll_offset = this._scroll_list.height - line_list[this._line_cursor_it].acc_height;
                this._scroll_list.RefreshClipDisLine();
                this._scroll_list.AdjustScrollBar();
                // 设置当前起始行
                while (line_list[this._line_start_it].pre_height > -this._scroll_list.scroll_offset)
                    this._line_start_it = this._line_start_it - 1;
                this._start_it_delta = -this._scroll_list.scroll_offset - line_list[this._line_start_it].pre_height;
                return;
            }
            if (line_list[this._line_cursor_it].acc_height <= this._scroll_list.height)
            {
                this._scroll_list.scroll_offset = 0;
                this._scroll_list.RefreshClipDisLine();
                this._scroll_list.AdjustScrollBar();
                this._line_start_it = 1;
                this._start_it_delta = 0;
                return;
            }
        }
    
        // 光标行在边界上方
        if (line_list[this._line_cursor_it].pre_height <= -this._scroll_list.scroll_offset)
        {
            //  把光标所在行和上边界对齐
            this._scroll_list.scroll_offset = -line_list[this._line_cursor_it].pre_height;
            this._scroll_list.RefreshClipDisLine();
            this._scroll_list.AdjustScrollBar();
            // 设置当前起始行
            this._line_start_it = this._line_cursor_it;
        }
        // 光标行在边界下方
        elseif (line_list[this._line_cursor_it].acc_height >= this._scroll_list.height - this._scroll_list.scroll_offset)
        {
            //  把光标所在行和下边界对齐
            this._scroll_list.scroll_offset = this._scroll_list.height - line_list[this._line_cursor_it].acc_height;
            this._scroll_list.RefreshClipDisLine();
            this._scroll_list.AdjustScrollBar();
            // 设置当前起始行
            while (line_list[this._line_start_it].acc_height <= -this._scroll_list.scroll_offset)
                this._line_start_it = this._line_start_it + 1;
        }
        this._start_it_delta = -this._scroll_list.scroll_offset - line_list[this._line_start_it].pre_height;
    }

    protected fun ClickCursor(double offset_x, double offset_y)
    {
        var line_list = this._line_list;
    
        this._char_select_it = line_list[this._line_select_it].char_count + 1;
    
        // 设置光标位置
        this._line_cursor_it, this._char_cursor_it = this.GetIteratorByOffset(offset_x, offset_y);
    
        this.ResetCursorLine();
        // 设置当前的字体样式
        this.UpdateFontText();
        this.ResetCursor();
    }

    protected fun ClickWordCursor(double offset_x, double offset_y) : bool
    {
        var line_list = this._line_list;
    
        // 设置光标位置
        this._line_cursor_it, this._char_cursor_it = this.GetIteratorByOffset(offset_x, offset_y);
    
        // 找到左边的字符
        this._char_select_it = this._char_cursor_it;
        this._line_select_it = this._line_cursor_it;
    
        while (true)
        {
            var has_find = false;
            while (true)
            {
                var str = line_list[this._line_cursor_it].char_list[this._char_cursor_it].text;
                if (str != null && __len(str) == 1 && str != "_" && this.CharIsNumber(str) == false && this.CharIsLetter(str) == false)
                {
                    has_find = true;
                    break;
                }
                if (this._char_cursor_it == 1)
                    break;
                this._char_cursor_it = this._char_cursor_it - 1;
            }
            if (has_find)
                break;
            if (this._line_cursor_it == 1)
                break;
    
            this._line_cursor_it = this._line_cursor_it - 1;
            this._char_cursor_it = line_list[this._line_cursor_it].char_count + 1;
            this._char_cursor_it = this._char_cursor_it - 1;
        }
    
        // 找到右边的字符
        var cursor_tmp = this._char_select_it;
        var line_cursor_tmp = this._line_select_it;
        while (true)
        {
            cursor_tmp = cursor_tmp + 1;
            if (cursor_tmp > line_list[this._line_select_it].char_count)
            {
                line_cursor_tmp = line_cursor_tmp + 1;
                if (line_cursor_tmp > this._line_count)
                    break;
                cursor_tmp = 1;
            }
            var str = line_list[line_cursor_tmp].char_list[cursor_tmp].text;
            if (str != null && __len(str) == 1 && str != "_" && this.CharIsNumber(str) == false && this.CharIsLetter(str) == false)
                break;
            this._char_select_it = cursor_tmp;
            this._line_select_it = line_cursor_tmp;
        }
    
        if (this._line_select_it > this._line_count)
        {
            this._line_select_it = this._line_select_it - 1;
            this._char_select_it = line_list[this._line_select_it].char_count + 1;
        }
        if (this._char_select_it > line_list[this._line_select_it].char_count)
            this._char_select_it = this._char_select_it - 1;
    
        if (this._line_select_it == this._line_cursor_it && this._char_select_it == this._char_cursor_it)
            this._char_select_it = line_list[this._line_select_it].char_count + 1;
    
        this.ResetCursorLine();
    
        // 设置当前的字体样式
        this.UpdateFontText();
        this.ResetCursor();
    
        return this._char_select_it <= line_list[this._line_select_it].char_count;
    }

    protected fun DragCursorBegin()
    {
        var line_list = this._line_list;
        this._line_select_it = this._line_cursor_it;
        this._char_select_it = this._char_cursor_it;
    }

    protected fun DragCursor(double offset_x, double offset_y)
    {
        var line_list = this._line_list;
    
        // 设置光标的位置
        this._line_cursor_it, this._char_cursor_it = this.GetIteratorByOffset(offset_x, offset_y);
        // 光标行和上边界重合，偏移为负
        if (line_list[this._line_cursor_it].pre_height == -this._scroll_list.scroll_offset && this._line_cursor_it != 1 && offset_y < 0)
        {
            this._line_cursor_it = this._line_cursor_it - 1;
            if (this._char_cursor_it > line_list[this._line_cursor_it].char_count)
                this._char_cursor_it = line_list[this._line_cursor_it].char_count;
        }
        // 当前光标在最后一行的空行
        if (this._line_cursor_it == this._line_count && line_list[this._line_cursor_it].pre_height == line_list[this._line_cursor_it].acc_height && this._line_cursor_it != 1)
        {
            this._line_cursor_it = this._line_cursor_it - 1;
            this._char_cursor_it = line_list[this._line_cursor_it].char_count;
        }
    
        this.ResetCursorLine();
        this.ResetCursor();
    }
    
    // 拖动整个屏幕，双光标模式调用
    protected fun DragEdit(double delta_y)
    {
        var event = new UIButtonDragEvent();
        event.target = this._scroll_list;
        event.delta_x = 0;
        event.delta_y = delta_y;
        this._scroll_list.HandleDrag(event);

        var line_list = this._line_list;
        // 重设起始行
        // 原来的起始行在边界上方
        if (line_list[this._line_start_it].acc_height <= -this._scroll_list.scroll_offset)
        {
            this._line_start_it = this._line_start_it + 1;
            while (line_list[this._line_start_it].acc_height <= -this._scroll_list.scroll_offset)
                this._line_start_it = this._line_start_it + 1;
        }
        // 原来的起始行在边界下方
        elseif (line_list[this._line_start_it].pre_height > -this._scroll_list.scroll_offset)
        {
            this._line_start_it = this._line_start_it - 1;
            while (line_list[this._line_start_it].pre_height > -this._scroll_list.scroll_offset)
                this._line_start_it = this._line_start_it - 1;
        }
        this._start_it_delta = -this._scroll_list.scroll_offset - line_list[this._line_start_it].pre_height;
        this.ResetCursor();
    }
    
    // 双光标模式检查 trans = true 时，光标位置直接从原来位置获取
    protected fun CheckMultiCursor(double offset_x, double offset_y, bool trans) : bool
    {
        var line_list = this._line_list;
    
        // 设置光标位置
        var line_cursor_it:int;
        var char_cursor_it:int;
        if (trans)
        {
            line_cursor_it = this._line_cursor_it;
            char_cursor_it = this._char_cursor_it;
        }
        else
        {
            line_cursor_it, char_cursor_it = this.GetIteratorByOffset(offset_x, offset_y);
        }
    
        // 不是第一个
        if (char_cursor_it != 1)
        {
            this._line_cursor_it = line_cursor_it;
            this._char_cursor_it = char_cursor_it;
            this._line_select_it = line_cursor_it;
            this._char_select_it = char_cursor_it - 1;
        }
        // 第一个
        else
        {
            // 非空行
            if (line_list[line_cursor_it].char_count > 1)
            {
                this._line_cursor_it = line_cursor_it;
                this._char_cursor_it = char_cursor_it + 1;
                this._line_select_it = line_cursor_it;
                this._char_select_it = char_cursor_it;
            }
            // 空行
            else
            {
                // 不是第一行
                if (line_cursor_it > 1)
                {
                    this._line_cursor_it = line_cursor_it;
                    this._char_cursor_it = char_cursor_it;
                    this._line_select_it = line_cursor_it - 1;
                    this._char_select_it = line_list[this._line_select_it].char_count - 1;
                    if (this._char_select_it == 0)
                        this._char_select_it = 1;
                }
                // 已经是第一行
                else
                {
                    // 有后面的行
                    if (this._line_count > 1)
                    {
                        this._line_cursor_it = line_cursor_it + 1;
                        if (line_list[this._line_cursor_it].char_count == 1)
                            this._char_cursor_it = 1;
                        else
                            this._char_cursor_it = 2;
                        this._line_select_it = line_cursor_it;
                        this._char_select_it = char_cursor_it;
                    }    
                    else
                        return false;
                }
            }
        }
    
        return true;
    }
    
    // 双光标模式点击
    protected fun ClickMultiCursor()
    {
        // 设置当前的字体样式
        this.UpdateFontText();
        this.ResetCursorLine();
        this.ResetCursor();
    }
    
    // 双光标光标移动
    protected fun DragMultiCursor(double offset_x, double offset_y)
    {
        var line_list = this._line_list;
    
        offset_x = offset_x + this._drag_delta_x;
        offset_y = offset_y + this._drag_delta_y;
        // 设置光标的位置
        this._line_cursor_it, this._char_cursor_it = this.GetIteratorByOffset(offset_x, offset_y);
        // 光标行和上边界重合，偏移为负
        if (line_list[this._line_cursor_it].pre_height == -this._scroll_list.scroll_offset && this._line_cursor_it != 1 && offset_y < 0)
        {
            this._line_cursor_it = this._line_cursor_it - 1;
            if (this._char_cursor_it > line_list[this._line_cursor_it].char_count)
                this._char_cursor_it = line_list[this._line_cursor_it].char_count;
        }
        // 当前光标在最后一行的空行
        if (this._line_cursor_it == this._line_count && line_list[this._line_cursor_it].pre_height == line_list[this._line_cursor_it].acc_height && this._line_cursor_it != 1)
        {
            this._line_cursor_it = this._line_cursor_it - 1;
            this._char_cursor_it = line_list[this._line_cursor_it].char_count;
        }
    
        this.ResetCursorLine();
        this.ResetCursor();
    }

    protected fun ShowDefaultText()
    {
        if (this._is_focus == false)
        {
            if (this._focus_cursor && this.is_empty)
                this._default_text_area.visible = true;
            else
                this._default_text_area.visible = false;
        }
        else
            this._default_text_area.visible = false;
    }
    
    ////////////////////////////////////////-内部函数4，谨慎使用////////////////////////////////////////////
    protected fun CursorOffsetLRImpl(bool left)
    {
        var line_list = this._line_list;
        if (left)
        {
            // 检查是否已经是第一行的第一个字符了
            if (this._line_cursor_it == 1 && this._char_cursor_it == 1)
                return;
    
            // 如果开始行和光标行是同一行
            if (this._line_cursor_it == this._line_start_it)
            {
                // 如果是第一个字符，那么要向上走一步
                if (this._char_cursor_it == 1)
                {
                    // 光标行减一，起始行减一
                    this._line_cursor_it = this._line_cursor_it - 1;
                    this._line_start_it = this._line_start_it - 1;
                    // 光标设置到最后一个字符
                    this._char_cursor_it = line_list[this._line_cursor_it].char_count + 1;
                    this._char_cursor_it = this._char_cursor_it - 1;
                }
                else
                    this._char_cursor_it = this._char_cursor_it - 1;
            }
            // 如果光标和起始行不是同一行
            else
            {
                // 如果是第一个字符
                if (this._char_cursor_it == 1)
                {
                    // 光标减一
                    this._line_cursor_it = this._line_cursor_it - 1;
                    // 光标设置到最后一个字符
                    this._char_cursor_it = line_list[this._line_cursor_it].char_count + 1;
                    this._char_cursor_it = this._char_cursor_it - 1;
                }
                else
                    this._char_cursor_it = this._char_cursor_it - 1;
            }
    
            // 当前光标在最后一行的空行
            if (this._line_cursor_it == this._line_count && line_list[this._line_cursor_it].pre_height == line_list[this._line_cursor_it].acc_height && this._line_cursor_it != 1)
            {
                this._line_cursor_it = this._line_cursor_it - 1;
                this._char_cursor_it = line_list[this._line_cursor_it].char_count;
            }
    
            this.ResetCursorLine();
            this.ResetCursor();
            return;
        }

        var end_line_it = this._line_count + 1;
        end_line_it = end_line_it - 1;
        var end_char_it = line_list[end_line_it].char_count + 1;
        end_char_it = end_char_it - 1;
    
        // 如果是最后一个字符，直接返回
        if (this._line_cursor_it == end_line_it && this._char_cursor_it == end_char_it)
            return;
    
        // 获取当前最后一个字符的行
        end_char_it = line_list[this._line_cursor_it].char_count + 1;
        end_char_it = end_char_it - 1;
        // 如果在最后一个字符，那么想下走一行
        if (this._char_cursor_it == end_char_it)
        {
            // 光标行加一
            this._line_cursor_it = this._line_cursor_it + 1;
            // 光标设置在第一个字符
            this._char_cursor_it = 1;
        }
        else
            this._char_cursor_it = this._char_cursor_it + 1;

        // 当前光标在最后一行的空行
        if (this._line_cursor_it == this._line_count && line_list[this._line_cursor_it].pre_height == line_list[this._line_cursor_it].acc_height && this._line_cursor_it != 1)
        {
            this._line_cursor_it = this._line_cursor_it - 1;
            this._char_cursor_it = line_list[this._line_cursor_it].char_count;
        }
    
        this.ResetCursorLine();
        this.ResetCursor();
    }

    protected fun CursorOffsetUDImpl(bool up)
    {
        var line_list = this._line_list;
    
        if (up)
        {
            // 如果是第一行，那么直接返回
            if (this._line_cursor_it == 1)
                return;
    
            // 计算便宜宽度
            var offset_x = line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width;
    
            // 如果是起始行，那么起始行减一
            if (this._line_cursor_it == this._line_start_it)
                this._line_start_it = this._line_start_it - 1;
            // 光标行减一
            this._line_cursor_it = this._line_cursor_it - 1;
    
            // 根据偏移调整列的位置
            this._char_cursor_it = 1;
            var end_char_it = line_list[this._line_cursor_it].char_count + 1;
            while (this._char_cursor_it != end_char_it)
            {
                if (line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width >= offset_x)
                    break;
                this._char_cursor_it = this._char_cursor_it + 1;
            }
    
            if (this._char_cursor_it == end_char_it)
            {
                end_char_it = end_char_it - 1;
                this._char_cursor_it = end_char_it;
            }
    
            // 当前光标在最后一行的空行
            if (this._line_cursor_it == this._line_count && line_list[this._line_cursor_it].pre_height == line_list[this._line_cursor_it].acc_height && this._line_cursor_it != 1)
            {
                this._line_cursor_it = this._line_cursor_it - 1;
                this._char_cursor_it = line_list[this._line_cursor_it].char_count;
            }
    
            this.ResetCursorLine();
            this.ResetCursor();
            return;
        }
    
        // 如果是最后一行，那么直接返回
        var line_end_test_it = this._line_count + 1;
        line_end_test_it = line_end_test_it - 1;
        // 在最后一行按下
        if (this._line_cursor_it == line_end_test_it)
        {
            this._char_cursor_it = line_list[this._line_cursor_it].char_count;
            this.ResetCursorLine();
            this.ResetCursor();
            return;
        }
        // 根据偏移宽度
        var offset_x = line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width;
        // 光标想下走一行
        this._line_cursor_it = this._line_cursor_it + 1;
    
        // 根据便宜重新调整列的位置
        this._char_cursor_it = 1;
        var end_char_it = line_list[this._line_cursor_it].char_count + 1;
        while (this._char_cursor_it != end_char_it)
        {
            if (line_list[this._line_cursor_it].char_list[this._char_cursor_it].acc_width >= offset_x)
                break;
            this._char_cursor_it = this._char_cursor_it + 1;
        }
        if (this._char_cursor_it == end_char_it)
        {
            end_char_it = end_char_it - 1;
            this._char_cursor_it = end_char_it;
        }
    
        // 当前光标在最后一行的空行
        if (this._line_cursor_it == this._line_count && line_list[this._line_cursor_it].pre_height == line_list[this._line_cursor_it].acc_height && this._line_cursor_it != 1)
        {
            this._line_cursor_it = this._line_cursor_it - 1;
            this._char_cursor_it = line_list[this._line_cursor_it].char_count;
        }
    
        this.ResetCursorLine();
        this.ResetCursor();
    }

    protected fun GetIteratorByOffset(double offset_x, double offset_y) : int, int
    {
        var line_list = this._line_list;

        var line_it = this._line_start_it;
        var line_end_it = this._line_count + 1;
    
        // 获取总偏移
        var real_offset_y = offset_y + line_list[this._line_start_it].pre_height + this._start_it_delta;
        while (line_it != line_end_it)
        {
            // 如果偏移大于当前行，那么就向下走一行
            if (real_offset_y <= line_list[line_it].acc_height)
            {
                var half_line_height = (line_list[line_it].acc_height - line_list[line_it].pre_height) * 0.5;
                if (real_offset_y - line_list[line_it].acc_height > half_line_height)
                    line_it = line_it + 1;
                break;
            }
            else
                line_it = line_it + 1;
        }
    
        // 如果到了结束的位置，重置为最后一行
        if (line_it == line_end_it)
        {
            line_end_it = line_end_it - 1;
            line_it = line_end_it;
        }
    
        // 设置结果
        var line_it_result = line_it;

        var real_offset_x = offset_x;

        var char_it = 1;
        var char_end_it = line_list[line_it].char_count + 1;
        var line = line_list[line_it];
        while (char_it != char_end_it)
        {
            if (real_offset_x <= line.char_list[char_it].acc_width)
            {
                var half_char_width = (line.char_list[char_it].acc_width - line.char_list[char_it].pre_width) * 0.5;
                if (real_offset_x - line.char_list[char_it].pre_width < half_char_width && char_it != 1)
                    char_it = char_it - 1;
                break;
            }
            else
                char_it = char_it + 1;
        }
        // 如果在结束位置，那么就调整为最后一个字符
        if (char_it == char_end_it)
        {
            char_end_it = char_end_it - 1;
            char_it = char_end_it;
        }

        var char_it_result = char_it;
        return line_it_result, char_it_result;
    }
    
    //-处理事件//////////////////////////////////////////////////////////////////////////////////////-
    
    public get is_input() : bool
    {
        return true;
    }
    
    public get is_empty() : bool
    {
        return this._line_count == 1 && this._line_list[1].char_count == 1;
    }
    
    public get editable() : bool
    {
        return this._editable;
    }
    
    public set editable(bool value)
    {
        this._editable = value;
    }
    
    public set ims_padding(double value)
    {
        this._ims_padding = value;
    }
    
    public get ims_padding() : double
    {
        return this._ims_padding;
    }
    
    // 设置单光标位置
    public fun SetCursor(double rel_x, double rel_y)
    {
        if (this._auto_ims)
            this.OpenIME();
    
        this._is_selecting = false;
    
        if (this._multi_cursor)
        {
            this._multi_cursor = false;
            this._start_cursor.visible = false;
            this._end_cursor.visible = false;
            this._cursor.visible = true;
            this.ClickCursor(rel_x - this._scroll_list.x, rel_y - this._scroll_list.y);
        }
        else
            this.ClickCursor(rel_x - this._scroll_list.x, rel_y - this._scroll_list.y);
    }
    
    public fun SetMultiCursor(double rel_x, double rel_y) : bool
    {
        if (this._auto_ims)
            this.OpenIME();

        var result = this.CheckMultiCursor(rel_x - this._scroll_list.x, rel_y - this._scroll_list.y, false);
        if (result == false)
            return false;
    
        this._is_selecting = true;
        if (this._multi_cursor == false)
        {
            this._multi_cursor = true;  // 表为双光标
            this._cursor.visible = false;
            this._start_cursor.visible = true;
            this._end_cursor.visible = true;
            this.ClickMultiCursor();
        }
        else
            this.ClickMultiCursor();

        return true;
    }
    
    // 双光标转换为单光标（位置不变）
    public fun TransToCursor()
    {
        if (this._multi_cursor == false)
            return;

        var line_list = this._line_list;
    
        // 将双光标的结束光标设置为光标位置
        if (this._end_cursor_data == "select")
        {
            this._line_cursor_it = this._line_select_it;
            this._char_cursor_it = this._char_select_it;
        }
        // 选择光标不可见
        this._char_select_it = line_list[this._line_select_it].char_count + 1;
    
        this._is_selecting = false;
        this._multi_cursor = false;
        this._start_cursor.visible = false;
        this._end_cursor.visible = false;
        this._cursor.visible = true;
    
        this.UpdateFontText();
        this.ResetCursorLine();
        this.ResetCursor();
    }
    
    // 单光标转换为双光标（位置不变）
    public fun TransToMulti() : bool
    {
        if (this._multi_cursor)
            return false;

        var result = this.CheckMultiCursor(null, null, true);
        if (result == false)
            return false;
    
        this._is_selecting = true;
        this._multi_cursor = true;  // 表为双光标
        this._cursor.visible = false;
        this._start_cursor.visible = true;
        this._end_cursor.visible = true;
    
        this.UpdateFontText();
        this.ResetCursorLine();
        this.ResetCursor();

        return true;
    }
    
    // 打开键盘
    // @param x, y RichEdit键盘感应的左上角绝对坐标（相对于屏幕的）
    // @param width, height RichEidt键盘感应的区域大小
    // 如果以上参数有一个没填，那么就是用RichEdit默认的键盘区域感应
    // 不考虑旋转
    public fun OpenIME([Nullable] double x, [Nullable] double y, [Nullable] double width, [Nullable] double height)
    {
        if (this._editable)
        {
            this.ResetCursor();
            if (x != null && y != null && width != null && height != null)
            {
                System_SetIMERect(__floor(x), __floor(y), __floor(width), __floor(height));
            }
            else
            {
                var global_x, global_y = this.LocalToGlobal();
                global_x = global_x + this.cursor_x;
                global_y = global_y + (this.cursor_y + this.font_size) * this.scale_y;
                System_SetIMERect(__floor(global_x), __floor(global_y), 10, __floor(5 + this._ims_padding));
            }
            System_OpenIME();
        }
    }
    // 关闭键盘
    public fun CloseIME()
    {
        System_CloseIME();
    }
    
    // 处理失去焦点事件
    protected fun HandleFocusOut(UIFocusOutEvent event)
    {
        if (this._auto_ims)
            System_CloseIME();

        this._is_focus = false;
        if (this._focus_cursor)
        {
            if (this._multi_cursor == false)
                this._cursor.visible = false;
        }
        this.ShowDefaultText();
    }

    protected fun HandleFocusIn(UIFocusInEvent event)
    {
        if (this._auto_ims)
            this.OpenIME();

        this._is_focus = true;
        if (this._multi_cursor == false)
            this._cursor.visible = true;

        this.ShowDefaultText();
    }

    // 处理点击事件
    protected fun HandleLButtonDown(UILButtonDownEvent event)
    {
        // 单光标
        if (this._multi_cursor == false)
        {
            this._is_longclick = false;
            // 点击在编辑区域
            if (event.rel_x >= this._scroll_list.x && event.rel_x <= this._scroll_list.x + this._scroll_list.width && event.rel_y >= this._scroll_list.y && event.rel_y <= this._scroll_list.y + this._scroll_list.height)
            {
                if (event.count % 3 == 1)
                {
                    this._is_selecting = false;
                    this.ClickCursor(event.rel_x - this._scroll_list.x, event.rel_y - this._scroll_list.y);
                    // 发送光标点击事件
                    this.DispatchEvent(new RichEditCursorClickEvent());
                }
                elseif (event.count % 3 == 2)
                {
                    this._is_selecting = this.ClickWordCursor(event.rel_x - this._scroll_list.x, event.rel_y - this._scroll_list.y);
                }
                else
                {
                    this._is_selecting = true;
                    this.SelectAll();
                }
                this._is_click = true;
            }
            // 点击在以外区域
            else
                this._is_click = false;
        }
        // 双光标
        else
        {
            this._click_drag_delta_x = 0;
            this._click_drag_delta_y = 0;
            this._is_click = false;
            this._is_click_cursor = false;
            this._is_click_cursor_name = "";
            this._is_longclick = false;
            // 点击在开始光标上
            if (this._start_cursor.visible
                    && event.rel_x >= this._start_cursor.x && event.rel_x <= this._start_cursor.x + this._start_cursor.width
                    && event.rel_y >= this._start_cursor.y && event.rel_y <= this._start_cursor.y + this._start_cursor.height)
            {
                this._is_click_cursor = true;
                this._is_click_cursor_name = "start";
            }
            // 点击在结束光标上
            elseif (this._end_cursor.visible
                    && event.rel_x >= this._end_cursor.x && event.rel_x <= this._end_cursor.x + this._end_cursor.width
                    && event.rel_y >= this._end_cursor.y && event.rel_y <= this._end_cursor.y + this._end_cursor.height)
            {
                this._is_click_cursor = true;
                this._is_click_cursor_name = "end";
            }
            // 没有点击在光标上，判断范围
            else
            {
                // 点击在编辑区域
                if (event.rel_x >= this._scroll_list.x && event.rel_x <= this._scroll_list.x + this._scroll_list.width && event.rel_y >= this._scroll_list.y && event.rel_y <= this._scroll_list.y + this._scroll_list.height)
                    this._is_click = true;
            }
        }
    }

    protected fun HandleLButtonUp(UILButtonUpEvent event)
    {
        // 双光标模式处理
        if (this._multi_cursor == true)
        {
            // 只处理没有长按过
            if (this._is_click && this._is_longclick == false && this._click_drag_delta_x < 2 && this._click_drag_delta_y < 2)
            {
                this._multi_cursor = false;
                this._start_cursor.visible = false;
                this._end_cursor.visible = false;
                this._cursor.visible = true;
                this.ClickCursor(event.rel_x - this._scroll_list.x, event.rel_y - this._scroll_list.y);
    
                // 发送光标点击事件
                this.DispatchEvent(new RichEditCursorClickEvent());
            }
        }
    }
    
    // 长按事件
    protected fun HandleLongLButtonDown(UILongButtonDownEvent event)
    {
        // 单双光标
        if (this._is_click)
        {
            // 不可编辑自动切换为双光标
            if (this.editable == false)
            {
                var result = this.CheckMultiCursor(event.rel_x - this._scroll_list.x, event.rel_y - this._scroll_list.y, false);
                if (result)
                {
                    this._is_selecting = true;
                    if (this._multi_cursor == false)
                    {
                        this._multi_cursor = true;  // 表为双光标
                        this._cursor.visible = false;
                        this._start_cursor.visible = true;
                        this._end_cursor.visible = true;
                        this.ClickMultiCursor();
                    }
                    else
                        this.ClickMultiCursor();
                }
            }
            // 可编辑切换为单光标
            else
            {
                this._multi_cursor = false;
                this._start_cursor.visible = false;
                this._end_cursor.visible = false;
                this._cursor.visible = true;
                this.ClickCursor(event.rel_x - this._scroll_list.x, event.rel_y - this._scroll_list.y);
            }
            // 发送richedit长按事件
            var e = new UIRichEditLongClickEvent();
            e.target = this;
            e.abs_x = event.abs_x;
            e.abs_y = event.abs_y;
            e.rel_x = event.rel_x;
            e.rel_y = event.rel_y;
            this.DispatchEvent(e);
            this._is_longclick = true;
        }
    }
    
    // 如果光标前面一个字符不是字母或者数字就转发@事件
    protected fun CheckAtKeyInput(string input_text) : bool
    {
        if (input_text != "@")
            return false;

        // 获取光标前一个字符是不是数字或者字母
        var line_list = this._line_list;

        var line_cursor_it = this._line_cursor_it; // 检测的行
        var char_cursor_it = this._char_cursor_it; // 光标的位置
        // 是否是开始行的第一个字符
        if (this._line_cursor_it == 1 && this._char_cursor_it == 1)
        {
            this.DispatchEvent(new UIAtKeyEvent());
            return true;
        }
        // 是否非开始行的第一个字符
        if (this._line_cursor_it > 1 && this._char_cursor_it == 1)
        {
            line_cursor_it = line_cursor_it - 1;
            char_cursor_it = line_list[line_cursor_it].char_count;
        }
        var char_info = line_list[this._line_cursor_it].char_list[this._char_cursor_it];
        var forward_text = char_info.text;
        if (forward_text == null || !(this.CharIsNumber(forward_text) || this.CharIsLetter(forward_text)))
        {
            this.DispatchEvent(new UIAtKeyEvent());
            return true;
        }
        return false;
    }
    
    // 处理文本输入
    protected fun HandleTextInput(UITextInputEvent event)
    {
        // 单光标模式
        if (this._multi_cursor == false)
        {
            if ((this._editable || event.custom))
            {
                // 判断是否转发@事件
                if (this.CheckAtKeyInput(event.text))
                    return;
                this._is_selecting = false;
                var is_change = this.InsertTextNative(event.text);
                if (is_change)
                {
                    this.DispatchEvent(new UIChangedEvent());
                    this.ShowDefaultText();
                }
            }
        }
        // 双光标模式
        else
        {
            if (this._is_selecting && this._editable)
            {
                this._is_selecting = false;
                var is_change = this.InsertTextNative(event.text);
                if (is_change)
                {
                    this.DispatchEvent(new UIChangedEvent());
                    this.ShowDefaultText();
                }
                this._multi_cursor = false;
            }
        }
    }
    
    // 处理拖拽开始
    protected fun HandleDragBegin(UIButtonDragBeginEvent event)
    {
        if (this._can_drag_text == false)
            return;

        // 单光标模式
        if (this._multi_cursor == false)
        {
            // 之前点击在编辑区域内，那么这次拖动就是有效的
            if (this._is_click)
            {
                this._is_drag_begin = true;
                this._is_selecting = true;
                this.DragCursorBegin();
            }
            else
                this._is_drag_begin = false;
        }
        // 双光标模式
        else
        {
            // 如果是点在光标上后开始拖动，则判断为拖动光标
            if (this._is_click_cursor)
            {
                // 更换编辑光标和开始光标位置
                if ((this._is_click_cursor_name == "start" && this._start_cursor_data == "select")
                        || (this._is_click_cursor_name == "end" && this._end_cursor_data == "select"))
                {
                    var line_temp_it = this._line_select_it;
                    var char_temp_it = this._char_select_it;
                    this._line_select_it = this._line_cursor_it;
                    this._char_select_it = this._char_cursor_it;
                    this._line_cursor_it = line_temp_it;
                    this._char_cursor_it = char_temp_it;
                }
                // 记录开始拖动时，光标中心和拖动点的相对位置
                if (this._is_click_cursor_name == "start")
                {
                    this._drag_delta_x = this._start_cursor.x + this._start_cursor.width - event.rel_x;
                    this._drag_delta_y = this._start_cursor.y + this._cursor_margin_up + (this._start_cursor.height - this._cursor_margin_up - this._cursor_margin_down) / 2 - event.rel_y;
                }
                elseif (this._is_click_cursor_name == "end")
                {
                    this._drag_delta_x = this._end_cursor.x - event.rel_x;
                    this._drag_delta_y = this._end_cursor.y + this._cursor_margin_up + (this._end_cursor.height - this._cursor_margin_up - this._cursor_margin_down) / 2 - event.rel_y;
                }
                this._is_drag_begin = true;
                this.DispatchEvent(new RichEditMultiDragBeginEvent());
            }
            // 之前点击在编辑区域内
            elseif (this._is_click)
            {
                this._is_drag_begin = true;
                this.DispatchEvent(new RichEditMultiDragBeginEvent());
            }
            // 之前点击在外部
            else
                this._is_drag_begin = false;
        }
    }
    
    // 处理拖拽
    protected fun HandleDrag(UIButtonDragEvent event)
    {
        if (this._can_drag_text == false)
            return;
        // 拖动无效则不处理
        if (this._is_drag_begin == false)
            return;
        // 单光标模式
        if (this._multi_cursor == false)
        {
            if (this._is_selecting == false)
                return;
            this.DragCursor(event.rel_x - this._scroll_list.x, event.rel_y - this._scroll_list.y);
        }
        // 双光标模式
        else
        {
            // 拖动光标
            if (this._is_click_cursor)
                this.DragMultiCursor(event.rel_x - this._scroll_list.x, event.rel_y - this._scroll_list.y);
                // 拖动整个屏幕
            else
            {
                // 行列表中有值且第一行不是空行
                if (this._line_list[1] != null && this._line_list[1].acc_height != this._line_list[1].pre_height)
                {
                    this._click_drag_delta_x = this._click_drag_delta_x + __abs(event.delta_x);
                    this._click_drag_delta_y = this._click_drag_delta_y + __abs(event.delta_y);
                    this.DragEdit(event.delta_y);
                }
            }
            this.DispatchEvent(new RichEditMultiDragEvent());
        }
    }

    protected fun HandleDragEnd(UIButtonDragEndEvent event)
    {
        if (this._can_drag_text == false)
            return;

        // 拖动无效则不处理
        if (this._is_drag_begin == false)
            return;

        // 双光标拖动结束，单光标正在显示则切换为单光标模式
        if (this._multi_cursor)
        {
            if (this._cursor.visible)
                this._multi_cursor = false;
            this.DispatchEvent(new RichEditMultiDragEndEvent());
        }
    }
    
    // 处理鼠标滚轮
    protected fun HandleMButtonWheel(UIMButtonWheelEvent event)
    {
        // 单光标模式
        if (this._multi_cursor == false)
        {
            if (event.delta_y > 0)
            {
                this._is_selecting = false;
                this.CursorOffsetUD(true);
            }
            elseif (event.delta_y < 0)
            {
                this._is_selecting = false;
                this.CursorOffsetUD(false);
            }
            if (event.delta_x > 0)
            {
                this._is_selecting = false;
                this.SelectCursorOffsetLR(true);
            }
            elseif (event.delta_x < 0)
            {
                this._is_selecting = false;
                this.SelectCursorOffsetLR(false);
            }
        }
        // 双光标模式
        else
        {
            // 拖动整个屏幕
            this.DragEdit(event.delta_y);
        }
    }
    
    // 鼠标移入
    protected fun HandleMoveIn(UIMoveInEvent event)
    {
        System_SetEditCursor();
    }
    // 鼠标移出
    protected fun HandleMoveOut(UIMoveOutEvent event)
    {
        System_SetNormalCursor();
    }
    
    // 处理键盘按键
    protected fun HandleKeyDown(UIKeyDownEvent event)
    {
        // 标记是否需要发送CHANGE事件
        var is_change = false;
        // 处理键盘按键
        if (event.sym == 9)
        {
            // tab键
            // 单光标模式
            if (this._multi_cursor == false)
            {
                if (this._editable || event.custom)
                {
                    this._is_selecting = false;
                    is_change = this.InsertTextNative("\t");
                }
            }
            else
            {
                if (this._is_selecting && this._editable)
                {
                    this._is_selecting = false;
                    is_change = this.InsertTextNative("\t");
					event.handled = true;
                    this._multi_cursor = false;
                }
            }
        }
        elseif (event.sym == 1073741904)
        {
            // 左键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (event.mod & UIEnumTypes.KMOD_SHIFT == 0)
                {
                    this._is_selecting = false;
                    this.CursorOffsetLR(true);
                    this.UpdateFontText();
                }
                else
                {
                    this._is_selecting = true;
                    this.SelectCursorOffsetLR(true);
                }
            }
			event.handled = true;
        }
        elseif (event.sym == 1073741903)
        {
            // 右键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (event.mod & UIEnumTypes.KMOD_SHIFT == 0)
                {
                    this._is_selecting = false;
                    this.CursorOffsetLR(false);
                    this.UpdateFontText();
                }
                else
                {
                    this._is_selecting = true;
                    this.SelectCursorOffsetLR(false);
                }
            }
			event.handled = true;
        }
        elseif (event.sym == 1073741906)
        {
            // 上键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (event.mod & UIEnumTypes.KMOD_SHIFT == 0)
                {
                    this._is_selecting = false;
                    this.CursorOffsetUD(true);
                    this.UpdateFontText();
                }
                else
                {
                    this._is_selecting = true;
                    this.SelectCursorOffsetUD(true);
                }
            }
			event.handled = true;
        }
        elseif (event.sym == 1073741905)
        {
            // 下键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (event.mod & UIEnumTypes.KMOD_SHIFT == 0)
                {
                    this._is_selecting = false;
                    this.CursorOffsetUD(false);
                    this.UpdateFontText();
                }
                else
                {
                    this._is_selecting = true;
                    this.SelectCursorOffsetUD(false);
                }
            }
			event.handled = true;
        }
        elseif (event.sym == 8)
        {
            // 退格键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (this._editable || event.custom)
                {
                    this._is_selecting = false;
                    is_change = this.DeleteText(true);
					event.handled = true;
                    this.UpdateFontText();
                }
            }
            else
            {
                if (this._is_selecting && this._editable)
                {
                    this._is_selecting = false;
                    is_change = this.DeleteText(true);
					event.handled = true;
                    this.UpdateFontText();
                    this._multi_cursor = false;
                }
            }
        }
        elseif (event.sym == 127)
        {
            // 删除键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (this._editable || event.custom)
                {
                    this._is_selecting = false;
                    is_change = this.DeleteText(false);
					event.handled = true;
                    this.UpdateFontText();
                }
            }
            else
            {
                if (this._is_selecting && this._editable)
                {
                    this._is_selecting = false;
                    is_change = this.DeleteText(false);
					event.handled = true;
                    this.UpdateFontText();
                    this._multi_cursor = false;
                }
            }
        }
        elseif (event.sym == 1073741898)
        {
            // Home键
            this._is_selecting = false;
            this.SetCursorToHome();
			event.handled = true;
            this.UpdateFontText();
        }
        elseif (event.sym == 1073741901)
        {
            // End键
            this._is_selecting = false;
            this.SetCursorToEnd();
			event.handled = true;
            this.UpdateFontText();
        }
        elseif (event.sym == 13 || event.sym == 1073741912)
        {
            // 回车键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (this._editable || event.custom)
                {
                    this._is_selecting = false;
                    is_change = this.InsertTextNative("\n");
					event.handled = true;
                    this.UpdateFontText();
                }
            }
            else
            {
                if (this._is_selecting && this._editable)
                {
                    this._is_selecting = false;
                    is_change = this.InsertTextNative("\n");
					event.handled = true;
                    this.UpdateFontText();
                    this._multi_cursor = false;
                }
            }
        }
        elseif (event.sym == 120 && event.mod & UIEnumTypes.KMOD_CTRL != 0)
        {
            // x键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (this._editable || event.custom)
                {
                    this._is_selecting = false;
                    var select_text = this.GetSelectText();
                    if (select_text[1] != null)
                    {
                        System_SetClipboardText(ALittle.String_JsonEncode(select_text));
                        is_change = this.DeleteSelectText();
                    }
                    this.UpdateFontText();
					event.handled = true;
                }
            }
            else
            {
                if (this._is_selecting && this._editable)
                {
                    this._is_selecting = false;
                    var select_text = this.GetSelectText();
                    if (select_text[1] != null)
                    {
                        System_SetClipboardText(ALittle.String_JsonEncode(select_text));
                        is_change = this.DeleteSelectText();
                    }
                    this.UpdateFontText();
					event.handled = true;
                    this._multi_cursor = false;
                }
            }
        }
        elseif (event.sym == 99 && event.mod & UIEnumTypes.KMOD_CTRL != 0)
        {
            // c键
            var select_text = this.GetSelectText();
            if (select_text[1] != null)
                System_SetClipboardText(ALittle.String_JsonEncode(select_text));
			event.handled = true;
        }
        elseif (event.sym == 118 && event.mod & UIEnumTypes.KMOD_CTRL != 0)
        {
            // v键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (this._editable || event.custom)
                {
                    this._is_selecting = false;
                    if (System_HasClipboardText())
                    {
                        var content = System_GetClipboardText();
                        var error, new_content = tcall(ALittle.String_JsonDecode, content);
                        if (error == null && __type(new_content) == "table" && this.CheckDisplayList(new_content))
                        {
                            if (this.CheckAtKeyInput(new_content))
                                return;
                            is_change = this.InsertDisplayListNative(new_content, false);
                        }
                        else
                        {
                            if (this.CheckAtKeyInput(content))
                                return;
                            is_change = this.InsertTextNative(content);
                        }
                    }
                }
            }
            else
            {
                if (this._is_selecting && this._editable)
                {
                    this._is_selecting = false;
                    if (System_HasClipboardText())
                    {
                        var content = System_GetClipboardText();
                        var error, new_content = tcall(ALittle.String_JsonDecode, content);
                        if (error == null && __type(new_content) == "table" && this.CheckDisplayList(new_content))
                            is_change = this.InsertDisplayListNative(new_content, false);
                        else
                            is_change = this.InsertTextNative(content);
                    }
					event.handled = true;
                    this._multi_cursor = false;
                }
            }
        }
        elseif (event.sym == 97 && event.mod & UIEnumTypes.KMOD_CTRL != 0)
        {
            // a键
            this._is_selecting = true;
            this.SelectAll();
			event.handled = true;
        }

        // 检查是否发送CHANGE事件
        if (is_change)
        {
            this.DispatchEvent(new UIChangedEvent());
            this._current_flash_alpha = 1.5;
            this.ShowDefaultText();
        }
    }
    
    //////////////////////////////////////////////////////////////////////////////////////////////////////////-
    
    // 插入控件列表
    // 使用范例
    // 1. 插入图片
    //    var display_list = {}
    //	  var image = {}
    //	  image.__class = "Image"
    //	  image.texture_name = "xxxxxx"
    // 	  image.width_value = 100
    //    image.height_value = 100
    //    table.insert(display_list, image)
    public fun InsertText(List<DisplayInfo> display_list, bool selected)
    {
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;

        this._is_selecting = false;
        this.InsertDisplayListNative(display_list, selected);
        this._multi_cursor = false;
        this.ShowDefaultText();
    }
    
    public fun InsertWord(string word_text)
    {
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this._is_selecting = false;
        this.InsertTextNative(word_text);
        this.TransToCursor();
        this.ShowDefaultText();
    }
    
    // 复制选中  return_cursor true 复制后自动还原为单光标
    public fun CopyText(bool return_cursor)
    {
        var select_text = this.GetSelectText();
    
        if (select_text[1] != null)
            System_SetClipboardText(ALittle.String_JsonEncode(select_text));
        if (return_cursor)
            this.TransToCursor();
        this.ShowDefaultText();
    }
    
    // 复制选中文字  return_cursor true 复制后自动还原为单光标
    public fun CopyWord(bool return_cursor)
    {
        var select_text = this.GetSelectWord();
    
        if (select_text != null)
            System_SetClipboardText(select_text);
        if (return_cursor)
            this.TransToCursor();
        this.ShowDefaultText();
    }
    
    // 剪切
    public fun CutText()
    {
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this._is_selecting = false;
        var select_text = this.GetSelectText();
        if (select_text[1] != null)
        {
            System_SetClipboardText(ALittle.String_JsonEncode(select_text));
            this.DeleteSelectText();
            this.UpdateFontText();
            this.TransToCursor();
        }
        this.ShowDefaultText();
    }
    
    // 剪切
    public fun CutWord()
    {
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this._is_selecting = false;
        var select_text = this.GetSelectWord();
        if (select_text != null)
        {
            System_SetClipboardText(select_text);
            this.DeleteSelectText();
            this.UpdateFontText();
            this.TransToCursor();
        }
        this.ShowDefaultText();
    }
    
    // 粘帖
    public fun PasteText()
    {
        if (this._editable == false)
            return;

        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this._is_selecting = false;
        if (System_HasClipboardText())
        {
            var content = System_GetClipboardText();
            var error, new_content = tcall(ALittle.String_JsonDecode, content);
            if (error == null && __type(new_content) == "table" && this.CheckDisplayList(new_content))
            {
                if (this.CheckAtKeyInput(new_content))
                    return;
                this.InsertDisplayListNative(new_content, false);
            }
            else
            {
                if (this.CheckAtKeyInput(content))
                    return;
                this.InsertTextNative(content);
            }
            this.TransToCursor();
        }
        this.ShowDefaultText();
    }
    
    public fun PasteWord()
    {
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this._is_selecting = false;
        if (System_HasClipboardText())
        {
            var content = System_GetClipboardText();
            this.InsertTextNative(content);
            this.TransToCursor();
        }
        this.ShowDefaultText();
    }
    
    // 清空
    public fun Clear()
    {
        this.ClearText();
        this.ShowDefaultText();
    }
    
    // 删除
    protected fun Delete()
    {
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this._is_selecting = false;
        this.DeleteText(true);
        this.TransToCursor();
        this.ShowDefaultText();
    }

    ////////////////////外部调用，用于实现两边拖动选择的效果//////////////////
}