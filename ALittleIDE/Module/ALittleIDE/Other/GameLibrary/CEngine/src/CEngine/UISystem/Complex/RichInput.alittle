
namespace ALittle;

private var __byte = String_Byte;
private var __sub = String_Sub;
private var __find = String_Find;
private var __floor = Math_Floor;
private var __len = String_Len;
private var __abs = Math_Abs;
private var __type = String_Type;

struct RichInputCharInfo
{
    double acc_width;
    double pre_width;
    DisplayInfo text_info;
    string text;
    string password_text;
    Text text_object;
    DisplayInfo ctrl_info;
    DisplayObject ctrl;
}

public struct RichInputFontChangedEvent : UIEvent {}
public struct RichInputCursorClickEvent : UIEvent {}
public struct RichInputMultiDragBeginEvent : UIEvent {}
public struct RichInputMultiDragEvent : UIEvent {}
public struct RichInputMultiDragEndEvent : UIEvent {}

public struct UIRichInputLongClickEvent : UIEvent
{
    double abs_x;
    double abs_y;
    double rel_x;
    double rel_y;
}


public class RichInput : DisplayLayout
{
    //////////////-内部计算调用函数////////////////////////////////////////

    protected fun CheckDisplayList(List<DisplayInfo> content) : bool
    {
        for (var k, v in content)
        {
            if (v.__class == null)
                return false;
        }
        return true;
    }
    
    // 判断一个字符是否是数字
    protected fun CharIsNumber(string str) : bool
    {
        var c = __byte(str, 1);
        return c >= 48 && c <= 57;
    }
    
    // 判断一个字符是否是字母
    protected fun CharIsLetter(string str) : bool
    {
        var c = __byte(str, 1);
        return c >= 65 && c <= 90 || c >= 97 && c <= 122;
    }

    protected fun CompareTextInfo(DisplayInfo a, DisplayInfo b) : bool
    {
        if (a.font_path != b.font_path)
            return false;
            
        if (a.font_size != b.font_size)
            return false;
            
        if (a.red != b.red)
            return false;
            
        if (a.green != b.green)
            return false;
            
        if (a.blue != b.blue)
            return false;
                
        if (a.bold != b.bold)
            return false;
            
        if (a.italic != b.italic)
            return false;
            
        if (a.underline != b.underline)
            return false;
            
        if (a.deleteline != b.deleteline)
            return false;
            
        return true;
    }

    protected fun CopyTextInfo(DisplayInfo b) : DisplayInfo
    {
        var a = new DisplayInfo();
        a.__class = "Text";
        a.font_path = b.font_path;
        a.font_size = b.font_size;
        a.red = b.red;
        a.green = b.green;
        a.blue = b.blue;
    
        a.bold = b.bold;
        a.italic = b.italic;
        a.underline = b.underline;
        a.deleteline = b.deleteline;
    
        return a;
    }

    protected fun InitTextInfo() : DisplayInfo
    {
        var font_text = this._font_text;

        var a = new DisplayInfo();
        a.__class = "Text";
        a.font_path = font_text.font_path;
        a.font_size = font_text.font_size;
        a.red = font_text.red;
        a.green = font_text.green;
        a.blue = font_text.blue;
    
        a.bold = font_text.bold;
        a.italic = font_text.italic;
        a.underline = font_text.underline;
        a.deleteline = font_text.deleteline;
    
        return a;
    }

    protected fun SetDrawText(Text font_text)
    {
        var draw_text = this._draw_text;
        draw_text.font_path = font_text.font_path;
        draw_text.font_size = font_text.font_size;
        draw_text.red = font_text.red;
        draw_text.green = font_text.green;
        draw_text.blue = font_text.blue;
    
        draw_text.bold = font_text.bold;
        draw_text.italic = font_text.italic;
        draw_text.underline = font_text.underline;
        draw_text.deleteline = font_text.deleteline;
    }
    
    // 拆分char_list
    protected fun SplitText(RichInputCharInfo char_info, List<RichInputCharInfo> char_info_list, int char_info_list_count) : int
    {
        var text = char_info.text;
    
        while (true)
        {
            var start_index_1 = __find(text, "\n");
            var start_index_2 = __find(text, "\t");
            if (start_index_1 != null && start_index_2 != null)
            {
                if (start_index_1 < start_index_2)
                    start_index_2 = null;
                else
                    start_index_1 = null;
            }
            // "\n" "\t" 去掉
            if (start_index_1 != null)
            {
                var sub_text = __sub(text, 1, start_index_1 - 1);
                text = __sub(text, start_index_1 + 1);
                if (sub_text != "")
                {
                    var new_char_info = String_CopyTable(char_info);
                    new_char_info.text = sub_text;
                    ++ char_info_list_count;
                    char_info_list[char_info_list_count] = new_char_info;
                }
            }
            elseif (start_index_2 != null)
            {
                var sub_text = __sub(text, 1, start_index_2 - 1);
                text = __sub(text, start_index_2 + 1);
                if (sub_text != "")
                {
                    var new_char_info = String_CopyTable(char_info);
                    new_char_info.text = sub_text;
                    ++ char_info_list_count;
                    char_info_list[char_info_list_count] = new_char_info;
                }
            }
            else
            {
                if (text != "")
                {
                    var new_char_info = String_CopyTable(char_info);
                    new_char_info.text = text;
                    ++ char_info_list_count;
                    char_info_list[char_info_list_count] = new_char_info;
                }
                break;
            }
        }
        
        return char_info_list_count;
    }
    
    // 将display_list转化成char_list
    protected fun DisplayListToCharInfoList(List<DisplayInfo> display_list, [Nullable] DisplayInfo default_text_info) : List<RichInputCharInfo>
    {
        var char_info_list = new List<RichInputCharInfo>();
        var char_info_list_count = 0;

        var last_text_info = default_text_info;
        for (var display_index, display_info in display_list)
        {
            if (display_info.__class == "Text")
            {
                var new_char_info = new RichInputCharInfo();
                new_char_info.acc_width = 0;
                new_char_info.pre_width = 0;
                new_char_info.text_info = this.CopyTextInfo(display_info);
                new_char_info.text_object = null;
                new_char_info.text = display_info.text;
                new_char_info.ctrl_info = null;
                new_char_info.ctrl = null;
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = new_char_info;
    
                last_text_info = new_char_info.text_info;
            }
            else
            {
                if (last_text_info == null)
                    last_text_info = this.InitTextInfo();

                var new_char_info = new RichInputCharInfo();
                new_char_info.acc_width = 0;
                new_char_info.pre_width = 0;
                new_char_info.text_info = last_text_info;
                new_char_info.text_object = null;
                new_char_info.text = "";
                new_char_info.ctrl_info = display_info;
                new_char_info.ctrl = null;
                ++ char_info_list_count;
                char_info_list[char_info_list_count] = new_char_info;
            }
        }
        return char_info_list;
    }
    
    // char_list转化为display_list
    protected fun CharInfoListToDisplayList(List<RichInputCharInfo> list) : List<DisplayInfo>
    {
        // 获取文本
        var display_list = new List<DisplayInfo>();
        var display_list_count = 0;

        var text_info:DisplayInfo = null;
        var text_list:List<string> = null;
        var text_list_count = 0;
        for (var char_index, char_info in list)
        {
            // 处理文本的情况
            if (char_info.ctrl_info == null)
            {
                if (text_info == null)
                {
                    text_info = char_info.text_info;
                    text_list = new List<string>();
                    text_list_count = 1;
                    text_list[text_list_count] = char_info.text;
                }
                elseif (text_info == char_info.text_info)
                {
                    ++ text_list_count;
                    text_list[text_list_count] = char_info.text;
                }
                else
                {
                    // 对比一下内容
                    if (this.CompareTextInfo(text_info, char_info.text_info))
                    {
                        ++ text_list_count;
                        text_list[text_list_count] = char_info.text;
                    }
                    else
                    {
                        // 整理一下文本
                        var text = String_Join(text_list, "");
                        if (text != "")
                        {
                            var text_ctrl = String_CopyTable(text_info);
                            text_ctrl.__class = "Text";
                            text_ctrl.text = text;
                            ++ display_list_count;
                            display_list[display_list_count] = text_ctrl;
                        }
                        // 另起一个
                        text_info = char_info.text_info;
                        text_list = new List<string>();
                        text_list_count = 1;
                        text_list[text_list_count] = char_info.text;
                    }
                }
            }
            // 处理控件的情况
            else
            {
                // 如果之前的文本还没处理，那就处理掉
                if (text_info != null)
                {
                    var text = String_Join(text_list, "");
                    if (text != "")
                    {
                        var text_ctrl = String_CopyTable(text_info);
                        text_ctrl.__class = "Text";
                        text_ctrl.text = text;
                        ++ display_list_count;
                        display_list[display_list_count] = text_ctrl;
                    }
                    text_info = null;
                    text_list = null;
                    text_list_count = 0;
                }
                ++ display_list_count;
                display_list[display_list_count] = String_CopyTable(char_info.ctrl_info);
            }
        }
        // 最后检查一下没有处理的文本
        if (text_info != null)
        {
            var text = String_Join(text_list, "");
            if (text != "")
            {
                var text_ctrl = String_CopyTable(text_info);
                text_ctrl.__class = "Text";
                text_ctrl.text = text;
                ++ display_list_count;
                display_list[display_list_count] = text_ctrl;
            }
        }
    
        return display_list;
    }

    protected fun CharInfoListToWord(List<RichInputCharInfo> list) : string
    {
        // 获取文本
        var text_list = new List<string>();
        var text_list_count = 0;
        
        for (var char_index, char_info in list)
        {
            // 处理文本的情况
            if (char_info.ctrl_info == null)
            {
                ++ text_list_count;
                text_list[text_list_count] = char_info.text;
            }
        }
    
        return String_Join(text_list, "");
    }

    protected fun UpdateFontText()
    {
        // 设置当前的字体样式
        var char_info = this._char_info_list[this._char_cursor_it];

        var is_change = false;
        var font_text = this._font_text;
        var text_info = char_info.text_info;
    
        if (font_text.font_path != text_info.font_path)
        {
            font_text.font_path = text_info.font_path;
            is_change = true;
        }
        if (font_text.font_size != text_info.font_size)
        {
            font_text.font_size = text_info.font_size;
            is_change = true;
        }
        if (font_text.red != text_info.red)
        {
            font_text.red = text_info.red;
            is_change = true;
        }
        if (font_text.green != text_info.green)
        {
            font_text.green = text_info.green;
            is_change = true;
        }
        if (font_text.blue != text_info.blue)
        {
            font_text.blue = text_info.blue;
            is_change = true;
        }
    
        if (font_text.bold != text_info.bold)
        {
            font_text.bold = text_info.bold;
            is_change = true;
        }
        if (font_text.italic != text_info.italic)
        {
            font_text.italic = text_info.italic;
            is_change = true;
        }
        if (font_text.underline != text_info.underline)
        {
            font_text.underline = text_info.underline;
            is_change = true;
        }
        if (font_text.deleteline != text_info.deleteline)
        {
            font_text.deleteline = text_info.deleteline;
            is_change = true;
        }
        if (is_change)
            this.DispatchEvent(new RichInputFontChangedEvent());
    }

    protected fun GetCursorWidth(int font_size) : int
    {
        if (font_size == null || font_size < 15)
            return 1;
            
        if (font_size > 100)
            return 10;
            
        return __floor((font_size / 100) * 10);
    }
    
    //////////////////////////////////////////////////////////////////-
    
    private List<RichInputCharInfo> _char_info_list;
    private int _char_count;
    
    private Text _font_text;
    private Text _draw_text;
    
    private int _char_cursor_it;
    private int _char_select_it;
    
    private DisplayView _display_view;
    private DisplayLayout _display_show;
    
    private double _current_flash_alpha;
    private double _current_flash_dir;
    private Quad _cursor;
    private Quad _select;
    private DisplayObject _start_cursor;
    private DisplayObject _end_cursor;
    private string _start_cursor_data;
    private string _end_cursor_data;
    
    private bool _focus_cursor;
    private bool _is_focus;
    
    private double _event_start_x;
    private double _event_end_x;
    private double _event_start_y;
    private double _event_end_y;
    
    private double _click_drag_delta_x;
    private double _click_drag_delta_y;
    private bool _is_click;
    private bool _is_longclick;
    private bool _is_click_cursor;
    private string _is_click_cursor_name;
    private double _drag_delta_x;
    private double _drag_delta_y;
    
    private double _cursor_margin_up;
    private double _cursor_margin_down;
    private double _margin_halign;
    private double _margin_valign;
    
    private bool _is_drag_begin;
    private bool _password_mode;

    private double _ims_padding;
    
    private Text _default_text;
    private double _default_font_height;
    
    private Map<string, DisplayObject> _link_map;
    
    private bool _editable;
    private bool _is_selecting;
    private bool _can_drag_text;
    private bool _auto_ims;
    private bool _multi_cursor;
    private bool _input_align;
    
    private string _regex;
    private int _limit_len;

    private LoopFunction _draw_loop;
    private LoopFunction _loop;
    
    public ctor(ControlSystem ctrl_sys)
    {
        // 控件列表
        this._char_info_list = new List<RichInputCharInfo>();
        this._char_count = 0;
    
        // 用于计算文本
        this._font_text = new Text(this._ctrl_sys);
        this._draw_text = new Text(this._ctrl_sys);
    
        // 显示范围部分
        this._char_cursor_it = 1;        // 编辑光标所在的控件位置
        this._char_select_it = 1;        // 选中光标所在的控件位置
    
        // 裁剪容器部分
        this._display_view = new DisplayView(this._ctrl_sys);                // 裁剪控件
        this._display_view.width_type = UIEnumTypes.SIZE_MARGIN;        // 全部撑满
        this._display_view.height_type = UIEnumTypes.SIZE_MARGIN;        // 全部撑满
        this._display_view.x_type = UIEnumTypes.POS_ALIGN_CENTER;       // 水平居中
        this._display_view.y_type = UIEnumTypes.POS_ALIGN_CENTER;        // 水平居中
        this.AddChild(this._display_view);
    
        // 显示容器部分
        this._display_show = new DisplayLayout(this._ctrl_sys);
        this._display_show.width = 0;
        this._display_show.height = 0;
        this._display_show.x = 0;
        this._display_show.y_type = UIEnumTypes.POS_ALIGN_ENDING;
        this._display_show.y_value = 0;
        this._display_view.AddChild(this._display_show);
    
        // 光标部分
        this._current_flash_alpha = 1;
        this._current_flash_dir = -0.05;
        this._cursor = new Quad(this._ctrl_sys);
        this._cursor.width = 1;
        this.AddChild(this._cursor);
        this._cursor.visible = false;
    
        this._select = new Quad(this._ctrl_sys);
        this.AddChild(this._select);
        this._select.visible = false;
        this._select.alpha = 0.5;
    
        // 双光标
        this._start_cursor = new Quad(this._ctrl_sys);  // 显示在前面的光标控件
        this._start_cursor.width = 1;
        this.AddChild(this._start_cursor);
        this._start_cursor.visible = false;
    
        this._end_cursor = new Quad(this._ctrl_sys);  // 显示在后面的光标控件
        this._end_cursor.width = 1;
        this.AddChild(this._end_cursor);
        this._end_cursor.visible = false;
    
        this._start_cursor_data = null;  // 开始光标对应的光标类型
        this._end_cursor_data = null;  // 结束光标对应的光标类型
    
        // 失去焦点是否隐藏单光标
        this._focus_cursor = true;
        this._is_focus = false;
    
        // 用于事件
        this._event_start_x = 0;
        this._event_end_x = 0;
        this._event_start_y = 0;
        this._event_end_y = 0;
    
        this._click_drag_delta_x = 0;  // 标记按下到弹起的拖动间隔
        this._click_drag_delta_y = 0;  // 标记按下到弹起的拖动间隔
        this._is_click = false;
        this._is_longclick = false;  // 标记按下弹起过程中是否触发长按
        this._is_click_cursor = false; // 标记按下时点在开始或结束光标内
        this._is_click_cursor_name = "";  // 按下时是哪个光标
        this._drag_delta_x = 0;            // 记录开始拖动时的偏移位置
        this._drag_delta_y = 0;
    
        // 双光标，记录光标的上下拉伸长度
        this._cursor_margin_up = 0;
        this._cursor_margin_down = 0;
    
        this._margin_halign = 0; // 水平边距
        this._margin_valign = 0; // 垂直边距
    
        this._is_drag_begin = false; // 标记拖动是否有效
    
        this._password_mode = false;

        // 额外的ims范围
        this._ims_padding = 0;
    
        // 默认文本
        this._default_text = new Text(this._ctrl_sys);
        this._default_text.y_type = UIEnumTypes.POS_ALIGN_ENDING;
        this._default_text.y_value = 0;
        this._display_view.AddChild(this._default_text);
    
        this._default_font_height = 20;
    
        this._link_map = CreateValueWeakMap();
    
        this._pickup_rect = true;
        this._pickup_child = false;
        this._pickup_this = true;
    
        this._editable = true;
        this._is_selecting = false;
        this._can_drag_text = true;
        this._auto_ims = true;
        this._multi_cursor = false;  // 标记当前是否是双光标模式
        this._input_align = false;    // 标记输入方向
    
        // 正则表达式
        this._regex = "";            // 正则表达式
        this._limit_len = 0;        // 文本长度
    
        this.AddEventListener(this, this.HandleFocusOut);
        this.AddEventListener(this, this.HandleFocusIn);
        this.AddEventListener(this, this.HandleMoveIn);
        this.AddEventListener(this, this.HandleMoveOut);
        this.AddEventListener(this, this.HandleLButtonDown);
        this.AddEventListener(this, this.HandleLButtonUp);
        this.AddEventListener(this, this.HandleTextInput);
        this.AddEventListener(this, this.HandleKeyDown);
        this.AddEventListener(this, this.HandleDragBegin);
        this.AddEventListener(this, this.HandleDrag);
        this.AddEventListener(this, this.HandleDragEnd);
        this.AddEventListener(this, this.HandleLongLButtonDown);

        this.ClearCharInfo();

        // 添加光标闪烁
        if (this._loop == null)
            this._loop = new LoopFunction(bind(this.Update, this), -1, 1, 1);
        A_LoopSystem.AddUpdater(this._loop);
    }
    
    // 获取光标的位置
    public fun GetCursor() : Quad
    {
        return this._cursor;
    }
    
    // 清空link_map
    public fun ClearLinkMap()
    {
        this._link_map = CreateValueWeakMap();
    }
    
    // 获取内容宽度
    public get real_width() : double
    {
        return this._char_info_list[this._char_count].acc_width;
    }
    
    // 获取内容高度
    public get real_height() : double
    {
        return this._display_show.height;
    }
    
    // 获取是否可以拖拽文本
    public get can_drag_text() : bool
    {
        return this._can_drag_text;
    }
    
    // 设置是否可以拖拽文本
    public set can_drag_text(bool value)
    {
        this._can_drag_text = value;
    }
    
    // 设置是否自动
    public set auto_ims(bool value)
    {
        this._auto_ims = value;
    }
    
    public get auto_ims() : bool
    {
        return this._auto_ims;
    }
    
    // 获取当前光标模式
    public get multi_cursor() : bool
    {
        return this._multi_cursor;
    }
    
    // 设置宽度
    public set width(double value)
    {
        if (this.width == value)
            return;
        DisplayLayout.width(this, value);
        // 设置宽度，重设控件位置，重设光标位置
        this.ResetShowXByCursor();
        this.ResetCursor();
    }
    
    // 设置高度
    public set height(double value)
    {
        if (this.height == value)
            return;
        DisplayLayout.height(this, value);
        // 设置高度，重设光标显示高度
        this.ResetCursor();
    }
    
    // 设置光标颜色R
    public set cursor_red(double value)
    {
        this._cursor.red = value;
        this._select.red = value;
    }
    
    // 获取光标颜色R
    public get cursor_red() : double
    {
        return this._cursor.red;
    }
    
    // 设置光标颜色G
    public set cursor_green(double value)
    {
        this._cursor.green = value;
        this._select.green = value;
    }
    
    // 设置光标颜色G
    public get cursor_green() : double
    {
        return this._cursor.green;
    }
    
    // 设置光标颜色B
    public set cursor_blue(double value)
    {
        this._cursor.blue = value;
        this._select.blue = value;
    }
    
    // 设置光标颜色B
    public get cursor_blue() : double
    {
        return this._cursor.blue;
    }
    
    // 设置粗体
    public set font_bold(bool value)
    {
        if (this._font_text.bold == value)
            return;

        this._font_text.bold = value;
        this._default_text.bold = value;
        if (this._char_info_list[1] != null)
            this._char_info_list[1].text_info.bold = value;
    }
    
    // 设置下划线
    public set font_underline(bool value)
    {
        if (this._font_text.underline == value)
            return;
        this._font_text.underline = value;
        this._default_text.underline = value;
        if (this._char_info_list[1] != null)
            this._char_info_list[1].text_info.underline = value;
    }
    
    // 设置下划线
    public set font_deleteline(bool value)
    {
        if (this._font_text.deleteline == value)
            return;
        this._font_text.deleteline = value;
        this._default_text.deleteline = value;
        if (this._char_info_list[1] != null)
            this._char_info_list[1].text_info.deleteline = value;
    }
    
    // 设置斜体
    public set font_italic(bool value)
    {
        if (this._font_text.italic == value)
            return;
        this._font_text.italic = value;
        this._default_text.italic = value;
        if (this._char_info_list[1] != null)
            this._char_info_list[1].text_info.italic = value;
    }
    
    // 设置字体，以及字体大小,获取默认行高
    public set font_path(string value)
    {
        if (this._font_text.font_path == value)
            return;
        this._font_text.font_path = value;
        this._default_text.font_path = value;
        if (this._char_info_list[1] != null)
            this._char_info_list[1].text_info.font_path = value;
    }
    
    public set font_size(int value)
    {
        if (this._font_text.font_size == value)
            return;
        this._font_text.font_size = value;
        this._default_text.font_size = value;
        if (this._char_info_list[1] != null)
            this._char_info_list[1].text_info.font_size = value;
    }
    
    public get font_path() : string
    {
        return this._font_text.font_path;
    }
    
    public get font_size() : int
    {
        return this._font_text.font_size;
    }
    
    // 设置字体颜色
    public set font_red(double value)
    {
        if (this._font_text.red == value)
            return;
        this._font_text.red = value;
        this._default_text.red = value;
        if (this._char_info_list[1] != null)
            this._char_info_list[1].text_info.red = value;
    }
    
    public get font_red() : double
    {
        return this._font_text.red;
    }
    
    public set font_green(double value)
    {
        if (this._font_text.green == value)
            return;
        this._font_text.green = value;
        this._default_text.green = value;
        if (this._char_info_list[1] != null)
            this._char_info_list[1].text_info.green = value;
    }
    
    public get font_green() : double
    {
        return this._font_text.green;
    }
    
    public set font_blue(double value)
    {
        if (this._font_text.blue == value)
            return;
        this._font_text.blue = value;
        this._default_text.blue = value;
        if (this._char_info_list[1] != null)
            this._char_info_list[1].text_info.blue = value;
    }
    
    public get font_blue() : double
    {
        return this._font_text.blue;
    }
    
    // 设置纯文本
    public set text(any value)
    {
        this.ClearCharInfo();
        this.InsertTextNative(value);
        this.ResetShowXByCursor();
        this.ShowDefaultText();
    }
    public get text() : string
    {
        var displaylist = this.CharInfoListToDisplayList(this._char_info_list);
        var text = "";
        for (var k, v in displaylist)
        {
            if (v.__class == "Text")
                text = text .. v.text;
        }
    
        return text;
    }
    
    public set default_text(string value)
    {
        this._default_text.text = value;
    }
    
    public get default_text() : string
    {
        return this._default_text.text;
    }
    
    public set default_text_alpha(double value)
    {
        this._default_text.alpha = value;
    }
    
    public get default_text_alpha() : double
    {
        return this._default_text.alpha;
    }
    
    // 设置表现
    public set display_list(List<DisplayInfo> value)
    {
        var char_info_list = this.DisplayListToCharInfoList(value);
        // 设置display_list，重排控件，重设光标，设置默认文本
        this.ClearCharInfo();  // 清除char
        this.InsertCharInfo(char_info_list, false);  // 添加char
        this.ResetCursor();
        this.ShowDefaultText();
    }
    
    public get display_list() : List<DisplayInfo>
    {
        return this.CharInfoListToDisplayList(this._char_info_list);
    }
    
    // 设置双光标前面光标
    public set start_cursor(DisplayObject value)
    {
        if (value == null)
            return;
        if (value == this._start_cursor)
            return;
    
        this.RemoveChild(this._start_cursor);
    
        value.x_type = UIEnumTypes.POS_ABS;
        value.y_type = UIEnumTypes.POS_ABS;
        value.width_type = UIEnumTypes.SIZE_ABS;
        value.height_type = UIEnumTypes.SIZE_ABS;
    
        this._start_cursor = value;
        this.AddChild(this._start_cursor);
        this._start_cursor.visible = false;
    
        // 设置光标
        this.ResetCursor();
    }
    
    public get start_cursor() : DisplayObject
    {
        return this._start_cursor;
    }
    
    // 设置双光标后面光标
    public set end_cursor(DisplayObject value)
    {
        if (value == null)
            return;
        if (value == this._end_cursor)
            return;
    
        this.RemoveChild(this._end_cursor);
    
        value.x_type = UIEnumTypes.POS_ABS;
        value.y_type = UIEnumTypes.POS_ABS;
        value.width_type = UIEnumTypes.SIZE_ABS;
        value.height_type = UIEnumTypes.SIZE_ABS;
    
        this._end_cursor = value;
        this.AddChild(this._end_cursor);
        this._end_cursor.visible = false;
    
        // 设置光标
        this.ResetCursor();
    }
    
    public get end_cursor() : DisplayObject
    {
        return this._end_cursor;
    }
    
    public set cursor_margin_up(double value)
    {
        if (value == this._cursor_margin_up)
            return;
        this._cursor_margin_up = value;
        // 设置光标
        this.ResetCursor();
    }
    
    public get cursor_margin_up() : double
    {
        return this._cursor_margin_up;
    }
    
    public set cursor_margin_down(double value)
    {
        if (value == this._cursor_margin_down)
            return;
        this._cursor_margin_down = value;
        // 设置光标
        this.ResetCursor();
    }
    
    public get cursor_margin_down() : double
    {
        return this._cursor_margin_down;
    }
    
    // 水平边距
    public set margin_halign(double value)
    {
        if (value == this._margin_halign)
            return;
        this._margin_halign = value;
        this._display_view.width_value = this._margin_halign * 2;
    
        // 设置水平边距，重设控件位置，重设光标位置
        this.ResetShowXByCursor();
        this.ResetCursor();
    }
    
    public get margin_halign() : double
    {
        return this._margin_halign;
    }
    
    // 垂直边距
    public set margin_valign(double value)
    {
        if (value == this._margin_valign)
            return;
        this._margin_valign = value;
        this._display_view.height_value = this._margin_valign * 2;
    
        // 设置垂直边距，重设光标显示高度
        this.ResetCursor();
    }
    
    public get margin_valign() : double
    {
        return this._margin_valign;
    }
    
    public set focus_cursor(bool value)
    {
        this._focus_cursor = value;
    }
    
    public get focus_cursor() : bool
    {
        return this._focus_cursor;
    }
    
    // 获取光标偏移位置X
    public get cursor_x() : double
    {
        return this._cursor.x;
    }
    
    // 获取光标偏移位置Y
    public get cursor_y() : double
    {
        return this._cursor.y;
    }

    // 获取光标底部
    public get cursor_b() : double
    {
        return (this._cursor.y + this._cursor.height) * this.scale_y + this._ims_padding;
    }
    
    public get start_cursor_x() : double
    {
        return this._event_start_x;
    }
    
    public get start_cursor_y() : double
    {
        return this._event_start_y;
    }
    
    public get end_cursor_x() : double
    {
        return this._event_end_x;
    }
    
    public get end_cursor_y() : double
    {
        return this._event_end_y;
    }
    
    public get is_input() : bool
    {
        return true;
    }
    
    public get is_empty() : bool
    {
        return this._char_count == 1;
    }
    
    public get editable() : bool
    {
        return this._editable;
    }
    
    public set editable(bool value)
    {
        this._editable = value;
    }
    
    public set ims_padding(double value)
    {
        this._ims_padding = value;
    }
    
    public get ims_padding() : double
    {
        return this._ims_padding;
    }
    
    // 设置密码模式
    public set password_mode(bool value)
    {
        if (this._password_mode == value)
            return;
        this._password_mode = value;

        var display_list = this.CharInfoListToDisplayList(this._char_info_list);
        var char_info_list = this.DisplayListToCharInfoList(display_list);
    
        this.ClearCharInfo();  // 清除char
        this.InsertCharInfo(char_info_list, false);  // 添加char
        this.ResetCursor();
        this.ShowDefaultText();
    }
    
    public get password_mode() : bool
    {
        return this._password_mode;
    }
    
    public get regex() : string
    {
        return this._regex;
    }
    
    public set regex(string value)
    {
        if (value == null) value = "";
        this._regex = value;
    }
    
    public get limit_len() : int
    {
        return this._limit_len;
    }
    
    public set limit_len(int value)
    {
        if (value == null) value = 0;
        this._limit_len = value;
    }
    
    // true 为右对齐， false 为左对齐
    public set input_align(bool value)
    {
        if (this._input_align == value)
            return;
        this._input_align = value;
    
        this.ResetShowXByCursor();
        this.ResetCursor();
    }
    
    public get input_align() : bool
    {
        return this._input_align;
    }
    
    //////////////////////////////- 播放光标闪烁动画函数//////////////////////////

    protected fun Update()
    {
        if (this._cursor.abs_visible)
        {
            this._current_flash_alpha = this._current_flash_alpha + this._current_flash_dir;
            if ((this._current_flash_dir < 0 && this._current_flash_alpha < -0.05) || (this._current_flash_dir > 0 && this._current_flash_alpha > 1.5))
                this._current_flash_dir = -this._current_flash_dir;
            this._cursor.alpha = this._current_flash_alpha;
        }
    }
    
    //////////////////////////////- 循环绘制函数(定时设置控件)////////////////////////////////

    protected fun Draw()
    {
        if (this._draw_loop != null)
            return;
        this._draw_loop = new LoopFunction(bind(this.DrawImpl, this), 1, 0, 1);
        A_LoopSystem.AddUpdater(this._draw_loop);
    }

    protected fun DrawImpl()
    {
        // 移除所有的子控件, 添加控件
        this._display_show.RemoveAllChild();

        var real_height = 0.0;
        var offset_x = 0.0;
        var last_child:DisplayObject = null;
        for (var k, char_info in this._char_info_list)
        {
            var child = char_info.text_object;
            if (child == null) child = cast<Text>(char_info.ctrl);
            if (child != null && child != last_child)
            {
                last_child = child;
                child.x_type = UIEnumTypes.POS_ALIGN_STARTING;
                child.x_value = offset_x;
                child.y_type = UIEnumTypes.POS_ALIGN_ENDING;
                child.y_value = 0;
                this._display_show.AddChild(child);
                offset_x = offset_x + child.width;
                if (child.height > real_height)
                    real_height = child.height;
            }
        }
        this._display_show.height_value = real_height;
        this._draw_loop = null;
    }
    
    ////////////////////////////////////////显示部分//////////////////////////////-
    
    // 删除chat_info
    protected fun ClearCharInfo()
    {
        this._char_info_list = new List<RichInputCharInfo>();
        this._char_count = 0;
    
        // 添加一个空元素
        var char_info = new RichInputCharInfo();
        char_info.acc_width = 0;
        char_info.pre_width = 0;
        char_info.text_info = this.InitTextInfo();
        char_info.text_object = null;
        char_info.text = "";  // 真实文本信息
        char_info.password_text = "";  // 密码文本信息
        char_info.ctrl_info = null;
        char_info.ctrl = null;
        this._char_count = this._char_count + 1;
        this._char_info_list[this._char_count] = char_info;

        this._char_cursor_it = 1;
        this._char_select_it = 2;
    
        this.Draw();
    }
    
    // 向当前光标位置插入char_info
    protected fun InsertCharInfo(List<RichInputCharInfo> char_info_list, bool selected)
    {
        // 检查是否有字体
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return;
        if (char_info_list[1] == null)
            return;

        // 记住插入之前光标的位置
        var char_cursor_it_tmp = this._char_cursor_it;
    
        // 遍历char_info_list，遇到text的，按照\t来拆分
        var x_char_info_list = new List<RichInputCharInfo>();
        var x_char_info_list_count = 0;
        for (var index, char_info in char_info_list)
        {
            if (char_info.ctrl_info == null)
                x_char_info_list_count = this.SplitText(char_info, x_char_info_list, x_char_info_list_count);
            else
            {
                ++ x_char_info_list_count;
                x_char_info_list[x_char_info_list_count] = char_info;
            }
        }
        char_info_list = x_char_info_list;
    
        // 新的元素列表
        var new_char_info_list = new List<RichInputCharInfo>();
        var new_char_count = 0;

        var text_info:DisplayInfo = null;
        var text_object:Text = null;
        var char_acc_width = 0.0;
    
        // 处理插入位置之前的元素
        for (var i = 1; i <= char_cursor_it_tmp; 1)
        {
            var char_info = this._char_info_list[i];
            // 普通文本信息缓存
            if (i != 1 && char_info.ctrl_info == null)
            {
                text_info = char_info.text_info;
                text_object = char_info.text_object;
            }
            else
            {
                text_info = null;
                text_object = null;
            }
            char_acc_width = char_info.acc_width;
            new_char_count = new_char_count + 1;
            new_char_info_list[new_char_count] = char_info;
        }

        var insert_count = 0;
        // 处理新插入的元素
        for (var key, display_info in char_info_list)
        {
            // 是普通文本信息
            if (display_info.ctrl_info == null)
            {
                var display_object:DisplayObject = null;
                // 之前有文本信息且可以和之前的信息合并,在之前控件的基础上添加字符
                if (text_info != null && this.CompareTextInfo(display_info.text_info, text_info))
                    display_object = text_object;
                    // 否则新建一个控件,设置控件信息
                else
                {
                    text_info = display_info.text_info;
                    var name = "nkacbjbsakcvuqocbakcbjcbvjhciqwojqppwvnwe";
                    this._ctrl_sys.RegisterInfo(name, String_CopyTable(display_info.text_info));
                    text_object = cast<Text>(this._ctrl_sys.CreateControl{DisplayObject}(name, this._link_map));
                    this._ctrl_sys.UnRegisterInfo(name);
                    display_object = text_object;
                }
                // 生成新的元素
                // 初始化绘制文本
                this.SetDrawText(cast<Text>(display_object));
                var object_text = "";
                // 把所有的字符全部切割取出大小，然后排成列表
                var calc_text = display_info.text;
                var password_width:double = null;  // 密码的文本宽度都一样
                while (calc_text != "")
                {
                    var byte_count = String_GetByteCount(calc_text, 1);
                    var real_text = __sub(calc_text, 1, byte_count);
                    var password_text = "*";
                    var text_width = 0.0;
                    calc_text = __sub(calc_text, byte_count + 1);
                    // 密码模式下
                    if (this._password_mode)
                    {
                        if (password_width == null)
                            password_width = this._draw_text.native_show.CalcTextWidth(password_text);
                        text_width = password_width;
                    }
                    // 正常模式下
                    else
                    {
                        password_text = real_text;
                        text_width = this._draw_text.native_show.CalcTextWidth(real_text);
                    }
                    var char_info = new RichInputCharInfo();
                    char_info.pre_width = char_acc_width;
                    char_info.acc_width = char_info.pre_width + text_width;
                    char_info.text_info = display_info.text_info;        // 文本的内容
                    char_info.text_object = cast<Text>(display_object);
                    char_info.text = real_text;
                    char_info.password_text = password_text;
                    char_info.ctrl_info = null;
                    char_info.ctrl = null;
    
                    object_text = object_text .. char_info.password_text;
    
                    char_acc_width = char_info.acc_width;
                    new_char_count = new_char_count + 1;
                    new_char_info_list[new_char_count] = char_info;
                    insert_count = insert_count + 1;
                }
            }
            // 控件元素
            elseif (display_info.ctrl_info != null)
            {
                // 控件作为单独元素
                text_info = null;
                text_object = null;
                var name = "nkacbjbsakcvuqocbakcbjcbvjhciqwojqppwvnwe";
                this._ctrl_sys.RegisterInfo(name, String_CopyTable(display_info.ctrl_info));
                var display_object = this._ctrl_sys.CreateControl{DisplayObject}(name, this._link_map);
                this._ctrl_sys.UnRegisterInfo(name);

                var char_info = new RichInputCharInfo();
                char_info.pre_width = char_acc_width;
                char_info.acc_width = char_info.pre_width + display_object.width;
                char_info.text_info = display_info.text_info;
                char_info.text_object = null;
                char_info.text = null;
                char_info.password_text = null;
                char_info.ctrl_info = display_info.ctrl_info;
                char_info.ctrl = display_object;
    
                char_acc_width = char_info.acc_width;
                new_char_count = new_char_count + 1;
                new_char_info_list[new_char_count] = char_info;
                insert_count = insert_count + 1;
            }
        }
    
        // 对插入位置之后的原来列表
        for (var i = char_cursor_it_tmp + 1; i <= this._char_count; 1)
        {
            var char_info = this._char_info_list[i];
            // 是可以和之前的文本合并的文本信息
            if (char_info.ctrl_info == null && text_info != null && this.CompareTextInfo(char_info.text_info, text_info))
                char_info.text_object = text_object;
                // 遇到控件信息或无法合并的文本信息,清除信息,后面的文本都不在合并,用原来的
            else
            {
                text_info = null;
                text_object = null;
            }
            var width = char_info.acc_width - char_info.pre_width;
            char_info.pre_width = char_acc_width;
            char_info.acc_width = char_info.pre_width + width;
    
            char_acc_width = char_info.acc_width;
            new_char_count = new_char_count + 1;
            new_char_info_list[new_char_count] = char_info;
        }
        // 遍历所有元素列表，重新设置文本内容
        var text = "";
        var object:Text = null;
        for (var i, char_info in new_char_info_list)
        {
            if (object == null)
            {
                if (char_info.text_object != null)
                {
                    object = char_info.text_object;
                    text = char_info.password_text;
                }
            }
            else
            {
                if (char_info.text_object == null)
                {
                    object.text = text;
                    object = null;
                    text = "";
                }
                elseif (char_info.text_object != object)
                {
                    object.text = text;
                    object = char_info.text_object;
                    text = char_info.password_text;
                }
                else
                {
                    text = text .. char_info.password_text;
                }
            }
        }
        if (object != null)
            object.text = text;
    
        this._char_info_list = new_char_info_list;
        this._char_count = new_char_count;
    
        // 光标位置
        this._char_cursor_it = char_cursor_it_tmp + insert_count;
    
        // 设置为非选中状态
        if (selected)
            this._char_select_it = char_cursor_it_tmp;
        else
            this._char_select_it = this._char_count + 1;
    
        // 绘制
        this.Draw();
    }
    
    // 删除内容
    protected fun DeleteCharInfo(int begin_char_it, int end_char_it)
    {
        // 检查是否有字体
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return;

        // 新的元素列表
        var new_char_info_list = new List<RichInputCharInfo>();
        var new_char_count = 0;

        var text_info:DisplayInfo = null;
        var text_object:Text = null;
        var char_acc_width = 0.0;

        // 处理删除位置之前的元素
        for (var i = 1; i <= begin_char_it; 1)
        {
            var char_info = this._char_info_list[i];
            // 普通文本信息缓存
            if (i != 1 && char_info.ctrl_info == null)
            {
                text_info = char_info.text_info;
                text_object = char_info.text_object;
            }
            char_acc_width = char_info.acc_width;
            new_char_count = new_char_count + 1;
            new_char_info_list[new_char_count] = char_info;
        }

        // 处理删除位置之后的元素
        for (var i = end_char_it + 1; i <= this._char_count; 1)
        {
            var char_info = this._char_info_list[i];
            // 是可以和之前的文本合并的文本信息
            if (char_info.ctrl_info == null && text_info != null && this.CompareTextInfo(char_info.text_info, text_info))
                char_info.text_object = text_object;
                // 遇到控件信息或无法合并的文本信息,清除信息,后面的文本都不在合并,用原来的
            else
            {
                text_info = null;
                text_object = null;
            }
            var width = char_info.acc_width - char_info.pre_width;
            char_info.pre_width = char_acc_width;
            char_info.acc_width = char_info.pre_width + width;

            char_acc_width = char_info.acc_width;
            new_char_count = new_char_count + 1;
            new_char_info_list[new_char_count] = char_info;
        }

        // 遍历所有元素列表，重新设置文本内容
        var text = "";
        var object:Text = null;
        for (var i, char_info in new_char_info_list)
        {
            if (object == null)
            {
                if (char_info.text_object != null)
                {
                    object = char_info.text_object;
                    text = char_info.password_text;
                }
            }
            else
            {
                if (char_info.text_object == null)
                {
                    object.text = text;
                    object = null;
                    text = "";
                }
                elseif (char_info.text_object != object)
                {
                    object.text = text;
                    object = char_info.text_object;
                    text = char_info.password_text;
                }
                else
                {
                    text = text .. char_info.password_text;
                }
            }
        }
        if (object != null)
            object.text = text;

        this._char_info_list = new_char_info_list;
        this._char_count = new_char_count;

        this._char_cursor_it = begin_char_it;
        this._char_select_it = this._char_count + 1;

        // 绘制
        this.Draw();
    }
    
    // 根据偏移获取位置
    protected fun GetIteratorByOffset(double offset_x) : int
    {
        var real_offset_x = offset_x - this._display_show.x;
        // 如果real_offset_x小于0，说明光标在最左边
        if (real_offset_x < 0)
            return 1;
        var char_it = 1;
        var char_end_it = this._char_count + 1;
        while (char_it != char_end_it)
        {
            var char_info = this._char_info_list[char_it];
            if (real_offset_x <= char_info.acc_width)
            {
                var half_char_width = (char_info.acc_width - char_info.pre_width) * 0.5;
                if (real_offset_x - char_info.pre_width < half_char_width && char_it != 1)
                    char_it = char_it - 1;
                break;
            }
            else
                char_it = char_it + 1;
        }
    
        // 如果在结束位置，那么就调整为最后一个字符
        if (char_it == char_end_it)
        {
            char_end_it = char_end_it - 1;
            char_it = char_end_it;
        }
        return char_it;
    }

    protected fun ClickCursorToHome()
    {
        this._char_select_it = this._char_count + 1;
        this._char_cursor_it = 1;
    
        this.UpdateFontText();
        this.ResetShowXByCursor();
        this.ResetCursor();
    }

    protected fun ClickCursorToEnd()
    {
        this._char_select_it = this._char_count + 1;
        this._char_cursor_it = this._char_count;
    
        this.UpdateFontText();
        this.ResetShowXByCursor();
        this.ResetCursor();
    }
    
    // 点击单光标
    protected fun ClickCursor(double offset_x)
    {
        this._char_select_it = this._char_count + 1;
    
        // 设置光标位置
        this._char_cursor_it = this.GetIteratorByOffset(offset_x);
    
        this.UpdateFontText();
        this.ResetShowXByCursor();
        this.ResetCursor();
    }
    
    // 点击双光标
    protected fun ClickMultiCursor(double offset_x, bool trans)
    {
        // 设置光标位置
        var char_cursor_it:int;
        if (trans)
            char_cursor_it = this._char_cursor_it;
        else
            char_cursor_it = this.GetIteratorByOffset(offset_x);
    
        // 不是第一个
        if (char_cursor_it != 1)
        {
            this._char_cursor_it = char_cursor_it;
            this._char_select_it = char_cursor_it - 1;
        }
        // 第一个
        else
        {
            if (this._char_count != 1)
            {
                this._char_cursor_it = char_cursor_it + 1;
                this._char_select_it = char_cursor_it;
            }
            else
            {
                this._char_cursor_it = 1;
                this._char_select_it = 2;
            }
        }
    
        this.UpdateFontText();
        this.ResetShowXByCursor();
        this.ResetCursor();
    }

    protected fun ClickWordCursor(double offset_x) : bool
    {
        // 设置光标位置
        this._char_cursor_it = this.GetIteratorByOffset(offset_x);
        this._char_select_it = this._char_cursor_it;
    
        // 找到左边的字符
        while (true)
        {
            var str = this._char_info_list[this._char_select_it].password_text;
            if (str != null && __len(str) == 1 && str != "_" && this.CharIsNumber(str) == false && this.CharIsLetter(str) == false)
                break;
            if (this._char_select_it == 1)
                break;
            this._char_select_it = this._char_select_it - 1;
        }
    
        // 找到右边的字符
        while (true)
        {
            var str = this._char_info_list[this._char_cursor_it].password_text;
            if (str != null && __len(str) == 1 && str != "_" && this.CharIsNumber(str) == false && this.CharIsLetter(str) == false)
            {
                this._char_cursor_it = this._char_cursor_it - 1;
                break;
            }
            if (this._char_cursor_it == this._char_count)
                break;
            this._char_cursor_it = this._char_cursor_it + 1;
        }
    
        if (this._char_select_it < 1)
            this._char_select_it = this._char_count + 1;
    
        this.UpdateFontText();
        this.ResetShowXByCursor();
        this.ResetCursor();
    
        return this._char_select_it <= this._char_count;
    }
    
    public fun SelectAll()
    {
        this._char_select_it = 1;
        this._char_cursor_it = this._char_count;
    
        this.UpdateFontText();
        this.ResetShowXByCursor();
        this.ResetCursor();
    }

    protected fun CursorOffsetLR(bool left)
    {
        if (this._char_select_it <= this._char_count && this._char_select_it != this._char_cursor_it)
        {
            if (this._char_cursor_it > this._char_select_it && left)
                this._char_cursor_it = this._char_select_it;
            elseif (this._char_cursor_it < this._char_select_it && !left)
                this._char_cursor_it = this._char_select_it;
                
            this._char_select_it = this._char_count + 1;
            return;
        }
    
        if (left)
        {
            if (this._char_cursor_it == 1) return;
            this._char_cursor_it = this._char_cursor_it - 1;
        }
        else
        {
            if (this._char_cursor_it == this._char_count) return;
            this._char_cursor_it = this._char_cursor_it + 1;
        }
    
        this.UpdateFontText();
        this.ResetShowXByCursor();
        this.ResetCursor();
    }

    protected fun SelectCursorOffsetLR(bool left)
    {
        if (this._char_select_it > this._char_count)
            this._char_select_it = this._char_cursor_it;
    
        if (left)
        {
            if (this._char_cursor_it == 1)
                return;
            this._char_cursor_it = this._char_cursor_it - 1;
        }
        else
        {
            if (this._char_cursor_it == this._char_count)
                return;
            this._char_cursor_it = this._char_cursor_it + 1;
        }
    
        this.UpdateFontText();
        this.ResetShowXByCursor();
        this.ResetCursor();
    }

    protected fun DragCursorBegin()
    {
        this._char_select_it = this._char_cursor_it;
    }

    protected fun DragCursor(double offset_x)
    {
        // 设置光标的位置
        this._char_cursor_it = this.GetIteratorByOffset(offset_x);
        // 光标与左边界重合，向左边移动
        if (this._char_info_list[this._char_cursor_it].pre_width == -this._display_show.x && this._char_cursor_it != 1 && offset_x < 0)
            this._char_cursor_it = this._char_cursor_it - 1;
    
        // 光标与右边重合，向右边移动
        if (this._char_info_list[this._char_cursor_it].acc_width == this._display_view.width - this._display_show.x && this._char_cursor_it != this._char_count && offset_x > this._display_view.width)
            this._char_cursor_it = this._char_cursor_it - 1;
    
        this.UpdateFontText();
        this.ResetShowXByCursor();
        this.ResetCursor();
    }
    
    // 双光标光标移动
    protected fun DragMultiCursor(double offset_x)
    {
        offset_x = offset_x + this._drag_delta_x;
    
        // 设置光标的位置
        this._char_cursor_it = this.GetIteratorByOffset(offset_x);
    
        // 光标与左边界重合，向左边移动
        if (this._char_info_list[this._char_cursor_it].pre_width == -this._display_show.x && this._char_cursor_it != 1 && offset_x < 0)
            this._char_cursor_it = this._char_cursor_it - 1;
    
        // 光标与右边重合，向右边移动
        if (this._char_info_list[this._char_cursor_it].acc_width == this._display_view.width - this._display_show.x && this._char_cursor_it != this._char_count && offset_x > this._display_view.width)
            this._char_cursor_it = this._char_cursor_it - 1;
    
        this.UpdateFontText();
        this.ResetShowXByCursor();
        this.ResetCursor();
    }
    
    // 拖动整个屏幕，双光标模式调用
    protected fun DragInput(double delta_x)
    {
        var display_show_x = this._display_show.x + delta_x;
        var display_show_width = this._char_info_list[this._char_count].acc_width;
        if (this._display_show.width < this._display_view.width || display_show_x > 0)
            display_show_x = 0;
        elseif (display_show_x < this._display_view.width - display_show_width)
            display_show_x = this._display_view.width - display_show_width;
        this._display_show.x = display_show_x;
        this.ResetCursor();
    }
    
    // 根据光标所在调整控件显示
    protected fun ResetShowXByCursor()
    {
        // 光标前面和后面的一个控件
        var char_info = this._char_info_list[this._char_cursor_it];
        var next_char_info = this._char_info_list[this._char_cursor_it + 1];
        var max_char_info = this._char_info_list[this._char_count];
        if (next_char_info == null)
            next_char_info = char_info;

        var display_show_x = 0.0;
        // 光标在显示的左边
        if (char_info.pre_width < -this._display_show.x)
            this._display_show.x = -char_info.pre_width;
            // 光标在显示的右边
        elseif (next_char_info.acc_width > this._display_view.width - this._display_show.x)
            this._display_show.x = this._display_view.width - next_char_info.acc_width;
        elseif (max_char_info.acc_width + this._display_show.x < this._display_view.width && this._display_show.x < 0)
        {
            var display_x = this._display_view.width - max_char_info.acc_width;
            if (display_x > 0)
                display_x = 0;
            this._display_show.x = display_x;
        }
        // 右对齐，并且内容的从宽度小于裁剪区的大小，那么就右对齐
        elseif (this._input_align && max_char_info.acc_width < this._display_view.width)
            this._display_show.x = this._display_view.width - max_char_info.acc_width;
    }
    
    // 调整光标显示
    protected fun ResetCursor()
    {
        // 检查是否有字体
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return;
        // 最大高度
        var max_height = this._display_show.height;
        if (max_height > this._display_view.height)
            max_height = this._display_view.height;
    
        // 处理没有选中文本
        if (this._char_select_it > this._char_count || this._char_select_it == this._char_cursor_it)
        {
            // 隐藏选中光标
            this._select.visible = false;
            // 隐藏双光标
            this._start_cursor.visible = false;
            this._end_cursor.visible = false;
            this._start_cursor_data = null;
            this._end_cursor_data = null;
    
            this._event_start_x = 0;
            this._event_end_x = 0;
            this._event_start_y = 0;
            this._event_end_y = 0;
    
            // 根据设置显示单光标
            if (this._focus_cursor)
                this._cursor.visible = this._is_focus;
            else
                this._cursor.visible = true;
    
            // 根据光标位置显示单光标
            var cursor_x = this._display_view.x + this._char_info_list[this._char_cursor_it].acc_width + this._display_show.x;
            if (cursor_x < this._display_view.x || cursor_x > this._display_view.x + this._display_view.width)
                this._cursor.visible = false;
            var cursor_height = 0.0;
            var cursor_width = 0.0;
            var char = this._char_info_list[this._char_cursor_it];
            if (char.ctrl != null)
            {
                cursor_height = char.ctrl.height;
                cursor_width = 2;
            }
            else
            {
                if (char.text_object != null)
                {
                    cursor_height = char.text_object.height;
                    cursor_width = this.GetCursorWidth(char.text_object.font_size);
                }
                else
                {
                    var next_char = this._char_info_list[this._char_cursor_it + 1];
                    if (next_char != null)
                    {
                        if (next_char.ctrl != null)
                        {
                            cursor_height = next_char.ctrl.height;
                            cursor_width = 2;
                        }
                        elseif (next_char.text_object != null)
                        {
                            cursor_height = next_char.text_object.height;
                            cursor_width = this.GetCursorWidth(next_char.text_object.font_size);
                        }
                        else
                        {
                            cursor_height = this._font_text.native_show.GetFontHeight();
                            cursor_width = this.GetCursorWidth(this._font_text.font_size);
                        }
                    }
                    else
                    {
                        cursor_height = this._font_text.native_show.GetFontHeight();
                        cursor_width = this.GetCursorWidth(this._font_text.font_size);
                    }
                }
            }
            if (cursor_height > max_height)
                cursor_height = max_height;
    
            if (cursor_height == 0)
            {
                cursor_height = this._default_text.font_height;
                if (cursor_height == 0)
                    cursor_height = this._default_font_height;
            }
    
            this._cursor.width = cursor_width;
            this._cursor.height = cursor_height;
            this._cursor.x = cursor_x;
            this._cursor.y = this._margin_valign + (this._display_view.height - cursor_height);
    
            return;
        }
    
        // 单光标模式，显示选中时，编辑光标隐藏
        if (this._multi_cursor == false)
            this._cursor.visible = false;
    
        this._select.visible = true;
        // 选择光标，编辑光标的位置
        var select_x = this._display_view.x + this._char_info_list[this._char_select_it].acc_width + this._display_show.x;
        var cursor_x = this._display_view.x + this._char_info_list[this._char_cursor_it].acc_width + this._display_show.x;
    
        // 选择光标位置在前
        if (this._char_cursor_it > this._char_select_it)
        {
            if (cursor_x < this._display_view.x)
                this._select.visible = false;
            if (select_x > this._display_view.x + this._display_view.width)
                this._select.visible = false;

            var select_x_1 = select_x;
            var cursor_x_1 = cursor_x;
            if (select_x_1 < this._display_view.x)
                select_x_1 = this._display_view.x;
            if (cursor_x_1 > this._display_view.x + this._display_view.width)
                cursor_x_1 = this._display_view.x + this._display_view.width;
    
            this._select.y = this._margin_valign + (this._display_view.height - max_height);
            this._select.height = max_height;
            this._select.x = select_x_1;
            this._select.width = cursor_x_1 - select_x_1;
    
            // 双光标模式设置光标位置
            if (this._multi_cursor == true)
            {
                this._cursor.visible = false;
    
                if (select_x < this._display_view.x || select_x > this._display_view.x + this._display_view.width)
                    this._start_cursor.visible = false;
                else
                {
                    this._start_cursor.visible = true;
                    this._start_cursor.x = select_x - this._start_cursor.width;
                    this._start_cursor.height = this._select.height + this._cursor_margin_up + this._cursor_margin_down;
                    this._start_cursor.y = this._select.y - this._cursor_margin_up;
                }
    
                if (cursor_x > this._display_view.x + this._display_view.width || cursor_x < this._display_view.x)
                    this._end_cursor.visible = false;
                else
                {
                    this._end_cursor.visible = true;
                    this._end_cursor.x = cursor_x;
                    this._end_cursor.height = this._select.height + this._cursor_margin_up + this._cursor_margin_down;
                    this._end_cursor.y = this._select.y - this._cursor_margin_up;
                }
    
                this._start_cursor_data = "select";
                this._end_cursor_data = "cursor";
    
                this._event_start_x = this._select.x;
                this._event_start_y = this._select.y;
                this._event_end_x = this._select.x + this._select.width;
                this._event_end_y = this._select.y;
            }
        }
        // 编辑光标位置在前
        elseif (this._char_cursor_it < this._char_select_it)
        {
            if (select_x < this._display_view.x)
                this._select.visible = false;
            if (cursor_x > this._display_view.x + this._display_view.width)
                this._select.visible = false;

            var select_x_1 = select_x;
            var cursor_x_1 = cursor_x;
            if (cursor_x_1 < this._display_view.x)
                cursor_x_1 = this._display_view.x;
            if (select_x_1 > this._display_view.x + this._display_view.width)
                select_x_1 = this._display_view.x + this._display_view.width;
    
            this._select.y = this._margin_valign + (this._display_view.height - max_height);
            this._select.height = max_height;
            this._select.x = cursor_x_1;
            this._select.width = select_x_1 - cursor_x_1;
            // 双光标模式设置光标位置
            if (this._multi_cursor == true)
            {
                this._cursor.visible = false;
    
                if (cursor_x < this._display_view.x || cursor_x > this._display_view.x + this._display_view.width)
                    this._start_cursor.visible = false;
                else
                {
                    this._start_cursor.visible = true;
                    this._start_cursor.x = cursor_x - this._start_cursor.width;
                    this._start_cursor.height = this._select.height + this._cursor_margin_up + this._cursor_margin_down;
                    this._start_cursor.y = this._select.y - this._cursor_margin_up;
                }
    
                if (select_x > this._display_view.x + this._display_view.width || select_x < this._display_view.x)
                    this._end_cursor.visible = false;
                else
                {
                    this._end_cursor.visible = true;
                    this._end_cursor.x = select_x;
                    this._end_cursor.height = this._select.height + this._cursor_margin_up + this._cursor_margin_down;
                    this._end_cursor.y = this._select.y - this._cursor_margin_up;
                }
    
                this._start_cursor_data = "cursor";
                this._end_cursor_data = "select";
    
                this._event_start_x = this._select.x;
                this._event_start_y = this._select.y;
                this._event_end_x = this._select.x + this._select.width;
                this._event_end_y = this._select.y;
            }
        }
    }
    
    // 判断是否显示默认文本
    protected fun ShowDefaultText()
    {
        if (this._is_focus == false)
        {
            if (this._focus_cursor && this.is_empty)
                this._default_text.visible = true;
            else
                this._default_text.visible = false;
        }
        else
            this._default_text.visible = false;
    }
    
    // 删除选中文本
    protected fun DeleteSelectText() : bool
    {
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return false;
    
        // 检查是否是选中状态
        if (this._char_select_it > this._char_count)
            return false;
        if (this._char_select_it == this._char_cursor_it)
            return false;
            
        // 获取删除开始结束位置
        var begin_char_it:int;
        var end_char_it:int;
        if (this._char_select_it > this._char_cursor_it)
        {
            begin_char_it = this._char_cursor_it;
            end_char_it = this._char_select_it;
        }
        else
        {
            end_char_it = this._char_cursor_it;
            begin_char_it = this._char_select_it;
        }
    
        // 删除文本
        this.DeleteCharInfo(begin_char_it, end_char_it);
        this.ResetCursor();
        return true;
    }

    protected fun CheckDisplayListRegexLimit(List<DisplayInfo> display_list) : bool
    {
        if (this._regex == "")
            return false;
    
        // 取出所有字符
        var text = "";
        for (var k, v in display_list)
        {
            if (v.__class != "Text")
                return false;
            text = text .. v.text;
        }
    
        return this.CheckTextRegexLimit(text);
    }
    
    // 插入
    // displaylist 显示列表
    // select 如果填true，那么表示选中显示选中
    protected fun InsertDisplayListNative(List<DisplayInfo> display_list, bool selected) : bool
    {
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return false;
    
        if (this.CheckDisplayListRegexLimit(display_list) == false)
            return false;
        // 删除选中文本
        this.DeleteSelectText();
    
        // 获取当前光标所指向的字符
        var char_info = this._char_info_list[this._char_cursor_it];
    
        // 构建char_info_list
        var char_info_list = this.DisplayListToCharInfoList(display_list, char_info.text_info);
    
        this.InsertCharInfo(char_info_list, selected);
    
        return true;
    }
    
    // 检测正则表达式
    protected fun CheckTextRegexLimit(string text) : bool
    {
        // 判断长度
        if (this._limit_len > 0)
        {
            var text_len = String_GetWordCount(text);
            // 先判断输入的文本是否满足条件
            if (text_len > this._limit_len)
                return false;
    
            // 选中文本长度
            var select_len = 0;
            var displaylist = this.GetSelectText();
            for (var k, v in displaylist)
            {
                if (v.__class == "Text")
                    select_len = select_len + String_GetWordCount(v.text);
            }
    
            // 计算最后文本长度
            displaylist = this.display_list;
            var total_len = 0;
            for (var k, v in displaylist)
            {
                if (v.__class == "Text")
                    total_len = total_len + String_GetWordCount(v.text);
            }
            if (total_len - select_len + text_len > this._limit_len)
                return false;
        }
    
        //  首先判断输入的文件是否满足正则表达式
        if (this._regex != "")
        {
            while (text != "")
            {
                var byte_count = String_GetByteCount(text, 1);
                var sub_text = __sub(text, 1, byte_count);

                var start_it = __find(sub_text, this._regex);
                if (start_it == null)
                    return false;
    
                text = __sub(text, byte_count + 1);
            }
        }
    
        return true;
    }
    
    // 插入文本
    protected fun InsertTextNative(string text) : bool
    {
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return false;
    
        // 检测输入规则
        if (this.CheckTextRegexLimit(text) == false)
            return false;
            
        // 删除选中文本
        this.DeleteSelectText();
    
        // 构建char_info_list
        var char_info_list = new List<RichInputCharInfo>();

        var new_char_info = new RichInputCharInfo();
        new_char_info.acc_width = 0;
        new_char_info.pre_width = 0;
        new_char_info.text_info = this.InitTextInfo();
        new_char_info.text_object = null;
        new_char_info.text = text;
        new_char_info.ctrl_info = null;
        new_char_info.ctrl = null;
        char_info_list[1] = new_char_info;
    
        this.InsertCharInfo(char_info_list, false);
    
        return true;
    }
    
    // 获取选中内容
    public fun GetSelectText() : List<DisplayInfo>
    {
        var select_text = new List<RichInputCharInfo>();
        var select_text_count = 0;
    
        // 检查是否是选中状态
        if (this._char_select_it > this._char_count)
            return new List<DisplayInfo>();
        if (this._char_select_it == this._char_cursor_it)
            return new List<DisplayInfo>();

        var char_it:int;
        var char_end:int;
        if (this._char_select_it > this._char_cursor_it)
        {
            char_it = this._char_cursor_it + 1;
            char_end = this._char_select_it;
        }
        else
        {
            char_end = this._char_cursor_it;
            char_it = this._char_select_it + 1;
        }
    
        while (char_it <= char_end)
        {
            ++ select_text_count;
            select_text[select_text_count] = this._char_info_list[char_it];
            char_it = char_it + 1;
        }
        return this.CharInfoListToDisplayList(select_text);
    }
    
    // 获取选中文字
    public fun GetSelectWord() : string
    {
        var select_text = new List<RichInputCharInfo>();
        var select_text_count = 0;
    
        // 检查是否是选中状态
        if (this._char_select_it > this._char_count)
            return "";
        if (this._char_select_it == this._char_cursor_it)
            return "";

        var char_it:int;
        var char_end:int;
        if (this._char_select_it > this._char_cursor_it)
        {
            char_it = this._char_cursor_it + 1;
            char_end = this._char_select_it;
        }
        else
        {
            char_end = this._char_cursor_it;
            char_it = this._char_select_it + 1;
        }
    
        while (char_it <= char_end)
        {
            ++ select_text_count;
            select_text[select_text_count] = this._char_info_list[char_it];
            char_it = char_it + 1;
        }
        return this.CharInfoListToWord(select_text);
    }
    
    // 删除内容
    public fun DeleteText(bool left) : bool
    {
        if (this._font_text.font_path == null || this._font_text.font_size == null)
            return false;
    
        // 如果有选中文本，那么就直接删除，并且返回
        if (this.DeleteSelectText())
            return true;

        if (left)
        {
            // 如果已经是开头了，那么就直接返回
            if (this._char_cursor_it == 1)
                return false;
            var end_it = this._char_cursor_it;
            var begin_it = this._char_cursor_it - 1;
            this.DeleteCharInfo(begin_it, end_it);
        }
        else
        {
            // 如果已经是开结尾了，那么就直接返回
            if (this._char_cursor_it == this._char_count)
                return false;
            var begin_it = this._char_cursor_it;
            var end_it = this._char_cursor_it + 1;
            this.DeleteCharInfo(begin_it, end_it);
        }
    
        return true;
    }
    
    ////////////////////////////-外部调用////////////////////////////////
    
    // 设置单光标位置
    public fun SetCursor(double rel_x, double rel_y)
    {
        if (this._auto_ims)
            this.OpenIME();

        this._is_selecting = false;
        if (this._multi_cursor)
        {
            this._multi_cursor = false;
            this._start_cursor.visible = false;
            this._end_cursor.visible = false;
            this._cursor.visible = true;
            this.ClickCursor(rel_x - this._display_view.x);
        }
        else
            this.ClickCursor(rel_x - this._display_view.x);
    }
    
    // 设置双光标位置
    public fun SetMultiCursor(double rel_x, double rel_y)
    {
        if (this._auto_ims)
            this.OpenIME();

        this._is_selecting = true;
        if (this._multi_cursor == false)
        {
            this._multi_cursor = true;  // 表为双光标
            this._cursor.visible = false;
            this._start_cursor.visible = true;
            this._end_cursor.visible = true;
            this.ClickMultiCursor(rel_x - this._display_view.x, false);
        }
        else
            this.ClickMultiCursor(rel_x - this._display_view.x, false);
    }
    
    // 双光标转换为单光标（位置不变）
    public fun TransToCursor()
    {
        // 将双光标的结束光标设置为光标位置
        if (this._end_cursor_data == "select")
            this._char_cursor_it = this._char_select_it;

        // 选择光标不可见
        this._char_select_it = this._char_count + 1;
    
        this._is_selecting = false;
        this._multi_cursor = false;
        this._start_cursor.visible = false;
        this._end_cursor.visible = false;
        this._cursor.visible = true;
    
        this.UpdateFontText();
        this.ResetShowXByCursor();
        this.ResetCursor();
    }
    
    // 单光标转换为双光标（位置不变）
    public fun TransToMulti()
    {
        if (this._multi_cursor)
            return;

        this._is_selecting = true;
        this._multi_cursor = true;  // 表为双光标
    
        this._cursor.visible = false;
        this._start_cursor.visible = true;
        this._end_cursor.visible = true;
    
        this.ClickMultiCursor(null, true);
    }
    
    // 打开键盘
    // @param x, y RichInput键盘感应的左上角绝对坐标（相对于屏幕的）
    // @param width, height RichEidt键盘感应的区域大小
    // 如果以上参数有一个没填，那么就是用RichInput默认的键盘区域感应
    // 不考虑旋转
    public fun OpenIME([Nullable] double x, [Nullable] double y, [Nullable] double width, [Nullable] double height)
    {
        if (this._editable)
        {
            if (x != null && y != null && width != null && height != null)
                System_SetIMERect(__floor(x), __floor(y), __floor(width), __floor(height));
            else
            {
                var global_x, global_y = this.LocalToGlobal();
                global_x = global_x + this.cursor_x;
                global_y = global_y + (this.cursor_y + this.font_size) * this.scale_y;
                System_SetIMERect(__floor(global_x), __floor(global_y), 10, __floor(5 + this._ims_padding));
            }
            System_OpenIME();
            this.ResetCursor();
        }
    }
    // 关闭键盘
    public fun CloseIME()
    {
        System_CloseIME();
    }
    
    // 插入控件列表
    // 使用范例
    // 1. 插入图片
    //    var display_list = {}
    //	  var image = {}
    //	  image.__class = "Image"
    //	  image.texture_name = "xxxxxx"
    // 	  image.width_value = 100
    //    image.height_value = 100
    //    table.insert(display_list, image)
    public fun InsertText(List<DisplayInfo> display_list, bool selected)
    {
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this.InsertDisplayListNative(display_list, selected);

        this._is_selecting = false;
        this._multi_cursor = false;
    
        this.UpdateFontText();
        this.ResetShowXByCursor();
        this.ResetCursor();
    
        this.ShowDefaultText();
    }
    
    public fun InsertWord(string word_text)
    {
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this.InsertTextNative(word_text);
        this._is_selecting = false;
    
        this.TransToCursor();
        this.ShowDefaultText();
    }
    
    // 复制选中  return_cursor true 复制后自动还原为单光标
    public fun CopyText(bool return_cursor)
    {
        if (this._password_mode)
            return;

        var select_text = this.GetSelectText();
    
        if (select_text[1] != null)
            System_SetClipboardText(ALittle.String_JsonEncode(select_text));
        if (return_cursor)
            this.TransToCursor();
        this.ShowDefaultText();
    }
    
    // 复制选中文字  return_cursor true 复制后自动还原为单光标
    public fun CopyWord(bool return_cursor)
    {
        if (this._password_mode)
            return;
        var select_text = this.GetSelectWord();
    
        if (select_text != null)
            System_SetClipboardText(select_text);
        if (return_cursor)
            this.TransToCursor();
        this.ShowDefaultText();
    }
    
    // 剪切
    public fun CutText()
    {
        if (this._password_mode)
            return;
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this._is_selecting = false;
        var select_text = this.GetSelectText();
        if (select_text[1] != null)
        {
            System_SetClipboardText(ALittle.String_JsonEncode(select_text));
            this.DeleteSelectText();
            this.TransToCursor();
        }
        this.ShowDefaultText();
    }
    
    // 剪切
    public fun CutWord()
    {
        if (this._password_mode)
            return;
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this._is_selecting = false;
        var select_text = this.GetSelectWord();
        if (select_text != null)
        {
            System_SetClipboardText(select_text);
            this.DeleteSelectText();
            this.TransToCursor();
        }
        this.ShowDefaultText();
    }
    
    // 粘帖
    public fun PasteText()
    {
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this._is_selecting = false;
        if (System_HasClipboardText())
        {
            var content = System_GetClipboardText();
            var error, new_content = tcall(ALittle.String_JsonDecode, content);
            if (error == null && __type(new_content) == "table" && this.CheckDisplayList(new_content))
            {
                if (this.CheckAtKeyInput(new_content))
                    return;
                this.InsertDisplayListNative(new_content, false);
            }
            else
            {
                if (this.CheckAtKeyInput(content))
                    return;
                this.InsertTextNative(content);
            }
            this.TransToCursor();
        }
        this.ShowDefaultText();
    }
    
    public fun PasteWord()
    {
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this._is_selecting = false;
        if (System_HasClipboardText())
        {
            var content = System_GetClipboardText();
            this.InsertTextNative(content);
            this.TransToCursor();
        }
        this.ShowDefaultText();
    }
    
    // 清空
    public fun Clear()
    {
        this.ClearCharInfo();
        this.ShowDefaultText();
    }
    
    // 删除
    public fun Delete()
    {
        if (this._editable == false)
            return;
        // 双光标模式未选中
        if (this._multi_cursor && this._is_selecting == false)
            return;
    
        this._is_selecting = false;
        this.DeleteText(true);
        this.TransToCursor();
        this.ShowDefaultText();
    }

    // 获取全部文本信息
    public fun GetWord() : string
    {
        return this.CharInfoListToWord(this._char_info_list);
    }
    
    //////////////////////////事件////////////////////////////////////////-
    
    public fun HandleFocusOut(UIFocusOutEvent event)
    {
        if (this._auto_ims)
            System_CloseIME();
            
        this._is_focus = false;
        if (this._focus_cursor)
        {
            if (this._multi_cursor == false)
                this._cursor.visible = false;
        }
        this.ShowDefaultText();
    }
    
    public fun HandleFocusIn(UIFocusInEvent event)
    {
        if (this._auto_ims)
            this.OpenIME();
            
        this._is_focus = true;
        this.ResetShowXByCursor();
        this.ResetCursor();
        this.ShowDefaultText();
    }
    
    public fun HandleMoveIn(UIMoveInEvent event)
    {
        System_SetEditCursor();
    }
    
    public fun HandleMoveOut(UIMoveOutEvent event)
    {
        System_SetNormalCursor();
    }
    
    public fun HandleLButtonDown(UILButtonDownEvent event)
    {
        // 单光标
        if (this._multi_cursor == false)
        {
            this._is_longclick = false;
            // 点击在编辑区域
            if (event.rel_x > this._display_view.x
                && event.rel_x <= this._display_view.x + this._display_view.width
                && event.rel_y >= this._display_view.y
                && event.rel_y <= this._display_view.y + this._display_view.height)
            {
                if (event.count % 3 == 1)
                {
                    this._is_selecting = false;
                    this.ClickCursor(event.rel_x - this._display_view.x);
                    // 发送光标点击事件
                    this.DispatchEvent(new RichInputCursorClickEvent());
                }    
                elseif (event.count % 3 == 2)
                {
                    this._is_selecting = this.ClickWordCursor(event.rel_x - this._display_view.x);
                }
                else
                {
                    this._is_selecting = true;
                    this.SelectAll();
                }
                this._is_click = true;
                // 点击在以外区域
            }
            else
                this._is_click = false;
        }
        // 双光标
        else
        {
            this._click_drag_delta_x = 0;
            this._click_drag_delta_y = 0;
            this._is_click = false;
            this._is_click_cursor = false;
            this._is_click_cursor_name = "";
            this._is_longclick = false;
            // 点击在开始光标上
            if (this._start_cursor.visible
                    && event.rel_x >= this._start_cursor.x && event.rel_x <= this._start_cursor.x + this._start_cursor.width
                    && event.rel_y >= this._start_cursor.y && event.rel_y <= this._start_cursor.y + this._start_cursor.height)
            {
                this._is_click_cursor = true;
                this._is_click_cursor_name = "start";
            }
            // 点击在结束光标上
            elseif (this._end_cursor.visible
                    && event.rel_x >= this._end_cursor.x && event.rel_x <= this._end_cursor.x + this._end_cursor.width
                    && event.rel_y >= this._end_cursor.y && event.rel_y <= this._end_cursor.y + this._end_cursor.height)
            {
                this._is_click_cursor = true;
                this._is_click_cursor_name = "end";
                // 没有点击在光标上，判断范围
            }
            else
            {
                // 点击在编辑区域
                if (event.rel_x >= this._display_view.x
                    && event.rel_x <= this._display_view.x + this._display_view.width
                    && event.rel_y >= this._display_view.y
                    && event.rel_y <= this._display_view.y + this._display_view.height)
                    this._is_click = true;
            }
        }
    }
    
    public fun HandleLButtonUp(UILButtonUpEvent event)
    {
        // 双光标模式处理
        if (this._multi_cursor == true)
        {
            // 只处理没有长按过
            if (this._is_click && this._is_longclick == false && this._click_drag_delta_x < 2 && this._click_drag_delta_y < 2)
            {
                this._multi_cursor = false;
                this._start_cursor.visible = false;
                this._end_cursor.visible = false;
                this._cursor.visible = true;
                this.ClickCursor(event.rel_x - this._display_view.x);
                // 发送光标点击事件
                this.DispatchEvent(new RichInputCursorClickEvent());
            }
        }
    }
    
    // 如果光标前面一个字符不是字母或者数字就转发@事件
    public fun CheckAtKeyInput(string input_text) : bool
    {
        if (input_text != "@")
            return false;
        // 获取光标前一个字符是不是数字或者字母
        var char_cursor_it = this._char_cursor_it; // 光标的位置
        // 是否是第一个字符
        if (this._char_cursor_it == 1)
        {
            this.DispatchEvent(new UIAtKeyEvent());
            return true;
        }

        var char_info = this._char_info_list[this._char_cursor_it];
        var forward_text = char_info.text;
        if (!(this.CharIsNumber(forward_text) || this.CharIsLetter(forward_text)))
        {
            this.DispatchEvent(new UIAtKeyEvent());
            return true;
        }
        return false;
    }
    
    public fun HandleTextInput(UITextInputEvent event)
    {
        var is_change = false;
        // 单光标模式
        if (this._multi_cursor == false)
        {
            if ((this._editable || event.custom))
            {
                if (this.CheckAtKeyInput(event.text))
                    return;
                this._is_selecting = false;
                is_change = this.InsertTextNative(event.text);
            }
        }
        // 双光标模式
        else
        {
            if (this._is_selecting && this._editable)
            {
                this._is_selecting = false;
                is_change = this.InsertTextNative(event.text);
                this._multi_cursor = false;
            }
        }
        if (is_change)
        {
            this.DispatchEvent(new UIChangedEvent());
            this.UpdateFontText();
            this.ResetShowXByCursor();
            this.ResetCursor();
            this.ShowDefaultText();
        }
    }
    
    public fun HandleKeyDown(UIKeyDownEvent event)
    {
        // 标记是否需要发送CHANGE事件
        var is_change = false;
        // 处理键盘按键
        if (event.sym == 1073741904)
        {
            // 左键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (event.mod & UIEnumTypes.KMOD_SHIFT == 0)
                {
                    this._is_selecting = false;
                    this.CursorOffsetLR(true);
                }
                else
                {
                    this._is_selecting = true;
                    this.SelectCursorOffsetLR(true);
                }
            }
			event.handled = true;
        }
        elseif (event.sym == 1073741903)
        {
            // 右键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (event.mod & UIEnumTypes.KMOD_SHIFT == 0)
                {
                    this._is_selecting = false;
                    this.CursorOffsetLR(false);
                }
                else
                {
                    this._is_selecting = true;
                    this.SelectCursorOffsetLR(false);
                }
            }
			event.handled = true;
        }
        elseif (event.sym == 8)
        {
            // 退格键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (this._editable || event.custom)
                {
                    this._is_selecting = false;
                    is_change = this.DeleteText(true);
                }
            }
            else
            {
                if (this._is_selecting && this._editable)
                {
                    this._is_selecting = false;
                    is_change = this.DeleteText(true);
                    this._multi_cursor = false;
                }
            }
			event.handled = true;
        }
        elseif (event.sym == 127)
        {
            // 删除键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (this._editable || event.custom)
                {
                    this._is_selecting = false;
                    is_change = this.DeleteText(false);
                }
            }
            else
            {
                if (this._is_selecting && this._editable)
                {
                    this._is_selecting = false;
                    is_change = this.DeleteText(false);
                    this._multi_cursor = false;
                }
            }
			event.handled = true;
        }
        elseif (event.sym == 1073741898)
        {
            // Home键
            this._is_selecting = false;
            this.ClickCursorToHome();
			event.handled = true;
        }
        elseif (event.sym == 1073741901)
        {
            // End键
            this._is_selecting = false;
            this.ClickCursorToEnd();
			event.handled = true;
        }
        elseif (event.sym == 13 || event.sym == 1073741912)
        {
            // 回车键
            if (this._editable || event.custom)
            {
                this._is_selecting = false;
                this.DispatchEvent(new UIEnterKeyEvent());
				event.handled = true;
            }
        }
        elseif (event.sym == 120 && event.mod & UIEnumTypes.KMOD_CTRL != 0)
        {
            // x键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if ((this._editable || event.custom) && !this._password_mode)
                {
                    this._is_selecting = false;
                    var select_text = this.GetSelectText();
                    if (select_text[1] != null)
                    {
                        System_SetClipboardText(ALittle.String_JsonEncode(select_text));
                        is_change = this.DeleteSelectText();
                    }
                }
            }
            else
            {
                if ((this._is_selecting && this._editable) && !this._password_mode)
                {
                    this._is_selecting = false;
                    var select_text= this.GetSelectText();
                    if (select_text[1] != null)
                    {
                        System_SetClipboardText(ALittle.String_JsonEncode(select_text));
                        is_change = this.DeleteSelectText();
                    }
                    this._multi_cursor = false;
                }
            }
			event.handled = true;
        }
        elseif (event.sym == 99 && event.mod & UIEnumTypes.KMOD_CTRL != 0)
        {
            // c键
            if (!this._password_mode)
            {
                var select_text = this.GetSelectText();
                if (select_text[1] != null)
                    System_SetClipboardText(ALittle.String_JsonEncode(select_text));
            }
			event.handled = true;
        }
        elseif (event.sym == 118 && event.mod & UIEnumTypes.KMOD_CTRL != 0)
        {
            // v键
            // 单光标模式下处理
            if (this._multi_cursor == false)
            {
                if (this._editable || event.custom)
                {
                    this._is_selecting = false;
                    if (System_HasClipboardText())
                    {
                        var content = System_GetClipboardText();
                        var error, new_content = tcall(ALittle.String_JsonDecode, content);
                        if (error == null && __type(new_content) == "table" && this.CheckDisplayList(new_content))
                        {
                            if (this.CheckAtKeyInput(new_content))
                                return;
                            is_change = this.InsertDisplayListNative(new_content, false);
                        }
                        else
                        {
                            if (this.CheckAtKeyInput(content))
                                return;
                            is_change = this.InsertTextNative(content);
                        }
                    }
                }
            }
            else
            {
                if (this._is_selecting && this._editable)
                {
                    this._is_selecting = false;
                    if (System_HasClipboardText())
                    {
                        var content = System_GetClipboardText();
                        var error, new_content = tcall(ALittle.String_JsonDecode, content);
                        if (error == null && __type(new_content) == "table" && this.CheckDisplayList(new_content))
                            is_change = this.InsertDisplayListNative(new_content, false);
                        else
                            is_change = this.InsertTextNative(content);
                    }
                    this._multi_cursor = false;
                }
            }
			event.handled = true;
        }
        elseif (event.sym == 97 && event.mod & UIEnumTypes.KMOD_CTRL != 0)
        {
            // a键
            this._is_selecting = true;
            this.SelectAll();
			event.handled = true;
        }
        // 检查是否发送CHANGE事件
        if (is_change)
        {
            this.DispatchEvent(new UIChangedEvent());
            this._current_flash_alpha = 1.5;
            this.UpdateFontText();
            this.ResetShowXByCursor();
            this.ResetCursor();
            this.ShowDefaultText();
        }
    }
    
    public fun HandleDragBegin(UIButtonDragBeginEvent event)
    {
        if (this._can_drag_text == false)
            return;
        // 单光标模式
        if (this._multi_cursor == false)
        {
            // 之前点击在编辑区域内，那么这次拖动就是有效的
            if (this._is_click)
            {
                this._is_drag_begin = true;
                this._is_selecting = true;
                this.DragCursorBegin();
            }
            else
                this._is_drag_begin = false;
        }
        // 双光标模式
        else
        {
            // 如果是点在光标上后开始拖动，则判断为拖动光标
            if (this._is_click_cursor)
            {
                // 更换编辑光标和开始光标位置
                if ((this._is_click_cursor_name == "start" && this._start_cursor_data == "select")
                        || (this._is_click_cursor_name == "end" && this._end_cursor_data == "select"))
                {
                    var char_temp_it = this._char_select_it;
                    this._char_select_it = this._char_cursor_it;
                    this._char_cursor_it = char_temp_it;
                }
                // 记录开始拖动时，光标中心和拖动点的相对位置
                if (this._is_click_cursor_name == "start")
                {
                    this._drag_delta_x = this._start_cursor.x + this._start_cursor.width - event.rel_x;
                    this._drag_delta_y = this._start_cursor.y + this._cursor_margin_up + (this._start_cursor.height - this._cursor_margin_up - this._cursor_margin_down) / 2 - event.rel_y;
                }
                elseif (this._is_click_cursor_name == "end")
                {
                    this._drag_delta_x = this._end_cursor.x - event.rel_x;
                    this._drag_delta_y = this._end_cursor.y + this._cursor_margin_up + (this._end_cursor.height - this._cursor_margin_up - this._cursor_margin_down) / 2 - event.rel_y;
                }
                this._is_drag_begin = true;
                this.DispatchEvent(new RichInputMultiDragBeginEvent());
            }
            // 之前点击在编辑区域内
            elseif (this._is_click)
            {
                this._is_drag_begin = true;
                this.DispatchEvent(new RichInputMultiDragBeginEvent());
            }
            // 之前点击在外部
            else
                this._is_drag_begin = false;
        }
    }
    
    public fun HandleDrag(UIButtonDragEvent event)
    {
        if (this._can_drag_text == false)
            return;
        // 拖动无效则不处理
        if (this._is_drag_begin == false)
            return;
        // 单光标模式
        if (this._multi_cursor == false)
        {
            if (this._is_selecting == false)
                return;
            this.DragCursor(event.rel_x - this._display_view.x);
        }
        // 双光标模式
        else
        {
            // 拖动光标
            if (this._is_click_cursor)
                this.DragMultiCursor(event.rel_x - this._display_view.x);
                // 拖动整个屏幕
            else
            {
                this._click_drag_delta_x = this._click_drag_delta_x + __abs(event.delta_x);
                this._click_drag_delta_y = this._click_drag_delta_y + __abs(event.delta_y);
                this.DragInput(event.delta_x);
            }
            this.DispatchEvent(new RichInputMultiDragEvent());
        }
    }
    
    public fun HandleDragEnd(UIButtonDragEndEvent event)
    {
        if (this._can_drag_text == false)
            return;
        // 拖动无效则不处理
        if (this._is_drag_begin == false)
            return;
        // 双光标拖动结束，单光标正在显示则切换为单光标模式
        if (this._multi_cursor)
        {
            if (this._cursor.visible)
                this._multi_cursor = false;
            this.DispatchEvent(new RichInputMultiDragEndEvent());
        }
    }
    
    public fun HandleLongLButtonDown(UILongButtonDownEvent event)
    {
        // 单双光标
        if (this._is_click)
        {
            // 不可编辑自动切换为双光标
            if (this.editable == false)
            {
                this._is_selecting = true;
                if (this._multi_cursor == false)
                {
                    this._multi_cursor = true;  // 表为双光标
                    this._cursor.visible = false;
                    this._start_cursor.visible = true;
                    this._end_cursor.visible = true;
                    this.ClickMultiCursor(event.rel_x - this._display_view.x, false);
                }
                else
                    this.ClickMultiCursor(event.rel_x - this._display_view.x, false);
            }
            // 可编辑切换为单光标
            else
            {
                this._multi_cursor = false;
                this._start_cursor.visible = false;
                this._end_cursor.visible = false;
                this._cursor.visible = true;
                this.ClickCursor(event.rel_x - this._display_view.x);
            }
            // 发送richedit长按事件
            var e = new UIRichInputLongClickEvent();
            e.target = this;
            e.abs_x = event.abs_x;
            e.abs_y = event.abs_y;
            e.rel_x = event.rel_x;
            e.rel_y = event.rel_y;
            this.DispatchEvent(e);
            this._is_longclick = true;
        }
    }
}