
namespace ALittle;

public class ScrollBar : Grid3
{
    private DisplayGroup _bar_container;
    
    private DisplayObject _up_button;
    private DisplayObject _down_button;
    private DisplayObject _bar_button;
    private DisplayObject _bar_background;
    
    private double _offset_step;
    private double _offset_rate;
    private double _show_size;
    private double _center_size;
    
    private double _logic_total_size;
    private double _logic_show_size;
    private double _drag_point_rate;

    public ctor(ControlSystem ctrl_sys)
    {
        this._bar_container = new DisplayGroup(this._ctrl_sys);
        this.show_center = this._bar_container;

        // this._up_button = null;
        // this._down_button = null;
        // this._bar_button = null;
        // this._bar_background = null;
    
        this._offset_step = 0;
        this._offset_rate = 0;
        this._show_size = 0;
        this._center_size = 0;
    
        this._logic_total_size = 0;
        this._logic_show_size = 0;
    
        this._drag_point_rate = 0;
    
        this._pickup_rect = true;
        this._pickup_child = true;
    }
    
    public set type(int value)
    {
        Grid3.type(this, value);
        this.UpdateShowSize();
        this.AdjustBarButton();
    }
    public set up_size(double value)
    {
        Grid3.up_size(this, value);
        this.UpdateShowSize();
        this.AdjustBarButton();
    }
    
    public set down_size(double value)
    {
        Grid3.down_size(this, value);
        this.UpdateShowSize();
        this.AdjustBarButton();
    }
    
    public set gap(double value)
    {
        Grid3.gap(this, value);
        this.UpdateShowSize();
        this.AdjustBarButton();
    }
    
    public set total_size(double value)
    {
        this._logic_total_size = value;
    
        this.UpdateShowSize();
        this.AdjustBarButton();
    }
    public get total_size() : double
    {
        return this._logic_total_size;
    }
    public set show_size(double value)
    {
        this._logic_show_size = value;
    
        this.UpdateShowSize();
        this.AdjustBarButton();
    }
    public get show_size() : double
    {
        return this._logic_show_size;
    }
    
    public set offset_rate(double value)
    {
        this._offset_rate = value;
        if (this._offset_rate < 0)
            this._offset_rate = 0;
        elseif (this._offset_rate > 1)
            this._offset_rate = 1;
    
        this.AdjustBarButton();
    }
    public get offset_rate() : double
    {
        return this._offset_rate;
    }
    
    public set offset_step(double value)
    {
        this._offset_step = value;
    }
    public get offset_step() : double
    {
        return this._offset_step;
    }
    
    public fun UpdateShowSize()
    {
        this._show_size = 0;
        this._center_size = this.center_size;
        if (this._logic_show_size < this._logic_total_size)
            this._show_size = this._logic_show_size / this._logic_total_size * this._center_size;
    }
    
    public fun SetToDown()
    {
        this._offset_rate = 1;
        this.AdjustBarButton();
    }
    
    public set width(double value)
    {
        if (this._width == value) return;
            
        Grid3.width(this, value);
    
        this.UpdateShowSize();
        this.AdjustBarButton();
    }
    
    public set height(double value)
    {
        if (this._height == value) return;

        Grid3.height(this, value);
    
        this.UpdateShowSize();
        this.AdjustBarButton();
    }
    
    public set up_button(DisplayObject value)
    {
        if (this._up_button != null)
            this._up_button.RemoveEventListener(this, this.HandleUpButtonClick);
        this._up_button = value;
        this.show_up = value;
        if (value != null)
            value.AddEventListener(this, this.HandleUpButtonClick);
    }
    public get up_button() : DisplayObject
    {
        return this._up_button;
    }
    
    public fun HandleUpButtonClick(UIClickEvent event)
    {
        this._offset_rate = this._offset_rate - this._offset_step;
        if (this._offset_rate < 0)
            this._offset_rate = 0;
    
        if (this._bar_button != null)
        {
            var offset = this._offset_rate * (this._center_size - this._show_size);
            if (this._type == UIEnumTypes.TYPE_V)
                this._bar_button.y = offset;
            else
                this._bar_button.x = offset;
        }
        this.DispatchEvent(new UIChangedEvent());
        this.DispatchEvent(new UIChangedEndEvent());
    }
    
    public set down_button(DisplayObject value)
    {
        if (this._down_button != null)
            this._down_button.RemoveEventListener(this, this.HandleDownButtonClick);
        this._down_button = value;
        this.show_down = value;
        if (value != null)
            value.AddEventListener(this, this.HandleDownButtonClick);
    }
    public get down_button() : DisplayObject
    {
        return this._down_button;
    }
    
    public fun HandleDownButtonClick(UIClickEvent event)
    {
        this._offset_rate = this._offset_rate + this._offset_step;
        if (this._offset_rate > 1)
            this._offset_rate = 1;
    
        if (this._bar_button != null)
        {
            var offset = this._offset_rate * (this._center_size - this._show_size);
            if (this._type == UIEnumTypes.TYPE_V)
                this._bar_button.y = offset;
            else
                this._bar_button.x = offset;
        }
        this.DispatchEvent(new UIChangedEvent());
        this.DispatchEvent(new UIChangedEndEvent());
    }
    
    public set bar_button(DisplayObject value)
    {
        if (this._bar_button != null)
        {
            this._bar_button.RemoveEventListener(this, this.HandleBarButtonDrag);
            this._bar_button.RemoveEventListener(this, this.HandleBarButtonDragBegin);
            this._bar_button.RemoveEventListener(this, this.HandleBarButtonDragEnd);
            this._bar_button.RemoveEventListener(this, this.HandleBarButtonScroll);
            this._bar_container.RemoveChild(this._bar_button);
        }
        this._bar_button = value;
        if (value != null)
        {
            this._bar_container.AddChild(value);
            value.AddEventListener(this, this.HandleBarButtonDrag);
            value.AddEventListener(this, this.HandleBarButtonDragBegin);
            value.AddEventListener(this, this.HandleBarButtonDragEnd);
            value.AddEventListener(this, this.HandleBarButtonScroll);
        }
        this.AdjustBarButton();
    }
    
    public get bar_button() : DisplayObject
    {
        return this._bar_button;
    }
    
    public set bar_background(DisplayObject value)
    {
        if (this._bar_background != null)
            this._bar_container.RemoveChild(this._bar_background);
        this._bar_background = value;
        if (value != null)
            this._bar_container.AddChild(value, 1);
        this.AdjustBarButton();
    }
    public get bar_background() : DisplayObject
    {
        return this._bar_background;
    }

    protected fun HandleBarButtonDragBegin(UIButtonDragBeginEvent event)
    {
        if (this._type == UIEnumTypes.TYPE_V)
        {
            var height = this._bar_button.height;
            this._drag_point_rate = 0;
            if (height > 0)
                this._drag_point_rate = event.rel_y / height;
        }
        else
        {
            var width = this._bar_button.width;
            this._drag_point_rate = 0;
            if (width > 0)
                this._drag_point_rate = event.rel_x / width;
        }
    }

    protected fun HandleBarButtonScroll(UIMButtonWheelEvent event)
    {
        if (this._type == UIEnumTypes.TYPE_V)
        {
            if (event.delta_y > 0)
                this.HandleUpButtonClick(null);
            elseif (event.delta_y < 0)
                this.HandleDownButtonClick(null);
        }
        else
        {
            if (event.delta_x > 0)
                this.HandleUpButtonClick(null);
            elseif (event.delta_x < 0)
                this.HandleDownButtonClick(null);
        }
    }

    protected fun HandleBarButtonDragEnd(UIButtonDragEndEvent event)
    {
        this.DispatchEvent(new UIChangedEndEvent());
    }

    protected fun HandleBarButtonDrag(UIButtonDragEvent event)
    {
        var real_size = this._center_size - this._show_size;
        if (this._type == UIEnumTypes.TYPE_V)
        {
            if ((event.delta_y > 0 && event.rel_y < this._show_size * this._drag_point_rate)
                    || (event.delta_y < 0 && event.rel_y > this._show_size * this._drag_point_rate))
                return;

            var offset = (this._bar_button.y + event.delta_y) / real_size;
            if (offset > 1)
                offset = 1;
            elseif (offset < 0)
                offset = 0;
                
            if (this._offset_rate == offset)
                return;
                
            this._offset_rate = offset;
            this._bar_button.y = this._offset_rate * real_size;
        }
        else
        {
            if ((event.delta_x > 0 && event.rel_x < this._show_size * this._drag_point_rate)
                    || (event.delta_x < 0 && event.rel_x > this._show_size * this._drag_point_rate))
                return;

            var offset = (this._bar_button.x + event.delta_x) / real_size;
            if (offset > 1)
                offset = 1;
            elseif (offset < 0)
                offset = 0;
                
            if (this._offset_rate == offset)
                return;
                
            this._offset_rate = offset;
            this._bar_button.x = this._offset_rate * real_size;
        }
        this.DispatchEvent(new UIChangedEvent());
    }

    protected fun AdjustBarButton()
    {
        var real_size = this._center_size - this._show_size;
        if (this._type == UIEnumTypes.TYPE_V)
        {
            if (this._bar_button != null)
            {
                this._bar_button.x = 0;
                this._bar_button.width = this._width;
                this._bar_button.y = this._offset_rate * real_size;
                this._bar_button.height = this._show_size;
            }
            if (this._bar_background != null)
            {
                this._bar_background.x = 0;
                this._bar_background.y = 0;
                this._bar_background.width = this._width;
                this._bar_background.height = this._center_size;
            }
        }
        else
        {
            if (this._bar_button != null)
            {
                this._bar_button.x = this._offset_rate * real_size;
                this._bar_button.width = this._show_size;
                this._bar_button.y = 0;
                this._bar_button.height = this._height;
            }
            if (this._bar_background != null)
            {
                this._bar_background.x = 0;
                this._bar_background.y = 0;
                this._bar_background.width = this._center_size;
                this._bar_background.height = this._height;
            }
        }
    }
}