
namespace ALittle;

private var __abs = Math_Abs;

public struct ScrollButtonDragBeginEvent : UIButtonDragEvent {}
public struct ScrollButtonDragEvent : UIButtonDragEvent {}
public struct ScrollButtonDragEndEvent : UIButtonDragEvent {}

public class ScrollButton : TextButton
{
    private bool _button_down;
    private LoopFunction _button_down_loop;
    private LoopFunction _button_up_loop;
    private double _drag_begin_x;
    private double _drag_begin_y;
    private bool _btn_drag;
    private bool _can_drag_trans;
    private bool _can_set_drag_trans;
    
    public ctor(ControlSystem ctrl_sys)
    {
        // 侦听拖动事件
        this.AddEventListener(this, this.HandleDragBegin);
        this.AddEventListener(this, this.HandleDrag);
        this.AddEventListener(this, this.HandleDragEnd);
    
        // 区分点击拖动的参数
        this._button_down = false;
        // this._button_down_loop = null;    // 延时按下函数
        // this._button_up_loop = null;        // 延时弹起函数
        this._drag_begin_x = 0;            // 标记开始拖动的位置
        this._drag_begin_y = 0;
    
        this._btn_drag = false;                // 按钮拖动事件标记
        this._can_drag_trans = true;            // 拖动转发开关
        this._can_set_drag_trans = true;        // 设置拖动转发开关的开关，为了保证drag流程的完整
    }
    
    // 拖动转发开关，关闭后不转发事件
    public set can_drag_trans(bool value)
    {
        // 按钮正在拖动过程中则无法设置转发开关，防止drag流程出错
        if (this._can_set_drag_trans == false)
            return;
            
        this._can_drag_trans = value;
    }
    
    public get can_drag_trans() : bool
    {
        return this._can_drag_trans;
    }
    
    // 开始拖动
    protected fun HandleDragBegin(UIButtonDragBeginEvent event)
    {
        // 框架拖动开始时只记录开始位置
        this._drag_begin_x = event.abs_x;
        this._drag_begin_y = event.abs_y;
    }
    // 拖动
    protected fun HandleDrag(UIButtonDragEvent event)
    {
        // 还不是拖动状态
        if (this._btn_drag == false)
        {
            // 判断位置
            if (__abs(event.abs_x - this._drag_begin_x) > 2 || __abs(event.abs_y - this._drag_begin_y) > 2)
            {
                // 按钮显示为弹起
                this._button_down = false;
                this.ShowUp(null);
                // 先向外发送事件，此时在外部逻辑可以开关拖动转发
                var e = new ScrollButtonDragBeginEvent();
                e.target = this;
                e.delta_x = event.delta_x;
                e.delta_y = event.delta_y;
                e.abs_x = event.abs_x;
                e.abs_y = event.abs_y;
                this.DispatchEvent(e);
                this._can_set_drag_trans = false;
                // 转发事件拖动开始事件
                if (this._can_drag_trans && this._trans_target["drag"] != null)
                {
                    var ue = new UIButtonDragEvent();
                    ue.target = this._trans_target["drag"];
                    ue.delta_x = event.delta_x;
                    ue.delta_y = event.delta_y;
                    ue.abs_x = event.abs_x;
                    ue.abs_y = event.abs_y;
                    this._trans_target["drag"].DispatchEvent(e);
                }
                this._btn_drag = true;
            }
        }
            // 拖动已经开始
        elseif (this._btn_drag == true)
        {
            var e = new ScrollButtonDragEvent();
            e.target = this;
            e.delta_x = event.delta_x;
            e.delta_y = event.delta_y;
            e.abs_x = event.abs_x;
            e.abs_y = event.abs_y;
            this.DispatchEvent(e);
            if (this._can_drag_trans && this._trans_target["drag"] != null)
            {
                var ue = new UIButtonDragEvent();
                ue.target = this._trans_target["drag"];
                ue.delta_x = event.delta_x;
                ue.delta_y = event.delta_y;
                ue.abs_x = event.abs_x;
                ue.abs_y = event.abs_y;
                this.DispatchEvent(e);
            }
        }
    }
    // 结束拖动
    protected fun HandleDragEnd(UIButtonDragEndEvent event)
    {
        // 拖动已开始,发送结束事件
        if (this._btn_drag)
        {
            if (this._can_drag_trans && this._trans_target["drag"] != null)
            {
                var e = new UIButtonDragEndEvent();
                e.target = this._trans_target["drag"];
                e.delta_x = event.delta_x;
                e.delta_y = event.delta_y;
                e.abs_x = event.abs_x;
                e.abs_y = event.abs_y;
                this._trans_target["drag"].DispatchEvent(e);
            }
            this._can_set_drag_trans = true;

            var e = new ScrollButtonDragEndEvent();
            e.target = this;
            e.delta_x = event.delta_x;
            e.delta_y = event.delta_y;
            e.abs_x = event.abs_x;
            e.abs_y = event.abs_y;
            this.DispatchEvent(e);
        }
    }
    // 左键按下
    protected fun HandleLButtonDown(UILButtonDownEvent event)
    {
        // 清空拖动记录数据
        this._drag_begin_x = 0;
        this._drag_begin_y = 0;
        // 设置拖动未开始
        this._btn_drag = false;
        // 设置按下状态
        this._button_down = true;
        // 延时进行判断,延时ShowDown是为了拖动时按钮处于ShowUp状态的效果
        this._button_down_loop = new LoopFunction(bind(this.HandleLButtonDownFunc, this, null), 1, 0, 100);
        A_LoopSystem.AddUpdater(this._button_down_loop);
    }

    // 左键弹起
    protected fun HandleLButtonUp(UILButtonUpEvent event)
    {
        // 处于拖动状态按钮弹起时，不作处理
        if (this._btn_drag)
            return;
        // 弹起时,按钮不处于按下状态
        if (this._button_down == false)
            this.HandleLButtonUpFunc(event);
        else
        {
            // 先按下按钮
            this.ShowDown();
            // 下一帧弹起
            this._button_up_loop = new LoopFunction(bind(this.HandleLButtonUpFunc, this, event), 1, 0, 60);
            this._button_up_loop.Start();
        }
    }
    
    // 重写分发事件函数，对拖动事件不直接转发，交由侦听函数处理
    protected fun DispatchEvent<T:UIEvent>(T event)
    {
        var rflt = reflect<T>;
        // 初始化时间目标
        var event_target:DisplayObject = this;
        // 无条件事件转移
        if (this._trans_target["event"] != null)
            event_target = this._trans_target["event"];

        // 如果是禁用状态，那么就什么都不做
        if (event_target._abs_disabled)
            return;
        
        // 如果是禁用状态，那么就什么都不做
        if (event_target._abs_disabled) return;
        
        // 根据事件类型，获得所有侦听者
        var callback_table = event_target._listeners[rflt.name];
        // 检查event的type属性，如果没有则什么都不做。所以每个event必须要有一个type属性
        if (callback_table == null) return;
        // 遍历所有侦听者
        for (var object, callback_value in callback_table)
        {
            // 依次调用它们的回调函数
            for (var func, _ in callback_value)
                func(object, event);
        }
    }
    
    // 左键按下行动
    protected fun HandleLButtonDownFunc(UIButtonEvent event)
    {
        if (this._button_down == true)
        {
            this.ShowDown();
            this._button_down = false;
        }
        A_LoopSystem.RemoveUpdater(this._button_down_loop);
    }
    
    // 左键弹起行动
    protected fun HandleLButtonUpFunc(UIButtonEvent event)
    {
        if (event.rel_x >= 0 && event.rel_y >= 0 && event.rel_x < event.target._width && event.rel_y < event.target._height)
        {
            var e = new UIClickEvent();
            e.is_drag = event.is_drag;
            e.count = event.count;
            this.DispatchEvent(e);
            if (System_IsPhone() == false)
                this.ShowOver();
            else
                this.ShowUp(null);
        }
        else
            this.ShowUp(null);
        A_LoopSystem.RemoveUpdater(this._button_up_loop);
    }
}