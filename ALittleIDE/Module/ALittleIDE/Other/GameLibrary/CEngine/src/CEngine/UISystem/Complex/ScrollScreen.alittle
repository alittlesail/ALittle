
namespace ALittle;

private var __sin = Math_Sin;

public class ScrollScreen : DisplayGroup
{
    private double _content_width;
    private double _content_height;
    private double _drag_rate;
    private bool _open_extends_drag;
    
    private double _drag_delta_x;
    private double _drag_delta_y;
    
    private LoopRit _drag_delta_loop_x;
    private LoopRit _drag_delta_loop_y;
    
    private LoopFunction _x_type_dispatch;
    private LoopFunction _y_type_dispatch;
    
    private LoopLinear _drag_loop_x;
    private LoopLinear _drag_loop_y;
    
    private ScrollBar _right_scroll_bar;
    private ScrollBar _bottom_scroll_bar;
    
    private DisplayView _scroll_view;
    
    private DisplayGroup _scroll_content;
    private LoopFunction _clip_loop;
    
    private DisplayObject _static_object_h;
    private DisplayObject _static_object_v;
    private DisplayObject _static_object_hv;

    public ctor(ControlSystem ctrl_sys)
    {
        this._width = 0;
        this._height = 0;
        this._content_width = 0;
        this._content_height = 0;
    
        this._drag_rate = 0.2;
    
        this._open_extends_drag = false;
    
        //Drag事件发生时记录偏移量，作为拖动的瞬时速度
        this._drag_delta_x = 0;
        this._drag_delta_y = 0;
    
        // 惯性移动的Loop
        // this._drag_delta_loop_x = null;
        // this._drag_delta_loop_y = null;
    
        // 延迟发送DRAGUP等事件
        // this._x_type_dispatch = null;
        // this._y_type_dispatch = null;

        // this._drag_loop_x = null;
        // this._drag_loop_y = null;

        // this._right_scroll_bar = null;
        // this._bottom_scroll_bar = null;
    
        this._scroll_view = new DisplayView(this._ctrl_sys);
        DisplayGroup.AddChild(this, this._scroll_view);
        this._scroll_content = new DisplayGroup(this._ctrl_sys);
        this._scroll_view.AddChild(this._scroll_content);

        // this._static_object_h = null;    // 不随着垂直滚动
        // this._static_object_v = null;    // 不随着水平滚动
        // this._static_object_hv = null;    // 不随着垂直和水平滚动
    
        this._pickup_rect = true;
        this._pickup_child = true;
        this._pickup_this = true;
        this._can_scroll = true;
    
        this.AddEventListener(this, this.HandleMButtonWheel);
        this.AddEventListener(this, this.HandleDrag);
        this.AddEventListener(this, this.HandleDragEnd);
        this.AddEventListener(this, this.HandleDragBegin);

        // 延迟裁剪
        this.RefreshClipDisLine();
    }

    protected fun HandleMButtonWheel(UIMButtonWheelEvent event)
    {
        if (this._bottom_scroll_bar != null && event.delta_x != 0)
            this._bottom_scroll_bar.offset_rate = this._bottom_scroll_bar.offset_rate - 0.1 * event.delta_x;
    
        if (this._right_scroll_bar != null && event.delta_y != 0)
        {
            var offset = this._content_height * 0.1 * event.delta_y;
            if (offset > 60) offset = 60;
            elseif (offset < -60) offset = -60;
            if (offset != 0) this._right_scroll_bar.offset_rate = this._right_scroll_bar.offset_rate - offset / this._content_height;
        }
        this.AdjustScrollBar();
    }

    public fun EnableDrag(bool value)
    {
        if (value)
        {
            this.AddEventListener(this, this.HandleDrag);
            this.AddEventListener(this, this.HandleDragEnd);
            this.AddEventListener(this, this.HandleDragBegin);
        }
        else
        {
            this.RemoveEventListener(this, this.HandleDrag);
            this.RemoveEventListener(this, this.HandleDragEnd);
            this.RemoveEventListener(this, this.HandleDragBegin);
        }
    }
    
    public get open_extends_drag() : bool
    {
        return this._open_extends_drag;
    }
    
    public set open_extends_drag(bool value)
    {
        this._open_extends_drag = value;
    }
    
    // 获取容器控件
    public get container() : DisplayGroup
    {
        return this._scroll_content;
    }
    // 获取裁剪容器
    public get view() : DisplayView
    {
        return this._scroll_view;
    }
    
    // 设置容器控件
    public set container(DisplayGroup value)
    {
        if (value == null)
            value = new DisplayGroup(this._ctrl_sys);
        // 从旧的容器中取出控件
        var child_list = new List<DisplayObject>();
        var child_list_count = 0;
        var old_child_list = this._scroll_content.childs;
        for (var k, v in old_child_list)
        {
            ++ child_list_count;
            child_list[child_list_count] = v;
        }
        this._scroll_content.RemoveEventListener(this, this.HandleContainerResize);
        this._scroll_view.RemoveChild(this._scroll_content);
        this._scroll_content = value;
        // 把控件添加到新的容器中
        for (var k, v in child_list)
            value.AddChild(v);

        this._scroll_content.AddEventListener(this, this.HandleContainerResize);
        this._scroll_view.AddChild(this._scroll_content, 1);
        this.AdjustScrollBar();
    }

    // 单纯更换container
    public fun SetContainer(DisplayGroup value)
    {
        if (value == null) value = new DisplayGroup(this._ctrl_sys);

        this._scroll_content.RemoveEventListener(this, this.HandleContainerResize);
        this._scroll_view.RemoveChild(this._scroll_content);
        this._scroll_content = value;
        
        this._scroll_content.AddEventListener(this, this.HandleContainerResize);
        this._scroll_view.AddChild(this._scroll_content, 1);   
        this.AdjustScrollBar();
    }
    
    // 设置容器的Y轴相对位置
    public set container_y(double value)
    {
        if (this._scroll_content == null)
            return;
        this._scroll_content.y = value;
        this.YScrollBarChange();
        this.AdjustScrollBar();
    }
    public get container_y() : double
    {
        if (this._scroll_content == null)
            return 0;
        return this._scroll_content.y;
    }
    
    // 设置容器的X轴相对位置
    public set container_x(double value)
    {
        if (this._scroll_content == null)
            return;
        this._scroll_content.x = value;
        this.XScrollBarChange();
        this.AdjustScrollBar();
    }
    public get container_x() : double
    {
        if (this._scroll_content == null)
            return 0;
        return this._scroll_content.x;
    }
    
    // 获取静态控件
    public get static_object_h() : DisplayObject
    {
        return this._static_object_h;
    }
    
    // 设置静态控件
    public set static_object_h(DisplayObject value)
    {
        if (this._static_object_h == value)
            return;

        this._scroll_view.RemoveChild(this._static_object_h);
        this._static_object_h = value;
        if (this._static_object_h == null)
            return;
    
        this._scroll_view.AddChild(this._static_object_h, 3);
        this._static_object_h.y = 0;
        this._static_object_h.x = this._scroll_content.x;
    }
    
    // 获取静态控件
    public get static_object_v() : DisplayObject
    {
        return this._static_object_v;
    }
    
    // 设置静态控件
    public set static_object_v(DisplayObject value)
    {
        if (this._static_object_v == value)
            return;
    
        this._scroll_view.RemoveChild(this._static_object_v);
        this._static_object_v = value;
        if (this._static_object_v == null)
            return;
    
        this._scroll_view.AddChild(this._static_object_v, 2);
        this._static_object_v.y = this._scroll_content.y;
        this._static_object_v.x = 0;
    }
    
    // 获取静态控件
    public get static_object_hv() : DisplayObject
    {
        return this._static_object_hv;
    }
    
    // 设置静态控件
    public set static_object_hv(DisplayObject value)
    {
        if (this._static_object_hv == value)
            return;
    
        this._scroll_view.RemoveChild(this._static_object_hv);
        this._static_object_hv = value;
        if (this._static_object_hv == null)
            return;
    
        this._scroll_view.AddChild(this._static_object_hv, 3);
        this._static_object_hv.y = 0;
        this._static_object_hv.x = 0;
    }
    
    //////////////////////////////////////////////////////////////////////////////////////////-
    // 获取子控件的索引
    public fun GetChildIndex(DisplayObject child) : int
    {
        return this._scroll_content.GetChildIndex(child);
    }
    // 设置子控件的索引
    public fun SetChildIndex(DisplayObject child, int index) : bool
    {
        var result = this._scroll_content.SetChildIndex(child, index);
        this.RefreshClipDisLine();
        return result;
    }
    // 根据索引获取子控件
    public fun GetChildByIndex(int index) : DisplayObject
    {
        return this._scroll_content.GetChildByIndex(index);
    }
    // 获取所有子空间
    public get childs() : List<DisplayObject>
    {
        return this._scroll_content.childs;
    }
    // 获取子控件数量
    public get child_count() : int
    {
        return this._scroll_content.child_count;
    }
    public fun AddChild(DisplayObject child, [Nullable] int index) : bool
    {
        if (child == null)
            return false;
        if (this._scroll_content.AddChild(child, index) == false)
            return false;
        this.AdjustScrollBar();
        return true;
    }
    public fun RemoveChild(DisplayObject child) : bool
    {
        if (child == null)
            return false;
        if (this._scroll_content.RemoveChild(child) == false)
            return false;
        this.AdjustScrollBar();
        return true;
    }
    public fun SpliceChild(int index, [Nullable] int count) : int
    {
        var result = this._scroll_content.SpliceChild(index, count);
        if (result != 0) this.AdjustScrollBar();
        return result;
    }
    // 检查是否存在某个子控件
    public fun HasChild(DisplayObject child) : bool
    {
        return this._scroll_content.HasChild(child);
    }
    // 移除所有子控件
    public fun RemoveAllChild()
    {
        A_LoopSystem.RemoveUpdater(this._drag_loop_x);
        A_LoopSystem.RemoveUpdater(this._drag_loop_y);
        A_LoopSystem.RemoveUpdater(this._drag_delta_loop_x);
        A_LoopSystem.RemoveUpdater(this._drag_delta_loop_y);
        A_LoopSystem.RemoveUpdater(this._x_type_dispatch);
        A_LoopSystem.RemoveUpdater(this._y_type_dispatch);
        this._scroll_content.RemoveAllChild();
        this.AdjustScrollBar();
    }
    ////////////////////////////////////////////////////////////
    public set width(double value)
    {
        if (this._width == value) return;

        this._width = value;
        if (this._width_type == UIEnumTypes.SIZE_ABS)
            this._width_value = this._width;

        var width = 0.0;
        if (this._right_scroll_bar != null)
            width = this._right_scroll_bar.width;

        var remain_width = this._width - width;
        if (remain_width < 0)
        {
            this._scroll_view.width = this._width;
            if (this._right_scroll_bar != null)
            {
                this._right_scroll_bar.visible = false;
                this._right_scroll_bar.x = this._width;
                this._right_scroll_bar.y = 0;
            }
        }
        else
        {
            this._scroll_view.width = remain_width;
            if (this._right_scroll_bar != null)
            {
                this._right_scroll_bar.visible = true;
                this._right_scroll_bar.x = remain_width;
                this._right_scroll_bar.y = 0;
            }
        }
    
        if (this._right_scroll_bar != null)
            this._right_scroll_bar.height = this._scroll_view.height;
    
        if (this._bottom_scroll_bar != null)
        {
            var rate = this._bottom_scroll_bar.offset_rate;
            if (this._content_width < this._scroll_view.width)
                rate = 0;

            this._bottom_scroll_bar.width = this._scroll_view.width;
            this._bottom_scroll_bar.total_size = this._content_width;
            this._bottom_scroll_bar.show_size = this._scroll_view.width;
            this._bottom_scroll_bar.offset_rate = rate;
            this._bottom_scroll_bar.offset_step = 0.1;
            var x = 0.0;
            var content_width = this._content_width;
            if (content_width > this._scroll_view.width)
            {
                var total_width = content_width - this._scroll_view.width;
                x = -total_width * rate;
            }
            this._scroll_content.x = x;
            if (this._static_object_h != null)
                this._static_object_h.x = x;
        }

        this.RefreshClipDisLine();
    }

    public get width() : double { return this._width; }
    
    public set height(double value)
    {
        if (this._height == value) return;

        this._height = value;
        if (this._height_type == UIEnumTypes.SIZE_ABS)
            this._height_value = this._height;

        var height = 0.0;
        if (this._bottom_scroll_bar != null)
            height = this._bottom_scroll_bar.height;

        var remain_height = this._height - height;
        if (remain_height < 0)
        {
            this._scroll_view.height = this._height;
            if (this._bottom_scroll_bar != null)
            {
                this._bottom_scroll_bar.visible = false;
                this._bottom_scroll_bar.y = this._height;
            }
        }
        else
        {
            this._scroll_view.height = remain_height;
            if (this._bottom_scroll_bar != null)
            {
                this._bottom_scroll_bar.visible = true;
                this._bottom_scroll_bar.y = remain_height;
            }
        }
    
        if (this._bottom_scroll_bar != null)
            this._bottom_scroll_bar.width = this._scroll_view.width;
    
        if (this._right_scroll_bar != null)
        {
            var rate = this._right_scroll_bar.offset_rate;
            if (this._content_height < this._scroll_view.height)
                rate = 0;
            this._right_scroll_bar.height = this._scroll_view.height;
            this._right_scroll_bar.total_size = this._content_height;
            this._right_scroll_bar.show_size = this._scroll_view.height;
            this._right_scroll_bar.offset_rate = rate;
            this._right_scroll_bar.offset_step = 0.1;
            var y = 0.0;
            var content_height = this._content_height;
            if (content_height > this._scroll_view.height)
            {
                var total_height = content_height - this._scroll_view.height;
                y = -total_height * rate;
            }
            this._scroll_content.y = y;
            if (this._static_object_v != null)
                this._static_object_v.y = y;
        }

        this.RefreshClipDisLine();
    }

    public get height() : double { return this._height; }
    
    public get view_width() : double
    {
        return this._scroll_view.width;
    }
    
    public get view_height() : double
    {
        return this._scroll_view.height;
    }
    
    public set right_scrollbar(ScrollBar value)
    {
        if (this._right_scroll_bar != null)
        {
            DisplayGroup.RemoveChild(this, this._right_scroll_bar);
            this._right_scroll_bar.RemoveEventListener(this, this.HandleRightScrollBarChange);
        }
    
        this._right_scroll_bar = value;

        var width = 0.0;
        if (this._right_scroll_bar != null)
        {
            this._right_scroll_bar.type = UIEnumTypes.TYPE_V;
            width = this._right_scroll_bar.width;
            DisplayGroup.AddChild(this, this._right_scroll_bar);
            this._right_scroll_bar.AddEventListener(this, this.HandleRightScrollBarChange);
            this._right_scroll_bar.height = this._scroll_view.height;
            this._right_scroll_bar.y = 0;
        }

        var remain_width = this._width - width;
        if (remain_width < 0)
        {
            this._scroll_view.width = this._width;
            if (this._right_scroll_bar != null)
            {
                this._right_scroll_bar.visible = false;
                this._right_scroll_bar.x = this._width;
            }
        }
        else
        {
            this._scroll_view.width = remain_width;
            if (this._right_scroll_bar != null)
            {
                this._right_scroll_bar.visible = true;
                this._right_scroll_bar.x = remain_width;
            }
        }

        if (this._right_scroll_bar != null)
        {
            this._right_scroll_bar.total_size = this._content_height;
            this._right_scroll_bar.show_size = this._scroll_view.height;
            this._right_scroll_bar.offset_rate = 0;
            this._right_scroll_bar.offset_step = 0.1;
        }
    
        if (this._bottom_scroll_bar != null)
        {
            var rate = this._bottom_scroll_bar.offset_rate;
            if (this._content_width < this._scroll_view.width)
                rate = 0;
            this._bottom_scroll_bar.width = this._scroll_view.width;
            this._bottom_scroll_bar.total_size = this._content_width;
            this._bottom_scroll_bar.show_size = this._scroll_view.width;
            this._bottom_scroll_bar.offset_rate = rate;
            this._bottom_scroll_bar.offset_step = 0.1;
        }
    }

    public get right_scrollbar() : ScrollBar
    {
        return this._right_scroll_bar;
    }

    public fun ScrollToBottom()
    {
        if (this._right_scroll_bar == null) return;

        this._right_scroll_bar.offset_rate = 1;
        this._right_scroll_bar.DispatchEvent(new UIChangedEvent());
    }

    public fun ScrollToRight()
    {
        if (this._bottom_scroll_bar == null) return;

        this._bottom_scroll_bar.offset_rate = 1;
        this._bottom_scroll_bar.DispatchEvent(new UIChangedEvent());
    }
    
    public set bottom_scrollbar(ScrollBar value)
    {
        if (this._bottom_scroll_bar != null)
        {
            DisplayGroup.RemoveChild(this, this._bottom_scroll_bar);
            this._bottom_scroll_bar.RemoveEventListener(this, this.HandleBottomScrollBarChange);
        }
    
        this._bottom_scroll_bar = value;

        var height = 0.0;
        if (this._bottom_scroll_bar != null)
        {
            this._bottom_scroll_bar.type = UIEnumTypes.TYPE_H;
            height = this._bottom_scroll_bar.height;
            DisplayGroup.AddChild(this, this._bottom_scroll_bar);
            this._bottom_scroll_bar.AddEventListener(this, this.HandleBottomScrollBarChange);
            this._bottom_scroll_bar.width = this._scroll_view.width;
            this._bottom_scroll_bar.x = 0;
        }

        var remain_height = this._height - height;
        if (remain_height < 0)
        {
            this._scroll_view.height = this._height;
            if (this._bottom_scroll_bar != null)
            {
                this._bottom_scroll_bar.visible = false;
                this._bottom_scroll_bar.y = this._height;
            }
        }
        else
        {
            this._scroll_view.height = remain_height;
            if (this._bottom_scroll_bar != null)
            {
                this._bottom_scroll_bar.visible = true;
                this._bottom_scroll_bar.y = remain_height;
            }
        }
    
        if (this._bottom_scroll_bar != null)
        {
            this._bottom_scroll_bar.total_size = this._content_width;
            this._bottom_scroll_bar.show_size = this._scroll_view.width;
            this._bottom_scroll_bar.offset_rate = 0;
            this._bottom_scroll_bar.offset_step = 0.1;
        }
    
        if (this._right_scroll_bar != null)
        {
            var rate = this._right_scroll_bar.offset_rate;
            if (this._content_height < this._scroll_view.height)
                rate = 0;

            this._right_scroll_bar.height = this._scroll_view.height;
            this._right_scroll_bar.total_size = this._content_height;
            this._right_scroll_bar.show_size = this._scroll_view.height;
            this._right_scroll_bar.offset_rate = rate;
            this._right_scroll_bar.offset_step = 0.1;
        }
    }
    public get bottom_scrollbar() : ScrollBar
    {
        return this._bottom_scroll_bar;
    }
    
    public fun AdjustScrollBar()
    {
        this._content_width = this._scroll_content.max_right;
        if (this._static_object_h != null)
        {
            if (this._static_object_h.width > this._content_width)
                this._content_width = this._static_object_h.width;
        }
        this._content_height = this._scroll_content.max_bottom;
    
        if (this._bottom_scroll_bar != null)
        {
            var rate = this._bottom_scroll_bar.offset_rate;
            if (this._content_width < this._scroll_view.width)
                rate = 0;

            this._bottom_scroll_bar.total_size = this._content_width;
            this._bottom_scroll_bar.show_size = this._scroll_view.width;
            this._bottom_scroll_bar.offset_rate = rate;
            this._bottom_scroll_bar.offset_step = 0.1;
            this.HandleBottomScrollBarChange(null);
        }
    
        if (this._right_scroll_bar != null)
        {
            var rate = this._right_scroll_bar.offset_rate;
            if (this._content_height < this._scroll_view.height)
                rate = 0;

            this._right_scroll_bar.height = this._scroll_view.height;
            this._right_scroll_bar.total_size = this._content_height;
            this._right_scroll_bar.show_size = this._scroll_view.height;
            this._right_scroll_bar.offset_rate = rate;
            this._right_scroll_bar.offset_step = 0.1;
            this.HandleRightScrollBarChange(null);
        }
    }

    protected fun HandleRightScrollBarChange(UIChangedEvent event)
    {
        var rate = this._right_scroll_bar.offset_rate;
        var y = 0.0;
        var content_height = this._content_height;
        if (content_height > this._scroll_view.height)
        {
            var total_height = content_height - this._scroll_view.height;
            y = -total_height * rate;
        }
        this._scroll_content.y = y;
        if (this._static_object_v != null)
            this._static_object_v.y = y;
        this.RefreshClipDisLine();
    }

    protected fun HandleBottomScrollBarChange(UIChangedEvent event)
    {
        var rate = this._bottom_scroll_bar.offset_rate;
        var x = 0.0;
        var content_width = this._content_width;
        if (content_width > this._scroll_view.width)
        {
            var total_width = content_width - this._scroll_view.width;
            x = -total_width * rate;
        }
        this._scroll_content.x = x;
        if (this._static_object_h != null)
            this._static_object_h.x = x;

        this.RefreshClipDisLine();
    }

    protected fun HandleContainerResize(UIResizeEvent event)
    {
        this.AdjustScrollBar();
    }
    
    protected fun HandleDragBegin(UIButtonDragBeginEvent event)
    {
    }

    protected fun HandleDrag(UIButtonDragEvent event)
    {
        this._drag_delta_x = event.delta_x;
        this._drag_delta_y = event.delta_y;
    
        this._content_width = this._scroll_content.max_right;
        if (this._static_object_h != null)
        {
            if (this._static_object_h.width > this._content_width)
                this._content_width = this._static_object_h.width;
        }
        this._content_height = this._scroll_content.max_bottom;
    
        if (event.delta_x != 0)
        {
            // 向右拖拽
            if (event.delta_x > 0)
            {
                var min_x = 0.0;
                var max_x = this._scroll_view.width * this._drag_rate;

                var x = this._scroll_content.x;
                if (x > min_x)
                {
                    x = x + event.delta_x * __sin((1 - x / (this._scroll_view.width * this._drag_rate)) * 1.57);
                    if (x > max_x)
                        x = max_x;
                }
                else
                    x = x + event.delta_x;

                if (this._open_extends_drag == false && x > min_x)
                    x = min_x;
    
                this._scroll_content.x = x;
                if (this._static_object_h != null)
                    this._static_object_h.x = x;

                if (this._bottom_scroll_bar != null)
                    this._bottom_scroll_bar.offset_rate = -x / (this._content_width - this._scroll_view.width);
            }
            // 向左拖拽
            else
            {
                var x = this._scroll_content.x;
                if (this._content_width < this._scroll_view.width)
                {
                    x = x + event.delta_x;
                    if (x < 0)
                        x = 0;
                }
                else
                {
                    var max_x = -this._content_width + this._scroll_view.width;
                    var min_x = max_x - this._scroll_view.width * this._drag_rate;
    
                    if (x < max_x)
                    {
                        x = x + event.delta_x * __sin((x - min_x) / (this._scroll_view.width * this._drag_rate) * 1.57);
                        if (x < min_x)
                            x = min_x;
                    }
                    else
                    {
                        x = x + event.delta_x;
                    }
                    if (this._open_extends_drag == false && x < max_x)
                        x = max_x;
                }
                this._scroll_content.x = x;
                if (this._static_object_h != null)
                    this._static_object_h.x = x;
                if (this._bottom_scroll_bar != null)
                    this._bottom_scroll_bar.offset_rate = -x / (this._content_width - this._scroll_view.width);
            }
            this.RefreshClipDisLine(event.delta_x);
        }
    
        if (event.delta_y != 0)
        {
            // 向下拖拽
            if (event.delta_y > 0)
            {
                var min_y = 0.0;
                var max_y = this._scroll_view.height * this._drag_rate;
                var y = this._scroll_content.y;
                if (y > min_y)
                {
                    y = y + event.delta_y * __sin((1 - y / (this._scroll_view.height * this._drag_rate)) * 1.57);
                    if (y > max_y)
                        y = max_y;
                }
                else
                {
                    y = y + event.delta_y;
                }
    
                if (this._open_extends_drag == false && y > min_y)
                    y = min_y;

                this._scroll_content.y = y;
                if (this._static_object_v != null)
                    this._static_object_v.y = y;
                if (this._right_scroll_bar != null)
                    this._right_scroll_bar.offset_rate = -y / (this._content_height - this._scroll_view.height);
            }
            // 向上拖拽
            else
            {
                var y = this._scroll_content.y;
                if (this._content_height < this._scroll_view.height)
                {
                    y = y + event.delta_y;
                    if (y < 0)
                        y = 0;
                }
                else
                {
                    var max_y = -this._content_height + this._scroll_view.height;
                    var min_y = max_y - this._scroll_view.height * this._drag_rate;
    
                    if (y < max_y)
                    {
                        y = y + event.delta_y * __sin((y - min_y) / (this._scroll_view.height * this._drag_rate) * 1.57);
                        if (y < min_y)
                            y = min_y;
                    }
                    else
                    {
                        y = y + event.delta_y;
                    }
                    if (this._open_extends_drag == false && y < max_y)
                        y = max_y;
                }
                this._scroll_content.y = y;
                if (this._static_object_v != null)
                    this._static_object_v.y = y;
                if (this._right_scroll_bar != null)
                    this._right_scroll_bar.offset_rate = -y / (this._content_height - this._scroll_view.height);
            }
            this.RefreshClipDisLine(null, event.delta_y);
        }
    }

    protected fun HandleDragEnd(UIButtonDragEndEvent event)
    {
        this._content_width = this._scroll_content.max_right;
        if (this._static_object_h != null)
        {
            if (this._static_object_h.width > this._content_width)
                this._content_width = this._static_object_h.width;
        }
        this._content_height = this._scroll_content.max_bottom;
    
        if (this._scroll_content.x > 0)
        {
            if (this._scroll_content.x >= this._scroll_view.width * this._drag_rate * 0.9)
                this.DispatchEvent(new UIDragRightEvent());
            A_LoopSystem.RemoveUpdater(this._drag_loop_x);
            this._drag_loop_x = new LoopLinear(this._scroll_content, "x", 0, 200, 0, bind(ScrollScreen.XScrollBarChange, this));
            A_LoopSystem.AddUpdater(this._drag_loop_x);
        }
        elseif (this._scroll_content.x < -this._content_width + this._scroll_view.width)
        {
            if (this._scroll_content.x <= -this._content_width + this._scroll_view.width - this._scroll_view.width * this._drag_rate * 0.9)
                this.DispatchEvent(new UIDragLeftEvent());

            if (this._scroll_content.x < 0)
            {
                A_LoopSystem.RemoveUpdater(this._drag_loop_x);
                this._drag_loop_x = new LoopLinear(this._scroll_content, "x", -this._content_width + this._scroll_view.width, 200, 0, bind(ScrollScreen.XScrollBarChange, this));
                A_LoopSystem.AddUpdater(this._drag_loop_x);
            }
        }
        // 惯性移动
        elseif (this._scroll_content.x != 0 && this._scroll_content.x != -this._content_width + this._scroll_view.width)
        {
            var target_x = this._scroll_content.x + this._drag_delta_x * 10;
            var event_dispatch:Functor<()> = null; // 延迟发送的事件
            if (this._drag_delta_x < 0)
            {
                // 向左甩
                var max_x = -this._content_width + this._scroll_view.width;
                var min_x = max_x - this._scroll_view.width * this._drag_rate;
                // 把甩动固定在极限范围之内
                if (target_x < min_x)
                {
                    target_x = min_x;
                    event_dispatch = bind(ScrollScreen.ScrollDispatchDragLeftEvent, this);
                }
                //依据范围判断是否需要回弹
                if (target_x >= min_x && target_x <= max_x)
                {
                    A_LoopSystem.RemoveUpdater(this._drag_loop_x);
                    this._drag_loop_x = new LoopLinear(this._scroll_content, "x", -this._content_width + this._scroll_view.width, 200, 300, bind(ScrollScreen.XScrollBarChange, this));
                    A_LoopSystem.AddUpdater(this._drag_loop_x);
                }
            }
            elseif (this._drag_delta_x > 0)
            {
                // 向右甩
                var max_x = this._scroll_view.width * this._drag_rate;
                var min_x = 0;
                if (target_x > max_x)
                {
                    target_x = max_x;
                    event_dispatch = bind(ScrollScreen.ScrollDispatchDragRightEvent, this);
                }
                if (target_x >= min_x && target_x <= max_x)
                {
                    A_LoopSystem.RemoveUpdater(this._drag_loop_x);
                    this._drag_loop_x = new LoopLinear(this._scroll_content, "x", 0, 200, 300, bind(ScrollScreen.XScrollBarChange, this));
                    A_LoopSystem.AddUpdater(this._drag_loop_x);
                }
            }
            // 设置回调
            A_LoopSystem.RemoveUpdater(this._x_type_dispatch);
            if (event_dispatch != null)
            {
                this._x_type_dispatch = new LoopFunction(event_dispatch, 1, 0, 300);
                A_LoopSystem.AddUpdater(this._x_type_dispatch);
            }
    
            if (this._open_extends_drag == false)
            {
                if (target_x > 0)
                    target_x = 0;
                elseif (target_x < -this._content_width + this._scroll_view.width)
                    target_x = -this._content_width + this._scroll_view.width;
            }
    
            A_LoopSystem.RemoveUpdater(this._drag_delta_loop_x);
        this._drag_delta_loop_x = new LoopRit(this._scroll_content, "x", target_x, 300, 0, bind(ScrollScreen.XScrollBarChange, this));
            A_LoopSystem.AddUpdater(this._drag_delta_loop_x);
        }
    
        if (this._scroll_content.y > 0)
        {
            if (this._scroll_content.y >= this._scroll_view.height * this._drag_rate * 0.9)
                this.DispatchEvent(new UIDragDownEvent());
            A_LoopSystem.RemoveUpdater(this._drag_loop_y);
            this._drag_loop_y = new LoopLinear(this._scroll_content, "y", 0, 200, 0, bind(ScrollScreen.YScrollBarChange, this));
            A_LoopSystem.AddUpdater(this._drag_loop_y);
        }
        elseif (this._scroll_content.y < -this._content_height + this._scroll_view.height)
        {
            if (this._scroll_content.y <= -this._content_height + this._scroll_view.height - this._scroll_view.height * this._drag_rate * 0.9)
                this.DispatchEvent(new UIDragUpEvent());

            if (this._scroll_content.y < 0)
            {
                A_LoopSystem.RemoveUpdater(this._drag_loop_y);
                this._drag_loop_y = new LoopLinear(this._scroll_content, "y", -this._content_height + this._scroll_view.height, 200, 0, bind(ScrollScreen.YScrollBarChange, this));
                A_LoopSystem.AddUpdater(this._drag_loop_y);
            }
        }
        // 惯性移动
        elseif (this._scroll_content.y != 0 && this._scroll_content.y != -this._content_height + this._scroll_view.height)
        {
            var event_dispatch:Functor<()> = null; // 延迟发送的事件
            var target_y = this._scroll_content.y + this._drag_delta_y * 10;
            if (this._drag_delta_y < 0)
            {
                // 向上甩
                var max_y = -this._content_height + this._scroll_view.height;
                var min_y = max_y - this._scroll_view.height * this._drag_rate;
                // 把甩动固定在极限范围之内
                if (target_y < min_y)
                {
                    target_y = min_y;
                    event_dispatch = bind(ScrollScreen.ScrollDispatchDragUpEvent, this);
                }
                //依据范围判断是否需要回弹
                if (target_y >= min_y && target_y <= max_y)
                {
                    A_LoopSystem.RemoveUpdater(this._drag_loop_y);
                    this._drag_loop_y = new LoopLinear(this._scroll_content, "y", -this._content_height + this._scroll_view.height, 200, 300, bind(ScrollScreen.YScrollBarChange, this));
                    A_LoopSystem.AddUpdater(this._drag_loop_y);
                }
            }
            elseif (this._drag_delta_y > 0)
            {
                // 向下甩
                var max_y = this._scroll_view.height * this._drag_rate;
                var min_y = 0.0;
                if (target_y > max_y)
                {
                    target_y = max_y;
                    event_dispatch = bind(ScrollScreen.ScrollDispatchDragDownEvent, this);
                }
                if (target_y >= min_y && target_y <= max_y)
                {
                    A_LoopSystem.RemoveUpdater(this._drag_loop_y);
                    this._drag_loop_y = new LoopLinear(this._scroll_content, "y", 0, 200, 300, bind(ScrollScreen.YScrollBarChange, this));
                    A_LoopSystem.AddUpdater(this._drag_loop_y);
                }
            }
            // 设置回调
            A_LoopSystem.RemoveUpdater(this._y_type_dispatch);
            if (event_dispatch != null)
            {
                this._y_type_dispatch = new LoopFunction(event_dispatch, 1, 0, 300);
                A_LoopSystem.AddUpdater(this._y_type_dispatch);
            }
    
            if (this._open_extends_drag == false)
            {
                if (target_y > 0)
                    target_y = 0;
                elseif (target_y < -this._content_height + this._scroll_view.height)
                    target_y = -this._content_height + this._scroll_view.height;
            }
    
            A_LoopSystem.RemoveUpdater(this._drag_delta_loop_y);
            this._drag_delta_loop_y = new LoopRit(this._scroll_content, "y", target_y, 300, 0, bind(ScrollScreen.YScrollBarChange, this));
            A_LoopSystem.AddUpdater(this._drag_delta_loop_y);
        }
    
        this._drag_delta_x = 0;
        this._drag_delta_y = 0;
    }
    
    ////////////////////////////////////////////////////////////////////////////////////////////-
    protected fun RefreshClipDisLineImpl(double h_move, double v_move)
    {
        this._scroll_content.ClipRect(0, 0, this._width, this._height, h_move, v_move);
        if (this._static_object_v != null) this._static_object_v.ClipRect(0, 0, this._width, this._height, h_move, v_move);
        if (this._static_object_h != null) this._static_object_h.ClipRect(0, 0, this._width, this._height, h_move, v_move);
        this._clip_loop = null;
    }

    // 更新裁剪控件索引范围
    public fun RefreshClipDisLine([Nullable] double h_move, [Nullable] double v_move)
    {
        if (this._clip_loop != null && this._clip_loop._user_data == null)
            return;

        this._clip_loop = new LoopFunction(bind(this.RefreshClipDisLineImpl, this, h_move, v_move), 1, 0, 1);
        this._clip_loop._user_data = v_move;
        A_LoopSystem.AddUpdater(this._clip_loop);
    }

    // x静态容器的位置回调
    protected fun XScrollBarChange()
    {
        if (this._static_object_h != null)
            this._static_object_h.x = this._scroll_content.x;
        if (this._bottom_scroll_bar != null)
            this._bottom_scroll_bar.offset_rate = -this._scroll_content.x / (this._content_width - this._scroll_view.width);
        this.RefreshClipDisLine(null, null);
    }
    
    // y轴静态容器的位置和滚动条位置回调
    protected fun YScrollBarChange()
    {
        if (this._static_object_v != null)
            this._static_object_v.y = this._scroll_content.y;
        if (this._right_scroll_bar != null)
            this._right_scroll_bar.offset_rate = -this._scroll_content.y / (this._content_height - this._scroll_view.height);
        this.RefreshClipDisLine(null, null);
    }
    
    ////////////////////////////////////////////////////////////////////////////////////////////-
    
    // 惯性滚动触发后发送事件函数
    protected fun ScrollDispatchDragDownEvent() { this.DispatchEvent(new UIDragDownEvent()); }
    protected fun ScrollDispatchDragUpEvent() { this.DispatchEvent(new UIDragUpEvent()); }
    protected fun ScrollDispatchDragLeftEvent() { this.DispatchEvent(new UIDragLeftEvent()); }
    protected fun ScrollDispatchDragRightEvent() { this.DispatchEvent(new UIDragRightEvent()); }
}