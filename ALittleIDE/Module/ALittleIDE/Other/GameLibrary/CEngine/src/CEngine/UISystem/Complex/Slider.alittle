
namespace ALittle;

public class Slider : DisplayLayout
{
    private DisplayObject _bar_background;
    private DisplayObject _bar_button;
    private int _type;
    private double _offset_rate;
    private double _drag_point_rate;
    private int _fixed;
    private int _grade;
    private List<double> _grade_list;

    public ctor(ControlSystem ctrl_sys)
    {
    	this._pickup_rect = false;

		// this._bar_background = null;
		// this._bar_button = null;
    	this._type = UIEnumTypes.TYPE_V;
    	this._offset_rate = 0;
    	this._drag_point_rate = 0;
    	this._fixed = UIEnumTypes.FREE; // 拖动模式，默认平滑拖动
    	this._grade = 2; // 不平滑拖动时的档次数，默认为2，开始到结束
    	this._grade_list = new List<double>();
    }
    
    public set width(double value)
    { 
    	DisplayLayout.width(this, value);
    	this.AdjustBarButton();
    }
    
    public set height(double value)
    { 
    	DisplayLayout.height(this, value);
    	this.AdjustBarButton();
    }
    
    // 获取控件的宽高
    public get width() : double
    {
    	return this._width;
    }
    
    // 获取控件的宽高
    public get height() : double
    {
    	return this._height;
    }
    
    // 类型
    public set type(int value)
    {
    	if (this._type == value) return;
    	this._type = value;
    	this.AdjustBarButton();
    }
    
    public get type() : int
    {
    	return this._type;
    }
    
    public set offset_rate(double value)
    {
    	this._offset_rate = value;
    	if (this._offset_rate < 0) this._offset_rate = 0;
    	elseif (this._offset_rate > 1) this._offset_rate = 1;
    
    	this.AdjustBarButton();
    }
    public get offset_rate() : double
    {
    	return this._offset_rate;
    }

    public set grade_value(double value)
    {
    	if (this._fixed == UIEnumTypes.FREE)
    	{
    	    this.offset_rate = value;
    	    return;
    	}
        this.offset_rate = (lua.math.floor(value) - 1) / (this.grade - 1);
    }

    public get grade_value() : double
    {
    	if (this._fixed == UIEnumTypes.FREE) return this._offset_rate;
    	return lua.math.floor(this._offset_rate * (this._grade - 1)) + 1;
    }
    
    // 背景
    public set bar_background(DisplayObject value)
    {
    	if (this._bar_background != null)
    	{
    		this._bar_background.RemoveEventListener(this, this.HandleBarBackgroudLButtonDown);
    		this.RemoveChild(this._bar_background);
    	}
    	this._bar_background = value;
    	if (value != null)
    	{
    		this.AddChild(value, 1);
    		value.AddEventListener(this, this.HandleBarBackgroudLButtonDown);
    	}
    	this.AdjustBarButton();
    }

	protected fun HandleBarBackgroudLButtonDown(UILButtonDownEvent event)
    {
		var rel_x = event.rel_x;
		var rel_y = event.rel_y;

		var real_width = this.width;
		var real_height = this.height;
		var bar_width = this._bar_button.width;
		var bar_height = this._bar_button.height;
    	if (this._type == UIEnumTypes.TYPE_V)
    	{
			var offset = rel_y / real_height;
    		if (offset > 1) offset = 1;
    		elseif (offset < 0) offset = 0;
    		if (this._fixed == UIEnumTypes.FREE)
    		{
    			if (this._offset_rate == offset) return;
    			this._offset_rate = offset;
    			this._bar_button.y = this._offset_rate*real_height - bar_height / 2;
    		}
    		else
    		{
				var offset_grade = (1/(this._grade-1))/2;
				var offset_up = offset + offset_grade;
				var offset_down = offset - offset_grade;
    			for (var k, v in this._grade_list)
    			{
    				if (v > offset_down && v <= offset_up)
    				{
    					this._offset_rate = v;
    					this._bar_button.y = this._offset_rate*real_height - bar_height / 2;
    					break;
    				}
    			}
    		}
    	}
    	else
    	{
			var offset = rel_x / real_width;
    		if (offset > 1) offset = 1;
    		elseif (offset < 0) offset = 0;
    		if (this._fixed == UIEnumTypes.FREE)
    		{
    			if (this._offset_rate == offset) return;
    			this._offset_rate = offset;
    			this._bar_button.x = this._offset_rate*real_width - bar_width / 2;
    		}
    		else
    		{
				var offset_grade = (1/(this._grade-1))/2;
				var offset_up = offset + offset_grade;
				var offset_down = offset - offset_grade;
    			for (var k, v in this._grade_list)
    			{
    				if (v > offset_down && v <= offset_up)
    				{
    					this._offset_rate = v;
    					this._bar_button.x = this._offset_rate*real_width - bar_width / 2;
    					break;
    				}
    			}
    		}
    	}
    	this.DispatchEvent(new UIChangedEvent());
    }
    
    public get bar_background() : DisplayObject
    {
    	return this._bar_background;
    }
    
    // 滑动按钮
    public set bar_button(DisplayObject value)
    {
    	if (this._bar_button != null)
    	{
    		this._bar_button.RemoveEventListener(this, this.HandleBarButtonDrag);
    		this._bar_button.RemoveEventListener(this, this.HandleBarButtonDragBegin);
    		this._bar_button.RemoveEventListener(this, this.HandleBarButtonScroll);
    		this.RemoveChild(this._bar_button);
    	}
    	this._bar_button = value;
    	if (value != null)
    	{
    		this.AddChild(value);
    		value.AddEventListener(this, this.HandleBarButtonDrag);
    		value.AddEventListener(this, this.HandleBarButtonDragBegin);
    		value.AddEventListener(this, this.HandleBarButtonScroll);
    		value._can_scroll = true;
    	}
    	this.AdjustBarButton();
    }
    
    public get bar_button() : DisplayObject
    {
    	return this._bar_button;
    }
    
    public set fixed(int value)
    {
    	if (this._fixed == value) return;
    	this._fixed = value;
    	if (this._fixed == UIEnumTypes.FIXED && this._grade != null)
    	{
    		this._grade_list = new List<double>();
    		this._grade_list[1] = 0;
			var dist = 1 / (this._grade-1);
    		for (var i = 1; i <= this._grade - 2; 1)
    			this._grade_list[i+1] = i*dist;
			var num = ALittle.List_Len(this._grade_list);
    		this._grade_list[num+1] = 1;
    	}
    	this.AdjustBarButton();
    }
    
    public get fixed() : int
    {
    	return this._fixed;
    }
    
    public set grade(int value)
    {
    	if (this._grade == value || value < 2) return;
    	this._grade = value;
    	if (this._fixed == UIEnumTypes.FIXED && value != null)
    	{
    		this._grade_list = new List<double>();
    		this._grade_list[1] = 0;
			var dist = 1 / (value - 1);
    		for (var i = 1; i <= value - 2; 1)
    			this._grade_list[i+1] = i*dist;
			var num = ALittle.List_Len(this._grade_list);
    		this._grade_list[num+1] = 1;
    	}
    	this.AdjustBarButton();
    }
    
    public get grade() : int
    {
    	return this._grade;
    }

	protected fun HandleBarButtonDragBegin(UIButtonDragBeginEvent event)
    {
		var rel_x:double;
		var rel_y:double;
        rel_x, rel_y = this._bar_button.GlobalToLocalMatrix2D(event.abs_x, event.abs_y);
    
    	if (this._type == UIEnumTypes.TYPE_V)
    	{
			var height = this._bar_button.height;
    		this._drag_point_rate = 0;
    		if (height > 0)
    			this._drag_point_rate = rel_y / height;
    	}
    	else
    	{
			var width = this._bar_button.width;
    		this._drag_point_rate = 0;
    		if (width > 0)
    			this._drag_point_rate = rel_x / width;
    	}
    }

	protected fun HandleBarButtonDrag(UIButtonDragEvent event)
    {
		var rel_x:double;
		var rel_y:double;
        rel_x, rel_y = this._bar_button.GlobalToLocalMatrix2D(event.abs_x, event.abs_y);
		var abs_x:double;
		var abs_y:double;
    	abs_x, abs_y = this._bar_background.GlobalToLocalMatrix2D(event.abs_x, event.abs_y);

		var real_width = this.width;
		var real_height = this.height;
		var bar_width = this._bar_button.width;
		var bar_height = this._bar_button.height;
    	if (this._type == UIEnumTypes.TYPE_V)
    	{
    		if (this._fixed == UIEnumTypes.FREE)
    		{
    			if ((event.delta_y > 0 && rel_y < bar_height * this._drag_point_rate)
    			    || (event.delta_y < 0 && rel_y > bar_height * this._drag_point_rate))
    			    return;
				var offset = (this._bar_button.y + bar_height / 2 + event.delta_y) / real_height;
    			if (offset > 1) offset = 1;
    			elseif (offset < 0) offset = 0;
    			if (this._offset_rate == offset) return;
    			this._offset_rate = offset;
    			this._bar_button.y = this._offset_rate*real_height - bar_height / 2;
    		}
    		else
    		{
				var offset = abs_y / real_height;
    			if (offset > 1) offset = 1;
    			elseif (offset < 0) offset = 0;
				var offset_grade = (1/(this._grade-1))/2;
				var offset_up = offset + offset_grade;
				var offset_down = offset - offset_grade;
    			for (var k, v in this._grade_list)
    			{
    				if (v > offset_down && v <= offset_up)
    				{
    					this._offset_rate = v;
    					this._bar_button.y = this._offset_rate*real_height - bar_height / 2;
    					break;
    				}
    			}
    		}
    	}
    	else
    	{
    		if (this._fixed == UIEnumTypes.FREE)
    		{
    			if ((event.delta_x > 0 && rel_x < bar_height * this._drag_point_rate)
    			    || (event.delta_x < 0 && rel_x > bar_height * this._drag_point_rate))
    			    return;
				var offset = (this._bar_button.x + bar_width / 2 + event.delta_x) / real_width;
    			if (offset > 1) offset = 1;
    			elseif (offset < 0) offset = 0;
    			if (this._offset_rate == offset) return;
    			this._offset_rate = offset;
    			this._bar_button.x = this._offset_rate*real_width - bar_width / 2;
    		}
    		else
    		{
				var offset = abs_x / real_width;
    			if (offset > 1) offset = 1;
    			elseif (offset < 0) offset = 0;
				var offset_grade = (1/(this._grade-1))/2;
				var offset_up = offset + offset_grade;
				var offset_down = offset - offset_grade;
    			for (var k, v in this._grade_list)
    			{
    				if (v > offset_down && v <= offset_up)
    				{
    					this._offset_rate = v;
    					this._bar_button.x = this._offset_rate*real_width - bar_width / 2;
    					break;
    				}
    			}
    		}
    	}
    	this.DispatchEvent(new UIChangedEvent());
    }

	protected fun HandleBarButtonScroll(UIMButtonWheelEvent event)
    {
		var step:double = null;
    	if (this._fixed == UIEnumTypes.FREE)
    		step = 0.01;
    	else
    		step = 1 / (this._grade-1);

    	if (this._type == UIEnumTypes.TYPE_V)
    	{
    		if (event.delta_y > 0)
    			this.HandleUpDownButton(-1*step);
    		elseif (event.delta_y < 0)
    			this.HandleUpDownButton(step);
    	}
    	else
    	{
    		if (event.delta_x > 0)
    			this.HandleUpDownButton(-1*step);
    		elseif (event.delta_x < 0)
    			this.HandleUpDownButton(step);
    	}
    }

	protected fun HandleUpDownButton(double step)
    {
    	this._offset_rate = this._offset_rate + step;
    	if (this._offset_rate < 0) this._offset_rate = 0;
    	if (this._offset_rate > 1) this._offset_rate = 1;
    	
    	if (this._type == UIEnumTypes.TYPE_V)
    		this._bar_button.y = this._offset_rate*this.height - this._bar_button.height / 2;
    	else
    		this._bar_button.x = this._offset_rate*this.width - this._bar_button.width / 2;

    	this.DispatchEvent(new UIChangedEvent());
    }

    public fun AdjustBarButton()
    {
    	if (this._bar_background != null)
    	{
    		this._bar_background.x = 0;
    		this._bar_background.y = 0;
    		this._bar_background.width = this.width;
    		this._bar_background.height = this.height;
    	}
    	if (this._bar_button != null)
    	{
    		if (this._type == UIEnumTypes.TYPE_V)
    		{
    			this._bar_button.x_type = UIEnumTypes.POS_ALIGN_CENTER;
    			this._bar_button.x_value = 0;
    			this._bar_button.y_type = UIEnumTypes.POS_ABS;
    			this._bar_button.y_value = this._offset_rate * this.height - this._bar_button.height / 2;
    		}
    		else
    		{
    			this._bar_button.x_type = UIEnumTypes.POS_ABS;
    			this._bar_button.x_value = this._offset_rate * this.width - this._bar_button.width / 2;
    			this._bar_button.y_type = UIEnumTypes.POS_ALIGN_CENTER;
    			this._bar_button.y_value = 0;
    		}
    	}
    }
}