
namespace ALittle;

private var __ceil = Math_Ceil;

public class TileTable : DisplayGroup
{
    private double _x_gap;
    private double _y_gap;
    private double _x_start_gap;
    private double _y_start_gap;
    private int _col_count;
    
    private int _clip_left_index;
    private int _clip_right_index;
    private int _clip_top_index;
    private int _clip_bottom_index;
    
    private Map<DisplayObject, bool> _show_child_map;
    
    public ctor(ControlSystem ctrl_sys)
    {
        this._x_gap = 0;
        this._y_gap = 0;
        this._x_start_gap = 0;
        this._y_start_gap = 0;
        this._col_count = 1;
    
        // 裁剪下标
        this._clip_left_index = 0;
        this._clip_right_index = 0;
        this._clip_top_index = 0;
        this._clip_bottom_index = 0;
        this._show_child_map = CreateKeyWeakMap();
    
        this._pickup_rect = false;
        this._pickup_child = true;
    
        this._width = 0;
        this._height = 0;
    }
    
    public get width() : double
    {
        return this._width;
    }
    
    public get height() : double
    {
        return this._height;
    }
    
    public set x_start_gap(double value)
    {
        if (this._x_start_gap == value)
            return;
        this._x_start_gap = value;
        this.Layout(1);
    }
    
    public get x_start_gap() : double
    {
        return this._x_start_gap;
    }
    
    public set y_start_gap(double value)
    {
        if (this._y_start_gap == value)
            return;
        this._y_start_gap = value;
        this.Layout(1);
    }
    
    public get y_start_gap() : double
    {
        return this._y_start_gap;
    }
    
    public set x_gap(double value)
    {
        if (this._x_gap == value)
            return;
        this._x_gap = value;
        this.Layout(1);
    }
    public get x_gap() : double
    {
        return this._x_gap;
    }
    
    public set y_gap(double value)
    {
        if (this._y_gap == value)
            return;
        this._y_gap = value;
        this.Layout(1);
    }
    public get y_gap() : double
    {
        return this._y_gap;
    }
    
    public set col_count(int value)
    {
        if (value <= 0 || this._col_count == value)
            return;
        this._col_count = value;
        this.Layout(1);
    }
    
    public get col_count() : int
    {
        return this._col_count;
    }
    
    public fun AddChild(DisplayObject child, [Nullable] int index) : bool
    {
        var result = DisplayGroup.AddChild(this, child, index);
        if (result == false) return false;
        if (index == null)
            this.Layout(this.child_count);
        else
            this.Layout(index);

        // 侦听大小发生变化
        child.AddEventListener(this, this.HandleChildResize);
    
        return true;
    }
    
    public fun RemoveChild(DisplayObject child) : bool
    {
        var child_index = this.GetChildIndex(child);
        if (child_index == 0)
            return false;

        var result = DisplayGroup.RemoveChild(this, child);
        if (result == false)
            return false;
    
        this._show_child_map[child] = null;
        // 侦听大小发生变化
        child.RemoveEventListener{UIResizeEvent}(this);
    
        this.Layout(child_index);
    
        return true;
    }

    public fun SpliceChild(int index, [Nullable] int count) : int
    {
        var remain_count = this._child_count - index + 1;
        if (count == null) count = remain_count;
        elseif (count > remain_count) count = remain_count;
        if (count <= 0) return 0;

        var endv = index + count;
        for (var i = index; i < endv; 1)
        {
            var child = this._childs[i];
            if (child == null) break;

            this._show_child_map[child] = null;
            // 侦听大小发生变化
            child.RemoveEventListener{UIResizeEvent}(this);
        }

        var result = DisplayGroup.SpliceChild(this, index, count);
        if (result != 0) this.Layout(index);
        return result;
    }
    
    public fun RemoveAllChild()
    {
        for (var k, child in this._childs)
            child.RemoveEventListener{UIResizeEvent}(this);
        
        this._show_child_map = CreateKeyWeakMap();
    
        this._clip_left_index = 0;
        this._clip_right_index = 0;
    
        this._clip_top_index = 0;
        this._clip_bottom_index = 0;
    
        DisplayGroup.RemoveAllChild(this);
    }
    
    public fun SetChildIndex(DisplayObject child, int index) : bool
    {
        var result = DisplayGroup.SetChildIndex(this, child, index);
        this.Layout(1);
        return result;
    }
    
    public fun Layout(int index)
    {
        var child_count = this.child_count;
        if (child_count == 0)
        {
            this._width = 0;
            this._height = 0;
            return;
        }
        if (index > child_count)
            index = child_count;
    
        // 子控件列表
        var child_list = this.childs;
    
        // 起始位置
        var start_index = 1;
        var start_x = this._x_start_gap;
        var start_y = this._y_start_gap;
    
        // 如果不是第一个子控件那么就以上一个子控件为开始
        if (index > 1)
        {
            start_index = index;
            var current_child = child_list[index - 1];
            if ((index - 1) % this._col_count == 0)
            {
                start_x = this._x_start_gap;
                start_y = current_child.y + current_child.height + this._y_gap;
            }
            else
            {
                start_x = current_child.x + current_child.width + this._x_gap;
                start_y = current_child.y;
            }
        }
    
        for (var i = start_index; i <= child_count; 1)
        {
            // 设置当前子控件
            child_list[i].x = start_x;
            child_list[i].y = start_y;
    
            // 当前索引是否已经是该行最后一个，另起一行
            if (i % this._col_count == 0)
            {
                start_x = this._x_start_gap;
                start_y = start_y + child_list[i].height + this._y_gap;
            }
            // 如果不是最后一个就跟在这个后面
            else
                start_x = start_x + child_list[i].width + this._x_gap;
        }
    
        // 重新设置宽高的值
        this._width = 0;
        this._height = 0;
        for (var k, child in child_list)
        {
            // 每个控件更新当前控件宽高值
            var width = child.x + child.width + this._x_start_gap;
            if (width > this._width)
                this._width = width;

            var height = child.y + child.height + this._y_start_gap;
            if (height > this._height)
                this._height = height;
        }
    }

    protected fun HandleChildResize(UIResizeEvent event)
    {
        // 重新布局
        this.Layout(this.GetChildIndex(event.target));
        // 发送大小发生变化消息
        this.DispatchEvent(new UIResizeEvent());
    }

    protected fun ClipRect(double left, double top, double right, double bottom, double h_move, double v_move)
    {
        // 转换成本地坐标
        left = left - this._x;
        if (left < 0)
            left = 0;
        top = top - this._y;
        if (top < 0)
            top = 0;
        right = right - this._x;
        if (right > this.width)
            right = this.width;
        bottom = bottom - this._y;
        if (bottom > this.height)
            bottom = this.height;
    
        // 如果自己都超出可视范围，那么就直接裁剪掉
        if (left >= right || top >= bottom)
        {
            this.clip = true;
            return;
        }
        this.clip = false;

        var child_count = this.child_count;
        if (child_count == 0)
            return;
        var childs = this.childs;

        var new_show_map:Map<DisplayObject, bool> = CreateKeyWeakMap();
        this._show.RemoveAllChild(); // 移除所有显示列表
    
        // 处理水平
        var max_index = this._col_count;
        if (this._child_count < max_index)
            max_index = this._child_count;
        var min_index = 1;
        var index = min_index;
        if (h_move == null || this._clip_left_index == 0)
        {
            do
            {
                if (childs[index].x > left)
                {
                    max_index = index;
                    index = __ceil((max_index + min_index) / 2);
                }
                elseif (childs[index].x + childs[index].width < left)
                {
                    min_index = index;
                    index = __ceil((max_index + min_index) / 2);
                }
                else
                {
                    break;
                }
            }
            while (index != min_index && index != max_index);
        }
        else
        {
            index = this._clip_left_index;
            if (h_move < 0)
            {
                while (index < max_index)
                {
                    if (childs[index].x + childs[index].width >= left)
                        break;
                    ++ index;
                }
            }
            elseif (h_move > 0)
            {
                while (index > min_index)
                {
                    if (childs[index].x <= left)
                        break;

                    -- index;
                }
            }
        }
    
        this._clip_left_index = index;
        max_index = this._col_count;
        if (this._child_count < max_index)
            max_index = this._child_count;

        for (var i = index; i <= max_index; 1)
        {
            if (childs[i].x < right)
                this._clip_right_index = i;
            else
                break;
        }
    
        max_index = __ceil(this._child_count / this._col_count);
        min_index = 1;
        index = min_index;
        // 处理垂直
        if (v_move == null || this._clip_top_index == 0)
        {
            do
            {
                var child_index = this._col_count * (index - 1) + 1;
                if (childs[child_index].y > top)
                {
                    max_index = index;
                    index = __ceil((max_index + min_index) / 2);
                }
                elseif (childs[child_index].y + childs[child_index].height < top)
                {
                    min_index = index;
                    index = __ceil((max_index + min_index) / 2);
                }
                else
                {
                    break;
                }
            }
            while (index != min_index && index != max_index);
        }
        else
        {
            index = this._clip_top_index;
            if (v_move < 0)
            {
                while (index < max_index)
                {
                    var child_index = this._col_count * (index - 1) + 1;
                    if (childs[child_index].y + childs[child_index].height >= top)
                        break;

                    ++ index;
                }
            }
            elseif (v_move > 0)
            {
                while (index > min_index)
                {
                    var child_index = this._col_count * (index - 1) + 1;
                    if (childs[child_index].y <= top)
                        break;

                    -- index;
                }
            }
        }
    
        this._clip_top_index = index;
        max_index = __ceil(this._child_count / this._col_count);
        var child_index = this._col_count * (index - 1) + 1;
        for (var i = index; i <= max_index; 1)
        {
            if (childs[child_index].y < bottom)
                this._clip_bottom_index = i;
            else
                break;

            child_index += this._col_count;
        }

        var base_index = this._col_count * (this._clip_top_index - 1);
        for (var i = this._clip_top_index; i <= this._clip_bottom_index; 1)
        {
            for (var j = this._clip_left_index; j <= this._clip_right_index; 1)
            {
                var child = childs[base_index + j];
                if (child != null)
                {
                    this._show.AddChild(child._show);
                    new_show_map[child] = true;
                    if (child.ClipRect != null)
                        child.ClipRect(left, top, right, bottom, h_move, v_move);
                }
            }
            base_index += this._col_count;
        }
    
        // 通知所有显示的控件
        for (var child, v in new_show_map)
        {
            if (this._show_child_map[child] == null)
            {
                var e = new UIShowEvent();
                e.target = child;
                child.DispatchEvent(e);
            }
            else
            {
                this._show_child_map[child] = null;
            }
        }
        // 通知所有隐藏的控件
        for (var child, v in this._show_child_map)
        {
            var e = new UIHideEvent();
            e.target = child;
            child.DispatchEvent(e);
        }
        this._show_child_map = new_show_map;
    }
}