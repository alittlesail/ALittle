
namespace ALittle;

public class DynamicImage : DisplayObject
{
    private ALittle.ITexture _texture;
    private int _real_width = 0;
    private int _real_height = 0;

    [Language(JavaScript)]
    [Native]
    private List<int> _data;

    [Language(JavaScript)]
    private PIXI.BaseTexture _base_texture;
    
    public ctor(ControlSystem ctrl_sys)
    {
        [Language(Lua)]
        this._show = new lua.__CPPAPIImage();
        [Language(Lua)]
        this._texture = new lua.__CPPAPIDynamicTexture();
        [Language(Lua)]
        this._show.SetTexture(this._texture);
        
        [Language(JavaScript)]
        this._show = new JavaScript.JImage();
    }

    public fun GetSurface(bool redraw) : carp.CarpSurface
    {
        return cast<lua.__CPPAPIDynamicTexture>(this._texture).GetSurface(redraw);
    }

    public fun SetRangeColor(Map<int, int> buffer)
    {
        [Language(Lua)]
        {
            var surface = this.GetSurface(true);
            carp.SetCarpSurfacePixelRect(surface, buffer);
        }

        [Language(JavaScript)]
        if (this._base_texture != null)
        {
            var width = this._real_width;
            var height = this._real_height;

            for (var x = 0; x < width; 1)
            {
                for (var y = 0; y < height; 1)
                {
                    var index = y * width + x;
                    this._data[index] = buffer[index];
                }
            }
            this._base_texture.update();
        }
    }

    public fun SetSurfaceSize(int width, int height, int color)
    {
        this._real_width = width;
        this._real_height = height;

        [Language(Lua)]
        cast<lua.__CPPAPIDynamicTexture>(this._texture).SetSurfaceSize(width, height, color);

        [Language(JavaScript)]
        {
            if (this._texture != null
            	&& (this._texture.GetWidth() != width || this._texture.GetHeight() != height))
            {
                this._show.ClearTexture();
            	this._texture = null;
            }
            var len = width * height;
            var buffer = new javascript.ArrayBuffer(len * 4);
            var array = new javascript.Uint32Array(buffer);
            this._data = cast<List<int>>(array);
            for (var i = 0; i < len; 1)
            	this._data[i] = color;
            var res_options = new PIXI.ISize();
            res_options.width = width;
            res_options.height = height;
            var resource = new PIXI.BufferResource(new javascript.Uint8Array(buffer), res_options);
            var tex_options = new PIXI.IBaseTextureOptions();
            tex_options.width = width;
            tex_options.height = height;
            this._base_texture = new PIXI.BaseTexture(resource, tex_options);
            var texture = new PIXI.Texture(this._base_texture);
            this._texture = new JavaScript.JTexture(texture, width, height);
            this._show.SetTexture(this._texture);
        }
    }
    public fun SetRenderMode(int mode)
    {
        cast<lua.__CPPAPIDynamicTexture>(this._texture).SetRenderMode(mode);
    }

    public fun Clear()
    {
        if (this._texture == null) return;
        this._texture.Clear();
    }
}