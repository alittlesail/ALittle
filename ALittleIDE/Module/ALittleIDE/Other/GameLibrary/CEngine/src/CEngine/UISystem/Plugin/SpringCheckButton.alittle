
//[[
//在ALittleIDE集成开发环境上，创建一个DisplayLayout，然后创建两个子控件
// 其中一个绑定名称为_show_up，用于非禁用状态时显示
// 其中一个绑定名称为_show_selected_up，用于非禁用状态时显示
// 另外一个绑定名称为_show_disabled，用于禁用状态时显示
//然后把DisplayLayou的插件类设置为SpringCheckButton
//]]

namespace ALittle;

public class SpringCheckButton : DisplayLayout
{
    private DisplayObject   _show_selected_up;
    private DisplayObject   _show_up;
    private DisplayObject   _show_disabled;

    private LoopGroup       _anti_loop;
    private bool            _big_or_small;
    private bool            _selected;

    public ctor(ControlSystem ctrl_sys)
    {
        // this._anti_loop = null;
        this._big_or_small = false;
    
        this._selected = false;
    
        this.AddEventListener(this, this.HandleMoveIn);
        this.AddEventListener(this, this.HandleMoveOut);
        this.AddEventListener(this, this.HandleLButtonDown);
        this.AddEventListener(this, this.HandleLButtonUp);
        this.AddEventListener(this, this.HandleMButtonDown);
        this.AddEventListener(this, this.HandleMButtonUp);
    
        this._pickup_rect = true;
        this._pickup_child = false;
    }
    
    public set disabled(bool value)
    {
        DisplayObject.disabled(this, value);
        if (this._abs_disabled)
            this.ShowDisabled();
        else
            this.ShowUp();
    }
    
    ////////////////////////////////////////////////////////////////////////////////-
    protected fun HandleMoveIn(UIMoveInEvent event)
    {
        this.ShowOver();
    }
    
    protected fun HandleMoveOut(UIMoveOutEvent event)
    {
        this.ShowUp();
    }

    protected fun HandleLButtonDown(UILButtonDownEvent event)
    {
        this.ShowDown();
    }
    
    protected fun HandleLButtonUp(UILButtonUpEvent event)
    {
        if (event.rel_x >= 0 && event.rel_y >= 0 && event.rel_x < event.target._width && event.rel_y < event.target._height)
        {
            this._selected = (this._selected == false);
            var e = new UIClickEvent();
            e.is_drag = event.is_drag;
            e.count = event.count;
            this.DispatchEvent(e);
            this.DispatchEvent(new UIChangedEvent());
            if (System_IsPhone() == false)
                this.ShowOver();
            else
                this.ShowUp();
        }
        else
            this.ShowUp();
    }

    protected fun HandleMButtonDown(UIMButtonDownEvent event)
    {
        this.ShowDown();
    }

    protected fun HandleMButtonUp(UIMButtonUpEvent event)
    {
        if (event.rel_x >= 0 && event.rel_y >= 0 && event.rel_x < event.target._width && event.rel_y < event.target._height)
        {
            var e = new UIMClickEvent();
            e.is_drag = event.is_drag;
            this.DispatchEvent(e);
            if (System_IsPhone() == false)
                this.ShowOver();
            else
                this.ShowUp();
        }
        else
            this.ShowUp();
    }
    
    ////////////////////////////////////////////////////////////////////////////////-
    public set selected(bool value)
    {
        if (this._selected == value)
            return;
        this._selected = value;
        if (this._abs_disabled)
            this.ShowDisabled();
        else
            this.ShowUp();
    }
    
    public get selected() : bool
    {
        return this._selected;
    }
    
    ////////////////////////////////////////////////////////////////////////////////-
    protected fun ScaleTo(bool big_or_small, int time_in_ms)
    {
        if (this._big_or_small == big_or_small) return;
        this._big_or_small = big_or_small;
        var scale = 1.0;
        if (this._big_or_small) scale = 1.2;
    
        if (this._anti_loop != null) { this._anti_loop.Stop(); this._anti_loop = null; }
        this._anti_loop = new LoopGroup();
        this._anti_loop.AddUpdater(new LoopLinear(this, "scale_x", scale, time_in_ms, 1));
        this._anti_loop.AddUpdater(new LoopLinear(this, "scale_y", scale, time_in_ms, 1));
        this._anti_loop.Start();
    }

    protected fun ShowUp()
    {
        if (this._abs_disabled ||this._disabled)
            return;
    
        if (this._selected)
        {
            if (this._show_selected_up != null) this._show_selected_up.visible = true;
            if (this._show_up != null) this._show_up.visible = false;
        }
        else
        {
            if (this._show_selected_up != null) this._show_selected_up.visible = false;
            if (this._show_up != null) this._show_up.visible = true;
        }
        if (this._show_disabled != null) this._show_disabled.visible = false;
    
        // 把当前的缩放全部往原来的样子走
        this.ScaleTo(false, 200);
    }

    protected fun ShowDown()
    {
        if (this._abs_disabled ||this._disabled)
            return;
    
        if (this._selected)
        {
            if (this._show_selected_up != null) this._show_selected_up.visible = true;
            if (this._show_up != null) this._show_up.visible = false;
        }
        else
        {
            if (this._show_selected_up != null) this._show_selected_up.visible = false;
            if (this._show_up != null) this._show_up.visible = true;
        }
        if (this._show_disabled != null) this._show_disabled.visible = false;
    
        // 把当前的缩放全部往最大的样子走
        this.ScaleTo(true, 200);
    }

    protected fun ShowOver()
    {
        if (this._abs_disabled ||this._disabled)
            return;
    
        if (this._selected)
        {
            if (this._show_selected_up != null) this._show_selected_up.visible = true;
            if (this._show_up != null) this._show_up.visible = false;
        }
        else
        {
            if (this._show_selected_up != null) this._show_selected_up.visible = false;
            if (this._show_up != null) this._show_up.visible = true;
        }
        if (this._show_disabled != null) this._show_disabled.alpha = 0;
    
        // 把当前的缩放全部往原来的样子走
        this.ScaleTo(false, 200);
    }

    protected fun ShowDisabled()
    {
        this.ScaleTo(false, 200);
    
        if (this._show_up != null) this._show_up.visible = false;
        if (this._show_selected_up != null) this._show_selected_up.visible = false;
        if (this._show_disabled != null)
            this._show_disabled.visible = true;
        else
        {
            if (this._selected)
                this._show_selected_up.visible = true;
            else
                this._show_up.visible = true;
        }
    }
}