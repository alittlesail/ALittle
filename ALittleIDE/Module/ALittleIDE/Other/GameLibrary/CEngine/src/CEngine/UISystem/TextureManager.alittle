
namespace ALittle;

struct LoadTextureInfo
{
    ITextureLoader loader;
    ITextureCutLoader cut_loader;
    TextureManager texture_mgr;
}

struct LoadingTextureObjectInfo
{
    Functor<(DisplayObject, bool)> callback;
}

struct LoadingTextureInfo
{
    bool cache;
    Map<DisplayObject, LoadingTextureObjectInfo> object_map;
}

struct LoadAtlasInfo
{
    string big_path;
    List<string> atlas;
    int big_width;
    int big_height;
}

protected struct TextureCutInfo
{
    string texture_name;
    int max_width;
    int max_height;
    bool cache;
}

protected class LoadTextureManager
{
    private Map<int, LoadTextureInfo>           _id_map_info;
    private Map<string, ITexture>  _path_map_texture_cut;
    private Map<string, LoadingTextureInfo>     _path_map_objects_cut;
    private Map<DisplayObject, bool>   _redraw_map_redraw;
    private Map<TextureManager, bool> _texmgr_map_texmgr;
    
    public ctor()
    {
        // 加载器管理
        this._id_map_info = new Map<int, LoadTextureInfo>();
        
        // 路径映射资源（散装），设置成虚表
        this._path_map_texture_cut = CreateValueWeakMap();
        
        // 正在加载中的纹理信息（散装）
        this._path_map_objects_cut = new Map<string, LoadingTextureInfo>();
        
        // 用来保存所有文本的映射表用于渲染设备重置的时候处理
        this._redraw_map_redraw = CreateKeyWeakMap();
        this._texmgr_map_texmgr = CreateKeyWeakMap();
    }

    protected fun CreateTexture(TextureManager texture_mgr, LoadAtlasInfo atlas)
    {
        // 创建加载器
        var loader:ITextureLoader;
        [Language(Lua)]
        loader = new lua.__CPPAPITextureLoader();
        [Language(JavaScript)]
        loader = new JavaScript.JTextureLoader();
        loader.SetPath(atlas.big_path, String_Join(atlas.atlas, ";"), atlas.big_width, atlas.big_height, texture_mgr.crypt_mode);
        var info = new LoadTextureInfo();
        this._id_map_info[loader.GetID()] = info;
        info.texture_mgr = texture_mgr;
        info.loader = loader;
        loader.Start();
    }

    // 添加纹理
    protected fun HandleTextureLoadSucceed(ITextureLoader loader, ITexture texture)
    {
        var loader_id = loader.GetID();
        var info = this._id_map_info[loader_id];
        if (info == null)
            return;
        this._id_map_info[loader_id] = null;

        info.texture_mgr.HandleTextureLoadSucceed(loader, texture);
    }

    // 添加纹理，path：图片资源路径
    protected fun HandleTextureLoadFailed(ITextureLoader loader)
    {
        var loader_id = loader.GetID();
        var info = this._id_map_info[loader_id];
        if (info == null)
            return;
        this._id_map_info[loader_id] = null;

        info.texture_mgr.HandleTextureLoadFailed(loader);
    }

    // 根据纹理ID来获取纹理
    protected fun GetTextureCut(string path, int max_width, int max_height) : ITexture
    {
        // 拼接ID
        var texture_id = path .. "_" .. max_width .. "_" .. max_height;
        return this._path_map_texture_cut[texture_id];
    }

    // 清理缓存纹理
    protected fun ClearTextureCut(string path, int max_width, int max_height)
    {
        var texture_id = path .. "_" .. max_width .. "_" .. max_height;
        this._path_map_texture_cut[texture_id] = null;
    }

    // 判断是不是正在加载
    protected fun IsLoadingTextureCut(string path, int max_width, int max_height) : bool
    {
        var texture_id = path .. "_" .. max_width .. "_" .. max_height;
        return this._path_map_objects_cut[texture_id] != null;
    }

    // 加载散装的图片
    protected fun SetTextureCut(DisplayObject object, string path, int max_width, int max_height, bool cache, [Nullable] Functor<(DisplayObject, bool)> callback)
    {
        // 设置纹理坐标
        object.SetTextureCoord(0, 1, 0, 1);

        // 这里必须向下取整，不然回调回来的时候会找不到texture_id
        if (max_width == null) max_width = 0;
        max_width = Math_Floor(max_width);
        if (max_height == null) max_height = 0;
        max_height = Math_Floor(max_height);
        if (cache == null) cache = false;
        // 拼接ID
        var texture_id = path .. "_" .. max_width .. "_" .. max_height;
        // 检查资源
        var texture = this._path_map_texture_cut[texture_id];
        // 如果有，则设置object的纹理和纹理坐标
        if (texture != null)
        {
            object.texture = texture;
            if (callback != null)
                callback(object, true);
            return;
        }
        // 如果没有资源就加入正在加载映射表中
        var loading_info = this._path_map_objects_cut[texture_id];
        if (loading_info != null)
        {
            var object_info = new LoadingTextureObjectInfo();
            object_info.callback = callback;
            loading_info.object_map[object] = object_info;
            return;
        }
        loading_info = new LoadingTextureInfo();
        loading_info.cache = cache;
        this._path_map_objects_cut[texture_id] = loading_info;

        // 设置为弱引用表
        loading_info.object_map = CreateKeyWeakMap();
        var object_info = new LoadingTextureObjectInfo();
        object_info.callback = callback;
        loading_info.object_map[object] = object_info;

        // 创建加载器, 判断是否是加载ios相册的资源
        var loader:ITextureCutLoader;
        [Language(Lua)]
        loader = new lua.__CPPAPITextureCutLoader();
        [Language(JavaScript)]
        loader = new JavaScript.JTextureCutLoader();
        loader.SetPath(path, max_width, max_height);

        var info = new LoadTextureInfo();
        this._id_map_info[loader.GetID()] = info;
        info.cut_loader = loader;
        loader.Start();
    }

    // 添加纹理
    protected fun HandleTextureCutLoadSucceed(ITextureCutLoader loader, ITexture texture)
    {
        var loader_id = loader.GetID();
        var info = this._id_map_info[loader_id];
        if (info == null)
            return;
        this._id_map_info[loader_id] = null;
        // 创建纹理对象
        [Language(Lua)]
        var texture_wrap = new lua.__CPPAPITextureWrap();
        [Language(Lua)]
        texture_wrap.SetTexture(texture);
        [Language(Lua)]
        texture = texture_wrap;
        
        var path = loader.GetPath();
        var max_width = loader.GetMaxWidth();
        var max_height = loader.GetMaxHeight();

        var texture_id = path .. "_" .. max_width .. "_" .. max_height;
        var loading_info = this._path_map_objects_cut[texture_id];
        if (loading_info == null)
            return;

        if (loading_info.cache)
            this._path_map_texture_cut[texture_id] = texture;

        for (var object, value in loading_info.object_map)
        {
            if (object.texture_name == path)
            {
                object.texture = texture;
                if (value.callback != null)
                    value.callback(object, true);
            }
        }
        this._path_map_objects_cut[texture_id] = null;
    }

    // 添加纹理，path：图片资源路径
    protected fun HandleTextureCutLoadFailed(ITextureCutLoader loader)
    {
        var loader_id = loader.GetID();
        var info = this._id_map_info[loader_id];
        if (info == null)
            return;
        this._id_map_info[loader_id] = null;

        var path = loader.GetPath();
        var max_width = loader.GetMaxWidth();
        var max_height = loader.GetMaxHeight();

        var texture_id = path .. "_" .. max_width .. "_" .. max_height;
        var loading_info = this._path_map_objects_cut[texture_id];
        if (loading_info == null)
            return;

        for (var object, value in loading_info.object_map)
        {
            if (value.callback != null)
                value.callback(object, false);
        }
        this._path_map_objects_cut[texture_id] = null;
    }

    // 注册有使用到纹理类的控件
    protected fun RegisterRedrawControl(DisplayObject control)
    {
        this._redraw_map_redraw[control] = true;
    }

    // 注册纹理管理器
    protected fun RegisterTexmgrControl(TextureManager control)
    {
        this._texmgr_map_texmgr[control] = null;
    }

    // 处理渲染设备重置
    protected fun HandleRenderDeviceReset()
    {
        // 清空所有散装的图片
        this._path_map_texture_cut = CreateValueWeakMap();
        // 清空所有拼接图片
        for (var texmgr, _ in this._texmgr_map_texmgr)
            texmgr.ClearCache();
        // 重置所有需要重绘的控件
        for (var control, _ in this._redraw_map_redraw)
            control.Redraw();
    }
}

public var A_LoadTextureManager = new LoadTextureManager();

public struct AltasTextureInfo
{
    int width;
    int height;
    string path;
}

struct AltasCollectInfo
{
    int count;
    List<List<any>> list;
}

public class AltasBinary
{
    private int _width;
    private int _height;
    private int _x;
    private int _y;
    private int _texture_x;
    private int _texture_y;
    private int _texture_w;
    private int _texture_h;
    private string _texture_path;
    private AltasBinary _left;
    private AltasBinary _right;

    public ctor(int x, int y, int width, int height)
    {
        this._width = width;
        this._height = height;
        this._x = x;
        this._y = y;
        
        this._texture_x = null;
        this._texture_y = null;
        this._texture_w = null;
        this._texture_h = null;
        this._texture_path = null;
        
        this._left = null;
        this._right = null;
    }

    public fun Fill(AltasTextureInfo texture_info, int padding) : bool
    {
        if (this._left != null)
        {
            if (this._left.Fill(texture_info, padding))
                return true;
        }

        if (this._right != null)
        {
            if (this._right.Fill(texture_info, padding))
                return true;
        }

        if (this._texture_path == null)
        {
            var real_width = texture_info.width + padding * 2;
            var real_height = texture_info.height + padding * 2;
            if (real_width > this._width)
                return false;
            if (real_height > this._height)
                return false;

            this._texture_w = texture_info.width;
            this._texture_h = texture_info.height;
            this._texture_x = this._x + padding;
            this._texture_y = this._y + padding;
            this._texture_path = texture_info.path;

            this._left = new AltasBinary(this._x + real_width, this._y, this._width - real_width, real_height);
            this._right = new AltasBinary(this._x, this._y + real_height, this._width, this._height - real_height);

            return true;
        }

        return false;
    }

    // map 输出参数
    public fun GetInfo([Nullable] AltasCollectInfo list_info) : List<List<any>>
    {
        if (list_info == null)
        {
            list_info = new AltasCollectInfo();
            list_info.count = 0;
            list_info.list = new List<List<any>>();
        }

        if (this._texture_path != null)
        {
            var info = new List<any>();
            info[1] = this._texture_path;
            info[2] = this._texture_x;
            info[3] = this._texture_y;
            info[4] = this._texture_w;
            info[5] = this._texture_h;
            ++ list_info.count;
            list_info.list[list_info.count] = info;
        }

        if (this._left != null)
            this._left.GetInfo(list_info);

        if (this._right != null)
            this._right.GetInfo(list_info);

        return list_info.list;
    }

    public static TextureListComp(AltasTextureInfo a, AltasTextureInfo b) : bool
    {
        if (a.height > b.height)
        {
            // 按高度排序
            return true;
        }
        elseif (a.height == b.height)
        {
            if (a.width > b.width)
            {
                // 按宽度排序
                return true;
            }
            elseif (a.width == b.width)
            {
                if (a.path > b.path)
                    // 最后按路径排序
                    return true;
            }
        }
        return false;
    }

    // 把所有图片拼接，并保存到文件里面，
    // 主要提供给集成开发环境调用
    // texture_list 纹理的列表信息
    // path 散装图片的路径
    // width 宽度
    // height 高度
    // max_width 合并纹理的宽度
    // max_height 合并纹理的高度
    // padding 每张纹理外围扩张的像素量
    public static GenerateAltas(List<AltasTextureInfo> texture_list, int max_width, int max_height, int padding) : List<any>
    {
        // 先按高度从大到小来排，再按宽度从大到小排
        List_Sort(texture_list, AltasBinary.TextureListComp);

        // 合并列表
        var big_list = new List<any>();
        var big_list_count = 0;
        
        ++big_list_count;
        big_list[big_list_count] = max_width;
        ++big_list_count;
        big_list[big_list_count] = max_height;
        
        // 一直处理，直到全部处理完毕
        while (true)
        {
            var altas = new AltasBinary(0, 0, max_width, max_height);
            var left_list = new List<AltasTextureInfo>();
            var left_list_count = 0;
            for (var index, texture_info in texture_list)
            {
                // 检查是否放得下
                var real_width = texture_info.width + padding * 2;
                var real_height = texture_info.height + padding * 2;
                if (real_width <= max_width && real_height <= max_height)
                {
                    // 尝试放进去，放不进去就添加到剩余列表
                    if (altas.Fill(texture_info, padding) != true)
                    {
                        ++ left_list_count;
                        left_list[left_list_count] = texture_info;
                    }
                }
            }
            var list = altas.GetInfo();
            // 至少有两张图片合并
            if (list[2] != null)
            {
                ++big_list_count;
                big_list[big_list_count] = list;
            }
            texture_list = left_list;
            if (texture_list[1] == null)
                break;
        }

        return big_list;
    }
}

struct PrepareInfo
{
    int total;
    int succeed;
    int failed;
    Map<string, bool> map;
    Functor<(int, int, int)> callback;
}

struct AltasInfo : LoadAtlasInfo
{
    double t;
    double b;
    double l;
    double r;
}

protected class TextureManager
{
    private bool _cache_texture;
    private string _base_path;
    private bool _crypt_mode;
    private Map<string, ITexture> _path_map_texture;
    private Map<PrepareInfo, bool> _prepare_map;
    private Map<string, Map<DisplayObject, string>> _path_map_objects;
    private Map<string, AltasInfo> _name_map_atlas;
    
    // @param module_name 模块名
    // @param crypt_mode 是否是加密模式
    public ctor(string module_name, bool crypt_mode)
    {
        // 默认缓存纹理
        this._cache_texture = true;
        // 基础路径
        this._base_path = "Module/" .. module_name .. "/Texture/";
        // 加密模式
        this._crypt_mode = crypt_mode || false;
    
        // 路径映射资源，设置成虚表
        this._path_map_texture = CreateValueWeakMap();
        
        this._prepare_map = new Map<PrepareInfo, bool>(); // 强引用，用于保存预加载纹理映射
    
        // 正在加载中的纹理信息
        this._path_map_objects = new Map<string, Map<DisplayObject, string>>();
    
        // 加载拼接数据
        this.LoadAtlas();
    }
    
    // 把所有图片进行拼接计算
    public fun LoadAtlas()
    {
        this._name_map_atlas = new Map<string, AltasInfo>();
    
        // 如果是开发模式，那么就不要加载这个文件
        if (!this._crypt_mode)
            return;

        // 获取拼接的纹理信息
        var big_list:List<List<List<any>>> = File_ReadJsonFromFile(this._base_path .. "Atlas.ali", this._crypt_mode);
        if (big_list == null)
            return;

        var big_list_count = List_Len(big_list);
        if (big_list_count < 2)
            return;
    
        // 获取大纹理的宽高
        var texture_width = cast<int>(big_list[1]);
        var texture_height = cast<int>(big_list[2]);
    
        for (var index = 3; index <= big_list_count; 1)
        {
            var list = big_list[index];
            var big_path = index .. ".atlas";
            var info = new List<string>();
            var info_count = 0;
            for (var _, value in list)
            {
                var path = cast<string>(value[1]);
                var x = cast<int>(value[2]);
                var y = cast<int>(value[3]);
                var w = cast<int>(value[4]);
                var h = cast<int>(value[5]);

                var atlas = new AltasInfo();
                atlas.big_path = big_path;
                atlas.t = y / texture_height;
                atlas.b = (y + h) / texture_height;
                atlas.l = x / texture_width;
                atlas.r = (x + w) / texture_width;
                atlas.big_width = texture_width;
                atlas.big_height = texture_height;
                atlas.atlas = info;
                this._name_map_atlas[path] = atlas;

                ++ info_count;
                info[info_count] = this._base_path .. path .. "," .. y .. "," .. (y + h) .. "," .. x .. "," .. (x + w) .. "," .. w .. "," .. h;
            }
        }
    }
    
    public fun GetAtlas(string name) : AltasInfo
    {
        var atlas = this._name_map_atlas[name];
        if (atlas != null) return atlas;
    
        atlas = new AltasInfo();
        this._name_map_atlas[name] = atlas;
        atlas.big_path = name;
        atlas.t = 0;
        atlas.b = 1;
        atlas.l = 0;
        atlas.r = 1;
        atlas.big_width = 0;
        atlas.big_height = 0;
        atlas.atlas = new List<string>();
        atlas.atlas[1] = this._base_path .. name .. ",0,0,0,0,0,0";
    
        return atlas;
    }
    
    public set cache_texture(bool cache)
    {
        this._cache_texture = cache;
    }
    
    public get cache_texture() : bool
    {
        return this._cache_texture;
    }

    public get crypt_mode() : bool
    {
        return this._crypt_mode;
    }
    
    // 清空所有纹理
    public fun ClearCache()
    {
        this._path_map_texture = CreateValueWeakMap();
        this._prepare_map = new Map<PrepareInfo, bool>();
    }
    
    // 事先准备好纹理图片
    public fun PrepareTexture(Map<string, bool> name_map, Functor<(int, int, int)> callback)
    {
        var new_name_map = new Map<string, bool>();
        // 遍历
        for (var name, value in name_map)
        {
            // 获取加载完毕的图片信息
            var atlas = this.GetAtlas(name);
            // 检查重复
            if (new_name_map[atlas.big_path] == null)
            {
                // 检查资源
                var texture = this._path_map_texture[atlas.big_path];
                if (texture == null)
                {
                    // 如果没有资源就加入正在加载映射表中
                    var loading_map = this._path_map_objects[atlas.big_path];
                    if (loading_map == null)
                    {
                        loading_map = CreateKeyWeakMap();
                        this._path_map_objects[atlas.big_path] = loading_map;
                    }
                    A_LoadTextureManager.CreateTexture(this, atlas);
                    new_name_map[atlas.big_path] = false;
                }
                else
                    new_name_map[atlas.big_path] = true;
            }
        }

        var prepare_info = new PrepareInfo();
        prepare_info.total = 0;
        prepare_info.succeed = 0;
        prepare_info.failed = 0;
        prepare_info.map = new_name_map;
        prepare_info.callback = callback;
        for (var name, value in new_name_map)
        {
            ++ prepare_info.total;
            if (value) ++ prepare_info.succeed;
        }
        // 如果还没有加载完，那么就标记为正在加载
        if (prepare_info.total > prepare_info.succeed + prepare_info.failed)
            this._prepare_map[prepare_info] = true;
        // 调用回调通知
        if (callback != null)
            callback(prepare_info.total, prepare_info.succeed, prepare_info.failed);
    }
    
    // 设置纹理图片，name：子图片名字，object：控件对象
    protected fun SetTexture(DisplayObject object, string name)
    {
        // 获取加载完毕的图片信息
        var atlas = this.GetAtlas(name);
        // 设置纹理坐标
        object.SetTextureCoord(atlas.t, atlas.b, atlas.l, atlas.r);
        // 检查资源
        var texture = this._path_map_texture[atlas.big_path];
        // 如果有，则设置object的纹理和纹理坐标
        if (texture != null)
        {
            object.texture = texture;
            return;
        }
        // 如果没有资源就加入正在加载映射表中
        var loading_map = this._path_map_objects[atlas.big_path];
        if (loading_map != null)
        {
            loading_map[object] = name;
            return;
        }
    
        loading_map = CreateKeyWeakMap();
        this._path_map_objects[atlas.big_path] = loading_map;
        loading_map[object] = name;
    
        // 通知异步加载资源
        A_LoadTextureManager.CreateTexture(this, atlas);
    }
    
    // 添加文理成功
    protected fun HandleTextureLoadSucceed(ITextureLoader loader, ITexture texture)
    {
        // 创建纹理对象
        [Language(Lua)]
        var texture_wrap = new lua.__CPPAPITextureWrap();
        [Language(Lua)]
        texture_wrap.SetTexture(texture);
        [Language(Lua)]
        texture = texture_wrap;
        
        var path = loader.GetPath();
    
        // 将信息保存到加载完毕的信息中
        var loading_map = this._path_map_objects[path];
        if (loading_map != null)
        {
            if (this._cache_texture)
                this._path_map_texture[path] = texture;
    
            for (var k, v in loading_map)
            {
                if (k.texture_name == v)
                    k.texture = texture;
            }
            // 清空等待该纹理的对象
            this._path_map_objects[path] = null;
        }
    
        // 复制一个，避免在处理过程中，又有新的预加载
        var copy_map = new Map<PrepareInfo, bool>();
        for (var k, v in this._prepare_map)
            copy_map[k] = v;

        var erase_map = new Map<PrepareInfo, bool>();
        for (var info, v in copy_map)
        {
            if (info.map[path] == false)
            {
                ++ info.succeed;
                info.map[path] = true;
                if (info.callback != null)
                    info.callback(info.total, info.succeed, info.failed);

                if (info.total <= info.succeed + info.failed)
                    erase_map[info] = true;
            }
        }
    
        for (var info, v in erase_map)
            this._prepare_map[info] = null;
    }

    protected fun HandleTextureLoadFailed(ITextureLoader loader)
    {
        var path = loader.GetPath();
        // 将信息保存到加载完毕的信息中
        this._path_map_objects[path] = null;
    
        // 遍历预加载
        var erase_map = new Map<PrepareInfo, bool>();
        for (var info, v in this._prepare_map)
        {
            if (info.map[path] == false)
            {
                ++ info.failed;
                info.map[path] = true;
                if (info.callback != null)
                    info.callback(info.total, info.succeed, info.failed);
    
                if (info.total <= info.succeed + info.failed)
                    erase_map[info] = true;
            }
        }
        for (var info, v in erase_map)
            this._prepare_map[info] = null;
    }
}