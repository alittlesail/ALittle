
namespace ALittle;

public enum TileType
{
    NONE = 0;		// 无效
	SQUARE = 1;	// 正方形
    HEX_V = 2;	// 垂直的正六边形
    HEX_H = 3;	// 水平的正六边形
}

public struct TileCell
{
    int tex_id;	// 纹理ID
}

public struct TileLayer
{
    string name;	// 层名称
    Map<int, Map<int, TileCell>> cell_map;	// 格子
}

public struct TileMap
{
    int tile_type;	// TileType 单位格子的类型
    int side_len;	// 边长
    int tile_width;	// 地块宽
    int tile_height;	// 地块高
    int tile_x;	// 地块锚点x
    int tile_y;	// 地块锚点y

    int col_count;	// 横向格子数量
    int row_count;	// 纵向格子数量

    Map<int, string> tex_map;	// 纹理ID映射的纹理路径
    List<TileLayer> layer_list;	// 层
}

private var floor = Math_Floor;
private var ceil = Math_Ceil;

public class TileLayoutContainer : DisplayLayout
{
    private TileMap _tile_map;	// 地图数据

    private int _row_count = 0;	// 展示总行数
    private int _col_count = 0;	// 展示总列数

    private double _cell_width = 0.0;	// 格子宽度
    private double _cell_height = 0.0;   // 格子高度

    private double _linear_x = 0.0;	// 二级linear的x偏移
    private double _linear_y = 0.0;	// 二级linear的y偏移

    private Map<int, Map<int, Map<int, Image>>> _image_cache; // image对象缓存

    protected fun ClipRect(double x, double y, double width, double height, double h_move, double v_move)
    {
        for (var index, child in this.childs)
    		child.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
    }

    // 初始化格子结构
    public fun Init(TileMap tile_map, int row_count, int col_count)
    {
        // 清空控件
        this.RemoveAllChild();

        // 保存数据
        this._tile_map = tile_map;
        this._row_count = row_count;
        this._col_count = col_count;
        this._image_cache = new Map<int, Map<int, Map<int, Image>>>();

        this._cell_width = Tile_CalcCellWidth(tile_map);
        this._cell_height = Tile_CalcCellHeight(tile_map);

        this._linear_x = Tile_CalcLinear2OffsetX(tile_map);
        this._linear_y = Tile_CalcLinear2OffsetY(tile_map);

        // 计算格子地图宽度
        var grid_map_width = this._cell_width * col_count;

        // 创建层
        var linear_1:Linear;
        var linear_2:Linear;
        for (var index, layer in tile_map.layer_list)
        {
            // 创建层容器，并保存数据
            var group = new TileGroupContainer(this._ctrl_sys);

            // 创建linear1
            linear_1 = new Linear(this._ctrl_sys);
            linear_1.type = UIEnumTypes.TYPE_V;
            linear_1.width = grid_map_width;
            group.AddChild(linear_1);

            // 创建linear2
            linear_2 = new Linear(this._ctrl_sys);
            linear_2.type = UIEnumTypes.TYPE_V;
            linear_2.width = grid_map_width;
            linear_2.x = this._linear_x;
            linear_2.y = this._linear_y;
            group.AddChild(linear_2);

            // 设置资格结构
            this.ResizeLinear(linear_1, linear_2, index);

            // 添加到容器
            this.AddChild(group);
        }

        var width_1 = 0.0;
        if (linear_1 != null) width_1 = linear_1.x + linear_1.width;
        var width_2 = 0.0;
        if (linear_2 != null) width_2 = linear_2.x + linear_2.width;

        var height_1 = 0.0;
        if (height_1 != null) height_1 = linear_1.y + linear_1.height;
        var height_2 = 0.0;
        if (linear_2 != null) height_2 = linear_2.y + linear_2.height;

        this.width = Math_Max(width_1, width_2);
        this.height = Math_Max(height_1, height_2);
    }

    public fun GetImage(int layer, int row, int col) : Image
    {
        var layer_map = this._image_cache[layer];
        if (layer_map == null)
        {
            layer_map = new Map<int, Map<int, Image>>();
            this._image_cache[layer] = layer_map;
        }

        var row_map = layer_map[row];
        if (row_map == null)
        {
            row_map = new Map<int, Image>();
            layer_map[row] = row_map;
        }
        var image = row_map[col];
        if (image != null) return image;

        var group = cast<DisplayGroup>(this.GetChildByIndex(layer));
        if (group == null) return null;
        var linear_1 = cast<Linear>(group.GetChildByIndex(1));
        var linear_2 = cast<Linear>(group.GetChildByIndex(2));

        var tile_type = this._tile_map.tile_type;
        if (tile_type == TileType.HEX_V)
        {
            if (row % 2 == 1)
            {
                image = linear_1.childs[floor(row / 2) + 1].childs[col]._user_data;
                row_map[col] = image;
                return image;
            }
                
            image = linear_2.childs[floor(row / 2)].childs[col]._user_data;
            row_map[col] = image;
            return image;
        }
        else
        {
            if (col % 2 == 1)
            {
                image = linear_1.childs[row].childs[floor(col / 2) + 1]._user_data;
                row_map[col] = image;
                return image;
            }
                
            image = linear_2.childs[row].childs[floor(col / 2)]._user_data;
            row_map[col] = image;
            return image;
        }
    }

    // 刷新纹理
    public fun RefreshTexture(int start_row, int start_col)
    {
        var tile_map = this._tile_map;
        var row_count = this._row_count;
        var col_count = this._col_count;

        for (var index, group:TileGroupContainer in this._childs)
        {
            var layer = tile_map.layer_list[index];
            for (var row = 1; row <= row_count; 1)
            {
                for (var col = 1; col <= col_count; 1)
                {
                    var image = this.GetImage(index, row, col);

                    var cells = layer.cell_map[row + start_row - 1];
                    if (cells == null)
                    {
                        image.texture_name = null;
                    }
                    else
                    {
                        var cell = cells[col + start_col - 1];
                        if (cell == null)
                        {
                            image.texture_name = null;
                        }
                        else
                        {
                            image.texture_name = tile_map.tex_map[cell.tex_id];
                        }
                    }
                }
            }
        }
    }

    // 构建linear的格子
    private fun ResizeLinear(Linear linear_1, Linear linear_2, int layer)
    {
        var tile_map = this._tile_map;
        var col_count = this._col_count;
        var row_count = this._row_count;

        // 设置格子结构
        if (tile_map.tile_type == TileType.HEX_V)
        {
            linear_1.width = this._cell_width * col_count;
            linear_2.width = linear_1.width;

            for (var row = 1; row <= row_count; 1)
            {
                var linear = new Linear(this._ctrl_sys);
                linear.type = UIEnumTypes.TYPE_H;
                linear.height = this._cell_height;
                for (var col = 1; col <= col_count; 1)
                    linear.AddChild(this.CreateCell());

                if (row % 2 == 1)
                    linear_1.AddChild(linear);
                else
                    linear_2.AddChild(linear);
            }
        }
        else
        {
            var col_count_1 = ceil(col_count / 2);
            for (var row = 1; row <= row_count; 1)
            {
                var linear = new Linear(this._ctrl_sys);
                linear.type = UIEnumTypes.TYPE_H;
                linear.height = this._cell_height;
                for (var col = 1; col <= col_count_1; 1)
                    linear.AddChild(this.CreateCell());
                linear_1.AddChild(linear);
            }

            var col_count_2 = floor(col_count / 2);
            for (var row = linear_2.child_count + 1; row <= row_count; 1)
            {
                var linear = new Linear(this._ctrl_sys);
                linear.type = UIEnumTypes.TYPE_H;
                linear.height = this._cell_height;
                for (var col = 1; col <= col_count_2; 1)
                    linear.AddChild(this.CreateCell());
                linear_2.AddChild(linear);
            }
        }
    }

    // 创建格子
    private fun CreateCell() : ALittle.DisplayObject
    {
        var tile_map = this._tile_map;
        var tile_type = tile_map.tile_type;
        var side_len = tile_map.side_len;

        if (tile_type == TileType.HEX_V)
        {
            var cell = new DisplayLayout(this._ctrl_sys);
            cell.width = this._cell_width;
            var image = new Image(this._ctrl_sys);
            cell._user_data = image;
            image.width = tile_map.tile_width;
            image.height = tile_map.tile_height;
            image.x = tile_map.tile_x;
            image.y = tile_map.tile_y;
            cell.AddChild(image);
            return cell;
        }

        if (tile_type == TileType.SQUARE)
        {
            var cell = new DisplayLayout(this._ctrl_sys);
            cell.width = this._cell_width;
            var image = new Image(this._ctrl_sys);
            cell._user_data = image;
            image.width = tile_map.tile_width;
            image.height = tile_map.tile_height;
            image.x = tile_map.tile_x;
            image.y = tile_map.tile_y;
            cell.AddChild(image);
            return cell;
        }

        if (tile_type == TileType.HEX_H)
        {
            var cell = new DisplayLayout(this._ctrl_sys);
            cell.width = this._cell_width;
            var image = new Image(this._ctrl_sys);
            cell._user_data = image;
            image.width = tile_map.tile_width;
            image.height = tile_map.tile_height;
            image.x = tile_map.tile_x;
            image.y = tile_map.tile_y;
            cell.AddChild(image);
            return cell;
        }

        return null;
    }
}

// linear1和linear2的容器，构建出一个层显示
public class TileGroupContainer : DisplayGroup
{
    protected fun ClipRect(double x, double y, double width, double height, double h_move, double v_move)
    {
        for (var index, child in this.childs)
    		child.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
    }
}

// 计算二级Linear的x偏移
public static Tile_CalcLinear2OffsetX(TileMap tile_map) : double
{
    var tile_type = tile_map.tile_type;
    var side_len = tile_map.side_len;

    if (tile_type == TileType.SQUARE)
        return side_len;

    if (tile_type == TileType.HEX_V)
        return side_len * 1.732 / 2;

    if (tile_type == TileType.HEX_H)
        return side_len * 3 / 2;

    return 0;
}

// 计算二级Linear的y偏移
public static Tile_CalcLinear2OffsetY(TileMap tile_map) : double
{
    var tile_type = tile_map.tile_type;
    var side_len = tile_map.side_len;

    if (tile_type == TileType.SQUARE)
        return 0;

    if (tile_type == TileType.HEX_V)
        return side_len * 3 / 2;

    if (tile_type == TileType.HEX_H)
        return side_len * 1.732 / 2;

    return 0;
}

// 对于垂直正六边形，根据位置计算计算行列
public static Tile_CalcRowColByPosInHexV(TileMap tile_map, double x, double y) : int, int
{
    var tile_type = tile_map.tile_type;
    var side_len = tile_map.side_len;

    var half_width = side_len * 1.732 / 2;
    var split_x = floor(x / half_width);
    var offset_x = x - split_x * half_width;

    if (split_x % 2 == 0)
    {
        var split_y = floor(y / (side_len * 3));
        var offset_y = y - split_y * (side_len * 3);
        // 把纵向以如下单位进行切割
        // 1 | / |
        // 2 ||  |
        // 3 | \ |
        // 4 | | |

        // 第一段，直线方程： y = -1 / 1.732*x + side_len / 2
        if (offset_y < side_len / 2)
        {
            var row = split_y * 2;
            var col = floor(split_x / 2);

            var test_y = -1 / 1.732 * offset_x + side_len / 2;
            if (offset_y < test_y)
            {
                row -= 1;
                col -= 1;
            }

            return row + 1, col + 1;
        }

        // 第二段，长方形
        if (offset_y < side_len * 3 / 2)
        {
            var row = split_y * 2;
            var col = floor(split_x / 2);

            return row + 1, col + 1;
        }

        // 第三段，直线方程： y = 1 / 1.732*x
        if (offset_y < side_len * 2)
        {
            var row = split_y * 2;
            var col = floor(split_x / 2);

            var test_y = 1 / 1.732 * offset_x;
            if (offset_y - side_len * 3 / 2 > test_y)
            {
                row += 1;
                col -= 1;
            }
            return row + 1, col + 1;
        }

        // 第四段，长方形
        {
            var row = split_y * 2 + 1;
            var col = floor(split_x / 2) - 1;
            return row + 1, col + 1;
        }
    }
    else
    {
        var split_y = floor(y / (side_len * 3));
        var offset_y = y - split_y * (side_len * 3);
        // 把纵向以如下单位进行切割
        // 1 | \ |
        // 2 |  ||
        // 3 | / |
        // 4 ||  |

        // 第一段，直线方程： y = 1 / 1.732*x
        if (offset_y < side_len / 2)
        {
            var row = split_y * 2;
            var col = floor(split_x / 2);

            var test_y = 1 / 1.732 * offset_x;
            if (offset_y < test_y )
            {
                row -= 1;
            }
            return row + 1, col + 1;
        }

        // 第二段，长方形
        if (offset_y < side_len * 3 / 2)
        {
            var row = split_y * 2;
            var col = floor(split_x / 2);

            return row + 1, col + 1;
        }

        // 第三段，直线方程： y = -1 / 1.732*x + side_len / 2
        if (offset_y < side_len * 2)
        {
            var row = split_y * 2;
            var col = floor(split_x / 2);

            var test_y = -1 / 1.732 * offset_x + side_len / 2;
            if (offset_y - side_len * 3 / 2 > test_y)
            {
                row += 1;
            }
            return row + 1, col + 1;
        }

        // 第四段，长方形
        {
            var row = split_y * 2 + 1;
            var col = floor(split_x / 2);
            return row + 1, col + 1;
        }
    }
}

// 根据坐标获取行列
public static Tile_CalcRowColByPos(TileMap tile_map, double x, double y) : int, int
{
    var tile_type = tile_map.tile_type;
    var side_len = tile_map.side_len;

    // 正方形
    if (tile_type == TileType.SQUARE)
    {
        var row = floor(y / side_len);
        var col = floor(x / side_len);
        return row + 1, col + 1;
    }

    // 如果是水平正六边形，那么就转为垂直正六边形
    if (tile_type == TileType.HEX_H)
    {
        var col, row = Tile_CalcRowColByPosInHexV(tile_map, y, x);
        return row, col;
    }

    // 处理垂直正六边形
    if (tile_type == TileType.HEX_V)
    {
        return Tile_CalcRowColByPosInHexV(tile_map, x, y);
    }

    return 0, 0;
}

// 计算格子高度
public static Tile_CalcCellHeight(TileMap tile_map) : double
{
    var tile_type = tile_map.tile_type;
    var side_len = tile_map.side_len;

    if (tile_type == TileType.SQUARE)
        return side_len;

    if (tile_type == TileType.HEX_V)
        return side_len * 3;

    if (tile_type == TileType.HEX_H)
        return side_len * 1.732;

    return 0;
}

// 计算格子宽度
public static Tile_CalcCellWidth(TileMap tile_map) : double
{
    var tile_type = tile_map.tile_type;
    var side_len = tile_map.side_len;

    if (tile_type == TileType.SQUARE)
        return side_len * 2;

    if (tile_type == TileType.HEX_V)
        return side_len * 1.732;

    if (tile_type == TileType.HEX_H)
        return side_len * 3;

    return 0;
}

// 根据层名称获取层下标
public static Tile_GetLayerByName(TileMap tile_map, string name) : int
{
    for (var index, layer in tile_map.layer_list)
    {
        if (layer.name == name) return index;
    }

    return null;
}