
//[[ 事件发送器
//	只要需要发送事件，然后驱动逻辑的对象都需要继承UIEventDispatcher类
//	控件基本上会因为一些事件触发（鼠标点击，键盘输入等操作）而产生事件，然后驱动逻辑
//
//	举个例子：
//	假设逻辑侦听了一个按钮的点击事件
//	如果这个按钮被点击了，那么这个按钮会调用DispatchEvent函数，把点击事件依次发送给侦听它的所有逻辑对象
//	当逻辑对象收到这个事件以后会执行相应的逻辑
//
//	PS：这个类不止给控件使用，其他非控件的类如果需要发送事件的，也可以继承UIEventDispatcher类
//]]

namespace ALittle;

public struct UIEvent
{
    DisplayObject target;
}

// 失去焦点
public struct UIFocusOutEvent : UIEvent { }
// 获得焦点
public struct UIFocusInEvent : UIEvent { }

// 移入
public struct UIMoveOutEvent : UIEvent { }
// 移出
public struct UIMoveInEvent : UIEvent { }

// 隐藏
public struct UIHideEvent : UIEvent { }
// 显示
public struct UIShowEvent : UIEvent { }

// 变化事件
public struct UIChangedEvent : UIEvent { }
public struct UIChangedEndEvent : UIEvent { }
public struct UISelectChangedEvent : UIEvent { }
public struct UIResizeEvent : UIEvent {}

// tab按键
public struct UITabKeyEvent : UIEvent { }
// enter按键
public struct UIEnterKeyEvent : UIEvent { }
// @按键
public struct UIAtKeyEvent : UIEvent { }
// ESC按键
public struct UIEscKeyEvent : UIEvent { }

// 向X拖拽
public struct UIDragUpEvent : UIEvent { }
public struct UIDragDownEvent : UIEvent { }
public struct UIDragLeftEvent : UIEvent { }
public struct UIDragRightEvent : UIEvent { }

// 拖拽中
public struct UIButtonDragEvent : UIEvent
{
    double rel_x;
    double rel_y;
    double delta_x;
    double delta_y;
    double abs_x;
    double abs_y;
}
// 拖拽开始
public struct UIButtonDragBeginEvent : UIButtonDragEvent { }
// 拖拽结束
public struct UIButtonDragEndEvent : UIButtonDragEvent { }

public struct UIFingerDragEvent : UIEvent
{
    double rel_x;
    double rel_y;
    double delta_x;
    double delta_y;
    double abs_x;
    double abs_y;
    string finger_key;
    bool is_sfc;
}
// 拖拽开始
public struct UIFingerDragBeginEvent : UIFingerDragEvent { }
// 拖拽结束
public struct UIFingerDragEndEvent : UIFingerDragEvent { }

// 将一个控件拖拽到某个控件之上
public struct UIDropEvent: UIEvent
{
    DisplayObject drop_target;
}

protected struct UIButtonEvent : UIEvent
{
    double abs_x;
    double abs_y;
    double rel_x;
    double rel_y;
    int count;
    bool is_drag;       // 是否有拖拽过
}
// 长按
public struct UILongButtonDownEvent : UIButtonEvent {}
// 左键按下
public struct UILButtonDownEvent : UIButtonEvent {}
// 左键弹起
public struct UILButtonUpEvent : UIButtonEvent {}
// 中键按下
public struct UIMButtonDownEvent : UIButtonEvent {}
// 中键弹起
public struct UIMButtonUpEvent : UIButtonEvent {}
// 右键按下
public struct UIRButtonDownEvent : UIButtonEvent {}
// 右键弹起
public struct UIRButtonUpEvent : UIButtonEvent {}
// 中键滚动
public struct UIMButtonWheelEvent : UIEvent
{
    double delta_x;
    double delta_y;
}

struct UIFingerEvent : UIEvent
{
    double abs_x;
    double abs_y;
    double rel_x;
    double rel_y;
    string finger_key;
    bool is_sfc;
    bool is_drag;       // 是否有拖拽过
}
// 触控按下
public struct UIFingerDownEvent : UIFingerEvent {}
// 触控弹起
public struct UIFingerUpEvent : UIFingerEvent {}

// 点击事件
public struct UIClickEvent : UIEvent
{
    bool is_drag;
}
public struct UIMClickEvent : UIClickEvent {}
public struct UIFClickEvent : UIClickEvent {}


public struct UITextInputEvent : UIEvent
{
    string text;
    bool custom;
}

struct UIKeyEvent : UIEvent
{
    int mod;
    int sym;
    int scancode;
    bool custom;
    bool handled; // 是否处理过了，用于拦截快捷键
}
public struct UIKeyDownEvent : UIKeyEvent {}
public struct UIKeyUpEvent : UIKeyEvent {}

public struct UIMouseMoveEvent : UIEvent
{
    double abs_x;
    double abs_y;
    double rel_x;
    double rel_y;
}

// 从窗口外部拖拽文件进来
public struct UIDropFileEvent : UIEvent
{
    string path;
}

// 系统选择文件完毕
public struct UISystemSelectFileEvent : UIEvent
{
    string path;    
}

// 系统选择文件夹
public struct UISystemSelectDirectoryEvent : UIEvent
{
    string path;    
}

// 系统保存文件，而选择的文件完毕
public struct UISystemSaveFileEvent : UIEvent
{
    string path;    
}

using UIEventCallbackValue = Map<Functor<(any, UIEvent)>, bool>;
using UIEventCallbackTable = Map<any, UIEventCallbackValue>;

public class UIEventDispatcher
{
    protected Map<any, DisplayObject> _trans_target;
    // 侦听对象，保存所有侦听这个控件的逻辑对象，以及它们的回调函数
    protected Map<string, UIEventCallbackTable> _listeners;
    // 是否禁用，如果_abs_disable为true，那么它调用DispatchEvent时什么都不做
    protected bool _abs_disabled;

    public ctor()
    {
        this._trans_target = CreateValueWeakMap();
        this._listeners = new Map<string, UIEventCallbackTable>();
        // 是否禁用，如果_abs_disable为true，那么它调用DispatchEvent时什么都不做
        this._abs_disabled = false;
    }

    // 获取事件转移对象
    public get event_trans_target() : DisplayObject
    {
        return this._trans_target["event"];
    }

    // 设置事件转移对象
    public set event_trans_target(DisplayObject value)
    {
        var old_value = this._trans_target["event"];
        if (old_value == value) return;
        this._trans_target["event"] = value;
    }

    // 获取拖拽转移对象
    public get drag_trans_target() : DisplayObject
    {
        return this._trans_target["drag"];
    }

    // 设置拖拽转移对象
    public set drag_trans_target(DisplayObject value)
    {
        var old_value = this._trans_target["drag"];
        if (old_value == value) return;
        this._trans_target["drag"] = value;
    }

    // 获取是否绝对禁用
    public get abs_disabled() : bool
    {
        return this._abs_disabled;
    }

    // 设置是否绝对禁用
    public set abs_disabled(bool value)
    {
        this._abs_disabled = value;
    }
    
    // 添加侦听对象：侦听事件类型，侦听对象，以及回调函数
    // event_type 侦听的时间类型
    // object 回调函数的对象
    // callback object的回调函数
    public fun AddEventListener<T:UIEvent>(any object, Functor<(any, T)> callback) : bool
    {
        var rflt = reflect<T>;
        return this.AddEventListenerImpl(rflt.name, object, callback);
    }
    
    // 添加监听
    protected fun AddEventListenerImpl(string event_type, any object, Functor<(any, UIEvent)> callback) : bool
    {
        if (object == null) return false;
        if (callback == null) return false;
        
        var callback_table = this._listeners[event_type];
        if (callback_table == null)
        {
            // 创建回调映射表
            callback_table = CreateKeyWeakMap();
            // 保存表
            this._listeners[event_type] = callback_table;
        }

        // 获取当前注册的函数
        var callback_value = callback_table[object];
        // 如果是空的直接赋值
        if (callback_value == null)
        {
            callback_value = new UIEventCallbackValue();
            callback_table[object] = callback_value;
        }
        callback_value[callback] = true;
        return true;
    }

    // 移除侦听对象：侦听事件类型，侦听对象
    public fun RemoveEventListener<T:UIEvent>(any object, [Nullable] Functor<(any, T)> callback)
    {
        var rflt = reflect<T>;
        
        var callback_table = this._listeners[rflt.name];
        if (callback_table == null) return;

        // 将要删除的侦听对象置为nil
        if (callback == null)
        {
            callback_table[object] = null;
        }
        else
        {
            var callback_value = callback_table[object];
            if (callback_value == null) return;
            callback_value[callback] = null;
        }
    }

    // 清理所有侦听
    public fun ClearEventListener()
    {
        this._listeners = new Map<string, UIEventCallbackTable>();
    }
    
    // 分发事件
    public fun DispatchEvent<T:UIEvent>(T event)
    {
        var rflt = reflect<T>;
        if (event.target == null)
            event.target = cast<DisplayObject>(this);
        
        // 初始化时间目标
        var event_target = this;
        // 无条件事件转移
        if (this._trans_target["event"] != null)
            event_target = this._trans_target["event"];
        // 拖拽转移
        elseif (this._trans_target["drag"] != null)
        {
            if (rflt.name == "ALittle.UIButtonDragEvent" || rflt.name == "ALittle.UIButtonDragBeginEvent")
                event_target = this._trans_target["drag"];
            elseif (rflt.name == "ALittle.UIButtonDragEndEvent")
            {
                event_target = this._trans_target["drag"];
                A_UISystem.focus = this._trans_target["drag"];
            }
        }
        
        // 如果是禁用状态，那么就什么都不做
        if (event_target._abs_disabled) return;
        
        // 根据事件类型，获得所有侦听者
        var callback_table = event_target._listeners[rflt.name];
        // 检查event的type属性，如果没有则什么都不做。所以每个event必须要有一个type属性
        if (callback_table == null) return;
        // 遍历所有侦听者
        for (var object, callback_value in callback_table)
        {
            // 依次调用它们的回调函数
            for (var func, _ in callback_value)
            {
                [Language(Lua)]
                func(object, event);
                [Language(JavaScript)]
                cast<javascript.Function>(func).call(object, event);
            }
        }
    }
}