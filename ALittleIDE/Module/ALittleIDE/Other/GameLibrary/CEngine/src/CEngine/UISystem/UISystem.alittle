
namespace ALittle;

private var __abs = Math_Abs;

struct FingerInfo
{
    string key;                     // 当前触屏操作的唯一ID
    double mouse_x;                 // 当前位置
    double mouse_y;
    double last_mouse_x;            // 上次位置
    double last_mouse_y;
    bool dl;                        // 是否处于拖动
    DisplayObject mfc;              // 焦点控件
    double mfc_rel_x;               // 焦点控件的相对位置
    double mfc_rel_y;
    bool is_sfc;                  // 焦点控件是否是焦点控件
}

class UISystem
{
    private int         _view_width;
    private int         _view_height;

    private double      _mouse_x;
    private double      _mouse_y;
    private double      _last_mouse_x;
    private double      _last_mouse_y;
    private bool        _lbutton_down;
    private int 		_lbutton_count;
    private int         _lbutton_finger_id;
    private int         _lbutton_touch_id;

    private DisplayObject   _mfc;
    private double          _mfc_rel_x;
    private double          _mfc_rel_y;

    private DisplayObject   _mfd;
    private DisplayObject   _sfc;
    private DisplayObject   _wfc;
    private DisplayObject   _pfc;
    private string          _button_type;
    private bool            _sl;
    private bool            _dl;
    private double          _dl_delta_x;
    private double          _dl_delta_y;
    private double          _max_dl_delta;
    private double          _max_lp_delta;

    private bool    _ime_editing;
    // 参数：open开关，text正在编辑的文本，start光标偏移，list候选字符串列表, target目标控件
    private Functor<(bool, string, int, List<string>, DisplayObject)>   _ime_editing_callback;

    // 退出通知回调
    private Functor<():bool> _quit_callback;

    private Map<int, bool>              _sym_map;
    private Functor<(int, int, int)>    _keydown_callback;
    private Functor<(int, int, int)>    _keyup_callback;
    private Functor<(int, int)>         _view_resize_callback;
    private LoopFunction                _long_press;
    private Map<string, FingerInfo>     _finger_info;

    public ctor()
    {
        // 窗口大小
        this._view_width = 0;
        this._view_height = 0;
    
        // 记录当前上次鼠标的位置
        this._mouse_x = 0;
        this._mouse_y = 0;
        this._last_mouse_x = 0;
        this._last_mouse_y = 0;
    
        this._lbutton_down = false;
        this._lbutton_count = 0;
        this._lbutton_finger_id = null;
        this._lbutton_touch_id = null;
    
        this._mfc = null;        // 移动焦点控件，用于记录当前鼠标移动到的控件上面，这个控件就是移动焦点控件
        this._mfc_rel_x = 0;    // 移动焦点控件本地空间的鼠标相对位置
        this._mfc_rel_y = 0; // 移动焦点控件本地空间的鼠标相对位置
        this._mfd = null;        // 移动焦点对话框
        this._sfc = null;        // 选中焦点控件，用于记录当前的焦点控件（比如被鼠标点击了，或者tab键选中了）
        this._wfc = null;        // 滚动焦点控件，用于记录当前鼠标滚轮滚动的控件
        this._pfc = null;       // 拾取焦点控件，用于处理拾取，拖放操作
        this._button_type = null;    // 当前按下的鼠标按键类型
        this._sl = false;    // 是否锁定焦点控件，当控件被鼠标按下但未被释放的时候，控件是属于锁定状态
        this._dl = false;    // 是否正在拖拽控件，当控件被鼠标按下并被拖动，控件就属于拖拽状态
        this._dl_delta_x = 0; // 用于累计开始拖拽的长度，有的手机屏幕太灵敏，导致点击产生拖动
        this._dl_delta_y = 0; // 用于累计开始拖拽的长度，有的手机屏幕太灵敏，导致点击产生拖动
    
        this._max_dl_delta = 10; // 拖拽灵敏度处理
        this._max_lp_delta = 2; // 长按灵敏度处理
        if (System_GetPlatform() == "Windows")
        {
            this._max_dl_delta = 1;
            this._max_lp_delta = 0;
        }
    
        this._ime_editing = false; // 当前IME（就是输入法）是否正在编辑
        this._ime_editing_callback = null; // 参数：open开关，text正在编辑的文本，start光标偏移，list候选字符串列表, target目标控件
    
        // 按键映射表
        this._sym_map = new Map<int, bool>();
        // 无条件侦听回调
        this._keydown_callback = null;
        this._keyup_callback = null;
        // 当总窗口发生过变化后调用的回调
        this._view_resize_callback = null;
        // 长按动画
        this._long_press = null;
    
        // 多点触控数据
        this._finger_info = new Map<string, FingerInfo>();
    }
    
    // 注册窗口大小发生变化后回调函数
    public set view_resize_callback(Functor<(int, int)> value)
    {
        this._view_resize_callback = value;
    }
    
    public get view_resize_callback() : Functor<(int, int)>
    {
        return this._view_resize_callback;
    }

    // 注册键盘回调函数，参数为mod, sym, scancode
    public set keydown_callback(Functor<(int, int, int)> value)
    {
        this._keydown_callback = value;
    }
    public get keydown_callback() : Functor<(int, int, int)>
    {
        return this._keydown_callback;
    }
    public set keyup_callback(Functor<(int, int, int)> value)
    {
        this._keyup_callback = value;
    }
    public get keyup_callback() : Functor<(int, int, int)>
    {
        return this._keyup_callback;
    }

    // 退出通知回调
    public set quit_callback(Functor<():bool> value)
    {
        this._quit_callback = value;
    }
    public get quit_callback() : Functor<():bool>
    {
        return this._quit_callback;
    }

    // 获取按下的按键映射表
    public get sym_map() : Map<int, bool>
    {
        return this._sym_map;
    }

    // 注册输入法回调函数
    public set ime_callback(Functor<(bool, string, int, List<string>, DisplayObject)> value)
    {
        this._ime_editing_callback = value;
    }
    public get ime_callback() : Functor<(bool, string, int, List<string>, DisplayObject)>
    {
        return this._ime_editing_callback;
    }
    // 获取当前鼠标位置
    public get mouse_x() : double
    {
        return this._mouse_x;
    }
    public get mouse_y() : double
    {
        return this._mouse_y;
    }

    // 设置焦点
    public set focus(DisplayObject control)
    {
        if (this._sfc == control)
            return;
        // 设置滚动焦点为空
        this._wfc = null;
    
        // 如果当前有选中焦点控件
        if (this._sfc != null)
        {
            // 如果当前正在拖拽
            if (this._dl == true)
            {
                // 标记为不是正在拖拽
                this._dl = false;
                this._dl_delta_x = 0;
                this._dl_delta_y = 0;
                // 向选中焦点控件发送拖拽结束事件
                if (this._button_type == "ALittle.UILButtonDownEvent")
                {
                    var event = new UIButtonDragEndEvent();
                    event.target = this._sfc;
                    event.rel_x = this._mfc_rel_x;
                    event.rel_y = this._mfc_rel_y;
                    // 如果选中焦点，已经不是移动焦点，那么就重新计算相对位置
                    if (this._mfc != this._sfc)
                        event.rel_x, event.rel_y = this._sfc.GlobalToLocalMatrix2D(this._mouse_x, this._mouse_y);

                    event.delta_x = this._mouse_x - this._last_mouse_x;
                    event.delta_y = this._mouse_y - this._last_mouse_y;
                    event.abs_x = this._mouse_x;
                    event.abs_y = this._mouse_y;
                    this._sfc.DispatchEvent(event);
                }
            }
            // 这里先把控件取出来，把焦点控件设置为空
            // 然后向像焦点控件发送FOCUSOUT，避免出现死循环
            var sfc = this._sfc;
            // 关闭IMS
            if (this._ime_editing_callback != null)
                this._ime_editing_callback(false, null, null, null, null);

            // 将选中焦点设置为空
            this._sfc = null;
            // 标记为不锁定焦点控件
            this._sl = false;
            // 向选中焦点控件发送失去焦点事件
            sfc.DispatchEvent(new UIFocusOutEvent());
        }
    
        this._sfc = control;
        if (this._sfc != null)
        {
            // 向选中焦点控件发送获得焦点事件
            this._sfc.DispatchEvent(new UIFocusInEvent());
        }
    }

    // 获取焦点控件
    public get focus() : DisplayObject
    {
        return this._sfc;
    }

    // 设置拾取焦点控件
    public set pick(DisplayObject control)
    {
        if (this._pfc != null)
            A_LayerManager.RemoveFromTip(this._pfc);
        this._pfc = control;
        if (this._pfc != null)
            A_LayerManager.AddToTip(this._pfc);
    }
    
    // 获取拾取焦点控件
    public get pick() : DisplayObject
    {
        return this._pfc;
    }
    
    // 获取窗口宽高
    public get view_width() : int
    {
        return this._view_width;
    }
    public get view_height() : int
    {
        return this._view_height;
    }
    
    // 处理鼠标移动事件
    public fun HandleMouseMoved(double x, double y) : bool
    {
        // 计算偏移值
        var delta_x = x - this._mouse_x;
        var delta_y = y - this._mouse_y;
    
        // 记录当前的鼠标位置
        this._last_mouse_x = this._mouse_x;
        this._last_mouse_y = this._mouse_y;
        this._mouse_x = x;
        this._mouse_y = y;
    
        // 如果正在检测长按，则过滤由于灵敏度导致的误差
        if (this._long_press != null && __abs(delta_x) <= this._max_lp_delta && __abs(delta_y) <= this._max_lp_delta)
            return false;

        if (this._long_press != null)
        {
            this._long_press.Stop();
            this._long_press = null;
        }
    
        if (this._pfc != null)
        {
            this._pfc.x += delta_x;
            this._pfc.y += delta_y;
        }
    
        // 检查是否锁定控件，如果锁定了，那么就是在拖动控件
        if (this._sl && this._button_type == "ALittle.UILButtonDownEvent")
        {
            // 发送拖拽事件
            if (this._dl == true)
            {
                var event = new UIButtonDragEvent();
                event.target = this._sfc;

                event.rel_x, event.rel_y = this._sfc.GlobalToLocalMatrix2D(x, y);
                if (this._dl_delta_x > 0)
                {
                    delta_x = this._dl_delta_x + delta_x;
                    this._dl_delta_x = 0;
                }
                if (this._dl_delta_y > 0)
                {
                    delta_y = this._dl_delta_y + delta_y;
                    this._dl_delta_y = 0;
                }
                event.abs_x = x;
                event.abs_y = y;
                event.delta_x = delta_x;
                event.delta_y = delta_y;
                this._sfc.DispatchEvent(event);
                return true;
            }
            // 检查是否正在拖拽
            if (this._dl == false)
            {
                this._dl_delta_x += delta_x;
                this._dl_delta_y += delta_y;
                if (__abs(this._dl_delta_x) >= this._max_dl_delta || __abs(this._dl_delta_y) >= this._max_dl_delta)
                {
                    this._dl = true;
                    var event = new UIButtonDragBeginEvent();
                    event.target = this._sfc;
                    // 计算之前的鼠标位置，作为拖拽开始
                    var mouse_x = x - delta_x;
                    var mouse_y = y - delta_y;
                    event.rel_x, event.rel_y = this._sfc.GlobalToLocalMatrix2D(mouse_x, mouse_y);
                    event.abs_x = mouse_x;
                    event.abs_y = mouse_y;
                    event.delta_x = 0;
                    event.delta_y = 0;
                    this._sfc.DispatchEvent(event);
                }
            }
            // 这里直接返回，因为在拖动，所以不需要检查新的移动焦点控件
            return true;
        }
        // 更新移动焦点控件，由于鼠标移动了，所以要获取新的移动焦点控件
        this.UpdateMoveFocus(x, y);
        return this._mfc != null;
    }
    
    // 处理鼠标左键按下事件
    public fun HandleLButtonDown(double x, double y, int count) : bool
    {
        this._lbutton_down = true;
        this._lbutton_count = count;
        this._lbutton_finger_id = null;
        this._lbutton_touch_id = null;
        return this.HandleButtonDown{UILButtonDownEvent}(x, y, count);
    }
    
    // 处理鼠标左键弹起事件
    public fun HandleLButtonUp(double x, double y) : bool
    {
        this._lbutton_down = false;
        return this.HandleButtonUp{UILButtonUpEvent}(x, y, this._lbutton_count);
    }
    
    public fun HandleMButtonDown(double x, double y, int count) : bool
    {
        return this.HandleButtonDown{UIMButtonDownEvent}(x, y, count);
    }
    
    public fun HandleMButtonUp(double x, double y) : bool
    {
        return this.HandleButtonUp{UIMButtonUpEvent}(x, y, 1);
    }

    public fun HandleButtonDown<T:UIButtonEvent>(double x, double y, int count) : bool
    {
        var rflt = reflect<T>;
        
        // 设置滚动焦点为空
        this._wfc = null;
        // 同时发送给层管理器
        A_LayerManager.HandleLRButtonDown(x, y);
        // 获取相对移动焦点控件的坐标
        // 更新移动焦点控件
        this.UpdateMoveFocus(x, y);
        // 如果有移动焦点控件
        if (this._mfc != null)
        {
            // 标记锁定焦点控件（移动焦点控件被鼠标按下了，所以被锁定）
            this._sl = true;
            // 则向控件发送鼠标左键点击事件
            this._button_type = rflt.name;
            if (this._pfc != null && rflt.name == "ALittle.UILButtonDownEvent")
            {
                var event = new UIDropEvent();
                event.target = this._mfc;
                event.drop_target = this._pfc;
                this._mfc.DispatchEvent(event);
                A_LayerManager.RemoveFromTip(this._pfc);
                this._pfc = null;
            }
            // 把对话框置顶
            if (this._mfd != null)
            {
                var layer = this._mfd.show_parent; // 取出对话框所在层
                layer.SetChildIndex(this._mfd, layer.child_count);
            }

            var event = new T();
            event.target = this._mfc;
            event.abs_x = x;
            event.abs_y = y;
            event.rel_x = this._mfc_rel_x;
            event.rel_y = this._mfc_rel_y;
            event.count = count;
            event.is_drag = false;
            this._mfc.DispatchEvent(event);
    
            // 添加长按定时
            if (rflt.name == "ALittle.UILButtonDownEvent")
            {
                if (this._long_press != null)
                    this._long_press.Stop();
                var long_event = new UILongButtonDownEvent();
                long_event.target = this._mfc;
                long_event.abs_x = x;
                long_event.abs_y = y;
                long_event.rel_x = this._mfc_rel_x;
                long_event.rel_y = this._mfc_rel_y;
                long_event.is_drag = false;
                this._long_press = new LoopFunction(bind(UISystem.DispatchLongButtonEvent, this._mfc, long_event), 1, 500, 1);
                this._long_press.Start();
            }
    
            // 如果当前的选中焦点控件为空
            if (this._sfc == null)
            {
                // 将移动焦点控件设置为选中焦点控件
                this._sfc = this._mfc;
                // 向选中焦点控件发送获得焦点事件
                this._sfc.DispatchEvent(new UIFocusInEvent());
                // 如果当前有选中焦点，并且不是当前的移动焦点控件
            }
            elseif (this._mfc != this._sfc)
            {
                // 向选中焦点控件发送失去焦点事件
                this._sfc.DispatchEvent(new UIFocusOutEvent());
                // 关闭IME
                if (this._ime_editing_callback != null)
                    this._ime_editing_callback(false, null, null, null, null);
                // 将移动焦点控件设置为选中焦点控件
                this._sfc = this._mfc;
                // 向选中焦点控件发送获得焦点事件
                this._sfc.DispatchEvent(new UIFocusInEvent());
            }
            return true;    
        }
        // 如果没有移动焦点控件，说明现在的鼠标什么都没点到
        else
        {
            // 如果当前有选中焦点控件
            if (this._sfc != null)
            {
                // 向选中焦点控件发送失去焦点事件
                this._sfc.DispatchEvent(new UIFocusOutEvent());
                // 关闭IME
                if (this._ime_editing_callback != null)
                    this._ime_editing_callback(false, null, null, null, null);
                // 将选中焦点设置为空
                this._sfc = null;
                // 标记为不锁定焦点控件
                this._sl = false;
            }
        }
        return false;
    }
    
    private static DispatchLongButtonEvent(UIEventDispatcher mfc, UILongButtonDownEvent event)
    {
        mfc.DispatchEvent(event);
    }

    public fun HandleButtonUp<T:UIButtonEvent>(double x, double y, int count) : bool
    {
        // 如果当前没有锁定选中焦点控件（说明现在鼠标什么都没点到），则直接返回
        if (this._sl == false)
            return false;

        if (this._long_press != null)
        {
            this._long_press.Stop();
            this._long_press = null;
        }
        // 标记为不锁定焦点控件（因为这个时候鼠标已经释放了左键）
        this._sl = false;
        // 计算相对位置
        var rel_x, rel_y = this._sfc.GlobalToLocalMatrix2D(x, y);
    
        // 如果当前正在拖拽
        var save_dl = this._dl;
        if (this._dl == true)
        {
            // 标记为不是正在拖拽
            this._dl = false;
            this._dl_delta_x = 0;
            this._dl_delta_y = 0;
            // 向选中焦点控件发送拖拽结束事件
            var event = new UIButtonDragEndEvent();
            event.target = this._sfc;
            event.abs_x = x;
            event.abs_y = y;
            event.delta_x = this._mouse_x - this._last_mouse_x;
            event.delta_y = this._mouse_y - this._last_mouse_y;
            event.rel_x = rel_x;
            event.rel_y = rel_y;
            this._sfc.DispatchEvent(event);
        }
        // 向选中焦点控件发送鼠标弹起事件
        if (this._sfc != null)
        {
            var event = new T();
            event.target = this._sfc;
            event.abs_x = x;
            event.abs_y = y;
            event.rel_x = rel_x;
            event.rel_y = rel_y;
            event.is_drag = save_dl;
            event.count = count;
            this._sfc.DispatchEvent(event);
        }
        // 更新移动焦点控件
        this.UpdateMoveFocus(x, y);
        return this._mfc != null;
    }
    
    public fun HandleRButtonDown(double x, double y, int count) : bool
    {
        // 同时发送给层管理器
        A_LayerManager.HandleLRButtonDown(x, y);
        if (this._sl) return false;
        // 相对于移动焦点控件的相对坐标
        // 更新移动焦点控件
        this.UpdateMoveFocus(x, y);
        // 如果有移动焦点控件
        if (this._mfc != null)
        {
            var event = new UIRButtonDownEvent();
            event.target = this._mfc;
            event.abs_x = x;
            event.abs_y = y;
            event.rel_x = this._mfc_rel_x;
            event.rel_y = this._mfc_rel_y;
            event.count = count;
            event.is_drag = false;
            // 则向控件发送鼠标右键点击事件（这个消息一般用于触发显示右键菜单）
            this._mfc.DispatchEvent(event);
            return true;
        }
        return false;
    }
    
    public fun HandleRButtonUp(double x, double y) : bool
    {
        return false;
    }
    
    public fun HandleTextInput(string text) : bool
    {
        this._ime_editing = false;
        if (this._ime_editing_callback != null)
            this._ime_editing_callback(false, null, null, null, null);
        // 如果当前有选中焦点
        if (this._sfc != null)
        {
            var event = new UITextInputEvent();
            event.target = this._sfc;
            event.text = text;
            // 向焦点控件发送文本输入事件
            this._sfc.DispatchEvent(event);
            return true;
        }
        return false;
    }
    
    public fun HandleTextEditing(string text, int start)
    {
        // 如果当前输入法的编辑框字符串长度不为0，那么就是属于输入法编辑状态
        if (text == "")
        {
            if (this._ime_editing == false) return;
            this._ime_editing = false;
            if (this._ime_editing_callback != null)
                this._ime_editing_callback(false, null, null, null, null);
        }
        else
        {
            this._ime_editing = true;
            if (this._sfc == null || this._sfc.is_input == false
                    || this._sfc.editable == false || this._sfc.font_size == null)
                return;
    
            if (this._ime_editing_callback != null)
            {
                var list = String_Split(System_GetIMESelectList(), " ");
                var new_list = new List<string>();
                var count = 0;
                for (var index, value in list)
                {
                    if (value != "")
                    {
                        ++count;
                        new_list[count] = value;
                    }
                }
                this._ime_editing_callback(true, text, start, new_list, this._sfc);
                System_SetIMEPos(System_GetScreenWidth(), System_GetScreenHeight());
            }
            else
            {
                var abs_x, abs_y = this._sfc.LocalToGlobal();
                abs_x += this._sfc.cursor_x;
                abs_y += (this._sfc.cursor_y + this._sfc.font_size) * this._sfc.scale_y;
                System_SetIMEPos(Math_Floor(abs_x), Math_Floor(abs_y));
            }
        }
    }
    
    // 处理键盘按键按下事件
    public fun HandleKeyDown(int mod, int sym, int scancode)
    {
        // 保存按键
        this._sym_map[sym] = true;
        // 如果当前有选中焦点，并且输入法不是在编辑状态
        if (System_GetIMESelectList() == "" && this._ime_editing)
        {
            this._ime_editing = false;
            if (this._ime_editing_callback != null)
                this._ime_editing_callback(false, null, null, null, null);
            return;
        }
        
        // 向焦点控件发送键盘按键事件
        var event = new UIKeyDownEvent();
        event.target = this._sfc;
        event.mod = mod;
        event.sym = sym;
        event.scancode = scancode;
        if (this._sfc != null && this._ime_editing == false)
            this._sfc.DispatchEvent(event);

        // 执行按键按下
        if (!event.handled && this._ime_editing == false && this._keydown_callback != null)
            this._keydown_callback(mod, sym, scancode);
    }
    
    public fun HandleKeyUp(int mod, int sym, int scancode)
    {
        // 清理按键
        this._sym_map[sym] = null;

        // 向焦点控件发送键盘按键事件
        var event = new UIKeyUpEvent();
        event.target = this._sfc;
        event.mod = mod;
        event.sym = sym;
        event.scancode = scancode;
        if (this._sfc != null && this._ime_editing == false)
            this._sfc.DispatchEvent(event);

        // 执行按键弹起
        if (this._ime_editing == false && this._keyup_callback != null)
            this._keyup_callback(mod, sym, scancode);
    }
    
    // 处理鼠标滚轮事件
    public fun HandleMouseWheel(double x, double y) : bool
    {
        // 没有焦点控件，或者控件属于锁定状态，直接返回
        if (this._mfc == null)
            return false;

        // 检查是否有现成的滚动焦点
        if (this._wfc == null)
        {
            var control = this._mfc;
            while (control != null)
            {
                if (control.can_scroll == true)
                {
                    this._wfc = control;
                    break;
                }
                control = control.show_parent;
            }
        }
        // 构建事件
        if (this._wfc != null)
        {
            var event = new UIMButtonWheelEvent();
            event.target = this._wfc;
            event.delta_x = x;
            event.delta_y = y;
            this._wfc.DispatchEvent(event);
        }
        // 如果没有处理，返回true
        return true;
    }
    
    // 更新移动焦点控件
    public fun UpdateMoveFocus(double x, double y)
    {
        // 移动焦点控件
        var mfc:DisplayObject;
        // 移动焦点对话框
        var mfd:DisplayLayout;
        mfc, mfd, this._mfc_rel_x, this._mfc_rel_y = A_LayerManager.PickUp(x, y);

        // 保存移动焦点对话框
        this._mfd = mfd;
        // 如果计算得到的移动焦点控件就是当前的移动焦点控件
        if (this._mfc == mfc)
        {
            // 发送鼠标移动事件
            if (mfc != null)
            {
                var event = new UIMouseMoveEvent();
                event.target = mfc;
                event.abs_x = x;
                event.abs_y = y;
                event.rel_x = this._mfc_rel_x;
                event.rel_y = this._mfc_rel_y;
                mfc.DispatchEvent(event);
            }
            return;
        }
    
        // 发送鼠标移出事件
        if (this._mfc != null)
            this._mfc.DispatchEvent(new UIMoveOutEvent());
    
        // 发送鼠标移入事件
        if (mfc != null)
            mfc.DispatchEvent(new UIMoveInEvent());
    
        // 保存新的移动焦点控件和移动焦点对话框
        this._mfc = mfc;
        this._wfc = null;
    }
    
    // 处理窗口大小变化
    public fun HandleViewResized(int width, int height)
    {
        if (this._view_width == width && this._view_height == height)
            return;

        this._view_width = width;
        this._view_height = height;
        A_LayerManager.HandleViewResized(width, height);
        if (this._view_resize_callback != null)
            this._view_resize_callback(width, height);
    }
    
    // 处理文件拖拽事件
    public fun HandleDropFile(string path)
    {
        var x = System_GetCursorX();
        var y = System_GetCursorY();

        this.HandleMouseMoved(x, y);

        if (this._mfc == null) return;
        
        var event = new UIDropFileEvent();
        event.target = this._mfc;
        event.path = path;
        this._mfc.DispatchEvent(event);
    }
    
    // 处理鼠标移出窗口
    public fun HandleWindowEnter()
    {
    }

    // 处理鼠标移入窗口
    public fun HandleWindowLeave()
    {
        if (this._lbutton_down)
            this.HandleLButtonUp(this._mouse_x, this._mouse_y);
    }

    // 处理退出
    public fun HandleQuit()
    {
        if (this._quit_callback != null && !this._quit_callback()) return;

        System_Exit();
    }
    
    // 处理多点触控按下，如果Mouse左键事件都没有按下去，那么把这个触控定义为鼠标事件
    public fun HandleFingerDown(double x, double y, int finger_id, int touch_id) : bool
    {
        if (this._lbutton_down == false)
        {
            this._lbutton_down = true;
            this._lbutton_count = 1;
            this._lbutton_finger_id = finger_id;
            this._lbutton_touch_id = touch_id;
            this._mouse_x = x;
            this._mouse_y = y;
            return this.HandleButtonDown{UILButtonDownEvent}(x, y, 1);
        }
    
        // 计算key
        var key = finger_id .. "_" .. touch_id;
        // 构建信息
        var info = new FingerInfo();
        info.key = key;
    
        // 保存位置
        info.mouse_x = x;
        info.mouse_y = y;
        info.last_mouse_x = 0;
        info.last_mouse_y = 0;
        info.dl = false;
        info.mfc = null;
        info.mfc_rel_x = 0;
        info.mfc_rel_y = 0;
        info.is_sfc = false;

        // 移动焦点对话框
        var mfd:DisplayLayout;

        // 拾取
        info.mfc, mfd, info.mfc_rel_x, info.mfc_rel_y = A_LayerManager.PickUp(x, y);
        // 如果没有选中控件，那么就直接返回，什么都不做
        if (info.mfc == null)
            return false;
        // 判定是否跟当前锁定焦点一致
        info.is_sfc = (this._sl && (info.mfc == this._mfc || info.mfc == this._sfc));
    
        // 发送按下事件
        var event = new UIFingerDownEvent();
        event.target = info.mfc;
        event.abs_x = x;
        event.abs_y = y;
        event.rel_x = info.mfc_rel_x;
        event.rel_y = info.mfc_rel_y;
        event.finger_key = info.key;
        event.is_sfc = info.is_sfc;
        event.is_drag = false;
        info.mfc.DispatchEvent(event);
    
        // 保存信息
        this._finger_info[key] = info;
        return true;
    }
    
    // 处理多点触控弹起
    public fun HandleFingerUp(double x, double y, int finger_id, int touch_id) : bool
    {
        if (this._lbutton_down && this._lbutton_finger_id == finger_id && this._lbutton_touch_id == touch_id)
        {
            this._lbutton_down = false;
            return this.HandleButtonUp{UILButtonUpEvent}(x, y, this._lbutton_count);
        }
        // 计算key
        var key = finger_id .. "_" .. touch_id;
        // 获取信息
        var info = this._finger_info[key];
        // 如果没有则直接返回
        if (info == null)
            return false;
        // 直接清空
        this._finger_info[key] = null;
    
        // 记录当前的鼠标位置
        info.last_mouse_x = info.mouse_x;
        info.last_mouse_y = info.mouse_y;
        info.mouse_x = x;
        info.mouse_y = y;
    
        // 如果当前正在拖拽
        var save_dl = info.dl;
        if (info.dl == true)
        {
            info.dl = false;
            var event = new UIFingerDragEndEvent();
            event.target = info.mfc;
            event.abs_x = x;
            event.abs_y = y;
            event.rel_x = info.mfc_rel_x;
            event.rel_y = info.mfc_rel_y;
            event.delta_x = info.mouse_x - info.last_mouse_x;
            event.delta_y = info.mouse_y - info.last_mouse_y;
            event.finger_key = key;
            event.is_sfc = info.is_sfc;
            // 向选中焦点控件发送拖拽结束事件
            info.mfc.DispatchEvent(event);
        }

        var event = new UIFingerUpEvent();
        event.target = info.mfc;
        event.abs_x = x;
        event.abs_y = y;
        event.rel_x = info.mfc_rel_x;
        event.rel_y = info.mfc_rel_y;
        event.finger_key = info.key;
        event.is_sfc = info.is_sfc;
        event.is_drag = save_dl;
        // 向选中焦点控件发送鼠标弹起事件
        info.mfc.DispatchEvent(event);
        return true;
    }
    // 处理多点触控移动
    public fun HandleFingerMoved(double x, double y, int finger_id, int touch_id) : bool
    {
        if (this._lbutton_down && this._lbutton_finger_id == finger_id && this._lbutton_touch_id == touch_id)
            return this.HandleMouseMoved(x, y);

        // 计算key
        var key = finger_id .. "_" .. touch_id;
        // 获取信息
        var info = this._finger_info[key];
        // 如果没有则直接返回
        if (info == null)
            return false;
    
        // 计算偏移值
        var delta_x = x - info.mouse_x;
        var delta_y = y - info.mouse_y;
        // 记录当前的鼠标位置
        info.last_mouse_x = info.mouse_x;
        info.last_mouse_y = info.mouse_y;
        info.mouse_x = x;
        info.mouse_y = y;
    
        if (info.mfc != null)
            info.mfc_rel_x, info.mfc_rel_y = info.mfc.GlobalToLocalMatrix2D(x, y);
    
        // 发送拖拽事件
        if (info.dl == true)
        {
            var event = new UIFingerDragEvent();
            event.target = info.mfc;
            event.delta_x = delta_x;
            event.delta_y = delta_y;
            event.abs_x = x;
            event.abs_y = y;
            event.rel_x = info.mfc_rel_x;
            event.rel_y = info.mfc_rel_y;
            event.finger_key = info.key;
            event.is_sfc = info.is_sfc;
            info.mfc.DispatchEvent(event);
            return true;
        }
        // 检查是否正在拖拽
        if (info.dl == false)
        {
            info.dl = true;
            var event = new UIFingerDragBeginEvent();
            event.target = info.mfc;
            event.delta_x = delta_x;
            event.delta_y = delta_y;
            event.abs_x = x;
            event.abs_y = y;
            event.rel_x = info.mfc_rel_x;
            event.rel_y = info.mfc_rel_y;
            event.finger_key = info.key;
            event.is_sfc = info.is_sfc;
            info.mfc.DispatchEvent(event);
            // 这里直接返回，因为在拖动，所以不需要检查新的移动焦点控件
            return true;
        }

        return false;
    }
}

public var A_UISystem = new UISystem();
