
namespace ALittle;

// 文件加载器
[Language(Lua)]
public class LuaClientFileLoader : IFileLoader
{
    public fun Load(string file_path) : string
    {
        var file = new carp.CarpLocalFile();
        file.SetPath(file_path);
        if (!file.Load(false)) return null;
        var content = file.GetContent();
        file.Clear();
        return content;
    }
}

// 文件保存器
[Language(Lua)]
public class LuaClientFileSaver : IFileSaver
{
    public fun Save(string file_path, string content) : bool
    {
        return File_SaveFile(file_path, content, -1);
    }
}

// 文件加载器
[Language(JavaScript)]
public class JClientFileLoader : IFileLoader
{
    public fun Load(string file_path) : string
    {
        // 先从cookie获取，如果没有就随机生成一个
        var content:string = null;
        var json:Map<string, any> = null;
        if (document.cookie != null && document.cookie != "")
        {
            var error:string = null;
            error, json = tcall(ALittle.String_JsonDecode, document.cookie);
            if (error != null) json = null;
        }
        if (json == null) return null;
        return json[file_path];
    }
}

// 文件保存期
[Language(JavaScript)]
public class JClientFileSaver : IFileSaver
{
    public fun Save(string file_path, string content) : bool
    {
        // 如果是微信环境，那么不能保存cookie
        if (window.wx != null) return false;

        // 先从cookie获取，如果没有就随机生成一个
        var json:Map<string, any> = null;
        if (document.cookie != null && document.cookie != "")
        {
            var error:string = null;
            error, json = tcall(ALittle.String_JsonDecode, document.cookie);
            if (error != null) json = null;
        }
        if (json == null) json = new Map<string, any>();
        json[file_path] = content;
        document.cookie = ALittle.String_JsonEncode(json);
        return true;
    }
}

public static CreateConfigSystem(string file_path, [Nullable] bool print_error) : IJsonConfig
{
    [Language(Lua)]
    return new JsonConfig<LuaClientFileLoader, LuaClientFileSaver>(file_path, print_error);
    
    [Language(JavaScript)]
    return new JsonConfig<JClientFileLoader, JClientFileSaver>(file_path, print_error);
}
