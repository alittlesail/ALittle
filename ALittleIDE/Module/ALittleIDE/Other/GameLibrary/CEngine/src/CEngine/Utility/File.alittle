
namespace ALittle;

// 通用读取文件类
public class LocalFile
{
    [Language(Lua)]
    carp.CarpLocalFile _lua_file;
    [Language(JavaScript)]
    javascript.DataView _js_file;

    public fun Clear()
    {
        [Language(Lua)]
        if (this._lua_file != null)
        {
            this._lua_file.Clear();
            this._lua_file = null;
        }
        [Language(JavaScript)]
        this._js_file = null;
    }

    public fun Load(string path) : bool
    {
        this.Clear();

        [Language(Lua)]
        {
            var file = new carp.CarpLocalFile();
            file.SetPath(path);
            if (!file.Load(false)) return false;

            this._lua_file = file;
        }

        [Language(JavaScript)]
        {
            var content, buffer = JavaScript.File_LoadFile(path);
            if (content == null && buffer == null) return false;

            if (buffer == null)
                buffer = javascript.StringToUTF8Array(content).buffer;

            if (buffer == null) return false;

            this._js_file = new javascript.DataView(buffer);
        }

        return true;
    }

    public fun GetSize() : int
    {
        [Language(Lua)]
        if (this._lua_file == null) return 0;
        else return this._lua_file.GetSize();

        [Language(JavaScript)]
        if (this._js_file == null) return 0;
        else return this._js_file.byteLength;
    }

    public fun ReadChar(int offset) : int
    {
        [Language(Lua)]
        return this._lua_file.ReadChar(offset);

        [Language(JavaScript)]
        return this._js_file.getInt8(offset);
    }

    public fun ReadUChar(int offset) : int
    {
        [Language(Lua)]
        return this._lua_file.ReadUChar(offset);

        [Language(JavaScript)]
        return this._js_file.getUint8(offset);
    }

    public fun ReadShort(int offset) : int
    {
        [Language(Lua)]
        return this._lua_file.ReadShort(offset);

        [Language(JavaScript)]
        return this._js_file.getInt16(offset, true);
    }

    public fun ReadUShort(int offset) : int
    {
        [Language(Lua)]
        return this._lua_file.ReadUShort(offset);

        [Language(JavaScript)]
        return this._js_file.getUint16(offset, true);
    }

    public fun ReadInt(int offset) : int
    {
        [Language(Lua)]
        return this._lua_file.ReadInt(offset);

        [Language(JavaScript)]
        return this._js_file.getInt32(offset, true);
    }

    public fun ReadUInt(int offset) : int
    {
        [Language(Lua)]
        return this._lua_file.ReadUInt(offset);

        [Language(JavaScript)]
        return this._js_file.getUint32(offset, true);
    }

    public fun ReadFloat(int offset) : double
    {
        [Language(Lua)]
        return this._lua_file.ReadFloat(offset);

        [Language(JavaScript)]
        return this._js_file.getFloat32(offset, true);
    }

    public fun ReadDouble(int offset) : double
    {
        [Language(Lua)]
        return this._lua_file.ReadDouble(offset);

        [Language(JavaScript)]
        return this._js_file.getFloat64(offset, true);
    }

}

// 获取程序的基本文件路径
public static File_BaseFilePath() : string
{
    [Language(Lua)]
    return carp.BaseFilePath();
    [Language(JavaScript)]
    return "";
}

// 获取程序的扩展文件路径
public static File_ExternalFilePath() : string
{
    [Language(Lua)]
    return carp.ExternalFilePath();
    [Language(JavaScript)]
    return "";
}

// 复制文件
// src_path 要复制的源文件路径
// dst_path 目标文件路径
public static File_CopyFile(string src_path, string dst_path) : bool
{
    [Language(Lua)]
    return carp.CopyFile(src_path, dst_path, false);
    [Language(JavaScript)]
    return JavaScript.File_CopyFile(src_path, dst_path);
}
public static File_CopyFileFromAsset(string src_path, string dst_path) : bool
{
    [Language(Lua)]
    return carp.CopyFile(src_path, dst_path, true);
    [Language(JavaScript)]
    return JavaScript.File_CopyFile(src_path, dst_path);
}

// 把字符串保存到文件里面去
// target_path 保存的文件路径
// content 字符串内容
// size 要保存的字节数，如果填0表示content全部保存
public static File_SaveFile(string target_path, string content, int size) : bool
{
    [Language(Lua)]
    return carp.SaveFile(target_path, content, size);
    [Language(JavaScript)]
    return JavaScript.File_SaveFile(target_path, content, null);
}

// 文件MD5
public static File_Md5(string path) : string
{
    [Language(Lua)]
    return carp.FileMd5(path);

    [Language(JavaScript)]
    var content = JavaScript.File_LoadFile(path);
    [Language(JavaScript)]
    if (content == null) return "";
    [Language(JavaScript)]
    return javascript.md5(content);
}

// 深度复制文件夹
// src_path 原文件夹
// dest_path 目标文件夹
// ext 目标后缀名的文件，如果是null表示所有文件
// log 是否打印日志
public static File_CopyDeepDir(string src_path, string dest_path, [Nullable] string ext, [Nullable] bool log)
{
    [Language(Lua)]
    {
        var upper_ext:string = null;
        if (ext != null) upper_ext = lua.String.upper(ext);
    
        // 遍历源文件夹
        var file_list = carp.GetFileNameListInFolder(src_path);
        for (var index, file in file_list)
        {
            // 源文件路径
            var src_file_path = src_path .. "/" .. file;
            // 目标文件路径
            var dest_file_path = dest_path .. "/" .. file;

            if (upper_ext == null || File_GetFileExtByPathAndUpper(src_file_path) == upper_ext)
            {
                File_CopyFile(src_file_path, dest_file_path);
                if (log) Log("copy file:", src_file_path, dest_file_path);
            }
        }
        var folder_list = carp.GetFolderNameListInFolder(src_path);
        for (var index, file in folder_list)
        {
            // 源文件路径
            var src_file_path = src_path .. "/" .. file;
            // 目标文件路径
            var dest_file_path = dest_path .. "/" .. file;

            // 创建文件夹
            carp.CreateFolder(dest_file_path);
            // 开始复制
            File_CopyDeepDir(src_file_path, dest_file_path, upper_ext, log);
        }
    }

    [Language(JavaScript)]
    JavaScript.File_CopyDeepDir(src_path, dest_path, ext, log);
}

// 直接从文件读入文本，只从现有的目录里面找
// file_path 表示文件路径
// crypt_mode 表示是否执行解密
public static File_ReadTextFromFile(string file_path, [Nullable] bool crypt_mode) : string
{
    // 读取文件
    [Language(Lua)]
    {
        var file = new carp.CarpLocalFile();
        file.SetPath(file_path);
        if (file.Load(false) == false) return null;
        if (crypt_mode) file.Decrypt(null);
        var content = file.GetContent();
        file.Clear();
        return content;   
    }
    
    [Language(JavaScript)]
    {
        var content, buffer = JavaScript.File_LoadFile(file_path);
        return content;
    } 
}

// 直接把文本写入现有目录
// content 内容
// file_path 文件路径
public static File_WriteTextToFile(string content, string file_path) : bool
{
    return File_SaveFile(file_path, content, -1);
}

// 直接从文件读入Json，先从现有的目录里面找，没有的话再从Asset里面找
// file_path 表示文件路径
// crypt_mode 表示是否执行解密
public static File_ReadJsonFromFile(string file_path, [Nullable] bool crypt_mode) : any, string
{
    // 读取文件
    [Language(Lua)]
    {
        var file = new carp.CarpLocalFile();
        file.SetPath(file_path);
        if (file.Load(false) == false) return null, file_path.." load failed";
        if (crypt_mode) file.Decrypt(null);
    
        var content = file.GetContent();
        file.Clear();
        var error, new_content = tcall(lua.cjson.decode, content);
        if (error == null) return new_content, content;
        return null, new_content;
    }
    
    [Language(JavaScript)]
    return File_ReadJsonFromStdFile(file_path);
}

// 直接从Asset文件读入Json
// file_path 表示文件路径
// crypt_mode 表示是否执行解密
public static File_ReadJsonFromAsset(string file_path, bool crypt_mode) : any, string
{
    // 读取文件
    [Language(Lua)]
    {
        var file = new carp.CarpLocalFile();
        file.SetPath(file_path);
        if (file.Load(true) == false) return null, file_path.." load failed!";
        if (crypt_mode) file.Decrypt(null);
    
        var content = file.GetContent();
        file.Clear();
        var error, new_content = tcall(lua.cjson.decode, content);
        if (error == null) return new_content, content;
        return null, new_content;
    }
    
    [Language(JavaScript)]
    return File_ReadJsonFromStdFile(file_path);
}

// 直接把Json文件写入现有目录
// content table对象
// file_path 文件路径
public static File_WriteJsonToFile(any content, string file_path) : bool
{
    return File_SaveFile(file_path, lua.cjson.encode(content), -1);
}

// 删除指定时间之前的日志文件
// day_count_before 表示删除几天前的日志
public static DeleteLog(int day_count_before)
{
    [Language(Lua)]
    {
        if (day_count_before <= 0)
            return;
    
        var log_path = File_ExternalFilePath() .. "Log";
        if (File_GetFileAttr(log_path) == null)
            return;
    
        var time_table = cast<lua.dateinfo>(lua.os.date("*t"));
        time_table.day = time_table.day - day_count_before;
        var time_string = lua.os.date("%Y-%m-%d", lua.os.time(time_table))..".log";
    
        var file_list = carp.GetFileNameListInFolder(log_path);
        var delete_list = new List<string>();
        var delete_count = 0;
        for (var index, file in file_list)
        {
            if (file <= time_string)
            {
                ++ delete_count;
                delete_list[delete_count] = file;
            }
        }
        
        for (var k, v in delete_list)
            File_DeleteFile(File_ExternalFilePath() .. "Log/" .. v);
    }
}