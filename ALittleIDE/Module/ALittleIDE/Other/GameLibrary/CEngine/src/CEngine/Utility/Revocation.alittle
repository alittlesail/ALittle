
namespace ALittle;

public class RevokeObject
{
	public fun Forward() {}
	public fun Back() {}
}

public class RevokeList
{
	private List<RevokeObject> _revoke_list;
	private int _revoke_count;
	private int _revoke_index;
	private int _max_count;
    
	public ctor([Nullable] int max_count)
	{
		// 当前的撤销队列
		this._revoke_list = new List<RevokeObject>();
		this._revoke_count = 0;
		this._revoke_index = 0;
	
        if (max_count != null) max_count = 100;
		this._max_count = max_count;
	}
	
	public fun PushRevoke(RevokeObject revoke)
	{
		// 移除掉后面的撤销对象
		if (this._revoke_index < this._revoke_count)
		{
			for (var i = this._revoke_index + 1; i <= this._revoke_count; 1)
				this._revoke_list[i] = null;
			this._revoke_count = this._revoke_index;
		}
	
		this._revoke_index = this._revoke_index + 1;
		this._revoke_count = this._revoke_count + 1;
		this._revoke_list[this._revoke_index] = revoke;
	
		if (this._revoke_count > this._max_count)
		{
			this._revoke_index = this._revoke_index - 1;
			this._revoke_count = this._revoke_count - 1;
			ALittle.List_Remove(this._revoke_list, 1);
		}
	}
	
	public fun DoRevoke()
	{
		if (this._revoke_index >= this._revoke_count)
			return;
	
		this._revoke_index = this._revoke_index + 1;
		var revoke = this._revoke_list[this._revoke_index];
		revoke.Forward();
	}
	
	public fun UndoRevoke()
	{
		if (this._revoke_index == 0)
			return;
	
		var revoke = this._revoke_list[this._revoke_index];
		revoke.Back();
	
		this._revoke_index = this._revoke_index - 1;
	}
}

//////////撤销列表////////////-
public class RevokeBind : RevokeObject
{
	private List<RevokeObject> _list;
	private int _count;
	private Functor<()> _complete;

	public ctor()
	{
		this._list = new List<RevokeObject>();
		this._count = 0;
	}

	public set complete(Functor<()> value) { this._complete = value;}
	
	public fun PushRevoke(RevokeObject revoke)
	{
		++ this._count;
		this._list[this._count] = revoke;
	}

	public fun Forward()
	{
		for (var k, revoke in this._list)
			revoke.Forward();
		if (this._complete != null) this._complete();
	}
	
	public fun Back()
	{
		for (var i = this._count; i >= 1; -1)
			this._list[i].Back();
		if (this._complete != null) this._complete();
	}
}