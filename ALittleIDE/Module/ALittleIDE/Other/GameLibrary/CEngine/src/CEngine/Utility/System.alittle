
namespace ALittle;

////操作系统部分////////////////////////////////////////////////////////////////////
// 竖屏游戏比例计算
public static System_CalcPortrait(int src_width, int src_height, int flag) : int, int, int, double
{
    var scale = 1.0;
    var platform = System_GetPlatform();
    if (platform == "iOS" || platform == "Android")
    {
		var screen_width = System_GetScreenWidth();
		var screen_height  = System_GetScreenHeight();
		src_height = Math_Floor(screen_height / screen_width * src_width);
        
		flag = flag | UIEnumTypes.VIEW_FULLSCREEN;
    }
    elseif (platform == "Web")
    {
        // 如果是有resize
        if (flag & UIEnumTypes.VIEW_RESIZABLE > 0)
        {
            src_width = System_GetScreenWidth();
            src_height = System_GetScreenHeight();
        }
        else
        {
            // 比例不变，只做单纯的缩放
    	    scale = System_GetScreenHeight() / src_height;
        }
    }
    elseif (platform == "WeChat")
    {
        // 调整为屏幕的比例大小
		var screen_width = System_GetScreenWidth();
		var screen_height  = System_GetScreenHeight();
		src_height = Math_Floor(screen_height / screen_width * src_width);

        // 然后缩放
        scale = screen_width / src_width;
    }
    elseif (platform == "Windows")
    {
        if (src_height > System_GetScreenHeight())
            scale = 0.5;
    }

    return src_width, src_height, flag, scale;
}

// 横屏游戏比例计算
public static System_CalcLandscape(int src_width, int src_height, int flag) : int, int, int, double
{
    var scale = 1.0;
    var platform = System_GetPlatform();
    if (platform == "iOS" || platform == "Android")
    {
		var screen_width = System_GetScreenWidth();
		var screen_height  = System_GetScreenHeight();
		src_width = Math_Floor(screen_width / screen_height * src_height);
        
		flag = flag | UIEnumTypes.VIEW_FULLSCREEN;
    }
    elseif (platform == "Web")
    {
        // 如果是有resize
        if (flag & UIEnumTypes.VIEW_RESIZABLE > 0)
        {
            src_width = System_GetScreenWidth();
            src_height = System_GetScreenHeight();
        }
        else
        {
            // 比例不变，只做单纯的缩放
	        scale = System_GetScreenWidth() / src_width;        
        }
    }
    elseif (platform == "WeChat")
    {
        // 调整为屏幕的比例大小
		var screen_width = System_GetScreenWidth();
		var screen_height  = System_GetScreenHeight();
		src_width = Math_Floor(screen_width / screen_height * src_height);

        // 然后缩放
        scale = screen_height / src_height;
    }
    elseif (platform == "Windows")
    {
        if (src_width > System_GetScreenWidth())
            scale = 0.5;
    }

    return src_width, src_height, flag, scale;
}

// 获取平台
public static System_GetPlatform() : string
{
    [Language(Lua)]
    return __CPPAPI_System.GetPlatform();
    
    [Language(JavaScript)]
    if (window.wx != null)
        return "WeChat";
    else
        return "Web";
}

// 设置帧率
public static System_SetFPS(int fps)
{
    [Language(Lua)]
    __CPPAPI_ScheduleSystem.SetFPS(fps);
}

// 获取当前毫秒
public static System_GetCurMSTime() : int
{
    [Language(Lua)]
    return __CPPAPI_System.GetCurMSTime();

    [Language(JavaScript)]
    return javascript.Date.now();
}

// 获取设备唯一性
public static System_GetDeviceID() : string
{
    [Language(Lua)]
    return __CPPAPI_System.GetDeviceID();
    
    // 先从cookie获取，如果没有就随机生成一个
    [Language(JavaScript)]
    return JavaScript.JSystem_GetDeviceID();
}

// 获取是不是移动平台
public static System_IsPhone() : bool
{
    [Language(Lua)]
    var platform = __CPPAPI_System.GetPlatform();
    [Language(Lua)]
    return platform != "Windows" && platform != "Emscripten";
    
    [Language(JavaScript)]
    var user_agent = navigator.userAgent;
    [Language(JavaScript)]
    return String_Find(user_agent, "Android") != null
        || String_Find(user_agent, "iPhone") != null
        || String_Find(user_agent, "iPad") != null
        || String_Find(user_agent, "iPod") != null;
}

// 执行一个安装包
public static System_InstallProgram(string file_path)
{
    [Language(Lua)]
    __CPPAPI_System.InstallProgram(file_path);
}

// 获取屏幕宽度
public static System_GetScreenWidth() : int
{
    [Language(Lua)]
    return __CPPAPI_System.GetScreenWidth();
    
    [Language(JavaScript)]
    if (window.wx != null)
    {
        var info = window.wx.getSystemInfoSync();
        return info.windowWidth * info.pixelRatio;
    }
    else
        return window.innerWidth;
}
// 获取屏幕高度
public static System_GetScreenHeight() : int
{
    [Language(Lua)]
    return __CPPAPI_System.GetScreenHeight();
    
    [Language(JavaScript)]
    if (window.wx != null)
    {
        var info = window.wx.getSystemInfoSync();
        return info.windowHeight * info.pixelRatio;
    }
    else
        return window.innerHeight;
}

////调度系统部分////////////////////////////////////////////////////////////////////-
// 强制退出
public static System_ForceExit()
{
    [Language(Lua)]
    __CPPAPI_ScheduleSystem.ForceExit();
}
// 正常退出
public static System_Exit()
{
    [Language(Lua)]
    __CPPAPI_ScheduleSystem.Exit();
}
// 重启
public static System_Restart()
{
    [Language(Lua)]
    __CPPAPI_ScheduleSystem.Restart();
}

////线程部分//////////////////////////////////////////////////////////////////////
// 设置线程数
public static System_SetThreadCount(int count)
{
    [Language(Lua)]
    carp.SetThreadCount(count);
}
// 获取线程数
public static System_GetThreadCount(int thread_type) : int
{
    [Language(Lua)]
    return carp.GetThreadCount();
    [Language(JavaScript)]
    return 0;
}

////输入法部分////////////////////////////////////////////////////////////////////-
// 获取输入法候选框内容
public static System_GetIMESelectList() : string
{
    [Language(Lua)]
    return __CPPAPI_InputSystem.GetIMESelectList();

    [Language(JavaScript)]
    return "";
}
// 设置IME候选框的位置
public static System_SetIMEPos(int x, int y)
{
    [Language(Lua)]
    __CPPAPI_InputSystem.SetIMEPos(x, y);
}
// 设置IME候选框的位置，以及大小
public static System_SetIMERect(int x, int y, int w, int h)
{
    [Language(Lua)]
    __CPPAPI_InputSystem.SetIMERect(x, y, w, h);
}
// 打开IME
public static System_OpenIME()
{
    [Language(Lua)]
    __CPPAPI_InputSystem.OpenIME();
}
// 关闭IME
public static System_CloseIME()
{
    [Language(Lua)]
    __CPPAPI_InputSystem.CloseIME();
}

////光标部分////////////////////////////////////////////////////////////////////-
// 获取鼠标的位置
public static System_GetCursorX() : int
{
    [Language(Lua)]
    return __CPPAPI_InputSystem.GetCursorX();
    [Language(JavaScript)]
    return 0;
}
public static System_GetCursorY() : int
{
    [Language(Lua)]
    return __CPPAPI_InputSystem.GetCursorY();
    [Language(JavaScript)]
    return 0;
}
// 编辑光标
public static System_SetEditCursor()
{
    [Language(Lua)]
    __CPPAPI_InputSystem.SetEditCursor();
    // [Language(JavaScript)]
    // A_PixiApp.renderer.plugins.interaction.cursorStyles.default = "text";
    // [Language(JavaScript)]
    // A_PixiApp.renderer.plugins.interaction.setCursorMode("text");
}
// 普通光标
public static System_SetNormalCursor()
{
    [Language(Lua)]
    __CPPAPI_InputSystem.SetNormalCursor();

    [Language(JavaScript)]
    if (!System_IsPhone())
    {
    	A_PixiApp.renderer.plugins.interaction.cursorStyles.default = "auto";
    	A_PixiApp.renderer.plugins.interaction.setCursorMode("auto");
    }
}
// 手势光标
public static System_SetHandCursor()
{
    [Language(Lua)]
    __CPPAPI_InputSystem.SetHandCursor();

    [Language(JavaScript)]
    if (!System_IsPhone())
    {
    	A_PixiApp.renderer.plugins.interaction.cursorStyles.default = "pointer";
    	A_PixiApp.renderer.plugins.interaction.setCursorMode("pointer");
    }
}
// 水平光标
public static System_SetHDragCursor()
{
    [Language(Lua)]
    __CPPAPI_InputSystem.SetHDragCursor();

    [Language(JavaScript)]
    if (!System_IsPhone())
    {
    	A_PixiApp.renderer.plugins.interaction.cursorStyles.default = "e-resize";
    	A_PixiApp.renderer.plugins.interaction.setCursorMode("e-resize");
    }
}
// 垂直光标
public static System_SetVDragCursor()
{
    [Language(Lua)]
    __CPPAPI_InputSystem.SetVDragCursor();

    [Language(JavaScript)]
    if (!System_IsPhone())
    {
    	A_PixiApp.renderer.plugins.interaction.cursorStyles.default = "n-resize";
    	A_PixiApp.renderer.plugins.interaction.setCursorMode("n-resize");
    }
}
// 反斜杠光标
public static System_SetHVDragCursor()
{
    [Language(Lua)]
    __CPPAPI_InputSystem.SetHVDragCursor();

    [Language(JavaScript)]
    if (!System_IsPhone())
    {
    	A_PixiApp.renderer.plugins.interaction.cursorStyles.default = "nw-resize";
    	A_PixiApp.renderer.plugins.interaction.setCursorMode("nw-resize");
    }
}
// 正斜杠光标
public static System_SetHV2DragCursor()
{
    [Language(Lua)]
    __CPPAPI_InputSystem.SetHV2DragCursor();
    if (!System_IsPhone())
    {
    	[Language(JavaScript)]
    	A_PixiApp.renderer.plugins.interaction.cursorStyles.default = "ne-resize";
    	[Language(JavaScript)]
    	A_PixiApp.renderer.plugins.interaction.setCursorMode("ne-resize");
    }
}
// 十字光标
public static System_SetCrossDragCursor()
{
    [Language(Lua)]
    __CPPAPI_InputSystem.SetCrossDragCursor();
    if (!System_IsPhone())
    {
        [Language(JavaScript)]
        A_PixiApp.renderer.plugins.interaction.cursorStyles.default = "move";
        [Language(JavaScript)]
        A_PixiApp.renderer.plugins.interaction.setCursorMode("move");
    }
}

////窗口部分////////////////////////////////////////////////////////////////////-
// 创建窗口
public static System_CreateView(string title, int width, int height, int flag, double scale) : bool
{
    [Language(Lua)]
    return __CPPAPI_RenderSystem.CreateView(title, width, height, flag, scale);
    
    [Language(JavaScript)]
    return JavaScript.JSystem_CreateView(title, width, height, flag, scale);
}
// 设置窗口标题
public static System_SetViewTitle(string title) : bool
{
    [Language(Lua)]
    return __CPPAPI_RenderSystem.SetViewTitle(title);
    [Language(JavaScript)]
    return JavaScript.JSystem_SetViewTitle(title);
}
// 设置窗口图标
public static System_SetViewIcon(string path) : bool
{
    [Language(Lua)]
    return __CPPAPI_RenderSystem.SetViewIcon(path);
    
    [Language(JavaScript)]
    return false;
}
// 操作窗口大小
public static System_SetViewSize(int width, int height)
{
    [Language(Lua)]
    __CPPAPI_RenderSystem.SetViewSize(width, height);
}
public static System_ShowView()
{
    [Language(Lua)]
    __CPPAPI_RenderSystem.ShowView();
}
public static System_HideView()
{
    [Language(Lua)]
    __CPPAPI_RenderSystem.HideView();
}
public static System_GetMaxTextureWidth() : int
{
    [Language(Lua)]
    return __CPPAPI_RenderSystem.GetMaxTextureWidth();
    
    [Language(JavaScript)]
    return 1024;
}
public static System_GetMaxTextureHeight() : int
{
    [Language(Lua)]
    return __CPPAPI_RenderSystem.GetMaxTextureHeight();
    
    [Language(JavaScript)]
    return 1024;
}
// 强制渲染
public static System_Render()
{
    [Language(Lua)]
    __CPPAPI_RenderSystem.Render();
    
    [Language(JavaScript)]
    JavaScript.JSystem_Render();
}

////剪切板//////////////////////////////////////////////////////////////////////-
// 获取剪切板的文本内容
public static System_GetClipboardText() : string
{
    [Language(Lua)]
    return __CPPAPI_InputSystem.GetClipboardText();
    [Language(JavaScript)]
    return "";
}
// 设置剪切板的文本内容
public static System_SetClipboardText(string content)
{
    [Language(Lua)]
    __CPPAPI_InputSystem.SetClipboardText(content);
}
// 剪切板是否有文本
public static System_HasClipboardText() : bool
{
    [Language(Lua)]
    return __CPPAPI_InputSystem.HasClipboardText();
    [Language(JavaScript)]
    return false;    
}

////系统提示////////////////////////////////////////////////////////////////////////-

// 使用系统浏览器打开某个网址
// url 地址，一定要以http或者https开头，否则在android，ios平台是无效的
public static System_OpenUrlBySystemBrowser(string url)
{
    [Language(Lua)]
    __CPPAPI_System.OpenUrlBySystemBrowser(url);
    [Language(JavaScript)]
    javascript.open(url);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////
// heartbeat 心跳间隔，用于保活，单位是秒
// check_heartbeat 是否进行心跳检查
// callback 断开连接的回调函数
// rudp 是否使用UDP的可靠性传输，可提高传输效率。在rudp下check_heartbeat强制为true。不支持javascript
public static CreateMsgSender(int heartbeat, bool check_heartbeat, [Nullable] Functor<()> callback, [Nullable] bool rudp) : IMsgCommonTemplate
{
    [Language(Lua)]
    if (rudp)
    	return new MsgSenderTemplate<lua.__CPPAPIUMsgInterface, carp.CarpMessageWriteFactory>(heartbeat, true, A_LuaLoopSystem, callback);
    else
        return new MsgSenderTemplate<lua.__CPPAPIMsgInterface, carp.CarpMessageWriteFactory>(heartbeat, check_heartbeat, A_LuaLoopSystem, callback);
    [Language(JavaScript)]
    return new MsgSenderTemplate<JavaScript.JMsgInterface, JavaScript.JMessageWriteFactory>(heartbeat, check_heartbeat, A_JLoopSystem, callback);
}

public static CreateHttpSender(string ip, int port) : IHttpSender
{
    [Language(Lua)]
    return new HttpSenderTemplate<lua.__CPPAPIHttpInterface>(ip, port);
    [Language(JavaScript)]
    if (window.wx != null)
        return new HttpSenderTemplate<JavaScript.JHttpWxInterface>(ip, port);
    else
        return new HttpSenderTemplate<JavaScript.JHttpInterface>(ip, port);
}

public await static HttpRequest(string ip, int port, string method) : string, string
{
    var sender = CreateHttpSender(ip, port);
    
    if (co == null) return "当前不是协程", null;
    sender.SendRPC(co, method, null);
    return yield;
}

public static CreateHttpFileSender(string ip, int port, string file_path, int start_size, [Nullable] Functor<(IHttpFileSender)> callback) : IHttpFileSender
{
    [Language(Lua)]
    return new HttpFileSenderTemplate<lua.__CPPAPIHttpFileInterface>(ip, port, file_path, start_size, callback);
    [Language(JavaScript)]
    if (window.wx != null)
        return new HttpFileSenderTemplate<JavaScript.JHttpFileWxInterface>(ip, port, file_path, start_size, callback);
    else
        return new HttpFileSenderTemplate<JavaScript.JHttpFileInterface>(ip, port, file_path, start_size, callback);
}

public await static HttpDownloadRequest(string ip, int port, string file_path, string method, [Nullable] Functor<(IHttpFileSender)> callback, [Nullable]bool array_buffer) : string
{
    var sender = CreateHttpFileSender(ip, port, file_path, 0, callback);
    
    if (co == null) return "当前不是协程";
    sender.SendDownloadRPC(co, method, null, array_buffer);
    return yield;
}