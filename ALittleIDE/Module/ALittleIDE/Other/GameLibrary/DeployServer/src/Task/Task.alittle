
namespace DeployServer;

public struct TaskInfo
{
    option primary = "task_id";
    int task_id;          			// 版本ID
    string task_name;				// 任务名称
    string task_desc;				// 任务描述
    Map<string, bool> web_hook;	   // web推送的项目url
    List<JobInfo> job_list;			// 任务列表
    int create_time;      			// 创建时间
}

public enum TaskStatus
{
    IDLE = 0;
    DOING = 1;	// 正在执行
}

public struct D_TaskInfo
{
    int task_id;
    string task_name;
    string task_desc;
    List<string> web_hook;
    int create_time;

    int status;
    double progress;		// 如果是执行，执行进度

    List<D_JobInfo> job_list;
}

protected class Task
{
    private TaskInfo _info;
    private string _upper_name;

    private List<Job> _job_list = new List<Job>();
    private int _status = 0;
    private double _progress = 0;

    public ctor(TaskInfo info)
    {
        this._info = info;
        this._upper_name = ALittle.String_Upper(info.task_name);

        // 构建job
        if (info.job_list != null)
        {
            for (var index, job_info in info.job_list)
            {
                var job = CreateJob(this, job_info);
                this._job_list[index] = job;
            }
        }
    }

    public fun Start() : string
    {
        if (this._status != TaskStatus.IDLE) return "当前任务不是空闲状态";
        this.StartImpl();
        return null;
    }

    private async fun StartImpl()
    {
        this._status = TaskStatus.DOING;
        this._progress = 0;
        this.SendStatus();

        for (var index, job in this._job_list)
        {
        	var error = job.Doing();
            if (error != null)
            {
                ALittle.Log("task"..this._info.task_id..":"..this._info.task_name.." doing failed:"..error);
                break;
            }

            this._progress = (index - 1) / ALittle.List_Len(this._job_list);
            this.SendStatus();
        }

        this._status = TaskStatus.IDLE;
        this._progress = 1;
        this.SendStatus();
    }

    private fun SendStatus()
    {
        var msg = new NTaskStatus();
        msg.task_id = this._info.task_id;
        msg.status = this._status;
        msg.progress = this._progress;
        A_WebAccountManager.SendMsgToAll(msg);

    }

    public get status() : int { return this._status; }

    public fun StartByWebHook(string url)
    {
        if (this._info.web_hook == null) return;

        for (var key, open in this._info.web_hook)
        {
            if (key == url && open)
            {
                this.Start();
                break;
            }
        }
    }

    public get info() : TaskInfo { return this._info; }
    public get upper_name() : string { return this._upper_name; }

    public fun UpdateInfo(C2SUpdateTaskInfo msg)
    {
        this._info.task_name = msg.task_name;
        this._info.task_desc = msg.task_desc;
        this._info.web_hook = new Map<string, bool>();
        for (var index, value in msg.web_hook)
        	this._info.web_hook[value] = true;

        this._upper_name = ALittle.String_Upper(msg.task_name);

        var ntf = new NUpdateTaskInfo();
        ntf.task_id = msg.task_id;
        ntf.task_name = msg.task_name;
        ntf.task_desc = msg.task_desc;
        ntf.web_hook = msg.web_hook;
        A_WebAccountManager.SendMsgToAll(ntf);
    }

    public get data_info() : D_TaskInfo
    {
        var data = new D_TaskInfo();
        data.task_id = this._info.task_id;
        data.task_name = this._info.task_name;
        data.task_desc = this._info.task_desc;
        data.create_time = this._info.create_time;

        data.status = this._status;
        data.progress = this._progress;

        data.web_hook = new List<string>();
        if (this._info.web_hook != null)
        {
            for (var web_hook, _  in this._info.web_hook)
                ALittle.List_Push(data.web_hook, web_hook);
        }

        data.job_list = new List<D_JobInfo>();
        for (var index, job in this._job_list)
            ALittle.List_Push(data.job_list, job.data_info);

        return data;
    }
}

public struct C2SStartTask
{
    int task_id;
}

public struct S2CStartTask
{

}

public struct NTaskStatus
{
    int task_id;
    int status;
    double progress;
}

[Msg]
public await static HandleC2SStartTask(ALittle.IMsgCommon sender, C2SStartTask msg) : S2CStartTask
{
    A_WebAccountManager.CheckLoginByClient(sender);

    var task = g_TaskManager.GetTask(msg.task_id);
    assert (task != null, "任务不存在");
    var error = task.Start();
    assert (error == null, error);
    return new S2CStartTask();
}

public struct C2SUpdateTaskInfo
{
    int task_id;
    string task_name;
    string task_desc;
    List<string> web_hook;
}

public struct S2CUpdateTaskInfo
{

}

public struct NUpdateTaskInfo
{
    int task_id;
    string task_name;
    string task_desc;
    List<string> web_hook;
}

[Msg]
public await static HandleC2SUpdateTaskInfo(ALittle.IMsgCommon sender, C2SUpdateTaskInfo msg) : S2CUpdateTaskInfo
{
    A_WebAccountManager.CheckLoginByClient(sender);

    var task = g_TaskManager.GetTask(msg.task_id);
    assert (task != null, "任务不存在");
    task.UpdateInfo(msg);
    return new S2CUpdateTaskInfo();
}