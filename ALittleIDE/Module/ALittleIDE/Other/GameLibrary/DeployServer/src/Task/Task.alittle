
namespace DeployServer;

public struct TaskInfo
{
    option primary = "task_id";
    int task_id;          			// 版本ID
    string task_name;				// 任务名称
    string task_desc;				// 任务描述
    Map<string, bool> web_hook;	   // web推送的项目url
    List<JobInfo> job_list;			// 任务列表
    List<BuildInfo> build_list;		// 构建列表
    int create_time;      			// 创建时间
}

public enum TaskStatus
{
    IDLE = 0;
    DOING = 1;	// 正在执行
}

public struct D_TaskInfo
{
    int task_id;
    string task_name;
    string task_desc;
    List<string> web_hook;
    int create_time;

    int status;
    double progress;		// 如果是执行，执行进度

    List<D_JobInfo> job_list;	// 任务信息
    List<D_BuildInfo> build_list;	// 构建信息
}

protected class Task
{
    private TaskInfo _info;
    private string _upper_name;

    private List<Job> _job_list = new List<Job>();
    private int _status = 0;
    private double _progress = 0;

    public ctor(TaskInfo info)
    {
        this._info = info;
        this._upper_name = ALittle.String_Upper(info.task_name);

        // 构建job
        if (info.job_list != null)
        {
            for (var index, job_info in info.job_list)
            {
                var job = CreateJob(this, job_info);
                this._job_list[index] = job;
            }
        }
    }

    public async fun Save()
    {
        var error = A_MysqlSystem.UpdateOne(this._info, "task_id", this._info.task_id);
        if (error != null) ALittle.Error(error);
    }

    public fun Start() : string
    {
        if (this._status != TaskStatus.IDLE) return "当前任务不是空闲状态";
        this.StartImpl();
        return null;
    }

    private async fun StartImpl()
    {
        this._status = TaskStatus.DOING;
        this._progress = 0;
        this.SendStatus();

        // 创建日志
        var build_info = new BuildInfo();
        build_info.create_time = ALittle.Time_GetCurTime();
        build_info.log_list = new List<string>();
        ALittle.List_Push(this._info.build_list, build_info);

        // 全部标记为等待
        for (var index, job in this._job_list)
        	job.Waiting();

        for (var index, job in this._job_list)
        {
        	var error = job.Doing(build_info);
            if (error != null)
            {
                ALittle.Log("task"..this._info.task_id..":"..this._info.task_name.." doing failed:"..error);
                break;
            }

            this._progress = (index - 1) / ALittle.List_Len(this._job_list);
            this.SendStatus();
        }

        var file_path = this.GetBuildPath(build_info.create_time);
        ALittle.File_MakeDeepDir(ALittle.File_GetFilePathByPath(file_path));
        var log_file = lua.io.open(file_path, "wb");
        if (log_file != null)
        {
            for (var index, log in build_info.log_list)
            {
                log_file.write(log);
                log_file.write("\r\n");
            }

            log_file.close();
        }

        // 只保存最近的1000条记录
        var len = ALittle.List_Len(build_info.log_list);
        if (len > 100)
        {
            var new_list = new List<string>();
            var new_count = 0;
            for (var i = len - 100 + 1; i <= len; 1)
            {
                ++new_count;
            	new_list[new_count] = build_info.log_list[i];
            }
            build_info.log_list = new_list;
        }

        this._status = TaskStatus.IDLE;
        this._progress = 1;
        this.SendStatus();

        // 发送build
        {
            var msg = new NCreateBuild();
            msg.task_id = this._info.task_id;
            msg.build_info = new D_BuildInfo();
            msg.build_info.create_time = build_info.create_time;
            A_WebAccountManager.SendMsgToAll(msg);
        }

        this.Save();
    }

    private fun SendStatus()
    {
        var msg = new NTaskStatus();
        msg.task_id = this._info.task_id;
        msg.status = this._status;
        msg.progress = this._progress;
        A_WebAccountManager.SendMsgToAll(msg);
    }

    public get status() : int { return this._status; }

    public fun StartByWebHook(string url)
    {
        if (this._info.web_hook == null) return;

        for (var key, open in this._info.web_hook)
        {
            if (key == url && open)
            {
                this.Start();
                break;
            }
        }
    }

    public get info() : TaskInfo { return this._info; }
    public get upper_name() : string { return this._upper_name; }

    public fun HandleDelete()
    {
        ALittle.File_DeleteDeepDir("DeployBuildLog/"..this._info.task_id);
    }

    public fun UpdateInfo(C2SUpdateTaskInfo msg)
    {
        this._info.task_name = msg.task_name;
        this._info.task_desc = msg.task_desc;
        this._info.web_hook = new Map<string, bool>();
        for (var index, value in msg.web_hook)
        	this._info.web_hook[value] = true;

        this._upper_name = ALittle.String_Upper(msg.task_name);

        var ntf = new NUpdateTaskInfo();
        ntf.task_id = msg.task_id;
        ntf.task_name = msg.task_name;
        ntf.task_desc = msg.task_desc;
        ntf.web_hook = msg.web_hook;
        A_WebAccountManager.SendMsgToAll(ntf);

        this.Save();
    }

    public fun CreateJob(C2SCreateJob msg)
    {
        assert(this._status == TaskStatus.IDLE, "当前任务不是空闲状态");

        var job_info = new JobInfo();
        job_info.job_type = msg.job_type;
        job_info.job_name = msg.job_name;
        job_info.detail = msg.detail;

        var job = CreateJob(this, job_info);
        assert (job != null, "任务创建失败");

        if (msg.job_index == null || msg.job_index <= 0 || msg.job_index > ALittle.List_Len(this._info.job_list))
        {
            ALittle.List_Push(this._info.job_list, job_info);
            ALittle.List_Push(this._job_list, job);
        }
        else
        {
            ALittle.List_Insert(this._info.job_list, msg.job_index, job_info);
            ALittle.List_Insert(this._job_list, msg.job_index, job);
        }

        var ntf = new NCreateJob();
        ntf.task_id = this._info.task_id;
        ntf.job_index = msg.job_index;
        ntf.job_info = job.data_info;
        A_WebAccountManager.SendMsgToAll(ntf);

        this.Save();
    }

    public fun ModifyJob(C2SModifyJob msg)
    {
        assert(this._status == TaskStatus.IDLE, "当前任务不是空闲状态");

        var job = this._job_list[msg.job_index];
        assert(job != null, "任务不存在");

        job.Modify(msg);

        var ntf = new NModifyJob();
        ntf.task_id = this._info.task_id;
        ntf.job_index = msg.job_index;
        ntf.job_info = job.data_info;
        A_WebAccountManager.SendMsgToAll(ntf);

        this.Save();
    }

    public fun DeleteJob(C2SDeleteJob msg)
    {
        assert(this._status == TaskStatus.IDLE, "当前任务不是空闲状态");

        var job = this._job_list[msg.job_index];
        assert(job != null, "任务不存在");

        ALittle.List_Remove(this._job_list, msg.job_index);
        ALittle.List_Remove(this._info.job_list, msg.job_index);

        var ntf = new NDeleteJob();
        ntf.task_id = this._info.task_id;
        ntf.job_index = msg.job_index;
        A_WebAccountManager.SendMsgToAll(ntf);

        this.Save();
    }

    public fun MoveJob(C2SMoveJob msg)
    {
        assert(this._status == TaskStatus.IDLE, "当前任务不是空闲状态");

        var job = this._job_list[msg.job_index];
        assert(job != null, "任务不存在");
        var job_info = this._info.job_list[msg.job_index];

        ALittle.List_Remove(this._job_list, msg.job_index);
        ALittle.List_Remove(this._info.job_list, msg.job_index);

        var job_len = ALittle.List_Len(this._job_list);
        if (msg.target_index <= 0 || msg.target_index > job_len)
        {
            ALittle.List_Push(this._job_list, job);
            ALittle.List_Push(this._info.job_list, job_info);
        }
        else
        {
            ALittle.List_Insert(this._job_list, msg.target_index, job);
            ALittle.List_Insert(this._info.job_list, msg.target_index, job_info);
        }

        var ntf = new NMoveJob();
        ntf.task_id = this._info.task_id;
        ntf.job_index = msg.job_index;
        ntf.target_index = msg.target_index;
        A_WebAccountManager.SendMsgToAll(ntf);

        this.Save();
    }

    public fun DeleteBuild(C2SDeleteBuild msg)
    {
        assert(this._status == TaskStatus.IDLE, "当前任务不是空闲状态");

        var build_info = this._info.build_list[msg.build_index];
        assert(build_info != null, "构建信息不存在");

        // 移除信息，删除文件
        ALittle.List_Remove(this._info.build_list, msg.build_index);
        var file_path = this.GetBuildPath(build_info.create_time);
        ALittle.File_DeleteFile(file_path);

        var ntf = new NDeleteBuild();
        ntf.task_id = this._info.task_id;
        ntf.build_index = msg.build_index;
        A_WebAccountManager.SendMsgToAll(ntf);

        this.Save();
    }

    public fun GetBuildPath(int create_time) : string
    {
    	return "DeployBuildLog/"..this._info.task_id.."/"..ALittle.Time_GetCurDate(create_time)..".log";
    }

    public get data_info() : D_TaskInfo
    {
        var data = new D_TaskInfo();
        data.task_id = this._info.task_id;
        data.task_name = this._info.task_name;
        data.task_desc = this._info.task_desc;
        data.create_time = this._info.create_time;

        data.status = this._status;
        data.progress = this._progress;

        data.web_hook = new List<string>();
        if (this._info.web_hook != null)
        {
            for (var web_hook, _  in this._info.web_hook)
                ALittle.List_Push(data.web_hook, web_hook);
        }

        data.job_list = new List<D_JobInfo>();
        for (var index, job in this._job_list)
            ALittle.List_Push(data.job_list, job.data_info);

        data.build_list = new List<D_BuildInfo>();
        for (var index, build in this._info.build_list)
        {
            var info = new D_BuildInfo();
            info.create_time = build.create_time;
            ALittle.List_Push(data.build_list, info);
        }

        return data;
    }
}

public struct C2SStartTask
{
    int task_id;
}

public struct S2CStartTask
{

}

public struct NTaskStatus
{
    int task_id;
    int status;
    double progress;
}

[Msg]
public await static HandleC2SStartTask(ALittle.IMsgCommon sender, C2SStartTask msg) : S2CStartTask
{
    A_WebAccountManager.CheckLoginByClient(sender);

    var task = g_TaskManager.GetTask(msg.task_id);
    assert (task != null, "任务不存在");
    var error = task.Start();
    assert (error == null, error);
    return new S2CStartTask();
}

public struct C2SUpdateTaskInfo
{
    int task_id;
    string task_name;
    string task_desc;
    List<string> web_hook;
}

public struct S2CUpdateTaskInfo
{

}

public struct NUpdateTaskInfo
{
    int task_id;
    string task_name;
    string task_desc;
    List<string> web_hook;
}

[Msg]
public await static HandleC2SUpdateTaskInfo(ALittle.IMsgCommon sender, C2SUpdateTaskInfo msg) : S2CUpdateTaskInfo
{
    A_WebAccountManager.CheckLoginByClient(sender);

    var task = g_TaskManager.GetTask(msg.task_id);
    assert (task != null, "任务不存在");
    task.UpdateInfo(msg);
    return new S2CUpdateTaskInfo();
}

public struct C2SCreateJob
{
    int task_id;
    int job_type;
    int job_index;	// job所在的位置

    string job_name;	// job名称
    JobInfoDetail detail;
}

public struct S2CCreateJob
{

}

public struct NCreateJob
{
    int task_id;
    int job_index;
    D_JobInfo job_info;
}

[Msg]
public await static HandleC2SCreateJob(ALittle.IMsgCommon sender, C2SCreateJob msg) : S2CCreateJob
{
    A_WebAccountManager.CheckLoginByClient(sender);

    var task = g_TaskManager.GetTask(msg.task_id);
    assert (task != null, "任务不存在");
    task.CreateJob(msg);
    return new S2CCreateJob();
}

public struct C2SModifyJob
{
    int task_id;
    int job_index;	// job所在的位置
    string job_name;

    JobInfoDetail detail;
}

public struct S2CModifyJob
{

}

public struct NModifyJob
{
    int task_id;
    int job_index;
    D_JobInfo job_info;
}

[Msg]
public await static HandleC2SModifyJob(ALittle.IMsgCommon sender, C2SModifyJob msg) : S2CModifyJob
{
    A_WebAccountManager.CheckLoginByClient(sender);

    var task = g_TaskManager.GetTask(msg.task_id);
    assert (task != null, "任务不存在");
    task.ModifyJob(msg);
    return new S2CModifyJob();
}

public struct C2SDeleteJob
{
    int task_id;
    int job_index;	// job所在的位置
}

public struct S2CDeleteJob
{

}

public struct NDeleteJob
{
    int task_id;
    int job_index;
}

[Msg]
public await static HandleC2SDeleteJob(ALittle.IMsgCommon sender, C2SDeleteJob msg) : S2CDeleteJob
{
    A_WebAccountManager.CheckLoginByClient(sender);

    var task = g_TaskManager.GetTask(msg.task_id);
    assert (task != null, "任务不存在");
    task.DeleteJob(msg);
    return new S2CDeleteJob();
}

public struct C2SMoveJob
{
    int task_id;
    int job_index;
    int target_index;
}

public struct S2CMoveJob
{

}

public struct NMoveJob
{
    int task_id;
    int job_index;
    int target_index;
}

[Msg]
public await static HandleC2SMoveJob(ALittle.IMsgCommon sender, C2SMoveJob msg) : S2CMoveJob
{
    A_WebAccountManager.CheckLoginByClient(sender);

    var task = g_TaskManager.GetTask(msg.task_id);
    assert (task != null, "任务不存在");
    task.MoveJob(msg);
    return new S2CMoveJob();
}

public struct NCreateBuild
{
    int task_id;
    D_BuildInfo build_info;
}


public struct C2SDeleteBuild
{
    int task_id;
    int build_index;	// 构建所在的位置
}

public struct S2CDeleteBuild
{

}

public struct NDeleteBuild
{
    int task_id;
    int build_index;
}

[Msg]
public await static HandleC2SDeleteBuild(ALittle.IMsgCommon sender, C2SDeleteBuild msg) : S2CDeleteBuild
{
    A_WebAccountManager.CheckLoginByClient(sender);

    var task = g_TaskManager.GetTask(msg.task_id);
    assert (task != null, "任务不存在");
    task.DeleteBuild(msg);
    return new S2CDeleteBuild();
}