
namespace DeployServer;

protected var g_JobWorker:ALittle.IWorkerCommon;

public class TaskManager
{
    private int _max_task_id = 0;

    private Map<int, Task> _task_map = new Map<int, Task>();

    public await fun Setup()
    {
        var error = A_MysqlSystem.CreateIfNotExit{TaskInfo}();
        assert(error == null, error);
        error = A_MysqlSystem.CreateIfNotExit{JobInfo}();
        assert(error == null, error);

        var task_error, task_list = A_MysqlSystem.SelectListFromByMap(new TaskInfo());
        assert(task_error == null, task_error);

        // 开始构建任务列表
        for (var index, task_info in task_list)
        {
            this._task_map[task_info.task_id] = new Task(task_info);
            if (this._max_task_id < task_info.task_id) this._max_task_id = task_info.task_id;
        }

        A_WebAccountManager.AddEventListener(this, this.HandleAccountLogin);

        g_JobWorker = new ALittle.Worker(g_ModuleScriptPath.."Task/Workers/JobWorker");
    }

    private fun HandleAccountLogin(ALittle.WebAccountLoginEvent event)
    {
        var info = new S2CTaskList();
        info.task_list = new List<D_TaskInfo>();
        for (var id, task in this._task_map)
            ALittle.List_Push(info.task_list, task.data_info);
        event.account.SendMsg(info);
    }

    public await fun HandleCreateTask(string task_name)
    {
        ++this._max_task_id;
        var task_info = new TaskInfo();
        task_info.task_id = this._max_task_id;
        task_info.task_name = task_name;
        task_info.create_time = ALittle.Time_GetCurTime();
        task_info.build_list = new List<BuildInfo>();
        task_info.job_list = new List<JobInfo>();
        var error = A_MysqlSystem.InsertInto(task_info);
        assert(error == null, error);

        // 创建任务
        var task = new Task(task_info);
        this._task_map[task_info.task_id] = task;

        // 将消息发给所有账号
        var msg = new NCreateTask();
        msg.task_info = task.data_info;
        A_WebAccountManager.SendMsgToAll(msg);
    }

    public await fun HandleDeleteTask(int task_id)
    {
        var task = this._task_map[task_id];
        assert (task != null, "任务不存在");
        assert (task.status == TaskStatus.IDLE, "任务不在空闲状态");

        var error = A_MysqlSystem.DeleteFromByKey{TaskInfo}("task_id", task_id);
        assert(error == null, error);

        task.HandleDelete();
        this._task_map[task_id] = null;

        // 将消息发给所有账号
        var msg = new NDeleteTask();
        msg.task_id = task_id;
        A_WebAccountManager.SendMsgToAll(msg);
    }

    public fun GetTask(int task_id) : Task { return this._task_map[task_id]; }

    public fun StartTaskByWebHook(string url)
    {
        for (var index, task in this._task_map)
            task.StartByWebHook(url);
    }

    // 根据key查找名称
    public fun FindTaskByUpperKey(string key) : List<Task>
    {
        var result = new List<Task>();
        var count = 0;
        for (var id, task in this._task_map)
        {
            if (ALittle.String_Find(task.upper_name, key) != null)
            {
                ++count;
                result[count] = task;
            }
        }
        return result;
    }

    // 根据key_list查找
    public fun FindTaskByUpperKeyList(List<string> key_list) : List<Task>
    {
        var result = new List<Task>();
        var count = 0;
        for (var id, task in this._task_map)
        {
            var find = true;
            var init = 1;
            for (var index, key in key_list)
            {
                var pos = ALittle.String_Find(task.upper_name, key, init);
                if (pos == null)
                {
                    find = false;
                    break;
                }

                init = pos + ALittle.String_Len(key);
            }

            if (find)
            {
                count += 1;
                result[count] = task;
            }
        }
    
        return result;
    }

    public fun FindTask(string key) : List<Task>
    {
        // 获取key
        key = ALittle.String_Upper(key);

        // 通过空格切割
        var key_list = ALittle.String_SplitSepList(key, [" ", "\t"]);

        if (key_list[1] == null)
        	return this.FindTaskByUpperKey(key);
        else
            return this.FindTaskByUpperKeyList(key_list);
    }

    public fun Shutdown()
    {
        if (g_JobWorker != null)
        {
            g_JobWorker.Stop();
            g_JobWorker = null;
        }
    }
}

public var g_TaskManager = new TaskManager();


public struct S2CTaskList
{
    List<D_TaskInfo> task_list;
}

public struct C2SCreateTask
{
    string task_name;
}

public struct S2CCreateTask
{
}

public struct NCreateTask
{
    D_TaskInfo task_info;
}

[Msg]
public await static HandleC2SCreateTask(ALittle.IMsgCommon sender, C2SCreateTask msg) : S2CCreateTask
{
    A_WebAccountManager.CheckLoginByClient(sender);
    g_TaskManager.HandleCreateTask(msg.task_name);
    return new S2CCreateTask();
}

public struct C2SDeleteTask
{
    int task_id;
}

public struct S2CDeleteTask
{

}

public struct NDeleteTask
{
    int task_id;
}

[Msg]
public await static HandleC2SDeleteTask(ALittle.IMsgCommon sender, C2SDeleteTask msg) : S2CDeleteTask
{
    A_WebAccountManager.CheckLoginByClient(sender);
    g_TaskManager.HandleDeleteTask(msg.task_id);
    return new S2CDeleteTask();
}