
namespace DeployServer;

struct TextContent
{
    string text;
}

struct KeyValueInfo
{
    option primary = "key";

    string key;
    TextContent value;
}

public class KeyValueManager
{
    private Map<string, any> _map = new Map<string, any>();

    public await fun Setup()
    {
        var error = A_MysqlSystem.CreateIfNotExit{KeyValueInfo}();
        assert(error == null, error);

        var list:List<KeyValueInfo>;
        error, list = A_MysqlSystem.SelectListFromByMap(new KeyValueInfo());
        assert(error == null, error);

        for (var index, info in list)
        {
            var succeed = false;
            if (info.value != null && info.value.text != null)
            {
                var result, object = lua.pcall(lua.ajson.decode, info.value.text);
                if (result)
                {
                    this._map[info.key] = object;
                    succeed = true;
                }
            }

            if (!succeed) this._map[info.key] = new Map<any, any>();
        }
    }

    public async fun SetConfig(string key, any value)
    {
        this._map[key] = value;
        var info = new KeyValueInfo();
        info.key = key;
        info.value = new TextContent();
        info.value.text = lua.ajson.encode(value);
        var error = A_MysqlSystem.UpdateOne(info, "key", key);
        if (error != null) ALittle.Error(error);
    }

    public fun GetConfig<T:struct>(string key, T default) : T
    {
        var value = this._map[key];
        if (value != null) return value;
        return default;
    }

    public fun Shutdown()
    {

    }
}

public var g_KeyValueManager = new KeyValueManager();


public enum KeyValueType
{
    SETTING = "setting";
}