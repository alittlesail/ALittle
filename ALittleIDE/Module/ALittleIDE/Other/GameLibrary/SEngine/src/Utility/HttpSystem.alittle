
namespace ALittle;

// http连接接口
public class HttpReceiverNative : IHttpReceiverNative
{
    public fun Close(int http_id) { __CPPAPI_ServerSchedule.HttpClose(http_id); }
    public fun SendString(int http_id, string content) { __CPPAPI_ServerSchedule.HttpSendString(http_id, content); }
    public fun SendFile(int http_id, string file_path, int start_size) { __CPPAPI_ServerSchedule.HttpSendFile(http_id, file_path, start_size); }
}

// http连接对象
using HttpReceiver = HttpReceiverTemplate<HttpReceiverNative>;

// http系统
public class HttpSystem
{
    // http协程集合
    private Map<int, Thread> _request_map;
    // http请求id生成器
    private SafeIDCreator _id_creator;

    public ctor()
    {
        this._request_map = new Map<int, Thread>();
        this._id_creator = new SafeIDCreator();
    }

    // 处理http任务
    protected async static HandleHttpTask(string method, int http_id, Functor<await(IHttpReceiver, any):any> callback, Map<string, any> value_map)
    {
        // 创建连接对象
        var client = new HttpReceiver(method, http_id);
        // 调用回调
        var error, result = tcall(callback, client, value_map);
        // 如果调用错误，那么返回错误内容
        if (error != null)
        {
            var map = new Map<string, any>();
            map["error"] = error;
            client.SendString(ALittle.String_JsonEncode(map));
            return;
        }
        // 如果没有返回结果，那么就返回错误
        if (result == null)
        {
            var map = new Map<string, any>();
            map["error"] = "接口没有返回任何内容";
            client.SendString(ALittle.String_JsonEncode(map));
            return;
        }

        // 发送结果
        client.SendString(ALittle.String_JsonEncode(result));
    }

    // 处理下载任务
    protected async static HandleHttpDownloadTask(string method, int http_id, Functor<await(IHttpReceiver, any):string, int> callback, Map<string, any> value_map)
    {
        // 创建连接对象
        var client = new HttpReceiver(method, http_id);
        // 调用回调
        var error, file_path, start_size = tcall(callback, client, value_map);
        // 如果出现调用错误，那么直接关闭连接
        if (error != null)
        {
            client.Close();
            return;
        }
        // 如果返回的文件路径是空的，那么就关闭连接
        if (file_path == null)
        {
            client.Close();
            return;
        }

        // 发送文件
        client.SendFile(file_path, start_size);
    }

    // 发送Get请求
    public await fun Get(string url) : string, string
    {
        if (co == null) return "当前不是协程", null;

        // 创建ID，并保存协程
        var id = this._id_creator.CreateID();
        this._request_map[id] = co;
        // 开始请求
        __CPPAPI_ServerSchedule.HttpGet(id, url);
        return yield;
    }

    // 发送Post请求
    public await fun PostJson(string url, any content) : string, string
    {
        if (co == null) return "当前不是协程", null;
        // 创建ID，并保存协程
        var id = this._id_creator.CreateID();
        this._request_map[id] = co;
        // 开始请求
        __CPPAPI_ServerSchedule.HttpPost(id, url, "application/json", ALittle.String_JsonEncode(content));
        return yield;
    }

    // 处理成功应答
    protected fun HandleHttpSucceed(int id, string response)
    {
        this._id_creator.ReleaseID(id);
        var thread = this._request_map[id];
        this._request_map[id] = null;
        var result, reason = lua.coroutine.resume(thread, null, response);
        if (result != true) Error(reason);
    }

    // 处理失败应答
    protected fun HandleHttpFailed(int id, string reason)
    {
        this._id_creator.ReleaseID(id);
        var thread = this._request_map[id];
        this._request_map[id] = null;
        var result, error = lua.coroutine.resume(thread, reason, null);
        if (result != true) Error(error);
    }
}

public var A_HttpSystem = new HttpSystem();