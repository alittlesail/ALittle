
namespace ALittle;

public class MysqlStatementQuery
{
    protected lua.__CPPAPIMysqlStatementQuery _query;

    public ctor()
    {
        this._query = new lua.__CPPAPIMysqlStatementQuery();
    }
    
    // 注意，如果你使用了SUM指令，那么写法要这么用CAST(IFNULL(SUM(XXXX),0) AS UNSIGNED)，并且使用longlong来接受数据
    // 注意，如果你使用了COUNT指令，那么使用longlong来接受数据
    public set sql(string value)
    {
        if (value == null) value = "";
        this._query.SetSQL(value);
    }
    
    public get sql() : string { return this._query.GetSQL(); }
    public get count() : int { return this._query.GetCount(); }
    public get affect_count() : int { return this._query.GetAffectCount(); }
    public await fun Execute([Nullable] int thread_id) : string { return A_MysqlSystem.ExecuteStatement(this, thread_id); }

    public get String() : string { return this._query.ReadString(); }
    public set String(string value)
    {
        if (value == null)
            this._query.PushString("");
        else
            this._query.PushString(value);
    }

    public get Int() : int { return this._query.ReadInt(); }
    public set Int(int value)
    {
        if (value == null)
            this._query.PushInt(0);
        else
            this._query.PushInt(value);
    }

    public get Long() : long { return this._query.ReadI64(); }
    public set Long(long value)
    {
        if (value == null)
            this._query.PushI64(0);
        else
            this._query.PushI64(value);
    }

    public get Double() : double { return this._query.ReadDouble(); }
    public set Double(double value)
    {
        if (value == null)
            this._query.PushDouble(0);
        else
            this._query.PushDouble(value);
    }

    public get value() : any
    {
        var type_int = this._query.ReadType();
        if (type_int == -1) return null;
        if (type_int == 0) return this._query.ReadBool();
        if (type_int == 1) return this._query.ReadShort();
        if (type_int == 2) return this._query.ReadInt();
        if (type_int == 3) return this._query.ReadI64();
        if (type_int == 4) return this._query.ReadFloat();
        if (type_int == 5) return this._query.ReadDouble();
        if (type_int == 6) return this._query.ReadString();
        return null;
    }

    public set value(any v)
    {
        var type_str = lua.type(v);
        if (type_str == "number")
        {
            if (lua.math.floor(v) < cast<double>(v))
                this._query.PushDouble(v);
            else
                this._query.PushInt(v);
        }
        elseif (type_str == "string")
        {
            this._query.PushString(v);
        }
        elseif (type_str == "boolean")
        {
            if (cast<bool>(v) == false)
                this._query.PushInt(0);
            else
                this._query.PushInt(1);
        }
        elseif (type_str == "table")
        {
            this._query.PushString(lua.ajson.encode(v));
        }
        else
        {
            this._query.PushString(lua.tostring(v));
        }
    }

    public fun SelectPageBegin(string field, string condition, string table_name, string key, bool asc)
    {
        var asc_str = " DESC";
        if (!asc) asc_str = " ASC";

        var sql:string = null;
        var cross = String_Find(table_name, ",");
        if (cross != null)
        {
            var field_list = String_Split(table_name, ",");
            var as_name_list = new List<string>();
            var field_name_list = new List<string>();
            for (var k, v in field_list)
            {
                var as_name = "tt"..k;
                List_Push(as_name_list, as_name);
                List_Push(field_name_list, v.." as "..as_name);
            }
            field = String_Join(field_name_list, ",");
            var as_field = String_Join(as_name_list, ",");
            if (condition == null) condition = "";
            if (key != null) key = "ORDER BY "..key..asc_str; else key = "";
            sql = "SELECT "..as_field.." FROM ( SELECT @rownum:=@rownum+1 AS RowNumber, "..field.." FROM "..table_name..", (SELECT @rownum:=0) __rownumb "..condition.." "..key.." ) AS temp WHERE temp.RowNumber BETWEEN ? AND ?";
        }
        else
        {
            if (condition == null) condition = "";
            if (key != null) key = "ORDER BY "..key..asc_str; else key = "";
            sql = "SELECT "..field.." FROM (  SELECT @rownum:=@rownum+1 AS RowNumber, "..field.." FROM "..table_name..", (SELECT @rownum:=0) __rownumb "..condition.." "..key.." ) AS temp WHERE temp.RowNumber BETWEEN ? AND ?";
        }
        this._query.SetSQL(sql);
    }
    
    public fun SelectPageEnd(int page_size, int page_index)
    {
        var start_index = (page_index - 1) * page_size + 1;
        if (start_index < 1) start_index = 1;
        
        var end_index = page_index * page_size;
        
        this.Int = start_index;
        this.Int = end_index;
    }

    public fun HasNext() : bool
    {
        return this._query.HasNext();
    }
}

private var __TypeMap = new Map<string, int>(); // 1表示bool，2表示int，3表示I64，4表示double，5表示string，null表示json
__TypeMap["bool"] = 1;
__TypeMap["int"] = 2;
__TypeMap["long"] = 3;
__TypeMap["double"] = 4;
__TypeMap["string"] = 5;

struct MysqlExecuteInfo
{
    Thread thread;
    MysqlStatementQuery query;
}

public class MysqlSystem
{
    private SafeIDCreator _id_creator;
    private Map<int, MysqlExecuteInfo> _info_map;
    private Map<int, Thread> _execute_empty_map;
    
    public ctor()
    {
        this._id_creator = new SafeIDCreator();
        this._info_map = new Map<int, MysqlExecuteInfo>();
        this._execute_empty_map = new Map<int, Thread>();
    }
    
    protected fun HandleMysqlQueryTask(int id, string reason)
    {
        var info = this._info_map[id];
        if (info == null) return;
        this._id_creator.ReleaseID(id);
        this._info_map[id] = null;
        
        // 返回协程
        var result, error = lua.coroutine.resume(info.thread, reason);
        if (result != true) Error(error);
    }
    
    protected fun HandleMysqlEmptyTask(int id, string reason)
    {
        var thread = this._execute_empty_map[id];
        if (thread == null) return;
        this._id_creator.ReleaseID(id);
        this._execute_empty_map[id] = null;
        
        // 返回协程
        var result, error = lua.coroutine.resume(thread, reason);
        if (result != true) Error(error);
    }

    protected await fun ExecuteStatement(MysqlStatementQuery query, [Nullable] int thread_id) : string
    {
        if (co == null) return "当前不是协程";
        if (thread_id == null) thread_id = 0;
        var id = this._id_creator.CreateID();
        if (!__CPPAPI_ServerSchedule.AddMysqlStatement(thread_id, id, query._query))
        {
            this._id_creator.ReleaseID(id);
            return "任务添加失败";
        }
        var info = new MysqlExecuteInfo();
        info.thread = co;
        info.query = query;
        this._info_map[id] = info;
        return yield;
    }

    private await fun ExecuteNormal(string sql, int thread_id) : string
    {
        if (co == null) return "当前不是协程";
        if (thread_id == null) thread_id = 0;
        var id = this._id_creator.CreateID();
        if (!__CPPAPI_ServerSchedule.AddMysqlNormal(thread_id, id, sql))
        {
            this._id_creator.ReleaseID(id);
            return "任务添加失败";
        }
        var info = new MysqlExecuteInfo();
        info.thread = co;
        this._info_map[id] = info;
        return yield;
    }
    
    public await fun ExecuteEmpty([Nullable] int thread_id) : string
    {
        if (co == null) return "当前不是协程";
        if (thread_id == null) thread_id = 0;
        var id = this._id_creator.CreateID();
        if (!__CPPAPI_ServerSchedule.AddMysqlEmpty(thread_id, id))
        {
            this._id_creator.ReleaseID(id);
            return "任务添加失败";
        }
        this._execute_empty_map[id] = co;
        return yield;
    }
    
    public await fun SelectCountByReflect(ALittle.StructInfo info, string key, any value, [Nullable] int thread_id) : string, long
    {
        if (value == null) return "value == null", 0;
        
        var sql = "SELECT COUNT(*) FROM `";
        sql = sql..info.rl_name;
        sql = sql.."` WHERE `";
        sql = sql..key;
        sql = sql.."`=?";
        
        var query = new MysqlStatementQuery();
        query.sql = sql;
        query.value = value;
        var error = this.ExecuteStatement(query, thread_id);
        if (error != null) return error, 0;
        return null, query.Long;
    }

    public await fun SelectCount<T : struct>(string key, any value, [Nullable] int thread_id) : string, long
    {
        return this.SelectCountByReflect(reflect<T>, key, value, thread_id);
    }
    
    public await fun SelectOneFromByKeyByReflect(ALittle.StructInfo info, string key, any value, [Nullable] int thread_id) : string, any
    {
        if (value == null) return "value == null", null;
        
        var sql = "SELECT ";
        var field_list = new List<string>();
        for (var i, name in info.name_list)
            List_Push(field_list, "`"..name.."`");
        sql = sql..String_Join(field_list, ",");
        sql = sql.." FROM `";
        sql = sql..info.rl_name;
        sql = sql.."` WHERE `";
        sql = sql..key;
        sql = sql.."`=?";

        var query = new MysqlStatementQuery();
        query.sql = sql;
        query.value = value;
        var error = this.ExecuteStatement(query, thread_id);
        if (error != null) return error, null;
        if (query.count == 0) return null, null;
        
        var map = new Map<string, any>();
        for (var i, name in info.name_list)
        {
            var type = __TypeMap[info.type_list[i]];
            if (type == 1)
                map[name] = query.Int != 0;
            elseif (type == 2)
                map[name] = query.Int;
            elseif (type == 3)
                map[name] = query.Long;
            elseif (type == 4)
                map[name] = query.Double;
            elseif (type == 5)
                map[name] = query.String;
            else
            {
                var str = query.String;
                if (str == "")
                    map[name] = new Map<any, any>();
                else
                {
                    var content:any = null;
                    error, content = tcall(lua.ajson.decode, str);
                    if (error != null)
                        return error, null;
                    else
                        map[name] = content;
                }
            }
        }
        
        return null, map;
    }
    
    public await fun SelectOneFromByKey<T : struct>(string key, any value, [Nullable] int thread_id) : string, T
    {
        return this.SelectOneFromByKeyByReflect(reflect<T>, key, value, thread_id);
    }
    
    public await fun SelectListFromByMapByReflect(ALittle.StructInfo info, Map<string, any> value_map, [Nullable] int thread_id) : string, List<any>
    {
        var sql = "SELECT ";
        var field_list = new List<string>();
        for (var i, name in info.name_list)
            List_Push(field_list, "`"..name.."`");
        sql = sql..String_Join(field_list, ",");
        sql = sql.." FROM `";
        sql = sql..info.rl_name;
        sql = sql.."`";
        
        var value_list = new List<any>();
        if (value_map != null)
        {
            var condition = "";
            var where_list = new List<string>();
            var index = 1;
            for (var key, value in value_map)
            {
                where_list[index] = "`"..key.."`=?";
                value_list[index] = value;
            }
            condition = ALittle.String_Join(where_list, " AND ");
            if (condition != "") condition = " WHERE "..condition;
            sql = sql..condition;
        }
        
        var query = new MysqlStatementQuery();
        query.sql = sql;
        for (var index, value in value_list)
            query.value = value;
        var error = this.ExecuteStatement(query, thread_id);
        if (error != null) return error, null;
        var query_count = query.count;
        if (query_count == 0) return null, new List<any>();

        var list = new List<any>();
        for (var row = 1; row <= query_count; 1)
        {
            var map = new Map<string, any>();
            for (var i, name in info.name_list)
            {
                var type = __TypeMap[info.type_list[i]];
                if (type == 1)
                    map[name] = query.Int != 0;
                elseif (type == 2)
                    map[name] = query.Int;
                elseif (type == 3)
                    map[name] = query.Long;
                elseif (type == 4)
                    map[name] = query.Double;
                elseif (type == 5)
                    map[name] = query.String;
                else
                {
                    var value = query.String;
                    if (value == "")
                        map[name] = new Map<any, any>();
                    else
                    {
                        var content:any = null;
                        error, content = tcall(lua.ajson.decode, value);
                        if (error != null)
                            return error, null;
                        else
                            map[name] = content;
                    }
                }
            }
            list[row] = map;
        }
        return null, list;
    }
    
    public await fun SelectListFromByMap<T : struct>(T value_map, [Nullable] int thread_id) : string, List<T>
    {
        return this.SelectListFromByMapByReflect(reflect<T>, cast<Map<string, any>>(value_map), thread_id);
    }
    
    public await fun InsertIntoByReflect(ALittle.StructInfo info, Map<string, any> map, [Nullable] string table_name, [Nullable] int thread_id) : string
    {
        var sql = "INSERT INTO `";
        if (table_name == null)
            sql = sql..info.rl_name;
        else
            sql = sql..table_name;
        sql = sql.."` (";
        var field_list = new List<string>();
        for (var i, name in info.name_list)
            List_Push(field_list, "`"..name.."`");
        sql = sql..String_Join(field_list, ",");
        sql = sql..") VALUES (";
        var value_list = new List<string>();
        for (var i, name in info.name_list)
            List_Push(value_list, "?");
        sql = sql..String_Join(value_list, ",");
        sql = sql..")";
        
        var query = new MysqlStatementQuery();
        query.sql = sql;
        for (var i, name in info.name_list)
        {
            var type = __TypeMap[info.type_list[i]];
            var value = map[name];
            if (type == 1)
            {
                if (value != true)
                    query.Int = 0;
                else
                    query.Int = 1;
            }
            elseif (type == 2)
            {
                if (value != null)
                    query.Int = cast<int>(lua.tonumber(value));
                else
                    query.Int = 0;
            }
            elseif (type == 3)
            {
                if (value != null)
                    query.Long = cast<long>(lua.tonumber(value));
                else
                    query.Long = 0;
            }
            elseif (type == 4)
            {
                if (value != null)
                    query.Double = lua.tonumber(value);
                else
                    query.Double = 0;
            }
            elseif (type == 5)
            {
                if (value != null)
                    query.String = lua.tostring(value);
                else
                    query.String = "";
            }
            else
            {
                if (value != null)
                    query.String = lua.ajson.encode(value);
                else
                    query.String = "";
            }   
        }
        return this.ExecuteStatement(query, thread_id);
    }
    
    public await fun InsertInto<T : struct>(T value, [Nullable] string table_name, [Nullable] int thread_id) : string
    {
        return this.InsertIntoByReflect(reflect<T>, cast<Map<string, any>>(value), table_name, thread_id);
    }
    
    // info 表的反射信息，map是当前要写入的数据信息，key是主键的字段名，key_value是主键的值
    public await fun UpdateOneByReflect(ALittle.StructInfo info, Map<string, any> map, string key, any key_value, [Nullable] int thread_id) : string
    {
        if (key_value == null) return "key_value == null";
        
        var sql = "UPDATE `";
        sql = sql..info.rl_name;
        sql = sql.."` SET ";
        var set_list = new List<string>();
        for (var i, name in info.name_list)
        {
            if (key != name)
                List_Push(set_list, "`"..name.."`=?");    
        }
        sql = sql..String_Join(set_list, ",");
        sql = sql.." WHERE `";
        sql = sql..key;
        sql = sql.."`=?";
        
        var query = new MysqlStatementQuery();
        query.sql = sql;
        for (var i, name in info.name_list)
        {
            if (key != name)
            {
                var type = __TypeMap[info.type_list[i]];
                var value = map[name];
                if (type == 1)
                {
                    if (value != true)
                        query.Int = 0;
                    else
                        query.Int = 1;
                }
                elseif (type == 2)
                {
                    if (value != null)
                        query.Int = cast<int>(lua.tonumber(value));
                    else
                        query.Int = 0;
                }
                elseif (type == 3)
                {
                    if (value != null)
                        query.Long = cast<long>(lua.tonumber(value));
                    else
                        query.Long = 0;
                }
                elseif (type == 4)
                {
                    if (value != null)
                        query.Double = lua.tonumber(value);
                    else
                        query.Double = 0;
                }
                elseif (type == 5)
                {
                    if (value != null)
                        query.String = lua.tostring(value);
                    else
                        query.String = "";
                }
                else
                {
                    if (value != null)
                        query.String = lua.ajson.encode(value);
                    else
                        query.String = "";
                }
            }
        }
        query.value = key_value;
        return this.ExecuteStatement(query, thread_id);
    }

    // value是当前要写入的数据信息，key是主键的字段名，key_value是主键的值
    public await fun UpdateOne<T:struct>(T value, string key, any key_value, [Nullable] int thread_id) : string
    {
        return this.UpdateOneByReflect(reflect<T>, cast<Map<string, any>>(value), key, key_value, thread_id);
    }
    
    public await fun UpdateSetByReflect(ALittle.StructInfo info, string field, any field_value, string key, any key_value, [Nullable] int thread_id) : string
    {
        if (field_value == null) return "field_value == null";
        if (key_value == null) return "key_value == null";
        
        var sql = "UPDATE `";
        sql = sql..info.rl_name;
        sql = sql.."` SET `";
        sql = sql..field;
        sql = sql.."`=?";
        sql = sql.." WHERE `";
        sql = sql..key;
        sql = sql.."`=?";
        
        var query = new MysqlStatementQuery();
        query.sql = sql;
        query.value = field_value;
        query.value = key_value;
        return this.ExecuteStatement(query, thread_id);
    }
    
    public await fun UpdateSet<T : struct>(string field, any field_value, string key, any key_value, [Nullable] int thread_id) : string
    {
        return this.UpdateSetByReflect(reflect<T>, field, field_value, key, key_value, thread_id);
    }
    
    public await fun DeleteFromByMapByReflect(ALittle.StructInfo info, Map<string, any> value_map, [Nullable] int thread_id) : string
    {
        var sql = "DELETE FROM `";
        sql = sql..info.rl_name;
        sql = sql.."`";
        
        var condition = "";
        var value_list = new List<any>();
        if (value_map != null)
        {
            var where_list = new List<string>();
            var index = 1;
            for (var key, value in value_map)
            {
                where_list[index] = "`"..key.."`=?";
                value_list[index] = value;
            }
            condition = ALittle.String_Join(where_list, " AND ");
            if (condition != "") condition = " WHERE "..condition;
        }
        sql = sql..condition;
        
        var query = new MysqlStatementQuery();
        query.sql = sql;
        for (var index, value in value_list)
            query.value = value;
        return this.ExecuteStatement(query, thread_id);
    }
    
    public await fun DeleteFromByMap<T : struct>(T value_map, [Nullable] int thread_id) : string
    {
        return this.DeleteFromByMapByReflect(reflect<T>, cast<Map<string, any>>(value_map), thread_id);
    }
    
    public await fun DeleteFromByKeyByReflect(ALittle.StructInfo info, string key, any value, [Nullable] int thread_id) : string
    {
        var sql = "DELETE FROM `";
        sql = sql..info.rl_name;
        sql = sql.."` WHERE `";
        sql = sql..key;
        sql = sql.."`=?";

        var query = new MysqlStatementQuery();
        query.sql = sql;
        query.value = value;
        return this.ExecuteStatement(query, thread_id);
    }
    
    public await fun DeleteFromByKey<T : struct>(string key, any value, [Nullable] int thread_id) : string
    {
        return this.DeleteFromByKeyByReflect(reflect<T>, key, value, thread_id);
    }
    
    public await fun CreateIfNotExitByReflect(StructInfo info, string table_name, [Nullable] int thread_id) : string
    {
        // 收集字段名
        var name_map = new Map<string, bool>();
        for (var index, name in info.name_list)
            name_map[name] = true;
        
        // 获取主键信息
        var primary = info.option_map["primary"];
        if (primary != null && name_map[primary] == null)
        {
            primary = String_Trim(primary);
            if (name_map[primary] == null)
                return "指定的主键"..primary.."不是字段";
        }
        
        // 单例信息
        var unique_map = new Map<string, bool>();
        var unique = info.option_map["unique"];
        if (unique != null)
        {
            var list = String_Split(unique, ",");
            for (var index, value in list)
            {
                value = String_Trim(value);
                unique_map[value] = true;
                if (name_map[value] == null)
                    return "指定的唯一索引"..value.."不是字段";
            }
        }
        
        var index_map = new Map<string, bool>();
        var index = info.option_map["index"];
        if (index != null)
        {
            var list = String_Split(index, ",");
            for (var i, value in list)
            {
                value = String_Trim(value);
                index_map[value] = true;
                if (name_map[value] == null)
                    return "指定的索引"..value.."不是字段";
            }
        }
        
        var sql = "CREATE TABLE IF NOT EXISTS `";
        if (table_name == null)
            sql = sql..info.rl_name;
        else
            sql = sql..table_name;
        sql = sql.."` (";
        var sql_list = new List<string>();
        for (var i, name in info.name_list)
        {
            var type = __TypeMap[info.type_list[i]];
            if (type == 1)
                List_Push(sql_list, "`"..name.."` tinyint(4) NOT NULL DEFAULT 0");
            elseif (type == 2)
                List_Push(sql_list, "`"..name.."` int(11) NOT NULL DEFAULT 0");
            elseif (type == 3)
                List_Push(sql_list, "`"..name.."` bigint(20) NOT NULL DEFAULT 0");
            elseif (type == 4)
                List_Push(sql_list, "`"..name.."` double NOT NULL DEFAULT 0");
            elseif (type == 5)
                List_Push(sql_list, "`"..name.."` varchar(250) NOT NULL DEFAULT ''");
            else
                List_Push(sql_list, "`"..name.."` text");
        }
        sql = sql..String_Join(sql_list, ",");
        if (primary != null)
            sql = sql..", PRIMARY KEY (`"..primary.."`)";
        for (var name, _ in unique_map)
            sql = sql..", UNIQUE KEY `"..name.."` (`"..name.."`)";
        for (var name, _ in index_map)
            sql = sql..", KEY `"..name.."` (`"..name.."`)";
        
        sql = sql..") DEFAULT CHARSET=utf8mb4";
        return this.ExecuteNormal(sql, thread_id);
    }
    
    public await fun CreateIfNotExit<T : struct>([Nullable] string table_name, [Nullable] int thread_id) : string
    {
        return this.CreateIfNotExitByReflect(reflect<T>, table_name, thread_id);
    }
}

public var A_MysqlSystem = new MysqlSystem();
