
namespace ALittle;

// 路由编号
public enum RouteNum
{
    RN_DEFAULT = 1;
}

// 路由类型
public enum RouteType
{
    RT_GATEWAY = 1;     // 网关
    RT_DATA = 2;        // 数据服务器
    RT_VERSION = 3;     // 版本服务器
    RT_OPS = 4;         // 运维服务器
    RT_LOG = 5;         // 日志服务器
    RT_FILE = 6;        // 文件服务器
    RT_GAME = 7;        // 游戏服务器
    RT_WEB = 8;		 // 普通的文件下载服务器
    RT_DEPLOY = 9;	  // 部署服务器
}

// 路由端口
public enum RoutePort
{
    RT_GATEWAY_HTTP = 1000;     // 网关http端口
    RT_GATEWAY_CONNECT = 1001;  // 网关内部链接端口
    
    RT_VERSION_HTTP = 1100;     // 版本http端口
    RT_VERSION_CLIENT = 1101;   // 版本客户端端口
    
    RT_OPS_HTTP = 1200;         // 运维http端口
    RT_OPS_CLIENT = 1201;       // 运维客户端端口
    
    RT_LOG_CONNECT = 1300;      // 日志内部链接端口
    
    RT_FILE_HTTP = 1400;        // 文件http端口
    
    RT_GAME_CLIENT_BEGIN = 1500;      // 游戏服务器起始端口
    RT_DATA_BEGIN = 1600;      // 数据服务器起始端口

    RT_WEB_HTTP = 1700;		// 普通的文件下载服务器

    RT_DEPLOY_HTTP = 1800;     // 部署http端口
    RT_DEPLOY_CLIENT = 1801;   // 部署客户端端口
}

// 获取路由名称
public static GetRouteName(int route_type, int route_num) : string
{
    if (route_type == RouteType.RT_GATEWAY) return "Gateway_"..route_num;
    if (route_type == RouteType.RT_DATA) return "Data_"..route_num;
    if (route_type == RouteType.RT_VERSION) return "Version_"..route_num;
    if (route_type == RouteType.RT_OPS) return "OPS_"..route_num;
    if (route_type == RouteType.RT_LOG) return "Log_"..route_num;
    if (route_type == RouteType.RT_FILE) return "File_"..route_num;
    if (route_type == RouteType.RT_GAME) return "Game_"..route_num;
    if (route_type == RouteType.RT_WEB) return "Web_"..route_num;
    return "Unknow_"..route_num;
}

// 系统账号ID
public var SYSTEM_ACCOUNT_ID = 0x7FFFFFFF;
// 账号取模
public var ACCOUNT_ID_MOD = 1000000;
// 账号ID长度
public var GEN_ACCOUNT_ID_LEN = 6; // 生成的账号ID最长是6位（999999），比ACCOUNT_ID_MOD小1

// 计算账号ID属于那个DataServer
public static GET_DATA_ROUTE_NUM_BY_ACCOUNT_ID(int id) : int
{
    return lua.math.floor(id / ACCOUNT_ID_MOD);
}

// 计算最终的账号ID
public static FINAL_ACCOUNT_ID(int data_route_num, int gen_account_id) : int
{
    return data_route_num * ACCOUNT_ID_MOD + gen_account_id;
}

// DataServer的最大账号ID
public static MAX_ACCOUNT_ID_BY_DATA_ROUTE_NUM(int data_route_num) : int
{
    return (data_route_num + 1) * ACCOUNT_ID_MOD - 1;
}

// DataServer的最小账号ID
public static MIN_ACCOUNT_ID_BY_DATA_ROUTE_NUM(int data_route_num) : int
{
    return data_route_num*ACCOUNT_ID_MOD;
}