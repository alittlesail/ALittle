namespace ALittle;

// 连接信息
struct SessionInfo
{
    string new_client;
    string old_client;
    int time;
}

// 踢下线
public struct S2CWebForceLogout
{
    string reason;
}

// 服务器下发账号信息
public struct S2CWebAccountInfo
{
    string account_id;
    string account_name;
    string role_id;
    string role_name;
    Map<string, bool> permission_map;
}

// 服务器下发web信息
public struct S2CWebServerInfo
{
    string http_ip;
    int http_port;
}

// 服务器下发验证码
public struct S2CWebSession
{
    string session_id;
}

// Web账号
public class WebAccount
{
    // 用来标记是否已经登录成功
    private bool _is_login;
    // 账号基础信息
    private WebBaseInfo _base_info;
    // 账号角色信息
    private WebRoleInfo _role_info;
    // 权限快照
    private Map<string, bool> _permission_map;
    // 验证码信息
    private SessionInfo _session_info;
    // 客户端连接
    private MsgReceiver _client;

    public ctor(MsgReceiver client, WebBaseInfo base_info, WebRoleInfo role_info)
    {
        // 初始化验证码信息
        this._session_info = new SessionInfo();
        this._session_info.old_client = "s"..lua.tostring(lua.math.random(100000, 999999));
        this._session_info.new_client = this._session_info.old_client;
        this._session_info.time = lua.os.time(null);

        // 初始化客户端，以及其他信息
        this._client = client;
        this._base_info = base_info;
        this._role_info = role_info;

        // 初始化权限信息
        this._permission_map = new Map<string, bool>();
        for (var i, permission in this._role_info.permission)
            this._permission_map[permission] = true;
    }

    // 获取接口
    public fun IsLogin() : bool { return this._is_login; }
    public fun IsDataReady() : bool { return this._is_login; }
    public fun GetID() : string { return this._base_info.account_id; }
    public fun GetRoleID() : string { return this._role_info.role_id; }
    public fun GetAccountName() : string { return this._base_info.account_name; }
    public fun GetClient() : MsgReceiver { return this._client; }

    // 发送数据包
    public fun SendMsg<T:struct>(T msg)
    {
        if (this._client == null) return;
        this._client.SendMsg(msg);
    }

    protected await fun UpdateRoleInfo()
    {
        // 获取基本信息
        {
            var error, base_info = A_MysqlSystem.SelectOneFromByKey{WebBaseInfo}("account_id", this._base_info.account_id);
            if (error != null) Error(error);
            if (base_info == null) return;
            this._base_info = base_info;
        }
        
        // 获取角色信息
        {
            this._role_info = new WebRoleInfo();
            this._permission_map = new Map<string, bool>();
            var error, role_info = A_MysqlSystem.SelectOneFromByKey{WebRoleInfo}("role_id", this._base_info.role_id);
            if (error != null) Error(error);
            if (role_info == null) return;
            this._role_info = role_info;
        }

        // 更新权限信息
        for (var i, permission in this._role_info.permission)
            this._permission_map[permission] = true;
    }

    // 检查权限
    protected fun CheckPermission(string permission) : bool
    {
        if (this._role_info.role_id == "alittle") return true;
        return this._permission_map[permission] != null;
    }

    // 强制踢下线
    public fun ForceLogout(string reason)
    {
        var param = new S2CWebForceLogout();
        param.reason = reason;
        this._client.SendMsg(param);
    }

    // 系统登出成功之后调用
    protected fun LogoutActionSystem()
    {
        this._is_login = false;
    }

    // 系统登录成功之后调用
    protected fun LoginActionSystem()
    {
        this._is_login = true;

        // 生成验证码并同步给客户端
        this.GenSessionCodeAndSync();

        // 发送账号信息
        {
            var param = new S2CWebAccountInfo();
            param.account_id = this._base_info.account_id;
            param.account_name = this._base_info.account_name;
            param.role_id = this._role_info.role_id;
            param.role_name = this._role_info.role_name;
            param.permission_map = this._permission_map;
            this._client.SendMsg(param);
        }

        // 发送服务器信息
        {
            var param = new S2CWebServerInfo();
            param.http_ip = __CPPAPI_ServerSchedule.GetHttpServerYunIp();
            if (param.http_ip == null || param.http_ip == "")
                param.http_ip = __CPPAPI_ServerSchedule.GetHttpServerIp();
            param.http_port = __CPPAPI_ServerSchedule.GetHttpServerPort();
            this._client.SendMsg(param);
        }
    }

    // 生成并同步验证码
    protected fun GenSessionCodeAndSync()
    {
        this._session_info.old_client = this._session_info.new_client;
        this._session_info.new_client = "s"..lua.tostring(lua.math.random(100000, 999999));
        this._session_info.time = lua.os.time(null);

        var param = new S2CWebSession();
        param.session_id = this._session_info.new_client;
        this._client.SendMsg(param);
    }

    // 检查并同步验证码
    protected fun CheckSessionCodeAndSync(string session_code) : bool
    {
        if (session_code == null || session_code == "") return false;
        session_code = lua.tostring(session_code);
        var result = this._session_info.old_client == session_code || this._session_info.new_client == session_code;

        if (lua.os.time(null) - this._session_info.time > 300)
            this.GenSessionCodeAndSync();

        return result;
    }
}