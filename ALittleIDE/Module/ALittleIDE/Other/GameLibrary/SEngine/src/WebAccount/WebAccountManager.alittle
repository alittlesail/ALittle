namespace ALittle;

// 账号基本信息
public struct WebBaseInfo
{
    option primary = "account_id";
    option unique = "account_name";
    
    string account_id;         // 账号ID
    string account_name;       // 账号名
    string account_pwd;        // 密码
    string role_id;            // 角色ID
    string creator_id;		   // 创建者ID
    int create_time;           // 创建时间
    int create_index;          // 创建时间序列
    int update_time;           // 创建时间
    int update_index;          // 创建时间序列
}

// 账号角色信息
public struct WebRoleInfo
{
    string role_id;            // 角色ID
    string role_name;          // 角色名
    List<string> permission;   // 权限
    string creator_id;         // 创建者ID
    int create_time;           // 创建时间
    int create_index;          // 创建时间序列
    int update_time;           // 创建时间
    int update_index;          // 创建时间序列
}

public struct WebAccountLoginEvent : Event
{
    WebAccount account;
}

public struct WebAccountLogoutEvent : Event
{
    WebAccount account;
}

// 账号管理器
public class WebAccountManager : EventDispatcher
{
    private GatewayUpdateRoute _update_route;

    private Map<string, WebAccount> _id_map_account;            // Id映射账号对象
    private Map<MsgReceiver, WebAccount> _client_map_account;   // 客户端映射账号对象
    private int _account_count;                                 // 账号数量

    public ctor()
    {
        this._id_map_account = new Map<string, WebAccount>();
        this._client_map_account = new Map<MsgReceiver, WebAccount>();
        this._account_count = 0;
    }
    
    public await fun Setup()
    {
        // 创建表结构
        var error = A_MysqlSystem.CreateIfNotExit{WebBaseInfo}();
        assert(error == null, error);
        error = A_MysqlSystem.CreateIfNotExit{WebRoleInfo}();
        assert(error == null, error);
        
        // 检查Root的角色是否存在，没有就创建一个
        var count:long = 0;
        error, count = A_MysqlSystem.SelectCount{WebRoleInfo}("role_id", "alittle");
        if (error != null) Error(error);
        if (count == 0)
        {
            var role_info = new WebRoleInfo();
            role_info.role_id = "alittle";
            role_info.role_name = "alittle";
            role_info.permission = new List<string>();
            role_info.creator_id = "alittle";
            var time, index = NewTimeAndIndex();
            role_info.create_time = time;
            role_info.create_index = index;
            role_info.update_time = time;
            role_info.update_index = index;
            error = A_MysqlSystem.InsertInto(role_info);
            if (error != null) Error(error);
        }

        // 检查Root账号是否存在，没有就新建一个
        error, count = A_MysqlSystem.SelectCount{WebBaseInfo}("account_name", "alittle");
        if (error != null) Error(error);
        if (count == 0)
        {
            var base_info = new WebBaseInfo();
            base_info.account_id = String_Md5("alittle");
            base_info.account_name = "alittle";
            base_info.account_pwd = String_Md5("ALittle"..String_Md5("alittle").."ALittle");
            base_info.role_id = "alittle";
            var time, index = NewTimeAndIndex();
            base_info.create_time = time;
            base_info.create_index = index;
            base_info.update_time = time;
            base_info.update_index = index;
            error = A_MysqlSystem.InsertInto(base_info);
            if (error != null) Error(error);
        }
        
        // 监听Session事件
        this._update_route = new GatewayUpdateRoute(__CPPAPI_ServerSchedule.GetClientServerYunIp()
                                                    , __CPPAPI_ServerSchedule.GetClientServerIp()
                                                    , __CPPAPI_ServerSchedule.GetClientServerPort()
                                                    , __CPPAPI_ServerSchedule.GetHttpServerYunIp()
                                                    , __CPPAPI_ServerSchedule.GetHttpServerIp()
                                                    , __CPPAPI_ServerSchedule.GetHttpServerPort()
                                                    , this._account_count);
        
        // 监听客户端事件
        A_ClientSystem.AddEventListener(this, this.HandleClientDisconnect);
        A_ClientSystem.AddEventListener(this, this.HandleClientConnect);
    }

    // 根据账号ID获取对象
    public fun GetAccountById(string account_id) : WebAccount
    {
        return this._id_map_account[account_id];
    }

    // 获取所有账号
    public fun SendMsgToAll<T:struct>(T msg)
    {
        for (var id, account in this._id_map_account)
        	account.SendMsg(msg);
    }

    // 根据连接获取对象
    public fun GetAccountByClient(IMsgCommon client) : WebAccount
    {
        return this._client_map_account[cast<MsgReceiver>(client)];
    }

    // 添加账号对象
    protected fun AddAccount(WebAccount account)
    {
        this._client_map_account[account.GetClient()] = account;
        this._id_map_account[account.GetID()] = account;
        ++ this._account_count;
    }

    // 移除账号对象
    protected fun RemoveAccount(string account_id)
    {
        var account = this._id_map_account[account_id];
        if (account == null) return;

        this._id_map_account[account_id] = null;
        this._client_map_account[account.GetClient()] = null;
        -- this._account_count;
        
        this._update_route.UpdateRouteWeight(this._account_count);
    }

    // 强制登出
    public fun ForceLogout(string account_id, string reason) : bool
    {
        var account = this._id_map_account[account_id];
        if (account == null) return false;

        // 登出实践
        var logout_event = new WebAccountLogoutEvent();
        logout_event.account = account;
        this.DispatchEvent(logout_event);

        // 提示登出
        account.ForceLogout(reason);
        // 执行登出逻辑
        account.LogoutActionSystem();
        // 移除
        this.RemoveAccount(account_id);
        return true;
    }

    // 对http请求进行验证
    public fun CheckLoginById(string account_id, string session_id) : WebAccount
    {
        var account = this.GetAccountById(account_id);
        assert(account != null, "请先登录");
        assert(account.CheckSessionCodeAndSync(session_id), "请先登录");
        return account;
    }

    // 检查客户端
    public fun CheckLoginByClient(IMsgCommon client) : WebAccount
    {
        var account = this.GetAccountByClient(client);
        assert(account != null, "请先登录");
        return account;
    }

    public fun Shutdown()
    {

    }
    
    // 处理客户端断开连接
    protected fun HandleClientDisconnect(ClientDisconnectEvent event)
    {
        // 标记客户端未登陆
        event.msg_receiver._web_is_logining = false;
        // 处理已登录的
        var account = this.GetAccountById(event.msg_receiver._web_account_id);
        if (account == null) return;

        // 登出回调
        var logout_event = new WebAccountLogoutEvent();
        logout_event.account = account;
        this.DispatchEvent(event);

        event.msg_receiver._web_account_id = "";
        // 执行登出逻辑
        account.LogoutActionSystem();
        // 移除掉
        this.RemoveAccount(account.GetID());
    }

    protected fun HandleClientConnect(ClientConnectEvent event)
    {
    }
}
        
public var A_WebAccountManager = new WebAccountManager();

public struct QWebLogin
{
    string device_id;			// 设备ID
    string client_platform;     // 客户端平台
    string third_platform;      // 第三方登陆平台
    string account_name;		// 账号名
    string account_pwd;			// 密码
}

public struct AWebLogin
{

}

[Msg]
public await static HandleQWebLogin(IMsgCommon client, QWebLogin msg) : AWebLogin
{
    var receiver = cast<MsgReceiver>(client);
    assert(receiver._web_account_id == "" || receiver._web_account_id == null, "当前连接已经登录");
    
    var error:string = null;
    
    // 检查账号是否存在
    var base_info:WebBaseInfo = null;
    error, base_info = A_MysqlSystem.SelectOneFromByKey{WebBaseInfo}("account_name", msg.account_name);
    if (error != null) throw("数据库操作失败:"..error);
    assert(base_info != null, "账号或密码错误");
    
    // 检查密码
    assert(base_info.account_pwd == String_Md5("ALittle"..msg.account_pwd.."ALittle"), "账号或密码错误");
    
    // 检查角色是否存在
    var role_info:WebRoleInfo = null;
    error, role_info = A_MysqlSystem.SelectOneFromByKey{WebRoleInfo}("role_id", base_info.role_id);
    if (error != null) throw("数据库操作失败:"..error);
    assert(role_info != null, "您没有登录权限");

    // 构建权限映射表
    var permission_map = new Map<string, bool>();
    for (var i, permission in role_info.permission)
        permission_map[permission] = true;

    // 检查登录权限
    assert(msg.account_name == "alittle" || permission_map[WebPermission.PERMISSION_ACCOUNT_LOGIN] != null, "您没有登录权限");
    
    // 如果有另一个账号登录，那么就踢下线
    var other_account = A_WebAccountManager.GetAccountById(base_info.account_id);
    if (other_account != null)
    {
        var other_client = other_account.GetClient();
        other_account.ForceLogout("您的账号再另一个地方登录了");
        other_account.LogoutActionSystem();
        A_WebAccountManager.RemoveAccount(base_info.account_id);
        if (other_client != null) other_client._web_account_id = "";
    }

    // 创建账号对象
    var web_account = new WebAccount(receiver, base_info, role_info);
    A_WebAccountManager.AddAccount(web_account);

    // 标记为已登录成功
    receiver._web_account_id = base_info.account_id;
    
    // 开始执行登录逻辑
    web_account.LoginActionSystem();

    // 登陆事件
    var login_event = new WebAccountLoginEvent();
    login_event.account = web_account;
    A_WebAccountManager.DispatchEvent(login_event);

    // 上报负载
    A_WebAccountManager._update_route.UpdateRouteWeight(A_WebAccountManager._account_count);
    
    return new AWebLogin();
}

public struct QWebLogout
{

}

public struct AWebLogout
{

}

[Msg]
public await static HandleQWebLogout(IMsgCommon client, QWebLogout msg) : AWebLogout
{
    // 如果还未登录，那么就直接忽略掉这个数据包
    var receiver = cast<MsgReceiver>(client);
    assert(receiver._web_account_id != null && receiver._web_account_id != "", "当前连接还未登录");
    
    var web_account = A_WebAccountManager.GetAccountByClient(receiver);
    assert(web_account != null, "账号还未登录");

    // 登出事件
    var logout_event = new WebAccountLogoutEvent();
    logout_event.account = web_account;
    A_WebAccountManager.DispatchEvent(logout_event);

    // 清空标记
    receiver._web_account_id = "";
    // 执行登出逻辑
    web_account.LogoutActionSystem();
    // 把账号从映射表中删除
    A_WebAccountManager.RemoveAccount(web_account.GetID());
    
    return new AWebLogout();
}

public struct QWebChangePassword
{
    string old_password;
    string new_password;
}

public struct AWebChangePassword
{
}

[Msg]
public await static HandleQWebChangePassword(IMsgCommon client, QWebChangePassword msg) : AWebChangePassword
{
    var web_account = A_WebAccountManager.CheckLoginByClient(client);
    // 检查账号是否存在
    var error:string = null;
    var base_info:WebBaseInfo = null;
    error, base_info = A_MysqlSystem.SelectOneFromByKey{WebBaseInfo}("account_id", web_account.GetID());
    if (error != null) throw("数据库操作失败:"..error);
    assert(base_info != null, "账号不存在");
    // 检查密码
    assert(String_Md5("ALittle"..msg.old_password.."ALittle") == base_info.account_pwd, "原密码错误");
    var new_password = String_Md5("ALittle"..msg.new_password.."ALittle");
    error = A_MysqlSystem.UpdateSet{WebBaseInfo}("account_pwd", new_password,
                                "account_id", base_info.account_id);
    if (error != null) throw("数据库操作失败:"..error);
    return new AWebChangePassword();
}