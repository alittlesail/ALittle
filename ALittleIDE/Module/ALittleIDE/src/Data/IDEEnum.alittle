
namespace ALittleIDE;

class IDEEnum
{
	public Map<int, string> xy_type;
	public Map<string, int> xy_rtype;

	public Map<int, string> wh_type;
	public Map<string, int> wh_rtype;

	public Map<int, string> HALIGN_type;
	public Map<string, int> HALIGN_rtype;

	public Map<int, string> VALIGN_type;
	public Map<string, int> VALIGN_rtype;
    
	public Map<int, string> hv_type;
	public Map<string, int> hv_rtype;

	public Map<int, string> fix_type;
	public Map<string, int> fix_rtype;
    
	public Map<bool, string> yn_type;
	public Map<string, bool> yn_rtype;

	public Map<bool, string> aje_type;
	public Map<string, bool> aje_rtype;

	public Map<int, string> flip_type;
	public Map<string, int> flip_rtype;
	
	public Map<int, string> select_type;
	public Map<string, int> select_rtype;

	public List<string> event_type_list;
	public Map<string, bool> add_child_change_map;
	public Map<string, bool> can_move_child_map;
	public Map<string, bool> can_resize_child_map;
	public Map<string, bool> text_type_display_map;
	public Map<string, bool> text_edit_display_map;

	public List<string> child_type_list;
	public Map<string, ALittle.DisplayInfo> type_default_map;

	public Map<string, bool> can_add_child_map;
	public Map<string, List<string>> child_show_map;
	public Map<string, Map<string, bool>> child_show_map_map;
	public Map<string, List<string>> nature_show_map;
	public Map<string, Map<string, bool>> nature_show_map_map;

	public ctor()
	{
		// 类型枚举
		this.xy_type = new Map<int, string>();
		this.xy_type[ALittle.UIEnumTypes.POS_ABS] = "绝对位置";
		this.xy_type[ALittle.UIEnumTypes.POS_ALIGN_STARTING] = "起始对齐";
		this.xy_type[ALittle.UIEnumTypes.POS_ALIGN_CENTER] = "居中对齐";
		this.xy_type[ALittle.UIEnumTypes.POS_ALIGN_ENDING] = "末尾对齐";
		this.xy_type[ALittle.UIEnumTypes.POS_PERCENT_STARTING] = "起始百分比";
		this.xy_type[ALittle.UIEnumTypes.POS_PERCENT_CENTER] = "居中百分比";
		this.xy_type[ALittle.UIEnumTypes.POS_PERCENT_ENDING] = "末尾百分比";

		this.xy_rtype = new Map<string, int>();
		this.xy_rtype["绝对位置"] = ALittle.UIEnumTypes.POS_ABS;
		this.xy_rtype["起始对齐"] = ALittle.UIEnumTypes.POS_ALIGN_STARTING;
		this.xy_rtype["居中对齐"] = ALittle.UIEnumTypes.POS_ALIGN_CENTER;
		this.xy_rtype["末尾对齐"] = ALittle.UIEnumTypes.POS_ALIGN_ENDING;
		this.xy_rtype["起始百分比"] = ALittle.UIEnumTypes.POS_PERCENT_STARTING;
		this.xy_rtype["居中百分比"] = ALittle.UIEnumTypes.POS_PERCENT_CENTER;
		this.xy_rtype["末尾百分比"] = ALittle.UIEnumTypes.POS_PERCENT_ENDING;

		this.wh_type = new Map<int, string>();
		this.wh_type[ALittle.UIEnumTypes.SIZE_ABS] = "绝对大小";
		this.wh_type[ALittle.UIEnumTypes.SIZE_PERCENT] = "百分比大小";
		this.wh_type[ALittle.UIEnumTypes.SIZE_MARGIN] = "边距大小";

		this.wh_rtype = new Map<string, int>();
		this.wh_rtype["绝对大小"] = ALittle.UIEnumTypes.SIZE_ABS;
		this.wh_rtype["百分比大小"] = ALittle.UIEnumTypes.SIZE_PERCENT;
		this.wh_rtype["边距大小"] = ALittle.UIEnumTypes.SIZE_MARGIN;

		this.HALIGN_type = new Map<int, string>();
		this.HALIGN_type[ALittle.UIEnumTypes.HALIGN_LEFT] = "水平居左";
		this.HALIGN_type[ALittle.UIEnumTypes.HALIGN_CENTER] = "水平居中";
		this.HALIGN_type[ALittle.UIEnumTypes.HALIGN_RIGHT] = "水平居右";

		this.HALIGN_rtype = new Map<string, int>();
		this.HALIGN_rtype["水平居左"] = ALittle.UIEnumTypes.HALIGN_LEFT;
		this.HALIGN_rtype["水平居中"] = ALittle.UIEnumTypes.HALIGN_CENTER;
		this.HALIGN_rtype["水平居右"] = ALittle.UIEnumTypes.HALIGN_RIGHT;

		this.VALIGN_type = new Map<int, string>();
		this.VALIGN_type[ALittle.UIEnumTypes.VALIGN_TOP] = "垂直置顶";
		this.VALIGN_type[ALittle.UIEnumTypes.VALIGN_CENTER] = "垂直居中";
		this.VALIGN_type[ALittle.UIEnumTypes.VALIGN_BOTTOM] = "垂直置底";

		this.VALIGN_rtype = new Map<string, int>();
		this.VALIGN_rtype["垂直置顶"] = ALittle.UIEnumTypes.VALIGN_TOP;
		this.VALIGN_rtype["垂直居中"] = ALittle.UIEnumTypes.VALIGN_CENTER;
		this.VALIGN_rtype["垂直置底"] = ALittle.UIEnumTypes.VALIGN_BOTTOM;

		this.hv_type = new Map<int, string>();
		this.hv_type[ALittle.UIEnumTypes.TYPE_H] = "水平";
		this.hv_type[ALittle.UIEnumTypes.TYPE_V] = "垂直";

		this.hv_rtype = new Map<string, int>();
		this.hv_rtype["水平"] = ALittle.UIEnumTypes.TYPE_H;
		this.hv_rtype["垂直"] = ALittle.UIEnumTypes.TYPE_V;

		this.fix_type = new Map<int, string>();
		this.fix_type[ALittle.UIEnumTypes.FREE] = "自由";
		this.fix_type[ALittle.UIEnumTypes.FIXED] = "锁定";

		this.fix_rtype = new Map<string, int>();
		this.fix_rtype["自由"] = ALittle.UIEnumTypes.FREE;
		this.fix_rtype["锁定"] = ALittle.UIEnumTypes.FIXED;

		this.yn_type = new Map<bool, string>();
		this.yn_type[false] = "否";
		this.yn_type[true] = "是";

		this.yn_rtype = new Map<string, bool>();
		this.yn_rtype["否"] = false;
		this.yn_rtype["是"] = true;

		this.aje_type = new Map<bool, string>();
		this.aje_type[false] = "拒绝默认事件";
		this.aje_type[true] = "接受默认事件";

		this.aje_rtype = new Map<string, bool>();
		this.aje_rtype["拒绝默认事件"] = false;
		this.aje_rtype["接受默认事件"] = true;

		this.flip_type = new Map<int, string>();
		this.flip_type[ALittle.UIEnumTypes.FLIP_NONE] = "无";
		this.flip_type[ALittle.UIEnumTypes.FLIP_H] = "水平";
		this.flip_type[ALittle.UIEnumTypes.FLIP_V] = "垂直";
		this.flip_type[ALittle.UIEnumTypes.FLIP_HV] = "水平+垂直";

		this.flip_rtype = new Map<string, int>();
		this.flip_rtype["无"] = ALittle.UIEnumTypes.FLIP_NONE;
		this.flip_rtype["水平"] = ALittle.UIEnumTypes.FLIP_H;
		this.flip_rtype["垂直"] = ALittle.UIEnumTypes.FLIP_V;
		this.flip_rtype["水平+垂直"] = ALittle.UIEnumTypes.FLIP_HV;
		
		this.select_type = new Map<int, string>();
		this.select_type[ALittle.UIEnumTypes.SELECT_NONE] = "无";
		this.select_type[ALittle.UIEnumTypes.SELECT_FILE] = "选择文件";
		this.select_type[ALittle.UIEnumTypes.SELECT_DIR] = "选择文件夹";

		this.select_rtype = new Map<string, int>();
		this.select_rtype["无"] = ALittle.UIEnumTypes.SELECT_NONE;
		this.select_rtype["选择文件"] = ALittle.UIEnumTypes.SELECT_FILE;
		this.select_rtype["选择文件夹"] = ALittle.UIEnumTypes.SELECT_DIR;

		this.event_type_list = [ 
			"UIClickEvent",
			"UIChangedEvent",
			"UISelectChangedEvent",
			"UIFocusInEvent",
			"UIFocusOutEvent",
			"UIButtonDragEvent",
			"UIButtonDragBeginEvent",
			"UIButtonDragEndEvent",
			"UILongButtonDownEvent",
			"UIEnterKeyEvent",
			"UIDragDownEvent",
			"UIDragUpEvent",
			"UIDragLeftEvent",
			"UIDragRightEvent",
			"UIMoveInEvent",
			"UIMoveOutEvent",
			"UIMouseMoveEvent",
			"UIDropEvent",
			"UIDropFileEvent",
			"UIKeyDownEvent",
			"UILButtonDownEvent",
			"UILButtonUpEvent",
			"UIRButtonDownEvent",
			"UIRButtonUpEvent",
			"UIMButtonDownEvent",
			"UIMButtonUpEvent",
			"UIMButtonWheelEvent",
			"UIFClickEvent",
			"UIMClickEvent",
			"UITextInputEvent",
			"UIResizeEvent",
			"UIShowEvent",
			"UIHideEvent",
			"UITabKeyEvent",
            "UIAtKeyEvent",
            "UIEscKeyEvent",
			"UITabCloseEvent",
			"UIFButtonDownEvent",
			"UIFButtonUpEvent",
			"UIFDragBeginEvent",
			"UIFDragEvent",
			"UIFDragEndEvent",
			"UISystemSelectFileEvent",
			"UISystemSelectSaveEvent",
			"UISystemSelectDirectoryEvent"
		];

		// 添加子控件后大小会发生变化的控件
		this.add_child_change_map = new Map<string, bool>();
		this.add_child_change_map["Linear"] = true;

		// 子控件可以自由移动的容器控件
		this.can_move_child_map = new Map<string, bool>();
		this.can_move_child_map["FramePlay"] = true;
		this.can_move_child_map["DisplayLayout"] = true;
		this.can_move_child_map["DisplayView"] = true;
		this.can_move_child_map["ScrollScreen"] = true;
		this.can_move_child_map["Dialog"] = true;
		this.can_move_child_map["SpringButton"] = true;
		this.can_move_child_map["SpringDialog"] = true;

		// 子控件可以变化大小的容器控件
		this.can_resize_child_map = new Map<string, bool>();
		this.can_resize_child_map["FramePlay"] = true;
		this.can_resize_child_map["DisplayLayout"] = true;
		this.can_resize_child_map["DisplayView"] = true;
		this.can_resize_child_map["ScrollScreen"] = true;
		this.can_resize_child_map["Dialog"] = true;

		// 属性中有font_path font_size的控件
		this.text_type_display_map = new Map<string, bool>();
		this.text_type_display_map["Text"] = true;
		this.text_type_display_map["TextArea"] = true;
		this.text_type_display_map["TextEdit"] = true;
		this.text_type_display_map["TextInput"] = true;
		this.text_type_display_map["ImageEdit"] = true;
		this.text_type_display_map["ImageInput"] = true;
		this.text_type_display_map["RichEdit"] = true;
		this.text_type_display_map["RichInput"] = true;

		// 可以编辑text的控件
		this.text_edit_display_map = new Map<string, bool>();
		this.text_edit_display_map["Text"] = true;
		this.text_edit_display_map["TextArea"] = true;
		this.text_edit_display_map["TextEdit"] = true;
		this.text_edit_display_map["TextInput"] = true;
		this.text_edit_display_map["ImageEdit"] = true;
		this.text_edit_display_map["ImageInput"] = true;
		this.text_edit_display_map["TextButton"] = true;
		this.text_edit_display_map["TextCheckButton"] = true;
		this.text_edit_display_map["TextRadioButton"] = true;
		this.text_edit_display_map["SpringTextButton"] = true;
		this.text_edit_display_map["SpringNumber"] = true;

		// 可创建的控件列表
		this.child_type_list = [
			"DisplayLayout",
			"DisplayView",
			"Quad",
			"Image",
			"Grid9Image",
			"Sprite",
			"SpringTextButton",
			"Text",
			"TextArea",
			"TextInput",
			"TextEdit",
			"Slider",
			"Grid3",
			"Grid9",
			"Linear",
			"Tab",
			"DropDown",
			"ScrollBar",
			"ScrollList",
			"ScrollScreen",
			"Dialog",
			"TileTable",
			"TextCheckButton",
			"TextRadioButton",
			"ImageEdit",
			"ImageInput",
			"RichArea",
			"RichInput",
			"RichEdit",
			"ImagePlay",
            "SpritePlay",
            "SpriteNumber",
			"TextButton",
			"ScrollButton",
            "Triangle",
            "VertexImage",
			"Piechart",
			"FramePlay"
		];

		// 创建各控件的默认数据
		this.type_default_map = new Map<string, ALittle.DisplayInfo>();
		// 遍历控件类型
		for (var k, v in this.child_type_list)
		{
			var clazz = cast<Map<string, any>>(ALittle)[v];
			if (clazz == null)
				ALittle.Log("没有找到 "..v.." 这个类");
			else
			{
				var object:ALittle.DisplayObject = ALittle.NewObject(clazz, g_Control);
				var class_info = reflect(object);
				var setter_list = class_info.__setter;
				var info = new ALittle.DisplayInfo();
				info.__class = v;
				for (var attr, func in setter_list)
					cast<Map<string, any>>(info)[attr] = cast<Map<string, any>>(object)[attr];
				this.type_default_map[v] = info;
			}
		}

		// 可添加子控件的对象
		this.can_add_child_map = new Map<string, bool>();
		this.can_add_child_map["DisplayLayout"] = true;
		this.can_add_child_map["DisplayView"] = true;
		this.can_add_child_map["Linear"] = true;
		this.can_add_child_map["ScrollScreen"] = true;
		this.can_add_child_map["Dialog"] = true;
		this.can_add_child_map["Tab"] = true;
		this.can_add_child_map["TileTable"] = true;
		this.can_add_child_map["ScrollList"] = true;
		this.can_add_child_map["FramePlay"] = true;
		this.can_add_child_map["SpringButton"] = true;
		this.can_add_child_map["SpringCheckButton"] = true;
		this.can_add_child_map["SpringRadioButton"] = true;
		this.can_add_child_map["SpringDialog"] = true;

		// 可添加show的对象
		this.child_show_map = new Map<string, List<string>>();
		this.child_show_map["Grid3"] = ["show_up", "show_center", "show_down"];
		this.child_show_map["Grid9"] = ["show_left_top", "show_left_center", "show_left_bottom", "show_center_top", "show_center_center", "show_center_bottom", "show_right_top", "show_right_center", "show_right_bottom"];
		this.child_show_map_map = new Map<string, Map<string, bool>>();
		for (var k, list in this.child_show_map)
		{
			var map = new Map<string, bool>();
			for (var _, name in list)
				map[name] = true;
			this.child_show_map_map[k] = map;   
        }

		// 面板上直接修改的show
		this.nature_show_map = new Map<string, List<string>>();
		this.nature_show_map["TextButton"] = ["show_text", "show_up", "show_down", "show_over", "show_disabled","show_down_text", "show_over_text", "show_disabled_text"];
		this.nature_show_map["SpringTextButton"] = ["show_text", "show_up", "show_disabled", "show_disabled_text"];
		this.nature_show_map["ScrollButton"] = ["show_text", "show_up", "show_down", "show_over", "show_disabled","show_down_text", "show_over_text", "show_disabled_text"];
		this.nature_show_map["Tab"] = ["show_head_background"];
		this.nature_show_map["DropDown"] = ["show_text", "show_up", "show_down", "show_over", "show_disabled", "show_selected_up", "show_selected_down", "show_selected_over", "show_selected_disabled", "show_over_text", "show_down_text", "show_disabled_text", "show_selected_text", "show_selected_over_text", "show_selected_down_text", "show_selected_disabled_text", "show_background", "show_scrollbar"];
		this.nature_show_map["ScrollBar"] = ["up_button", "down_button", "bar_button", "bar_background"];
		this.nature_show_map["ScrollScreen"] = ["container", "right_scrollbar", "bottom_scrollbar" ];
		this.nature_show_map["Dialog"] = ["show_background", "show_head_drag", "show_title", "show_close_button"];
		this.nature_show_map["TextCheckButton"] = ["show_text", "show_up", "show_down", "show_over", "show_disabled", "show_selected_up", "show_selected_down", "show_selected_over", "show_selected_disabled", "show_over_text", "show_down_text", "show_disabled_text", "show_selected_text", "show_selected_over_text", "show_selected_down_text", "show_selected_disabled_text"];
		this.nature_show_map["TextRadioButton"] = ["show_text", "show_up", "show_down", "show_over", "show_disabled", "show_selected_up", "show_selected_down", "show_selected_over", "show_selected_disabled", "show_over_text", "show_down_text", "show_disabled_text", "show_selected_text", "show_selected_over_text", "show_selected_down_text", "show_selected_disabled_text"];
		this.nature_show_map["ImageEdit"] = ["show_up", "show_down", "show_over", "show_disabled"];
		this.nature_show_map["ImageInput"] = ["show_up", "show_down", "show_over", "show_disabled"];
		this.nature_show_map["Slider"] = ["bar_background", "bar_button"];
		this.nature_show_map["ScrollList"] = ["right_scrollbar"];

		this.nature_show_map["RichEdit"] = ["start_cursor", "end_cursor"];
		this.nature_show_map["RichInput"] = ["start_cursor", "end_cursor"];
		this.nature_show_map_map = new Map<string, Map<string, bool>>();
		for (var k, list in this.child_show_map)
		{
			var map = new Map<string, bool>();
			for (var _, name in list)
				map[name] = true;
			this.nature_show_map_map[k] = map;
        }
	}
}
////////////////////////////////////////////////////////////////////////////////////////////

protected var g_IDEEnum = new IDEEnum();