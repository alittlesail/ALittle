
namespace ALittleIDE;

// 项目事件
struct IDEProjectEvent : ALittle.Event
{
    string module;	// 模块名
	string name;	// 名称
}

public struct IDEProjectOpenEvent : IDEProjectEvent {}
public struct IDEProjectCloseEvent : IDEProjectEvent {}
public struct IDEProjectAddEvent : IDEProjectEvent { }
public struct IDEProjectRemoveEvent : IDEProjectEvent { }

public struct IDEProjectCreateControlEvent : IDEProjectEvent {}
public struct IDEProjectDeleteControlEvent : IDEProjectEvent {}
public struct IDEProjectChangeControlEvent : IDEProjectEvent {}

public struct IDEProjectSettingChanged : ALittle.Event
{
    double default_show_width;
	double default_show_height;
	string default_font_path;
	int default_font_size;
}

// 项目信息
public struct IDEProjectInfo
{
	string name;				   // 项目名称
	ALittle.IJsonConfig config;	// 项目的配置文件系统
	Map<string, IDEUIManager> ui;  // UI数据管理
	AUIPlugin.AUICodeProject code; // 代码数据管理
}

public class IDEProject : ALittle.EventDispatcher
{
	// 当前项目的项目信息
	private IDEProjectInfo _project;
    // 调试数据
    [Language(Lua)]
    private carp.CarpLuaDebugClient _debug_client;
    bool _in_debug = false;
    private ALittle.LoopFrame _debug_loop;

	private fun AddProjectConfig(string name)
	{
		var project_map = g_IDEConfig.GetConfig("project_map", new Map<string, string>());
		if (project_map[name] == null)
		{
			project_map[name] = name;
			g_IDEConfig.SetConfig("project_map", project_map);
		}
	}

	private fun RemoveProjectConfig(string name)
	{
		var project_map = g_IDEConfig.GetConfig("project_map", new Map<string, string>());
		if (project_map[name] == null) return;
		project_map[name] = null;
		g_IDEConfig.SetConfig("project_map", project_map);
	}

    public fun GetBreakPoint(string file_path) : List<int>
    {
        if (this._project == null) return null;
        var map = this._project.config.GetConfig{Map<string, List<int>>}("break_points", null);
        if (map == null) return null;
        return map[file_path];
    }

    public fun AddBreakPoint(string file_path, int line)
    {
        if (this._project == null) return;

        var map = this._project.config.GetConfig{Map<string, List<int>>}("break_points", null);
        if (map == null) map = new Map<string, List<int>>();
        var lines = map[file_path];
        if (lines == null)
        {
            lines = new List<int>();
            map[file_path] = lines;
        }
        if (ALittle.List_IndexOf(lines, line) == null)
            ALittle.List_Push(lines, line);
        this._project.config.SetConfig("break_points", map);

        if (this._debug_client != null)
            this._debug_client.AddBreakPoint(file_path, line);
    }

    public fun RemoveBreakPoint(string file_path, int line)
    {
        if (this._project == null) return;

        var map = this._project.config.GetConfig{Map<string, List<int>>}("break_points", null);
        if (map == null) return;
        var lines = map[file_path];
        if (lines == null) return;
        var index = ALittle.List_IndexOf(lines, line);
        if (index != null) ALittle.List_Remove(lines, index);
        if (ALittle.IsEmpty(lines)) map[file_path] = null;
        this._project.config.SetConfig("break_points", map);

        if (this._debug_client != null)
            this._debug_client.RemoveBreakPoint(file_path, line);
    }

	// 新建项目
	public fun NewProject(string name, int window_width, int window_height, string font_path, int font_size) : bool
	{
		// 创建项目
		ALittle.File_MakeDeepDir(ALittle.File_BaseFilePath().."Module/"..name);

		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Texture");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Font");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Sound");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Other");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/JSScript");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Script");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/UI");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Tile");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Icon");

		var base_path = ALittle.File_BaseFilePath().."Module/ALittleIDE/Other/GameTemplate";
		var target_path = ALittle.File_BaseFilePath().."Module/"..name.."/";
		// 读取模板的所有文件路径
		var file_map = ALittle.File_GetFileAttrByDir(base_path);
		// 遍历游戏模板所有文件，整合后进行复制处理
		for (var file_path, attr in file_map)
		{
			// 计算相对路径
			var rel_path = ALittle.String_Sub(file_path, ALittle.String_Len(base_path) + 1);
			// 计算目标全路径
			var full_path = target_path..rel_path;
			// 对路径进行处理
			full_path = ALittle.String_Replace(full_path, "abcd@module_name@abcd", name);
			full_path = ALittle.String_Replace(full_path, "abcd@upper_module_name@abcd", ALittle.String_Upper(name));
			full_path = ALittle.String_Replace(full_path, "abcd@lower_module_name@abcd", ALittle.String_Lower(name));
			// 创建目录
			ALittle.File_MakeDeepDir(ALittle.File_GetFilePathByPath(full_path));

			// 对一下后缀进行文件内容处理
			var ext = ALittle.String_Upper(ALittle.File_GetFileExtByPath(file_path));
			if (ext == "JSON" || ext == "LUA" || ext == "CFG" || ext == "TXT"
				|| ext == "ALITTLE" || ext == "XML" || ext == "NAME"
				|| ext == "SLN" || ext == "VCXPROJ" || ext == "FILTERS" || ext == "USER")
			{
				// 读出文件
				var content = ALittle.File_ReadTextFromFile(file_path);
				if (content != null)
				{
					content = ALittle.String_Replace(content, "abcd@module_name@abcd", name);
					content = ALittle.String_Replace(content, "abcd@upper_module_name@abcd", ALittle.String_Upper(name));
					content = ALittle.String_Replace(content, "abcd@lower_module_name@abcd", ALittle.String_Lower(name));
					content = ALittle.String_Replace(content, "abcd@view_width@abcd", ""..window_width);
					content = ALittle.String_Replace(content, "abcd@view_height@abcd", ""..window_height);
					content = ALittle.String_Replace(content, "abcd@font_path@abcd", font_path);

					ALittle.File_WriteTextToFile(content, full_path);
				}
			}
			// 如果是其他类型的文件，那么就直接复制即可
			else
				ALittle.File_CopyFile(file_path, full_path);
		}

		// 复制默认Windows ICON
		ALittle.File_CopyFile("Export/Icon/install.ico", ALittle.File_BaseFilePath().."Module/"..name.."/Icon/install.ico");
		// 复制默认的Android iOS Icon
		ALittle.File_CopyFile("Export/Icon/install.png", ALittle.File_BaseFilePath().."Module/"..name.."/Icon/install.png");

		// 创建配置文件
		var config = ALittle.CreateConfigSystem("Module/"..name.."/ALittleIDE.cfg");
		config.SetConfig("default_show_width", window_width, true);
		config.SetConfig("default_show_height", window_height, true);
		config.SetConfig("default_font_path", font_path, true);
		config.SetConfig("default_font_size", font_size, true);
		config.SaveConfig();

		// 添加到项目列表
		this.AddProjectConfig(name);

		var event = new IDEProjectAddEvent();
		event.name = name;
		this.DispatchEvent(event);
		return true;
	}

	// 刷新项目
	public fun RefreshProject()
	{
		// 检查当前是否有打开的项目
		if (this._project == null) return;
		// 获取项目名
		var name = this._project.name;
		// 关闭当前项目
		this.CloseProject();
		// 打开当前项目
		this.OpenProject(name);
    }

	// 打开项目
	public fun OpenProject(string name) : string
	{
		// 检查项目名
		if (name == "" || name == null)
			return "请输入项目名";
		// 检查项目是否存在
        [Language(Lua)]
		if (ALittle.File_GetFileAttr(ALittle.File_BaseFilePath().."Module/"..name) == null)
			return "项目不存在:"..name;

		this.CloseProject();
		
		// 添加到项目列表
		this.AddProjectConfig(name);

		// 加载项目信息
		this._project = new IDEProjectInfo();
		this._project.name = name;
		this._project.config = ALittle.CreateConfigSystem("Module/"..name.."/ALittleIDE.cfg");
		this._project.ui = new Map<string, IDEUIManager>();
		[Language(Lua)]
		this._project.code = AUIPlugin.AUICodeProject.CreateALittleScriptProject();
		[Language(Lua)]
        if (this._project.code != null)
			this._project.code.AddEventListener(this, this.HandleCodeProjectGoToEvent);
        [Language(Lua)]
        if (this._project.code != null)
        	lua.alittlescript.alittlescriptproject_settargetlanguage(this._project.code.project, this._project.config.GetConfig("target_language", "Lua"));

		// 标记上次打开的项目名
		g_IDEConfig.SetConfig("last_project", name);

		var e = new IDEProjectOpenEvent();
		e.name = name;
		this.DispatchEvent(e);

		return null;
	}

	// 处理codeproject发出来的事件
	private fun HandleCodeProjectGoToEvent(AUIPlugin.AUICodeProjectGotoEvent event)
	{	
		g_IDECenter.center.code_list.OpenByFullPath(event.file_path, event.line_start, event.char_start, event.line_end, event.char_end);
    }

	// 打开上次的项目
	public fun OpenLastProject()
	{
        var default_name = "BattleCity";
        [Language(Lua)]
        default_name = null;
		// 标记上次打开的项目名
		var name = g_IDEConfig.GetString("last_project", default_name);
		if (name == null) return;

		this.OpenProject(name);
    }

	// 关闭项目
	public fun CloseProject() : string
	{
		if (this._project == null) return "当前没有项目";

		var e = new IDEProjectCloseEvent();
		e.name = this._project.name;
		this.DispatchEvent(e);

		if (this._project.code != null)
		{
			this._project.code.RemoveEventListener(this, this.HandleCodeProjectGoToEvent);
			this._project.code.Stop();
        }

		this._project = null;

        if (this._debug_loop != null)
        {
            this._debug_loop.Stop();
            this._debug_loop = null;
        }

        if (this._debug_client != null)
        {
            this._debug_client.Close();
            this._debug_client = null;
        }
        this._in_debug = false;
		return null;
	}

	// 移除项目
	public fun RemoveProject(string name) : string
	{
		if (this._project != null && this._project.name == name)
			return "请先关闭项目，再移除";

		this.RemoveProjectConfig(name);

		// 清楚上次打开的项目
		var project_name:string = g_IDEConfig.GetConfig("last_project", "");
		if (project_name == name)
			g_IDEConfig.SetConfig("last_project", "");

		var event = new IDEProjectRemoveEvent();
		event.name = name;
		this.DispatchEvent(event);
		return null;
	}

	public fun RunProject(bool debug)
	{
		if (this._project == null)
		{
			g_AUITool.ShowNotice("提示", "当前没有打开的项目");
			return;
		}

        var debug_info = "";
        if (debug) debug_info = "debug";

		[Language(Lua)]
		lua.os.execute("start ALittleClient.exe "..this._project.name.." "..debug_info);
	}

    public fun IsDebug() : bool { return this._in_debug; }

    public fun StartDebugProject()
    {
		if (this._project == null)
		{
			g_AUITool.ShowNotice("提示", "当前没有打开的项目");
			return;
		}

        if (this._in_debug)
        {
			g_AUITool.ShowNotice("提示", "已启动调试");
			return;
        }

        // 创建调试客户端并
        if (this._debug_client == null) this._debug_client = new carp.CarpLuaDebugClient();
        this._debug_client.Start("127.0.0.1", 1001);
        this._in_debug = true;
        if (this._debug_loop == null) this._debug_loop = new ALittle.LoopFrame(bind(this.HandleDebugFrame, this));
        this._debug_loop.Start();

        // 添加断点信息
        var break_map = this._project.config.GetConfig{Map<string, List<int>>}("break_points", null);
        for (var file_path, lines in break_map)
            for (var index, line in lines)
                this._debug_client.AddBreakPoint(file_path, line);
    }

    public fun ContinueDebug()
    {
        if (this._debug_client == null) return;
        this._debug_client.DoContinue();
    }

    public fun NextLineDebug()
    {
        if (this._debug_client == null) return;
        this._debug_client.DoNextLine();
    }

    private fun HandleDebugFrame(int frame_time)
    {
        var event = this._debug_client.HandleEvent();
        if (event == null) return;

        if (event.type == carp.CarpLuaDebugEventTypes.CLDE_BREAK_IN)
        {
            g_IDECenter.center.code_list.OpenByFullPath(event.file_path, event.file_line, 1, event.file_line, 1);
        }
        elseif (event.type == carp.CarpLuaDebugEventTypes.CLDE_BREAK_OUT)
        {

        }
    }

    public fun StopDebugProject()
    {
		if (this._project == null)
		{
			g_AUITool.ShowNotice("提示", "当前没有打开的项目");
			return;
		}

        if (this._debug_loop != null)
        {
            this._debug_loop.Stop();
            this._debug_loop = null;
        }

        if (this._debug_client != null)
        {
            this._debug_client.Close();
            this._debug_client = null;
        }
        
        this._in_debug = false;
    }

	// 获取当前项目
	public get project() : IDEProjectInfo
	{
		return this._project;
	}

    // 获取当前ui管理器
    public fun GetUIManager(string module_name) : IDEUIManager
    {
        if (this._project == null) return null;

        if (module_name == null)
        	module_name = this._project.name;

        return this._project.ui[module_name];
    }
}

protected var g_IDEProject = new IDEProject();