
namespace ALittleIDE;

public struct IDEVersionInfo
{
	string install_version;
	string big_version;
	string version_number;
	string plugin_list;
}

public struct IDEInstallInfo
{
	string new_log;
	string install_name;
	bool auto_start;
	string package_name;
	string screen;
	bool fullscreen;
	string res_ip;
	int res_port;
	string res_base_path;
    
	string file_name;
}

public struct IDEPackageInfo
{
	string platform;
	string project_name;
	string project_path;
	string export_path;
	string export_module_path;
	string export_module_base_path;
	IDEVersionInfo version_info;
	IDEInstallInfo install_info;
}

struct IDEExportFileAttr
{
	ALittle.PathAttribute attr;
	string md5;
	string file_type;
	string file_path;
}

struct IDEExportFileInfo
{
	string path;
	bool crypt_mode;
}

struct IDEExportVersionInfo
{
	Map<string, ALittle.SmallVersionInfo> small_version;
	ALittle.BigVersionInfo big_version;
}

struct IDEExportSubmitInfo
{
	List<string> upload_list;
	string project_path;
	string export_module_path;
	bool is_login;
	string module_name;
	string platform;
	int small_version_time;
	int small_version_index;
	int update_time;
	int update_index;
	string big_version;
	string version_number;
	string install_version;
	string plugin_list;
	List<string> log_list;
	string install_name;
	int install_size;
	bool completed;
	string version_id;
}

struct ANewVersionInfo
{
	bool result;
	string reason;
	string version_id;
}

class IDEExport
{
	private ALittle.DisplayObject _submit_dialog;
	private bool _is_in_submit;
	private ALittle.IHttpFileSender _submit_client;
	private ALittle.DisplayObject _submit_content;
	private ALittle.DisplayObject _submit_process_bar;
	private ALittle.DisplayObject _submit_cancel_btn;
	private ALittle.DisplayObject _submit_process_bg;

	public ctor()
	{
		this._submit_dialog = null;
		this._is_in_submit = false;
	}

	// 打包平台版本的安装包
	public await fun PackagePlatform(string project_name, IDEVersionInfo version_info, IDEInstallInfo install_info, string platform)
	{
		ALittle.Log("========PackagePlatform"..project_name.."========");
		
		// 计算工程路径
		var project_path = ALittle.File_BaseFilePath().."Module/"..project_name;
		
		// 检查路径是否存在
		assert(ALittle.File_GetFileAttr(project_path) != null, "项目文件夹不存在:"..project_path);
	
		// 创建导出文件夹
		var export_path = project_path.."/Export/"..platform;
		ALittle.File_DeleteDeepDir(export_path);
		ALittle.File_MakeDeepDir(export_path);
		var export_module_base_path = export_path.."/Module";
		if (platform == "Android") export_module_base_path = export_path.."/assets/Module";
		var export_module_path = export_module_base_path.."/"..project_name;
		ALittle.File_MakeDeepDir(export_module_path);
	
		var package_info = new IDEPackageInfo();
		package_info.platform = platform; 						// 平台
		package_info.project_name = project_name;				// 项目名
		package_info.project_path = project_path;				// 项目路径
		package_info.export_path = export_path; 					// 导出目录
		package_info.export_module_path = export_module_path; 	// 导出的模块路径
		package_info.export_module_base_path = export_module_base_path;
		package_info.version_info = version_info;
		package_info.install_info = install_info;
		this.PackageVersion(package_info);
	}
	
	// 修复所有png图片，避免框架在加载的时候警告
	public fun RepairPNG(string path)
	{
		ALittle.Log("========RepairPNG:"..path.."========");

		assert(ALittle.File_GetFileAttr(path) != null, "IDEExport:RepairPNG path is not exist:"..path);
	
		var file_map = ALittle.File_GetFileAttrByDir(path);
		for (var file_path, attr in file_map)
		{
			if (ALittle.File_GetFileExtByPath(file_path) == "png")
			{
				var surface = carp.LoadCarpSurface(file_path);
				if (surface != null)
				{
					carp.SaveCarpSurface(surface, file_path);
					carp.FreeCarpSurface(surface);
				}
			}
		}
	}
	
	// 生成纹理拼接文件
	public fun GenerateAtlas(string path)
	{
		ALittle.Log("========GenerateAtlas:"..path.."========");

		assert(ALittle.File_GetFileAttr(path) != null, "IDEExport:GenerateAtlas path is not exist:"..path);
	
		var texture_list = new List<ALittle.AltasTextureInfo>();
		var count = 0;
	
		var file_map = ALittle.File_GetFileAttrByDir(path);
		for (var file_path, attr in file_map)
		{
			if (ALittle.File_GetFileExtByPath(file_path) == "png")
			{
				var surface = carp.LoadCarpSurface(file_path);
				if (surface == null)
					ALittle.Error("ALittle.System_LoadSurface failed! path:"..file_path);
				else
				{
					var width = carp.GetCarpSurfaceWidth(surface);
					var height = carp.GetCarpSurfaceHeight(surface);
					carp.FreeCarpSurface(surface);
					var texture_info = new ALittle.AltasTextureInfo();
					texture_info.path = ALittle.String_Sub(file_path, ALittle.String_Len(path)+2);
					texture_info.width = width;
					texture_info.height = height;

					++count;
					texture_list[count] = texture_info;
				}
			}
		}
	
		var big_list = ALittle.AltasBinary.GenerateAltas(texture_list, 1024, 1024, 1);
	
		// 把拼接信息保存到Index文件夹中
		ALittle.File_WriteJsonToFile(big_list, path.."/Atlas.ali");
	}
	
	//=====================================================================================================
	
	// 加密资源文件
	public fun PackagePath(string src_path, string dst_path, string file_type, bool crypt_mode) : Map<string, IDEExportFileAttr>
	{
		ALittle.Log("========PackagePath:"..src_path.."========");
	
		// 检查路径是否存在
        if (ALittle.File_GetFileAttr(src_path) == null)
            return new Map<string, IDEExportFileAttr>();
	
		// 检查路径是否存在
		if (ALittle.File_GetFileAttr(dst_path) == null) ALittle.File_MakeDeepDir(dst_path);
	
		// 获取
		var file_map = ALittle.File_GetFileAttrByDir(src_path);
		var out_file_map = new Map<string, IDEExportFileAttr>();
		for (var file_path, attr in file_map)
		{
            var start_index = ALittle.String_Find(file_path, src_path);
            var rel_path = ALittle.String_Sub(file_path, start_index + ALittle.String_Len(src_path));
        
            // 如果是图片，那么就获取一下宽高
            var ext = ALittle.File_GetFileExtByPath(file_path);
            ext = ALittle.String_Upper(ext);
            var file = new carp.CarpLocalFile();
            file.SetPath(file_path);
            assert(file.Load(false), "IDEExport:PackagePath, 文件加载失败:"..file_path);

            if (crypt_mode) file.Encrypt(null);
            ALittle.File_MakeDeepDir(ALittle.File_GetFilePathByPath(dst_path..rel_path));
            file.Save(dst_path..rel_path);

            var new_attr = new IDEExportFileAttr();
            new_attr.attr = attr;
            new_attr.md5 = ALittle.File_Md5(dst_path..rel_path);
            new_attr.file_type = file_type;
            new_attr.file_path = file_type..rel_path;
            out_file_map[file_path] = new_attr;

            file.Clear();
		}
	
		return out_file_map;
	}
	
	// 打包统一的资源文件
	// @param project_path 工程目录
	public fun PackageCommon(string export_path, string project_path, string project_name, string platform, bool is_plugin) : List<Map<string, IDEExportFileAttr>>
	{
		ALittle.Log("========PackageCommon:"..project_path.."========");
		// 检查路径是否存在
		assert(ALittle.File_GetFileAttr(project_path) != null, "项目文件夹不存在:"..project_path);
	
		// 创建导出文件夹
		if (ALittle.File_GetFileAttr(export_path) == null) ALittle.File_MakeDeepDir(export_path);
		var export_common_path = export_path.."/"..project_name;
		ALittle.File_DeleteDeepDir(export_common_path);
		if (ALittle.File_GetFileAttr(export_common_path) == null) ALittle.File_MakeDeepDir(export_common_path);
	
		// 修正下图片
		// this.RepairPNG(project_path.."/Texture");
	
		// 生成纹理拼接文件
		this.GenerateAtlas(project_path.."/Texture");

		var file_list = new List<IDEExportFileInfo>();
        var count = 0;
        var file_info:IDEExportFileInfo = null;
		if (platform != "Web" && platform != "WeChat")
		{
			file_info = new IDEExportFileInfo(); file_info.path = "Font"; file_info.crypt_mode = false;
			++ count; file_list[count] = file_info;   
        }
		file_info = new IDEExportFileInfo(); file_info.path = "Other"; file_info.crypt_mode = false;
		++ count; file_list[count] = file_info;
		file_info = new IDEExportFileInfo(); file_info.path = "Tile"; file_info.crypt_mode = false;
		++ count; file_list[count] = file_info;
		if (platform == "Web" || platform == "WeChat")
		{
			file_info = new IDEExportFileInfo(); file_info.path = "JSScript"; file_info.crypt_mode = false;
			++ count; file_list[count] = file_info;
        }
		else
		{
			file_info = new IDEExportFileInfo(); file_info.path = "Script"; file_info.crypt_mode = true;
			++ count; file_list[count] = file_info;   
        }
		file_info = new IDEExportFileInfo(); file_info.path = "Sound"; file_info.crypt_mode = false;
		++ count; file_list[count] = file_info;
		
		if (platform == "Web" || platform == "WeChat")
		{
			file_info = new IDEExportFileInfo(); file_info.path = "Texture"; file_info.crypt_mode = false;
			++ count; file_list[count] = file_info;
			
			var all_in_one = new Map<string, any>();
			var map = ALittle.File_GetFileAttrByDir(ALittle.File_BaseFilePath().."Module/"..project_name.."/UI");
			for (var path, _ in map)
			{
				var json:Map<string, any> = ALittle.File_ReadJsonFromStdFile(path);
				for (var name, o in json)
					all_in_one[name] = o;
			}
			ALittle.File_MakeDeepDir(ALittle.File_BaseFilePath().."Module/"..project_name.."/JSUI");
			ALittle.File_WriteJsonFromStdFile(all_in_one, ALittle.File_BaseFilePath().."Module/"..project_name.."/JSUI/ui_all_in_one.json");

			file_info = new IDEExportFileInfo(); file_info.path = "JSUI"; file_info.crypt_mode = false;
			++ count; file_list[count] = file_info;
		}
		else
		{
			file_info = new IDEExportFileInfo(); file_info.path = "Texture"; file_info.crypt_mode = true;
			++ count; file_list[count] = file_info;
			file_info = new IDEExportFileInfo(); file_info.path = "UI"; file_info.crypt_mode = true;
			++ count; file_list[count] = file_info;
        }
	
		// 如果没有NoCrypt.ali文件，说明已经加密过了，那么所有都不要再加密了
		if (ALittle.File_GetFileAttr(project_path.."/NoCrypt.ali") == null)
		{
			for (var k, v in file_list) v.crypt_mode = false;
		}
		
		var map_list = new List<Map<string, IDEExportFileAttr>>();
		count = 0;
		for (var k, v in file_list)
		{
			var result = this.PackagePath(project_path.."/"..v.path, export_common_path.."/"..v.path, v.path, v.crypt_mode);
			if (result != null)
			{
				++count;
				map_list[count] = result;
			}
		}
        
		if (!is_plugin)
		{
			if (platform == "Web" || platform == "WeChat")
			{
                // 打包基础库脚本
				var result = this.PackagePath(ALittle.File_BaseFilePath().."Module/ALittleIDE/Other/GameLibrary/Core/JSNative", export_common_path.."/JSNative", "JSNative", false);
				if (result != null)
				{
					++count;
					map_list[count] = result;
				}
		
				// 打包基础库脚本
				result = this.PackagePath(ALittle.File_BaseFilePath().."Module/ALittleIDE/Other/GameLibrary/Std/JSNative", export_common_path.."/JSNative", "JSNative", false);
				if (result != null)
				{
					++count;
					map_list[count] = result;
				}
	
				// 打包引擎脚本
				result = this.PackagePath(ALittle.File_BaseFilePath().."Module/ALittleIDE/Other/GameLibrary/CEngine/JSNative", export_common_path.."/JSNative", "JSNative", false);
				if (result != null)
				{
					++count;
					map_list[count] = result;
				}
            }
			else
			{
				// 打包基础库脚本
				var result = this.PackagePath(ALittle.File_BaseFilePath().."Module/ALittleIDE/Other/GameLibrary/Core/Script", export_common_path.."/Core", "Core", true);
				if (result != null)
				{
					++count;
					map_list[count] = result;
				}
		
				// 打包基础库脚本
				result = this.PackagePath(ALittle.File_BaseFilePath().."Module/ALittleIDE/Other/GameLibrary/Std/Script", export_common_path.."/Std", "Std", true);
				if (result != null)
				{
					++count;
					map_list[count] = result;
				}
	
				// 打包引擎脚本
				result = this.PackagePath(ALittle.File_BaseFilePath().."Module/ALittleIDE/Other/GameLibrary/CEngine/Script", export_common_path.."/CEngine", "CEngine", true);
				if (result != null)
				{
					++count;
					map_list[count] = result;
				}
            }
        }
        
		// 返回文件列表
		return map_list;
	}
	
	// 生成版本文件
	public await fun PackageVersion(IDEPackageInfo package_info)
	{
		ALittle.Log("========PackageVersion========");
	
		// 请求获取一个新的版本号
		if (g_IDEWebLoginManager.IsLogin())
		{
			g_AUITool.ShowAlertDialog("提示", "正在请求新的版本号");
			var param = new VersionServer.QNewUpdateTimeIndex();
			param.__account_id = g_IDEWebLoginManager.account_id;
			param.__session_id = g_IDEWebLoginManager.session_id;
			var client = ALittle.CreateHttpSender(g_IDEWebLoginManager.http_ip, g_IDEWebLoginManager.http_port);
			var error, result = VersionServer.HandleHttpQNewUpdateTimeIndex(client, param);
			this.HandleAskNewUpdateTimeIndex(error, result, package_info, true);
		}
		else
			this.HandleAskNewUpdateTimeIndexImpl(package_info, false, ALittle.Time_GetCurTime(), 0);
	}
	
	// 获取一个新版本
	public await fun HandleAskNewUpdateTimeIndex(string error, VersionServer.ANewUpdateTimeIndex result, IDEPackageInfo package_info, bool is_login)
	{
		g_AUITool.HideAlertDialog();
		if (error != null)
		{
			g_AUITool.ShowNotice("错误", "新版本号获取失败:"..error);
			return;
		}

		this.HandleAskNewUpdateTimeIndexImpl(package_info, is_login, result.update_time, result.update_index);
	}
	
	public await fun HandleAskNewUpdateTimeIndexImpl(IDEPackageInfo package_info, bool is_login, int update_time, int update_index)
	{
		// 询问执行版本下载的位置
		if (is_login)
		{
			g_AUITool.ShowAlertDialog("提示", "正在请求CurVersion.db的文件的位置");
			var param = new VersionServer.QNewCurVersion();
			param.__account_id = g_IDEWebLoginManager.account_id;
			param.__session_id = g_IDEWebLoginManager.session_id;
			param.platform = package_info.platform;
			param.module_name = package_info.project_name;
			var client = ALittle.CreateHttpSender(g_IDEWebLoginManager.http_ip, g_IDEWebLoginManager.http_port);
			var error, result = VersionServer.HandleHttpQNewCurVersion(client, param);
			this.HandleQueryNewCurVersion(error, result, package_info, is_login, update_time, update_index);
		}
		else
			this.HandleQueryNewCurVersionImpl(package_info, is_login, update_time, update_index, null);
	}
	
	public await fun HandleQueryNewCurVersion(string error, VersionServer.ANewCurVersion result, IDEPackageInfo package_info, bool is_login, int update_time, int update_index)
	{
		g_AUITool.HideAlertDialog();
	
		if (error != null)
		{
			g_AUITool.ShowNotice("错误", "CurVersion.db的文件的位置获取失败:"..error);
			return;
		}

		// 检查是否有version_id，如果有那么就下载CurVersion.db文件
		if (result.version_info == null || result.version_info.version_id == null || result.version_info.version_id == "")
			this.HandleQueryNewCurVersionImpl(package_info, is_login, update_time, update_index, false);
		else
		{
			g_AUITool.ShowAlertDialog("提示", "下载最新的版本文件");
			ALittle.File_MakeDeepDir(package_info.project_path.."/Export");

			var target_path = package_info.project_path.."/Export".."/CurVersionOld_"..package_info.platform..".db";
			// 开始下载版本文件
			var param = new VersionServer.QDownloadVersionFile();
			param.platform = package_info.platform;
			param.version_id = result.version_info.version_id;
			param.file_path = "CurVersion.db";
			var client = ALittle.CreateHttpFileSender(result.http_ip, result.http_port, target_path, 0);
			error = VersionServer.HandleHttpQDownloadVersionFile(client, param);
			this.HandleDownloadCurVersion(error, package_info, is_login, update_time, update_index);
		}
	}
	
	public fun HandleDownloadCurVersion(string error, IDEPackageInfo package_info, bool is_login, int update_time, int update_index)
	{
		if (error != null)
		{
			g_AUITool.HideAlertDialog();
			g_AUITool.ShowNotice("错误", "最新版本文件下载失败:"..error);
			return;
		}

		g_AUITool.HideAlertDialog();
		this.HandleQueryNewCurVersionImpl(package_info, is_login, update_time, update_index, true);
	}
	
	public fun HandleQueryNewCurVersionImpl(IDEPackageInfo package_info, bool is_login, int update_time, int update_index, bool has_db_version)
	{
		g_AUITool.ShowAlertDialog("提示", "正在生成版本");
		ALittle.System_Render(); // 强制渲染
	
		var small_version_time = update_time;
		var small_version_index = update_index;

        var version_info:IDEExportVersionInfo = null;
		// 如果有版本文件，那么就加载内部所有的信息
		if (has_db_version)
		{
			g_AUITool.ShowAlertDialog("提示", "获取上一个版本的信息");
			ALittle.System_Render(); // 强制渲染
	
			var db_version_path = package_info.project_path.."/Export/CurVersionOld_"..package_info.platform..".db";
			var sqlite = lua.sqlite3.open(db_version_path);
			if (sqlite == null)
			{
				g_AUITool.ShowNotice("错误", "CurVersion.db文件打开失败");
				return;
			}
	
			version_info = new IDEExportVersionInfo();
	
			// 获取大版本信息
			var stmt = sqlite.prepare("SELECT * FROM BigVersion");
			if (stmt == null)
			{
				sqlite.close();
				g_AUITool.ShowNotice("错误", "CurVersion.db中BigVersion读取失败");
				return;
			}
			for (var row in stmt.nrows{ALittle.BigVersionInfo}())
				version_info.big_version = row;
			stmt.reset();
	
			// 获取小版本信息
			stmt = sqlite.prepare("SELECT * FROM SmallVersion");
			if (stmt == null)
			{
				sqlite.close();
				g_AUITool.ShowNotice("错误", "CurVersion.db中SmallVersion读取失败");
				return;
			}
			version_info.small_version = new Map<string, ALittle.SmallVersionInfo>();
			for (var row in stmt.nrows{ALittle.SmallVersionInfo}())
			{
				version_info.small_version[row.c_file_path] = row;
			}
			stmt.reset();
	
			sqlite.close();
		}
	
		g_AUITool.ShowAlertDialog("提示", "打包当前版本");
		ALittle.System_Render(); // 强制渲染

		ALittle.File_DeleteDeepDir(package_info.project_path.."/Export/Common");

		// 打包文件
		var error, version_info_list = tcall(this.PackageCommon, this, package_info.project_path.."/Export/Common", package_info.project_path, package_info.project_name, package_info.platform, false);
		if (error != null)
		{
			g_AUITool.ShowNotice("错误", "PackageCommon 调用失败:"..error);
			return;
		}

		// 插件
		var plugin_list = ALittle.String_Split(package_info.version_info.plugin_list, ",");
		for (var index, plugin in plugin_list)
		{
			var plugin_error, _ = tcall(this.PackageCommon, this, package_info.project_path.."/Export/Common", ALittle.File_BaseFilePath().."Module/"..plugin, plugin, package_info.platform, true);
			if (plugin_error != null)
			{
				g_AUITool.ShowNotice("错误", "PackageCommon 调用失败:"..plugin_error);
				return;
            }
        }
	
		// 创建入口文件
		if (package_info.platform == "Android")
		{
			ALittle.File_MakeDir(package_info.export_path.."/assets/Module");
			ALittle.File_SaveFile(package_info.export_path.."/assets/Module/Enter.ali", package_info.project_name, -1);
		}
		else
		{
			ALittle.File_MakeDir(package_info.export_path.."/Module");
			ALittle.File_SaveFile(package_info.export_path.."/Module/Enter.ali", package_info.project_name, -1);
        }
	
		// 把Common的文件复制到
		ALittle.File_CopyDeepDir(package_info.project_path.."/Export/Common", package_info.export_module_base_path);
	
		// 用于上传版本使用的信息
		var submit_info = new IDEExportSubmitInfo();
		submit_info.upload_list = new List<string>();
        var update_list_count = 0;
	
		g_AUITool.ShowAlertDialog("提示", "生成新的CurVersion.db");
		ALittle.System_Render(); // 强制渲染
	
		var package_notice = ""; // 用于先是打包变化情况
	
		// 生成新版本
		ALittle.File_DeleteFile(package_info.export_module_path.."/CurVersion.db");
		var sqlite = lua.sqlite3.open(package_info.export_module_path.."/CurVersion.db");
		if (sqlite != null)
		{
			var sql = "CREATE TABLE IF NOT EXISTS [BigVersion] (";
			sql = sql.."[c_big_version] [nvarchar](255) NOT NULL default '',";		// 大版本号，用于标记是否强制更新
			sql = sql.."[c_install_version] [nvarchar](255) NOT NULL default '',";	// 安装版本号，用于标记是否重新安装
			sql = sql.."[c_db_version] [nvarchar](255) NOT NULL default ''";  		// 数据库版本号，用于标记是否是否重新对比数据库
			sql = sql..")";
			sqlite.exec(sql);
	
			sql = "CREATE TABLE IF NOT EXISTS [VersionLog] (";
			sql = sql.."[c_content] [nvarchar](255) NOT NULL default '',";
			sql = sql.."[c_create_time] [int] NOT NULL default 0,";
			sql = sql.."[c_create_index] [int] NOT NULL default 0";
			sql = sql..")";
			sqlite.exec(sql);
	
			// 插入版版本日志
			var new_log = ALittle.String_Split(package_info.install_info.new_log, "\n");
			var create_time  = ALittle.Time_GetCurTime();
			var create_index = 0;
			for (var k, v in new_log)
			{
				if (v != "")
				{
					sqlite.exec("INSERT INTO VersionLog (c_content,c_create_time,c_create_index) VALUES ('"..v.."',"..create_time..","..create_index..")");
					create_index = create_index + 1;
				}
			}
	
			sql = "CREATE TABLE IF NOT EXISTS [SmallVersion] (";
			sql = sql.."[c_file_path] [nvarchar](255) UNIQUE NOT NULL default '',";
			sql = sql.."[c_file_size] [int] NOT NULL default 0,";
			sql = sql.."[c_type] [nvarchar](255) NOT NULL default '',";
			sql = sql.."[c_md5] [nvarchar](32) NOT NULL default '',";
			sql = sql.."[c_update_time] [int] NOT NULL default 0,";
			sql = sql.."[c_update_index] [int] NOT NULL default 0,";
			sql = sql.."[c_is_delete] [int] NOT NULL default 0";
			sql = sql..")";
			sqlite.exec(sql);
	
			sqlite.exec("CREATE INDEX IF NOT EXISTS update_time_index ON SmallVersion (c_update_time);");
			sqlite.exec("BEGIN;");
	
			// 用来标记是否有变化
			var has_change = false;
	
			// 文件变化数量
			var change_count = 0;
			var add_count = 0;
			var delete_count = 0;
	
			for (var k, map in version_info_list)
			{
				for (var file_path, attr in map)
				{
					if (version_info == null)
					{
						// 如果没有版本文件，那么直接插入
						sqlite.exec("INSERT INTO SmallVersion (c_file_path,c_file_size,c_type,c_md5,c_update_time,c_update_index,c_is_delete) VALUES ('"..attr.file_path.."',"..attr.attr.size..",'"..attr.file_type.."','"..attr.md5.."',"..update_time..","..update_index..",0)");
	
						add_count = add_count + 1;
						has_change = true;
					}
					else
					{
						// 如果有版本文件，那么对比md5
						var old_attr = version_info.small_version[attr.file_path];
						if (old_attr == null || old_attr.c_md5 != attr.md5 || old_attr.c_is_delete != 0)
						{
							sqlite.exec("INSERT INTO SmallVersion (c_file_path,c_file_size,c_type,c_md5,c_update_time,c_update_index,c_is_delete) VALUES ('"..attr.file_path.."',"..attr.attr.size..",'"..attr.file_type.."','"..attr.md5.."',"..update_time..","..update_index..",0)");
	
							if (old_attr == null || old_attr.c_is_delete != 0)
								add_count = add_count + 1;
							else
								change_count = change_count + 1;

							has_change = true;
						}
						// 如果都一样，那么就复制old_attr的update_time, update_index
						else
							sqlite.exec("INSERT INTO SmallVersion (c_file_path,c_file_size,c_type,c_md5,c_update_time,c_update_index,c_is_delete) VALUES ('"..attr.file_path.."',"..attr.attr.size..",'"..attr.file_type.."','"..attr.md5.."',"..old_attr.c_update_time..","..old_attr.c_update_index..",0)");
						version_info.small_version[attr.file_path] = null;
					}
	
					// 把要上传的文件保存起来
					++update_list_count;
					submit_info.upload_list[update_list_count] = attr.file_path;
				}
			}
	
			// 遍历剩余的小版本文件，直接复制插入
			if (version_info != null)
			{
				for (var k, v in version_info.small_version)
				{
					if (v.c_is_delete != 0)
						sqlite.exec("INSERT INTO SmallVersion (c_file_path,c_file_size,c_type,c_md5,c_update_time,c_update_index,c_is_delete) VALUES ('"..v.c_file_path.."',"..v.c_file_size..",'"..v.c_type.."','"..v.c_md5.."',"..v.c_update_time..","..v.c_update_index..",1)");
					else
					{
						sqlite.exec("INSERT INTO SmallVersion (c_file_path,c_file_size,c_type,c_md5,c_update_time,c_update_index,c_is_delete) VALUES ('"..v.c_file_path.."',"..v.c_file_size..",'"..v.c_type.."','"..v.c_md5.."',"..update_time..","..update_index..",1)");
	
						delete_count = delete_count + 1;
						has_change = true;
					}
				}
			}
	
			var db_version = ALittle.Time_GetCurDate();
			if (version_info != null) db_version = version_info.big_version.c_db_version;
			if (db_version == null) db_version = ALittle.Time_GetCurDate();
	
			// 如果安装包版本有变化，那么就标记为有变化
			if (version_info != null && version_info.big_version.c_install_version < package_info.version_info.install_version)
				has_change = true;
	
			sqlite.exec("INSERT INTO BigVersion (c_big_version,c_install_version,c_db_version) VALUES ('"..package_info.version_info.big_version.."','"..package_info.version_info.install_version.."','"..db_version.."')");
	
			sqlite.exec("COMMIT;");
	
			// 查询最大的小版本时间和时间序列
			var stmt = sqlite.prepare("SELECT c_update_time,c_update_index FROM SmallVersion ORDER BY c_update_time DESC, c_update_index DESC LIMIT 1");
			if (stmt != null)
			{
				for (var row in stmt.nrows{ALittle.SmallVersionInfo}())
				{
					small_version_time = row.c_update_time;
					small_version_index = row.c_update_index;
					break;
				}
				stmt.reset();
			}
	
			// 让文件最小化
			sqlite.exec("VACUUM;");
	
			// 关闭
			sqlite.close();
	
			// 复制一个
			ALittle.File_CopyFile(package_info.export_module_path.."/CurVersion.db", package_info.export_module_path.."/CurVersionNoDelete.db");
	
			// 创建一个对应没有c_is_delete=1的db文件进行对比
			var sqlite_no_delete = lua.sqlite3.open(package_info.export_module_path.."/CurVersionNoDelete.db");
			if (sqlite_no_delete == null)
			{
				g_AUITool.ShowNotice("错误", "CurVersionNoDelete.db文件生成失败:"..package_info.export_module_path.."/CurVersionNoDelete.db");
				return;
			}
			// 删除一些记录
			sqlite_no_delete.exec("DELETE FROM SmallVersion WHERE c_is_delete=1");
	
			// 更新数据库版本号，这样版本更新的时候会做文件全面对比
			db_version = ALittle.Time_GetCurDate();
			sqlite_no_delete.exec("UPDATE BigVersion SET c_db_version='"..db_version.."'");
	
			// 让文件最小化
			sqlite_no_delete.exec("VACUUM;");
	
			sqlite_no_delete.close();
	
			// 对比一下两个文件
			var sqlite_attr = ALittle.File_GetFileAttr(package_info.export_module_path.."/CurVersion.db");
			var sqlite_no_delete_attr = ALittle.File_GetFileAttr(package_info.export_module_path.."/CurVersionNoDelete.db");
	
			package_notice = "\n文件添加数量:"..add_count.."\n文件删除数量:"..delete_count.."\n文件修改数量:"..change_count.."\n原始DB文件大小:"..sqlite_attr.size.."\n优化DB文件大小:"..sqlite_no_delete_attr.size;
	
			var need_use_no_delete = false;
			if (sqlite_attr.size < 200 * 1024)
			{

			}
			elseif (sqlite_attr.size < 500 * 1024)
			{
				if (sqlite_no_delete_attr.size / sqlite_attr.size < 0.8)
					need_use_no_delete = true;
			}
			else
			{
				if (sqlite_no_delete_attr.size / sqlite_attr.size < 0.7)
					need_use_no_delete = true;
			}
	
			if (need_use_no_delete)
			{
				ALittle.File_DeleteFile(package_info.export_module_path.."/CurVersion.db");
				ALittle.File_RenameFile(package_info.export_module_path.."/CurVersionNodelete.db", package_info.export_module_path.."/CurVersion.db");
			}
			else
			{
				ALittle.File_DeleteFile(package_info.export_module_path.."/CurVersionNodelete.db");
			}
	
			if (has_change == false)
			{
				g_AUITool.HideAlertDialog();
				g_AUITool.ShowNotice("提示", "当前没有任何变化，不需要制作版本");
				return;
			}
		}
		else
		{
			g_AUITool.ShowNotice("错误", "CurVersion.db文件生成失败:"..package_info.export_module_path.."/CurVersion.db");
			return;
		}
	
		g_AUITool.ShowAlertDialog("提示", "开始打包安装包");
		ALittle.System_Render(); // 强制渲染

        var install_name:string = null;
		// 打包exe
		if (package_info.platform == "Windows")
			install_name = this.GenerateExe(package_info);
		elseif (package_info.platform == "Android")
			install_name = this.GenerateApk(package_info);
		elseif (package_info.platform == "iOS")
			install_name = this.GenerateIpa(package_info);
		elseif (package_info.platform == "Web")
			install_name = this.GenerateWeb(package_info);
		elseif (package_info.platform == "WeChat")
			install_name = this.GenerateWeChat(package_info);
        elseif (package_info.platform == "Emscripten")
        	install_name = this.GenerateEmscripten(package_info);
	
		submit_info.project_path = package_info.project_path;
		submit_info.export_module_path = package_info.export_module_path;
		submit_info.is_login = is_login;
		submit_info.module_name = package_info.project_name;
		submit_info.platform = package_info.platform;
		submit_info.small_version_time = small_version_time;
		submit_info.small_version_index = small_version_index;
		submit_info.update_time = update_time;
		submit_info.update_index = update_index;
		submit_info.big_version = package_info.version_info.big_version;
		submit_info.version_number = package_info.version_info.version_number;
		submit_info.install_version = package_info.version_info.install_version;
		submit_info.plugin_list = package_info.version_info.plugin_list;
		submit_info.log_list = ALittle.String_Split(package_info.install_info.new_log, "\n");
		submit_info.install_name = install_name;
		var install_attr = ALittle.File_GetFileAttr(package_info.project_path.."/Export/"..install_name);
		if (install_attr == null)
		{
			g_AUITool.HideAlertDialog();
			g_AUITool.ShowNotice("提示", "版本生成失败");
			return;
		}
		submit_info.install_size = install_attr.size;
	
		ALittle.File_WriteJsonToFile(submit_info, package_info.project_path.."/Export/SubmitInfo_"..package_info.platform..".json");
	
		ALittle.Log("版本生成成功");
		g_AUITool.HideAlertDialog();
		g_AUITool.ShowNotice("提示", "版本生成成功"..package_notice);
	}
	
	// 上传版本文件
	// project_name 项目名
	// platform 版本类型 Windows, Android, iOS
	public await fun SubmitPlatform(string project_name, string platform)
	{
		// 检查是否正在上传文本
		if (this._is_in_submit == true)
		{
			this._submit_dialog.visible = true;
			return;
		}
		ALittle.Log("==================SubmitPlatform:"..platform.."==================");
	
		// 通知服务器构建一个新的版本
		if (g_IDEWebLoginManager.IsLogin() == false)
		{
			g_AUITool.ShowNotice("错误", "您还未登录，无法上传版本");
			return;
		}
		
		// 计算工程路径
		var project_path = ALittle.File_BaseFilePath().."Module/"..project_name;
	
		// 检查上一个打包信息是否存在
		var submit_info_path = project_path.."/Export/SubmitInfo_"..platform..".json";
		if (ALittle.File_GetFileAttr(submit_info_path) == null)
		{
			g_AUITool.ShowNotice("错误", "版本PackageInfo_"..platform..".json不存在");
			return;
		}
        var submit_info:IDEExportSubmitInfo = ALittle.File_ReadJsonFromFile(submit_info_path);
		if (submit_info == null)
		{
			g_AUITool.ShowNotice("错误", "PackageInfo_"..platform..".json文件解析失败");
			return;
		}
		if (submit_info.is_login != true)
		{
			g_AUITool.ShowNotice("错误", "当前打包的版本不是在登录的状态下打包的，请登录之后重新打包");
			return;
		}
	
		if (submit_info.completed == true)
		{
			g_AUITool.ShowNotice("错误", "版本已经上传成功了，不能重复上传");
			return;
		}
	
		if (submit_info.version_id == null)
		{
			g_AUITool.ShowAlertDialog("提示", "正在创建一个新的版本");
			// 请求一个新的版本
			var param = new VersionServer.QNewVersionInfo();
			param.__account_id = g_IDEWebLoginManager.account_id;
			param.__session_id = g_IDEWebLoginManager.session_id;
			param.module_name = submit_info.module_name;
			param.platform = submit_info.platform;
			param.big_version = submit_info.big_version;
			param.version_number = submit_info.version_number;
			param.install_version = submit_info.install_version;
			param.plugin_list = submit_info.plugin_list;
			param.install_size = submit_info.install_size;
			param.log_list = submit_info.log_list;
			param.small_version_time = submit_info.small_version_time;
			param.small_version_index = submit_info.small_version_index;
			param.update_time = submit_info.update_time;
			param.update_index = submit_info.update_index;
			var client = ALittle.CreateHttpSender(g_IDEWebLoginManager.http_ip, g_IDEWebLoginManager.http_port);
			var error, result = VersionServer.HandleHttpQNewVersionInfo(client, param);
			this.HandleNewVersionInfo(error, result, submit_info);
		}
		else
			this.HandleNewVersionInfoImpl(submit_info);
	}
	
	public await fun HandleNewVersionInfo(string error, VersionServer.ANewVersionInfo result, IDEExportSubmitInfo submit_info)
	{
		g_AUITool.HideAlertDialog();
	
		if (error != null)
		{
			g_AUITool.ShowNotice("错误", "版本创建失败:"..error);
			return;
		}

		submit_info.version_id = result.version_id;
		ALittle.File_WriteJsonToFile(submit_info, submit_info.project_path.."/Export/SubmitInfo_"..submit_info.platform..".json");
		this.HandleNewVersionInfoImpl(submit_info);
	}
	
	public await fun HandleNewVersionInfoImpl(IDEExportSubmitInfo submit_info)
	{
        // 创建对话框
        if (this._submit_dialog == null)
        {
            this._submit_dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_submit_dialog", this);
            A_LayerManager.AddToModal(this._submit_dialog);
        }
        this._submit_dialog.visible = true;
        this._submit_process_bar.width = 0;
        this._submit_cancel_btn.visible = true;
        this._is_in_submit = true;

        var upload_index = 0;
        var total_count = ALittle.List_MaxN(submit_info.upload_list) + 2;

        var param = new VersionServer.QUploadVersionFile();
		param.__account_id = g_IDEWebLoginManager.account_id;
		param.__session_id = g_IDEWebLoginManager.session_id;
		param.platform = submit_info.platform;
		param.module_name = submit_info.module_name;
		param.version_id = submit_info.version_id;

        var error:string = null;
		var result:VersionServer.AUploadVersionFile = null;
		for (var k, file_path in submit_info.upload_list)
		{
            ++ upload_index;
            this._submit_content.text = "正在上传:"..upload_index.."/"..total_count.."\n"..submit_info.export_module_path.."/"..file_path;

			param.file_path = file_path;
			param.__account_id = g_IDEWebLoginManager.account_id;
			param.__session_id = g_IDEWebLoginManager.session_id;

			var repeat_count = 0;
			while (repeat_count < 1)
			{
				++repeat_count;
				this._submit_client = ALittle.CreateHttpFileSender(g_IDEWebLoginManager.http_ip, g_IDEWebLoginManager.http_port,
                                      submit_info.export_module_path.."/"..file_path, 0, bind(this.HandleSubmitVersionUpload, this, upload_index, total_count));
				error = VersionServer.HandleHttpQUploadVersionFile(this._submit_client, param);
				if (error == null) break;
			}

            if (error != null)
            {
                this._submit_content.text = "版本上传失败:"..error;
                this._is_in_submit = false;
                return;
            }
		}

		{
            ++ upload_index;
            this._submit_content.text = "正在上传:"..upload_index.."/"..total_count.."\n"..submit_info.project_path.."/Export/"..submit_info.install_name;

			param.file_path = submit_info.install_name;
			param.__account_id = g_IDEWebLoginManager.account_id;
			param.__session_id = g_IDEWebLoginManager.session_id;

			var repeat_count = 0;
			while (repeat_count < 100)
			{
				++repeat_count;
				this._submit_client = ALittle.CreateHttpFileSender(g_IDEWebLoginManager.http_ip, g_IDEWebLoginManager.http_port,
                                      submit_info.project_path.."/Export/"..submit_info.install_name, 0, bind(this.HandleSubmitVersionUpload, this, upload_index, total_count));
				error = VersionServer.HandleHttpQUploadVersionFile(this._submit_client, param);
				if (error == null) break;
			}

            if (error != null)
            {
                this._submit_content.text = "版本上传失败:"..error;
                this._is_in_submit = false;
                return;
            }
		}


		{
            ++ upload_index;
            this._submit_content.text = "正在上传:"..upload_index.."/"..total_count.."\n"..submit_info.export_module_path.."/CurVersion.db";

			param.file_path = "CurVersion.db";
			param.__account_id = g_IDEWebLoginManager.account_id;
			param.__session_id = g_IDEWebLoginManager.session_id;

			var repeat_count = 0;
			while (repeat_count < 100)
			{
				++repeat_count;
				this._submit_client = ALittle.CreateHttpFileSender(g_IDEWebLoginManager.http_ip, g_IDEWebLoginManager.http_port,
                                      submit_info.export_module_path.."/CurVersion.db", 0, bind(this.HandleSubmitVersionUpload, this, upload_index, total_count));
				error = VersionServer.HandleHttpQUploadVersionFile(this._submit_client, param);
				if (error == null) break;
			}

            if (error != null)
            {
                this._submit_content.text = "版本上传失败:"..error;
                this._is_in_submit = false;
                return;
            }
		}

        this._submit_client = null;
        this._submit_content.text = "版本上传成功";
        this._submit_cancel_btn.visible = false;
        this._is_in_submit = false;
        // 标记上传成功
        submit_info.completed = true;
        ALittle.File_WriteJsonToFile(submit_info, submit_info.project_path.."/Export/SubmitInfo_"..submit_info.platform..".json");
	}
	
	public fun HandleSubmitVersionCancel(ALittle.UIClickEvent event)
	{
		if (this._submit_client != null)
		{
            this._submit_client.Stop();
            this._submit_client = null;
		}
        this._submit_dialog.visible = false;
	}
	
	public fun HandleSubmitVersionUpload(int upload_index, int total_count, ALittle.IHttpFileSender file)
	{
		var file_path = file.GetFilePath();
		var cur_size = file.GetCurSize();
		var total_size = file.GetTotalSize();

        this._submit_content.text = "正在上传:"..upload_index.."/"..total_count.."\n"..file_path;
        this._submit_process_bar.x = this._submit_process_bg.x;
        this._submit_process_bar.width = (cur_size / total_size) * this._submit_process_bg.width;
	}

	//========================================Windows部分=================================================
	// 生成Exe打包文件
	public fun GenerateExe(IDEPackageInfo package_info) : string
	{
		ALittle.Log("==================GenerateExe:"..package_info.project_name.."==================");
		
		// 检查路径是否存在
		if (ALittle.File_GetFileAttr(package_info.project_path) == null)
		{
			ALittle.Log("IDEExport:GenerateExe project_path is not exist:", package_info.project_path);
			return null;
		}
	
		// 覆盖ALittleClient.exe, ALittleClientWin32.exe和ALittleClientDll.dll
		ALittle.File_CopyFile("ALittleClient.exe", "Export/Windows/Engine/ALittleClient.exe");
		ALittle.File_CopyFile("ALittleClientWin.exe", "Export/Windows/Engine/ALittleClientWin.exe");
		ALittle.File_CopyFile("ALittleServer.exe", "Export/Windows/Engine/ALittleServer.exe");
		ALittle.File_CopyFile("SDL2.dll", "Export/Windows/Engine/SDL2.dll");
		ALittle.File_CopyFile("libcrypto-1_1-x64.dll", "Export/Windows/Engine/libcrypto-1_1-x64.dll");
		ALittle.File_CopyFile("libssl-1_1-x64.dll", "Export/Windows/Engine/libssl-1_1-x64.dll");
		ALittle.File_CopyFile("libtcmalloc_minimal.dll", "Export/Windows/Engine/libtcmalloc_minimal.dll");
		ALittle.File_CopyFile("libmysql.dll", "Export/Windows/Engine/libmysql.dll");
	
		// 直接把dll和exe文件复制到导出目录
		ALittle.File_CopyDeepDir("Export/Windows/Engine", package_info.export_path);
	
		// 先判断是否有install复制Install.ico
		var install_ico = package_info.project_path.."/Icon/install.ico";
		if (ALittle.File_GetFileAttr(install_ico) == null)
			ALittle.File_CopyFile(ALittle.File_BaseFilePath().."Export/Icon/install.ico", package_info.project_path.."/Export/Windows/install.ico");
		else
			ALittle.File_CopyFile(install_ico, package_info.project_path.."/Export/Windows/install.ico");
	
		// 从Inno Setup模板生成安装文件
		var template = ALittle.File_ReadTextFromFile(ALittle.File_BaseFilePath().."Export/Windows/Tool/ExportTemplate.iss");
		
		if (package_info.install_info.install_name == null)
		{
			ALittle.Log("IDEExport:GenerateExe install_name is null");
			return null;
		}
	
		// 替换版本号
		template = ALittle.String_Replace(template, "VERSION_NUMBER", package_info.version_info.version_number);
	
		// 替换安装包名
		var install_name_gbk = package_info.install_info.install_name;
		template = ALittle.String_Replace(template, "INSTALL_NAME", install_name_gbk);
		
		// 替换安装唯一ID
		var guid = ALittle.String_Md5(package_info.project_name.."-"..package_info.install_info.install_name);
		guid = ALittle.String_Upper(guid);
		guid = ALittle.String_Sub(guid, 1, 8).."-"..ALittle.String_Sub(guid, 9, 13).."-"..ALittle.String_Sub(guid, 14, 18).."-"..ALittle.String_Sub(guid, 19, 23).."-"..ALittle.String_Sub(guid, 24, 32);
		template = ALittle.String_Replace(template, "INSTALL_GUID", guid);
		// 是否开机启动
		if (package_info.install_info.auto_start == true)
			template = template.."[Registry]\nRoot: HKLM; Subkey: \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\"; ValueType: string; ValueName: \""..install_name_gbk.."\"; ValueData: \"{app}\\ALittleClientWin.exe\"";

		// 生成iss文件
		if (ALittle.File_SaveFile(package_info.project_path.."/Export/Install.iss", template, -1) == false) return null;
	
		// 生成文件
		lua.os.execute("call \"Export/Windows/Tool/Inno Setup 5/iscc\" /Q "..package_info.project_path.."/Export/Install.iss");
	
		return "Install.exe";
	}
	
	//========================================Android部分=================================================
	// 生成Apk打包文件
	public fun GenerateApk(IDEPackageInfo package_info) : string
	{
		ALittle.Log("==================GenerateApk:"..package_info.project_name.."==================");
		
		// 检查路径是否存在
		if (ALittle.File_GetFileAttr(package_info.project_path) == null)
		{
			ALittle.Log("IDEExport:GenerateApk project_path is not exist:", package_info.project_path);
			return null;
		}
	
		if (package_info.install_info.package_name == null)
		{
			ALittle.Log("IDEExport:GenerateApk package_name is null");
			return null;
		}
	
		if (package_info.install_info.install_name == null)
		{
			ALittle.Log("IDEExport:GenerateApk install_name is null");
			return null;
		}
        
		// 生成AndroidManifest.xml文件
		var file = new carp.CarpLocalFile();
		file.SetPath(ALittle.File_BaseFilePath().."Export/Android/AndroidManifestTemplate.xml");
		if (file.Load(false))
		{
			var content = file.GetContent();
			content = ALittle.String_Replace(content, "abcd@package_name@abcd", package_info.install_info.package_name);
			content = ALittle.String_Replace(content, "abcd@version_number@abcd", package_info.version_info.version_number);
			content = ALittle.String_Replace(content, "abcd@app_name@abcd", package_info.install_info.install_name);
			if (package_info.install_info.screen == "竖屏")
				content = ALittle.String_Replace(content, "abcd@screen@abcd", "portrait");
			elseif (package_info.install_info.screen == "横屏")
				content = ALittle.String_Replace(content, "abcd@screen@abcd", "landscape");
			else
				content = ALittle.String_Replace(content, "abcd@screen@abcd", "sensor");

			if (package_info.install_info.fullscreen)
				content = ALittle.String_Replace(content, "abcd@fullscreen@abcd", "style/Theme.NoTitleBar.Fullscreen");
			else
				content = ALittle.String_Replace(content, "abcd@fullscreen@abcd", "style/Theme.NoTitleBar");

			// 替换到安卓工程文件夹下
			ALittle.File_SaveFile(package_info.project_path.."/Export/Android/AndroidManifest.xml", content, -1);
		}
	
		// 复制批处理文件
		ALittle.File_CopyFile(ALittle.File_BaseFilePath().."Export/Android/ExportAPK.bat", package_info.project_path.."/Export/Android/ExportAPK.bat");
	
		// 复制assets
		ALittle.File_MakeDeepDir(package_info.project_path.."/Export/Android/assets");
		ALittle.File_CopyDeepDir(ALittle.File_BaseFilePath().."Export/Android/assets", package_info.project_path.."/Export/Android/assets");

		// 复制res
		ALittle.File_MakeDeepDir(package_info.project_path.."/Export/Android/res");
		ALittle.File_CopyDeepDir(ALittle.File_BaseFilePath().."Export/Android/res", package_info.project_path.."/Export/Android/res");
	
		// 先判断是否有install复制Install.png
		var install_png = package_info.project_path.."/Icon/install.png";
		if (ALittle.File_GetFileAttr(install_png) == null)
			install_png = ALittle.File_BaseFilePath().."Export/Icon/install.png";
	
		// 进行大小缩放，然后保存到指定位置
		var surface = carp.LoadCarpSurface(install_png);
		if (surface != null)
		{
			var surface_width = carp.GetCarpSurfaceWidth(surface);
			var surface_height = carp.GetCarpSurfaceHeight(surface);
	
			var new_surface = carp.CreateCarpSurface(24, 24);
			var new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			var new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.project_path.."/Export/Android/res/drawable-ldpi/icon.png");
			carp.FreeCarpSurface(new_surface);
	
			new_surface = carp.CreateCarpSurface(48, 48);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.project_path.."/Export/Android/res/drawable-mdpi/icon.png");
			carp.FreeCarpSurface(new_surface);
	
			new_surface = carp.CreateCarpSurface(72, 72);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.project_path.."/Export/Android/res/drawable-hdpi/icon.png");
			carp.FreeCarpSurface(new_surface);
	
			new_surface = carp.CreateCarpSurface(96, 96);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.project_path.."/Export/Android/res/drawable-xhdpi/icon.png");
			carp.FreeCarpSurface(new_surface);
	
			new_surface = carp.CreateCarpSurface(144, 144);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.project_path.."/Export/Android/res/drawable-xxhdpi/icon.png");
			carp.FreeCarpSurface(new_surface);
			// 释放图片
			carp.FreeCarpSurface(surface);
		}
	
		// 计算报名路径
		var package_name_list = ALittle.String_Split(package_info.install_info.package_name, ".");
	
		// 复制org.libsdl.app包代码
		var default_src_path = package_info.project_path.."/Export/Android/src/org/libsdl/app";
		ALittle.File_MakeDeepDir(default_src_path);
		ALittle.File_CopyDeepDir("Export/Android/src/org/libsdl/app", default_src_path);
	
		// 复制项目包代码(这部分代码必须在项目包名下才有效)
		var package_src_path = package_info.project_path.."/Export/Android/src/"..ALittle.String_Join(package_name_list, "/");
		ALittle.File_MakeDeepDir(package_src_path);
		ALittle.File_CopyDeepDir("Export/Android/src/package_src", package_src_path);
	
		// 编译的java文件的列表
		var javac_string = "";
	
		// 遍历org.libsdl.app中的java文件，添加到编译文件列表中
		var java_file_map = new Map<string, ALittle.PathAttribute>();
		ALittle.File_GetFileAttrByDir(default_src_path, java_file_map);
		for (var file_path, java_file in java_file_map)
		{
			javac_string = javac_string..ALittle.String_Replace(file_path, package_info.project_path.."/Export/Android/", "").."\n";
			// 遍历所有代码，把abcd@package_name@abcd 替换
			var content = ALittle.File_ReadTextFromFile(file_path);
			content = ALittle.String_Replace(content, "abcd@package_name@abcd", package_info.install_info.package_name);
			ALittle.File_SaveFile(file_path, content, -1);
		}
	
		// 打开项目包名下的java文件，修改包名相关代码，添加到编译文件列表中
		java_file_map = new Map<string, ALittle.PathAttribute>();
		ALittle.File_GetFileAttrByDir(package_src_path, java_file_map);
		for (var file_path, java_file in java_file_map)
		{
			javac_string = javac_string..ALittle.String_Replace(file_path, package_info.project_path.."/Export/Android/", "").."\n";
			// 遍历所有代码，把abcd@package_name@abcd 替换
			var content = ALittle.File_ReadTextFromFile(file_path);
			content = ALittle.String_Replace(content, "abcd@package_name@abcd", package_info.install_info.package_name);
			ALittle.File_SaveFile(file_path, content, -1);
		}
	
		// 保存编译文件列表
		javac_string = ALittle.String_Replace(javac_string, "/", "\\");
		ALittle.File_SaveFile(package_info.project_path.."/Export/Android/src_list.txt", javac_string, -1);

		lua.os.execute("call \""..package_info.project_path.."/Export/Android/ExportAPK.bat\" "..ALittle.String_Join(package_name_list, "\\"));
	
		return "Install.apk";
	}
	
	//========================================iOS部分=================================================
	// 生成Ipa打包文件
	public fun GenerateIpa(IDEPackageInfo package_info) : string
	{
		ALittle.Log("==================GenerateIpa:"..package_info.project_name.."==================");
	
		// 检查路径是否存在
		if (ALittle.File_GetFileAttr(package_info.project_path) == null)
		{
			ALittle.Log("IDEExport:GenerateIpa project_path is not exist:", package_info.project_path);
			return null;
		}
	
		if (package_info.install_info.package_name == null)
		{
			ALittle.Log("IDEExport:GenerateIpa package_name is null");
			return null;
		}
	
		if (package_info.install_info.install_name == null)
		{
			ALittle.Log("IDEExport:GenerateIpa install_name is null");
			return null;
		}
	
		// 复制iOS的工程文件
		ALittle.File_CopyDeepDir(ALittle.File_BaseFilePath().."Export/iOS/ALittleClient", package_info.export_path);
	
		// 先判断是否有install复制Install.png
		var install_png = package_info.project_path.."/Icon/install.png";
		if (ALittle.File_GetFileAttr(install_png) == null)
			install_png = ALittle.File_BaseFilePath().."Export/Icon/install.png";
		
		// 进行大小缩放，然后保存到指定位置
		var surface = carp.LoadCarpSurface(install_png);
		if (surface != null)
		{
			var surface_width = carp.GetCarpSurfaceWidth(surface);
			var surface_height = carp.GetCarpSurfaceHeight(surface);
			var new_surface = carp.CreateCarpSurface(40, 40);
			var new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			var new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(60, 60);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-1.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(58, 58);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-2.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(87, 87);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-3.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(80, 80);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-4.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(120, 120);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-5.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(120, 120);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-6.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(180, 180);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-7.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(20, 20);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-8.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(40, 40);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-9.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(29, 29);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-10.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(58, 58);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-11.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(40, 40);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-12.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(80, 80);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-13.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(76, 76);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-14.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(152, 152);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-15.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(167, 167);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-16.png");
			carp.FreeCarpSurface(new_surface);
        
			new_surface = carp.CreateCarpSurface(1024, 1024);
			new_surface_width = carp.GetCarpSurfaceWidth(new_surface);
			new_surface_height = carp.GetCarpSurfaceHeight(new_surface);
			carp.CutBlitCarpSurface(surface, new_surface, "0,0,"..surface_width..","..surface_height, "0,0,"..new_surface_width..","..new_surface_height);
			carp.SaveCarpSurface(new_surface, package_info.export_path.."/ALittleClient/Assets.xcassets/AppIcon.appiconset/icon-17.png");
			carp.FreeCarpSurface(new_surface);
        

			// 释放图片
			carp.FreeCarpSurface(surface);
		}
	
		// 修改文件
		var share_file = new carp.CarpLocalFile();
		share_file.SetPath(package_info.export_path.."/ALittleClient.xcodeproj/project.pbxproj");
		if (share_file.Load(false))
		{
			var content = share_file.GetContent();
			content = ALittle.String_Replace(content, "abcd@package_name@abcd", package_info.install_info.package_name);
			ALittle.File_SaveFile(package_info.export_path.."/ALittleClient.xcodeproj/project.pbxproj", content, -1);
		}
	
		// 修改文件
		share_file = new carp.CarpLocalFile();
		share_file.SetPath(package_info.export_path.."/ALittleClient/ALittleClient.entitlements");
		if (share_file.Load(false))
		{
			var content = share_file.GetContent();
			content = ALittle.String_Replace(content, "abcd@package_name@abcd", package_info.install_info.package_name);
			ALittle.File_SaveFile(package_info.export_path.."/ALittleClient/ALittleClient.entitlements", content, -1);
		}
	
		// 修改文件
		share_file = new carp.CarpLocalFile();
		share_file.SetPath(package_info.export_path.."/ALittleClient/Info.plist");
		if (share_file.Load(false))
		{
			var content = share_file.GetContent();
			content = ALittle.String_Replace(content, "abcd@version_number@abcd", package_info.version_info.version_number);
			content = ALittle.String_Replace(content, "abcd@app_name@abcd", package_info.install_info.install_name);
	
			if (package_info.install_info.screen == "竖屏")
			{
				content = ALittle.String_Replace(content, "abcd@screen@abcd", "<string>UIInterfaceOrientationPortrait</string>");
				content = ALittle.String_Replace(content, "abcd@screen@abcd", "<string>UIInterfaceOrientationPortrait</string>");
			}
			elseif (package_info.install_info.screen == "横屏")
			{
				content = ALittle.String_Replace(content, "abcd@screen@abcd", "<string>UIInterfaceOrientationLandscapeLeft</string><string>UIInterfaceOrientationLandscapeRight</string>");
				content = ALittle.String_Replace(content, "abcd@screen@abcd", "<string>UIInterfaceOrientationLandscapeLeft</string><string>UIInterfaceOrientationLandscapeRight</string>");
			}
			else
			{
				content = ALittle.String_Replace(content, "abcd@screen@abcd", "<string>UIInterfaceOrientationPortrait</string><string>UIInterfaceOrientationLandscapeLeft</string><string>UIInterfaceOrientationLandscapeRight</string>");
				content = ALittle.String_Replace(content, "abcd@screen@abcd", "<string>UIInterfaceOrientationPortrait</string><string>UIInterfaceOrientationLandscapeLeft</string><string>UIInterfaceOrientationLandscapeRight</string>");
			}
	
			if (package_info.install_info.fullscreen)
				content = ALittle.String_Replace(content, "abcd@fullscreen@abcd", "<key>Status bar is initially hidden</key><true/>");
			else
				content = ALittle.String_Replace(content, "abcd@fullscreen@abcd", "<key>Status bar is initially hidden</key><false/>");

			ALittle.File_SaveFile(package_info.export_path.."/ALittleClient/Info.plist", content, -1);
		}
	
		ALittle.File_SaveFile(package_info.project_path.."/Export/Install.ipa", "Install.ipa", -1);
	
		return "Install.ipa";
	}
	
	//========================================Web部分=================================================
	// 生成Web打包文件
	public fun GenerateWeb(IDEPackageInfo package_info) : string
	{
		ALittle.Log("==================GenerateWeb:"..package_info.project_name.."==================");
		
		// 检查路径是否存在
		if (ALittle.File_GetFileAttr(package_info.project_path) == null)
		{
			ALittle.Log("IDEExport:GenerateWeb project_path is not exist:", package_info.project_path);
			return null;
		}
	
		// 先判断是否有install复制Install.ico
		var install_ico = package_info.project_path.."/Icon/install.ico";
		if (ALittle.File_GetFileAttr(install_ico) == null)
			ALittle.File_CopyFile(ALittle.File_BaseFilePath().."Export/Icon/install.ico", package_info.project_path.."/Export/Web/favicon.ico");
		else
			ALittle.File_CopyFile(install_ico, package_info.project_path.."/Export/Web/favicon.ico");
	
		// 生成html
		var file = new carp.CarpLocalFile();
		file.SetPath(ALittle.File_BaseFilePath().."Export/Web/index.html");
		if (file.Load(false))
		{
			var content = file.GetContent();
			content = ALittle.String_Replace(content, "abcd@project_name@abcd", package_info.project_name);
	
			ALittle.File_SaveFile(package_info.project_path.."/Export/Web/"..package_info.project_name..".html", content, -1);
			ALittle.File_SaveFile(package_info.project_path.."/Export/Install.html", content, -1);
		}
		return "Install.html";
	}
	
	//========================================WeChat部分=================================================
	// 生成WeChat打包文件
	public fun GenerateWeChat(IDEPackageInfo package_info) : string
	{
		ALittle.Log("==================GenerateWeChat:"..package_info.project_name.."==================");
		
		// 检查路径是否存在
		if (ALittle.File_GetFileAttr(package_info.project_path) == null)
		{
			ALittle.Log("IDEExport:GenerateWeChat project_path is not exist:", package_info.project_path);
			return null;
		}
	
		// 先判断是否有install复制Install.ico
		var install_ico = package_info.project_path.."/Icon/install.ico";
		if (ALittle.File_GetFileAttr(install_ico) == null)
			ALittle.File_CopyFile(ALittle.File_BaseFilePath().."Export/Icon/install.ico", package_info.project_path.."/Export/WeChat/favicon.ico");
		else
			ALittle.File_CopyFile(install_ico, package_info.project_path.."/Export/WeChat/favicon.ico");
	
		// 生成game.js
		var game_js = new carp.CarpLocalFile();
		game_js.SetPath(ALittle.File_BaseFilePath().."Export/WeChat/game.js");
		if (game_js.Load(false))
		{
			var content = game_js.GetContent();
			content = ALittle.String_Replace(content, "abcd@project_name@abcd", package_info.project_name);
			content = ALittle.String_Replace(content, "abcd@res_ip@abcd", package_info.install_info.res_ip);
			content = ALittle.String_Replace(content, "abcd@res_port@abcd", ALittle.String_ToString(package_info.install_info.res_port));
			content = ALittle.String_Replace(content, "abcd@res_base_path@abcd", package_info.install_info.res_base_path);
	
			ALittle.File_SaveFile(package_info.project_path.."/Export/WeChat/game.js", content, -1);
			ALittle.File_SaveFile(package_info.project_path.."/Export/Install.js", content, -1);
		}

		
		// 生成game.json
		var game_json = new carp.CarpLocalFile();
		game_json.SetPath(ALittle.File_BaseFilePath().."Export/WeChat/game.json");
		if (game_json.Load(false))
		{
			var content = game_json.GetContent();

			if (package_info.install_info.screen == "竖屏")
				content = ALittle.String_Replace(content, "abcd@screen@abcd", "portrait");
			else
				content = ALittle.String_Replace(content, "abcd@screen@abcd", "landscape");
	
			ALittle.File_SaveFile(package_info.project_path.."/Export/WeChat/game.json", content, -1);
		}
		
		
		// 生成game.json
		var project_config_json = new carp.CarpLocalFile();
		project_config_json.SetPath(ALittle.File_BaseFilePath().."Export/WeChat/project.config.json");
		if (project_config_json.Load(false))
		{
			var content = project_config_json.GetContent();

			ALittle.File_SaveFile(package_info.project_path.."/Export/WeChat/project.config.json", content, -1);
		}
		return "Install.js";
	}

	//========================================Emscripten部分=================================================
	// 生成Emscripte打包文件
	public fun GenerateEmscripten(IDEPackageInfo package_info) : string
	{
		ALittle.Log("==================GenerateEmscripten:"..package_info.project_name.."==================");
    
		// 检查路径是否存在
		if (ALittle.File_GetFileAttr(package_info.project_path) == null)
		{
			ALittle.Log("IDEExport:GenerateEmscripten project_path is not exist:", package_info.project_path);
			return null;
		}
        
            // 先判断是否有install复制Install.ico
		var install_ico = package_info.project_path.."/Icon/install.ico";
		if (ALittle.File_GetFileAttr(install_ico) == null)
			ALittle.File_CopyFile(ALittle.File_BaseFilePath().."Export/Icon/install.ico", package_info.project_path.."/Export/Web/favicon.ico");
		else
			ALittle.File_CopyFile(install_ico, package_info.project_path.."/Export/Emscripten/favicon.ico");
	
        // 生成js
		var file = new carp.CarpLocalFile();
		file.SetPath(ALittle.File_BaseFilePath().."Export/Emscripten/index.js");
		if (file.Load(false))
		{
			var content = file.GetContent();
			content = ALittle.String_Replace(content, "abcd@project_name@abcd", package_info.project_name);
        
			ALittle.File_SaveFile(package_info.project_path.."/Export/Emscripten/"..package_info.project_name..".js", content, -1);
		}

		// 生成html
		file = new carp.CarpLocalFile();
		file.SetPath(ALittle.File_BaseFilePath().."Export/Emscripten/index.html");
		if (file.Load(false))
		{
			var content = file.GetContent();
			content = ALittle.String_Replace(content, "abcd@project_name@abcd", package_info.project_name);
        
			ALittle.File_SaveFile(package_info.project_path.."/Export/Emscripten/"..package_info.project_name..".html", content, -1);
            ALittle.File_SaveFile(package_info.project_path.."/Export/Install.html", content, -1);
		}

		return "Install.html";
	}
}

protected var g_IDEExport = new IDEExport();
