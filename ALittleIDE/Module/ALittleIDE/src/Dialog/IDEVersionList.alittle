
namespace ALittleIDE;

///////////////////////////////////////////////////////////////////////////////////////////

// 版本信息item
struct IDEVersionInfoItem
{
	ALittle.TextRadioButton _item_button;		// 版本按钮
	ALittle.DisplayObject _item_title;			// 按钮上的文字内容
}

// 版本信息携带数据
struct IDEVersionInfoItemUserData
{
	VersionServer.AVersionInfo info;							// 版本总信息
	VersionServer.D_VersionInfo data;					// 当前版本的数据
}

// 屏蔽版本携带数据
struct IDEVersionCloseItemUserData
{
	VersionServer.AVersionInfo info;							// 版本总信息
	VersionServer.D_VersionClose data;				// 当前屏蔽的数据
}

public class IDEVersionList : ALittle.DisplayLayout
{
	private string _platform;		// 当前平台
	private string _config_key;		// 配置的key
	
	private ALittle.DisplayObject _export_refresh_btn;		// 刷新按钮
	private ALittle.ScrollList _version_list;				// 版本列表滚动屏
	private ALittle.ScrollList _close_list;					// 版本屏蔽滚动屏

	private ALittle.DisplayObject _export_big_version;		// 大版本输入框
	private ALittle.DisplayObject _export_install_version;	// 安装版本输入框
	private ALittle.DisplayObject _export_version_number;	// 版本号输入框
	private ALittle.DisplayObject _export_plugin_list;		// 引入插件
	private ALittle.DisplayObject _export_old_log;			// 日志显示框

	private ALittle.Dialog _version_close_dialog;			// 版本屏蔽对话框
	private ALittle.DisplayObject _version_close_version;	// 要屏蔽的版本号
	private ALittle.DisplayObject _version_submit_platform;	// 要屏蔽的平台
	
	public ctor(ALittle.ControlSystem ctrl_sys)
	{
		this._platform = "Windows";
		this._config_key = "";
	}
	
	public fun TCtor()
	{
	}
	
	public set platform(string value) { this._platform = value; }
	public get platform() : string { return this._platform; }
	public set config_key(string value) { this._config_key = value; }
	public get config_key() : string { return this._config_key; }
	public get export_old_log() : ALittle.DisplayObject { return this._export_old_log; }

	// 处理刷新版本列表
	public async fun HandleRefreshVersionList(ALittle.UIEvent event)
	{
		// 检查当前是否有项目打开
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return;
		}

		// 检查登陆
		if (!g_IDEWebLoginManager.IsLogin())
		{
			g_AUITool.ShowNotice("错误", "请先登陆");
			return;
        }
	
		// 禁用刷新按钮
		this._export_refresh_btn.disabled = true;
	
		// 清空版本列表
		this._version_list.RemoveAllChild();
		this._close_list.RemoveAllChild();
		// 创建组
		var group:Map<any, bool> = ALittle.CreateKeyWeakMap();

		// 发送HTTP请求
		var param = new VersionServer.QVersionInfo();
		param.__account_id = g_IDEWebLoginManager.account_id;
		param.__session_id = g_IDEWebLoginManager.session_id;
		param.platform = this._platform;
		param.module_name = g_IDEProject.project.name;
		var client = ALittle.CreateHttpSender(g_IDEWebLoginManager.http_ip, g_IDEWebLoginManager.http_port);
		var error, result = VersionServer.HandleHttpQVersionInfo(client, param);
		// 解禁刷新按钮
		this._export_refresh_btn.disabled = false;
		if (error != null)
		{
			g_AUITool.ShowNotice("错误", "刷新失败:"..error);
			return;
		}

		// 遍历结果
		var version_list = result.version_list;
		if (version_list == null) version_list = new List<VersionServer.D_VersionInfo>();
		// 按时间从大到小排序
		ALittle.List_Sort(version_list, IDEVersionList.VersionInfoCmp);

		var first_version_info:IDEVersionInfoItemUserData = null;
		for (var k, v in version_list)
		{
			// 创建子控件
			var control_line = new IDEVersionInfoItem();
			var item = g_Control.CreateControl{ALittle.DisplayObject}("ide_version_item", control_line, this._version_list);
			control_line._item_button.group = group;
			var user_data = new IDEVersionInfoItemUserData();
			control_line._item_button._user_data = user_data;
			user_data.info = result;
			user_data.data = v;
			control_line._item_button.drag_trans_target = this._version_list;
			control_line._item_button.AddEventListener(this, this.HandleVersionListSelectChange);
			control_line._item_button.AddEventListener(this, this.HandleVersionListMenu);
			var status_str = "上传失败";
			if (v.status == 1) status_str = "上传成功";
			control_line._item_title.text = "版本时间:"..ALittle.Time_GetCurDate(v.update_time).."("..status_str..")";

			if (first_version_info == null)
			{
				control_line._item_button.selected = true;
				first_version_info = user_data;
			}
		}

		// 遍历结果
		var close_list = result.close_list;
		if (close_list == null) close_list = new List<VersionServer.D_VersionClose>();
		for (var k, v in close_list)
		{
			// 创建子控件
			var control_line = new IDEVersionInfoItem();
			var item = this._ctrl_sys.CreateControl{ALittle.DisplayObject}("tree_item", control_line, this._close_list);
			control_line._item_button.group = group;
			var user_data = new IDEVersionCloseItemUserData();
			control_line._item_button._user_data = user_data;
			user_data.info = result;
			user_data.data = v;
			control_line._item_button.drag_trans_target = this._close_list;
			control_line._item_button.AddEventListener(this, this.HandleVersionCloseListMenu);
			control_line._item_title.text = v.close_version.."("..v.submit_platform..")";
		}

		// 选择第一个来显示
		if (first_version_info != null)
			this.ShowVersionInfo(first_version_info);
	}

	public static VersionInfoCmp(VersionServer.D_VersionInfo a, VersionServer.D_VersionInfo b) : bool
	{
		if (a.update_time != b.update_time)
			return a.update_time > b.update_time;

		return a.update_index > b.update_index;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////-
	// 打开版本列表菜单
	public fun HandleVersionListMenu(ALittle.UIRButtonDownEvent event)
	{
		var menu = new AUIPlugin.AUIRightMenu();
		menu.AddItem("删除", bind(this.HandleVersionDelete, this, event.target._user_data));
		menu.Show();
	}
	// 请求删除版本
	public async fun HandleVersionDelete(IDEVersionInfoItemUserData version_info)
	{   
		var delete_result = g_AUITool.DeleteNotice("删除", "确定要删除"..ALittle.Time_GetCurDate(version_info.data.update_time).."(版本时间)这个版本吗?");
		if (delete_result != AUIPlugin.AUIToolOption.YES) return;

		// 发送HTTP请求
		var param = new VersionServer.QDeleteVersionInfo();
		param.__account_id = g_IDEWebLoginManager.account_id;
		param.__session_id = g_IDEWebLoginManager.session_id;
		param.platform = this._platform;
		param.module_name = g_IDEProject.project.name;
		param.version_id = version_info.data.version_id;

		var client = ALittle.CreateHttpSender(g_IDEWebLoginManager.http_ip, g_IDEWebLoginManager.http_port);
		var error, result = VersionServer.HandleHttpQDeleteVersionInfo(client, param);
		if (error != null)
		{
			g_AUITool.ShowNotice("提示", "删除失败:"..error);
			return;
		}
        
		// 刷新版本列表
		this.HandleRefreshVersionList(null);
	}
	// 选中哪个版本
	public fun HandleVersionListSelectChange(ALittle.UIChangedEvent event)
	{
		if (g_IDEProject.project == null) return;
		if (event.target.selected == false) return;
	
		// 获取版本内容
		var version_info:IDEVersionInfoItemUserData = event.target._user_data;
		if (version_info == null)
		{
			this.LoadConfig();
			return;
		}

		this.ShowVersionInfo(version_info);
	}

	public fun ShowVersionInfo(IDEVersionInfoItemUserData version_info)
	{
		if (version_info.data.big_version != null)
			this._export_big_version.text = version_info.data.big_version;
		else
			this._export_big_version.text = "";
		if (version_info.data.install_version != null)
			this._export_install_version.text = version_info.data.install_version;
		else
			this._export_install_version.text = "";

		if (version_info.data.version_number != null)
			this._export_version_number.text = version_info.data.version_number;
		else
			this._export_version_number.text = "";

		if (version_info.data.plugin_list != null)
			this._export_plugin_list.text = version_info.data.plugin_list;
		else
			this._export_plugin_list.text = "";

		var log_list = new List<string>();
		var last_create_time = 0;
		var log_index = 1;
		for (var k, v in version_info.info.log_list)
		{
			if (v.create_time != last_create_time)
			{
				last_create_time = v.create_time;
				log_index = 1;
				log_list[log_index] = ALittle.Time_GetCurDate(last_create_time);
			}
			log_list[log_index + 1] = "\t"..log_index.."."..v.content;
			log_index = log_index + 1;
		}
		this._export_old_log.text = ALittle.String_Join(log_list, "\n");
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// 打开版本屏蔽列表
	public fun HandleVersionCloseListMenu(ALittle.UIRButtonDownEvent event)
	{
		var menu = new AUIPlugin.AUIRightMenu();
		menu.AddItem("删除", bind(this.HandleVersionCloseDelete, this, event.target._user_data));
		menu.Show();
	}
	// 请求删除某个版本的屏蔽
	public async fun HandleVersionCloseDelete(IDEVersionCloseItemUserData version_info)
	{
		var delete_result = g_AUITool.DeleteNotice("删除", "确定要删除"..version_info.data.close_version.."("..version_info.data.submit_platform..")这个拦截版本吗?");
		if (delete_result != AUIPlugin.AUIToolOption.YES) return;

		// 发送HTTP请求
		var param = new VersionServer.QDeleteVersionClose();
		param.__account_id = g_IDEWebLoginManager.account_id;
		param.__session_id = g_IDEWebLoginManager.session_id;
		param.platform = this._platform;
		param.module_name = g_IDEProject.project.name;
		param.close_version = version_info.data.close_version;
		var client = ALittle.CreateHttpSender(g_IDEWebLoginManager.http_ip, g_IDEWebLoginManager.http_port);
		var error, result = VersionServer.HandleHttpQDeleteVersionClose(client, param);
		if (error != null)
		{
			g_AUITool.ShowNotice("提示", "删除失败:"..error);
			return;
		}
        
		// 刷新版本信息
		this.HandleRefreshVersionList(null);
	}

	// 打开版本屏蔽对话框
	public fun HandleAddVersionClose(ALittle.UIEvent event)
	{
		if (this._version_close_dialog == null)
		{
			this._version_close_dialog = this._ctrl_sys.CreateControl{ALittle.Dialog}("ide_add_version_close_dialog", this);
			g_DialogLayer.AddChild(this._version_close_dialog);
		}
		this._version_close_version.text = "";
		this._version_submit_platform.text = "";
		this._version_close_dialog.visible = true;
		this._version_close_dialog.MoveToTop();
	}

	// 确定添加版本屏蔽
	public async fun HandleAddVersionCloseClick(ALittle.UIEvent event)
	{
		this._version_close_dialog.visible = false;
	
		// 发送HTTP请求
		var param = new VersionServer.QAddVersionClose();
		param.__account_id = g_IDEWebLoginManager.account_id;
		param.__session_id = g_IDEWebLoginManager.session_id;
		param.platform = this._platform;
		param.module_name = g_IDEProject.project.name;
		param.close_version = this._version_close_version.text;
		param.submit_platform = this._version_submit_platform.text;
		var client = ALittle.CreateHttpSender(g_IDEWebLoginManager.http_ip, g_IDEWebLoginManager.http_port);
		var error, result = VersionServer.HandleHttpQAddVersionClose(client, param);
		if (error != null)
		{
			g_AUITool.ShowNotice("提示", "添加失败:"..error);
			return;
		}

		// 刷新版本列表
		this.HandleRefreshVersionList(null);
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// 加载配置数据
	public fun LoadConfig()
	{
		var export_info = g_IDEProject.project.config.GetConfig(this._config_key, new IDEPackageInfo());
		var version_info = export_info.version_info;
		if (version_info == null) version_info = new IDEVersionInfo();
	
		var version = ALittle.Time_GetCurDate(ALittle.Time_GetCurTime());
		if (version_info.big_version != null)
			this._export_big_version.text = version_info.big_version;
		else
			this._export_big_version.text = version;

		if (version_info.install_version != null)
			this._export_install_version.text = version_info.install_version;
		else
			this._export_install_version.text = version;

		if (version_info.version_number != null)
			this._export_version_number.text = version_info.version_number;
		else
			this._export_version_number.text = "";

		if (version_info.plugin_list != null)
			this._export_plugin_list.text = version_info.plugin_list;
		else
			this._export_plugin_list.text = "";
	}

	public fun CheckDateString(string content) : bool
	{
		var list = ALittle.String_Split(content, "-");
		if (ALittle.List_MaxN(list) != 6) return false;

		if (ALittle.String_Len(list[1]) != 4) return false;
		if (ALittle.Math_ToInt(list[1]) == null) return false;

		for (var i = 2; i <= 6; 1)
		{
			if (ALittle.String_Len(list[i]) != 2) return false;
			if (ALittle.Math_ToInt(list[i]) == null) return false;
		}

		return true;
	}

	public fun CheckVersionString(string content) : bool
	{
		var list = ALittle.String_Split(content, ".");
		if (ALittle.List_MaxN(list) != 3) return false;

		for (var i = 1; i <= 2; 1)
		{
			if (ALittle.Math_ToInt(list[i]) == null) return false;
		}

		return true;
	}

	// 获取配置数据
	public fun GetConfig() : IDEVersionInfo
	{
		// 默认版本
		var version_info = new IDEVersionInfo();
		version_info.big_version = this._export_big_version.text;
		if (this.CheckDateString(version_info.big_version) == false)
		{
			g_AUITool.ShowNotice("错误", "大版本格式不正确，请调整格式为：YYYY-mm-dd-HH-MM-SS");
			return null;
		}
		version_info.install_version = this._export_install_version.text;
		if (this.CheckDateString(version_info.install_version) == false)
		{
			g_AUITool.ShowNotice("错误", "安装包版本格式不正确，请调整格式为：YYYY-mm-dd-HH-MM-SS");
			return null;
		}
	
		// 版本号
		version_info.version_number = this._export_version_number.text;
		if (this.CheckVersionString(version_info.version_number) == false)
		{
			g_AUITool.ShowNotice("错误", "软件版本号格式不正确，请调整格式为：数字.数字.数字");
			return null;
		}
	
		// 插件信息
		version_info.plugin_list = this._export_plugin_list.text;
		var module_list = ALittle.String_Split(version_info.plugin_list, ",");
		for (var index, module in module_list)
		{
            if (ALittle.File_GetFileAttr(ALittle.File_BaseFilePath().."Module/"..module) == null)
			{
				g_AUITool.ShowNotice("错误", "引入的插件不存在:"..module);
				return null;
			}
        }
	
		return version_info;
	}
	
	public async fun HandleGenBigVersion(ALittle.UIEvent event)
	{
		var result = g_AUITool.DeleteNotice("更新大版本号", "更新大版本号会引起强制更新，确定更新吗？");
		if (result == AUIPlugin.AUIToolOption.YES)
			this._export_big_version.text = ALittle.Time_GetCurDate();
	}
	public async fun HandleGenInstallVersion(ALittle.UIEvent event)
	{
		var result = g_AUITool.DeleteNotice("更新安装包版本号", "更新安装包版本号会引起重新安装，确定更新吗？");
		if (result == AUIPlugin.AUIToolOption.YES)
			this._export_install_version.text = ALittle.Time_GetCurDate();
	}
}

public class IDEVersionWindows : ALittle.DisplayLayout
{
	private IDEVersionList _version_list;					// 版本列表
	private ALittle.DisplayObject _export_install_name;		// 安装包名
	private ALittle.DisplayObject _export_auto_start;		// 是否自动启动
	private ALittle.DisplayObject _export_new_log;			// 新版本日志
	
	public ctor(ALittle.ControlSystem ctrl_sys)
	{
	}
	
	public fun TCtor()
	{
		this._version_list.platform = "Windows";
		this._version_list.config_key = "windows_export_info";
	}
	
	public set config_key(string value) { this._version_list.config_key = value; }
	public get config_key() : string { return this._version_list.config_key; }

	// 加载配置信息
	public fun LoadConfigImpl() : bool
	{
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return false;
		}

		// 加载配置信息
		this._version_list.LoadConfig();
		// 刷新版本列表
		this._version_list.HandleRefreshVersionList(null);
		// 清空日志
		this._version_list.export_old_log.text = "";

		// 获取包信息
		var export_info = g_IDEProject.project.config.GetConfig(this.config_key, new IDEPackageInfo());
	
		// 安装包信息
		var install_info = export_info.install_info;
		if (install_info == null) install_info = new IDEInstallInfo();
		// 安装包名
		if (install_info.install_name != null)
			this._export_install_name.text = install_info.install_name;
		else
			this._export_install_name.text = "";
		// 是否自动启动
		if (install_info.auto_start)
			this._export_auto_start.text = "是";
		else
			this._export_auto_start.text = "否";
		// 新版本日志
		if (install_info.new_log != null)
			this._export_new_log.text = install_info.new_log;
		else
			this._export_new_log.text = "";
	
		return true;
	}

	// 保存版本信息
	public fun SaveConfigImpl() : bool
	{
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return false;
		}
	
		var version_info = this._version_list.GetConfig();
		if (version_info == null) return false;
	
		// 从界面上获取数据
		var export_info = new IDEPackageInfo();
		export_info.version_info = version_info;
		
		// 安装包信息
		var install_info = new IDEInstallInfo();
		export_info.install_info = install_info;
		install_info.file_name = "Install.exe";
		// 安装包名
		install_info.install_name = this._export_install_name.text;
		// 是否自动启动
		if (this._export_auto_start.text == "是")
			install_info.auto_start = true;
		else
			install_info.auto_start = false;
		// 检查安装包名
		if (install_info.install_name == "")
		{
			g_AUITool.ShowNotice("错误", "安装包名不能为空");
			return false;
		}
		// 设置新版本日志
		install_info.new_log = this._export_new_log.text;
		// 保存配置信息
		g_IDEProject.project.config.SetConfig(this.config_key, export_info);
		return true;
	}
	
	public fun HandleSaveConfig(ALittle.UIEvent event)
	{
		if (this.SaveConfigImpl() == false) return;
		g_AUITool.ShowNotice("提示", "配置保存成功");
	}
	
	public async fun HandleExport(ALittle.UIEvent event)
	{
		if (this.SaveConfigImpl() == false) return;

		var export_info = g_IDEProject.project.config.GetConfig{IDEPackageInfo}(this.config_key, null);
		if (export_info == null) return;
	
		[Language(JavaScript)]
		g_AUITool.ShowNotice("提示", "JavaScript版本不支持导出项目功能");
		[Language(Lua)]
		g_IDEExport.PackagePlatform(g_IDEProject.project.name, export_info.version_info, export_info.install_info, "Windows");
	}
	
	public async fun HandleSubmit(ALittle.UIEvent event)
	{
		g_IDEExport.SubmitPlatform(g_IDEProject.project.name, "Windows");
	}
}	

public class IDEVersionAndroid : ALittle.DisplayLayout
{
	private IDEVersionList _version_list;

	private ALittle.DisplayObject _export_install_name;
	private ALittle.DisplayObject _export_package_name;
	private ALittle.DisplayObject _export_screen;
	private ALittle.DisplayObject _export_full_screen;
	private ALittle.DisplayObject _export_new_log;

	public ctor(ALittle.ControlSystem ctrl_sys)
	{
	}
	
	public fun TCtor()
	{
		this._version_list.platform = "Android";
		this._version_list.config_key = "android_export_info";
	}
	
	public set config_key(string value) { this._version_list.config_key = value; }
	public get config_key() :string { return this._version_list.config_key; }
	
	public fun LoadConfigImpl() : bool
	{
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return false;
		}
	
		this._version_list.LoadConfig();
		this._version_list.HandleRefreshVersionList(null);
		this._version_list.export_old_log.text = "";

		var export_info = g_IDEProject.project.config.GetConfig(this.config_key, new IDEPackageInfo());
	
		// 安装包信息
		var install_info = export_info.install_info;
		if (install_info == null) install_info = new IDEInstallInfo();
		if (install_info.install_name != null)
			this._export_install_name.text = install_info.install_name;
		else
			this._export_install_name.text = "";
		if (install_info.package_name != null)
			this._export_package_name.text = install_info.package_name;
		else
			this._export_package_name.text = "";
		if (install_info.screen != null)
			this._export_screen.text = install_info.screen;
		else
			this._export_screen.text = "竖屏";
		if (install_info.fullscreen)
			this._export_full_screen.text = "是";
		else
			this._export_full_screen.text = "否";

		if (install_info.new_log != null)
			this._export_new_log.text = install_info.new_log;
		else
			this._export_new_log.text = "";
	
		return true;
	}
	
	public fun SaveConfigImpl() : bool
	{
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return false;
		}
	
		var version_info = this._version_list.GetConfig();
		if (version_info == null) return false;
	
		// 从界面上获取数据
		var export_info = new IDEPackageInfo();
		export_info.version_info = version_info;
		
		// 安装包信息
		var install_info = new IDEInstallInfo();
		export_info.install_info = install_info;
		install_info.file_name = "Install.apk";
		install_info.install_name = this._export_install_name.text;
		install_info.package_name = this._export_package_name.text;
		install_info.screen = this._export_screen.text;
		install_info.fullscreen = (this._export_full_screen.text == "是");
	
		if (install_info.install_name == "")
		{
			g_AUITool.ShowNotice("错误", "安装包名不能为空");
			return false;
		}	
		if (install_info.package_name == "")
		{
			g_AUITool.ShowNotice("错误", "Android包名不能为空");
			return false;
		}
	
		install_info.new_log = this._export_new_log.text;
		
		g_IDEProject.project.config.SetConfig(this.config_key, export_info);
		return true;
	}
	
	public fun HandleSaveConfig(ALittle.UIEvent event)
	{
		if (this.SaveConfigImpl() == false) return;
		g_AUITool.ShowNotice("提示", "配置保存成功");
	}
	
	public async fun HandleExport(ALittle.UIEvent event)
	{
		if (this.SaveConfigImpl() == false) return;

		var export_info = g_IDEProject.project.config.GetConfig{IDEPackageInfo}(this.config_key, null);
		if (export_info == null) return;
	
		[Language(JavaScript)]
		g_AUITool.ShowNotice("提示", "JavaScript版本不支持导出项目功能");

		[Language(Lua)]
		g_IDEExport.PackagePlatform(g_IDEProject.project.name, export_info.version_info, export_info.install_info, "Android");
	}
	
	public async fun HandleSubmit(ALittle.UIEvent event)
	{
		g_IDEExport.SubmitPlatform(g_IDEProject.project.name, "Android");
	}
}

public class IDEVersioniOS : ALittle.DisplayLayout
{
	private IDEVersionList _version_list;

	private ALittle.DisplayObject _export_install_name;
	private ALittle.DisplayObject _export_package_name;
	private ALittle.DisplayObject _export_screen;
	private ALittle.DisplayObject _export_full_screen;
	private ALittle.DisplayObject _export_new_log;
	
	public ctor(ALittle.ControlSystem ctrl_sys)
	{
	}
	
	public fun TCtor()
	{
		this._version_list.platform = "iOS";
		this._version_list.config_key = "ios_export_info";
	}
	
	public set config_key(string value) { this._version_list.config_key = value; }
	public get config_key() : string { return this._version_list.config_key; }
	
	public fun LoadConfigImpl() : bool
	{
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return false;
		}
	
		this._version_list.LoadConfig();
		this._version_list.HandleRefreshVersionList(null);
		this._version_list.export_old_log.text = "";

		var export_info = g_IDEProject.project.config.GetConfig(this.config_key, new IDEPackageInfo());
	
		// 安装包信息
		var install_info = export_info.install_info;
		if (install_info == null) install_info = new IDEInstallInfo();

		if (install_info.install_name != null)
			this._export_install_name.text = install_info.install_name;
		else
			this._export_install_name.text = "";

		if (install_info.package_name != null)
			this._export_package_name.text = install_info.package_name;
		else
			this._export_package_name.text = "";

		if (install_info.screen != null)
			this._export_screen.text = install_info.screen;
		else
			this._export_screen.text = "竖屏";

		if (install_info.fullscreen)
			this._export_full_screen.text = "是";
		else
			this._export_full_screen.text = "否";

		if (install_info.new_log != null)
			this._export_new_log.text = install_info.new_log;
		else
			this._export_new_log.text = "";
		
		return true;
	}
	
	public fun SaveConfigImpl() : bool
	{
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return false;
		}
	
		var version_info = this._version_list.GetConfig();
		if (version_info == null) return false;
	
		// 从界面上获取数据
		var export_info = new IDEPackageInfo();
		export_info.version_info = version_info;
		
		// 安装包信息
		var install_info = new IDEInstallInfo();
		export_info.install_info = install_info;
		install_info.file_name = "Install.ipa";
		install_info.install_name = this._export_install_name.text;
		install_info.package_name = this._export_package_name.text;
		install_info.screen = this._export_screen.text;
		install_info.fullscreen = (this._export_full_screen.text == "是");

		if (install_info.install_name == "")
		{
			g_AUITool.ShowNotice("错误", "安装包名不能为空");
			return false;
		}	
		if (install_info.package_name == "")
		{
			g_AUITool.ShowNotice("错误", "iOS包名不能为空");
			return false;
		}
		
		install_info.new_log = this._export_new_log.text;
	
		g_IDEProject.project.config.SetConfig(this.config_key, export_info);
		return true;
	}
	
	public fun HandleSaveConfig(ALittle.UIEvent event)
	{
		if (this.SaveConfigImpl() == false) return;
		g_AUITool.ShowNotice("提示", "配置保存成功");
	}
	
	public async fun HandleExport(ALittle.UIEvent event)
	{
		if (this.SaveConfigImpl() == false) return;

		var export_info = g_IDEProject.project.config.GetConfig{IDEPackageInfo}(this.config_key, null);
		if (export_info == null) return;
	
		[Language(JavaScript)]
		g_AUITool.ShowNotice("提示", "JavaScript版本不支持导出项目功能");

		[Language(Lua)]
		g_IDEExport.PackagePlatform(g_IDEProject.project.name, export_info.version_info, export_info.install_info, "iOS");
	}
	
	public async fun HandleSubmit(ALittle.UIEvent event)
	{
		g_IDEExport.SubmitPlatform(g_IDEProject.project.name, "iOS");
	}
}

public class IDEVersionWeb : ALittle.DisplayLayout
{
	private IDEVersionList _version_list;

	private ALittle.DisplayObject _export_new_log;
	
	public ctor(ALittle.ControlSystem ctrl_sys)
	{
	}
	
	public fun TCtor()
	{
		this._version_list.platform = "Web";
		this._version_list.config_key = "web_export_info";
	}
	
	public set config_key(string value) { this._version_list.config_key = value; }
	public get config_key() : string { return this._version_list.config_key; }
	
	public fun LoadConfigImpl() : bool
	{
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return false;
		}
	
		this._version_list.LoadConfig();
		this._version_list.HandleRefreshVersionList(null);
		this._version_list.export_old_log.text = "";

		var export_info = g_IDEProject.project.config.GetConfig(this.config_key, new IDEPackageInfo());
	
		// 安装包信息
		var install_info = export_info.install_info;
		if (install_info == null) install_info = new IDEInstallInfo();

		if (install_info.new_log != null)
			this._export_new_log.text = install_info.new_log;
		else
			this._export_new_log.text = "";
		
		return true;
	}
	
	public fun SaveConfigImpl() : bool
	{
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return false;
		}
	
		var version_info = this._version_list.GetConfig();
		if (version_info == null) return false;
	
		// 从界面上获取数据
		var export_info = new IDEPackageInfo();
		export_info.version_info = version_info;
		
		// 安装包信息
		var install_info = new IDEInstallInfo();
		export_info.install_info = install_info;
		install_info.file_name = "Install.html";

		install_info.new_log = this._export_new_log.text;
	
		g_IDEProject.project.config.SetConfig(this.config_key, export_info);
		return true;
	}
	
	public fun HandleSaveConfig(ALittle.UIEvent event)
	{
		if (this.SaveConfigImpl() == false) return;
		g_AUITool.ShowNotice("提示", "配置保存成功");
	}
	
	public async fun HandleExport(ALittle.UIEvent event)
	{
		if (this.SaveConfigImpl() == false) return;

		var export_info = g_IDEProject.project.config.GetConfig{IDEPackageInfo}(this.config_key, null);
		if (export_info == null) return;
	
		[Language(JavaScript)]
		g_AUITool.ShowNotice("提示", "JavaScript版本不支持导出项目功能");

		[Language(Lua)]
		g_IDEExport.PackagePlatform(g_IDEProject.project.name, export_info.version_info, export_info.install_info, "Web");
	}
	
	public async fun HandleSubmit(ALittle.UIEvent event)
	{
		g_IDEExport.SubmitPlatform(g_IDEProject.project.name, "Web");
	}
}

public class IDEVersionWeChat : ALittle.DisplayLayout
{
	private IDEVersionList _version_list;

	private ALittle.DisplayObject _export_res_ip;
	private ALittle.DisplayObject _export_res_port;
	private ALittle.DisplayObject _export_res_base_path;
	private ALittle.DisplayObject _export_new_log;
	private ALittle.DisplayObject _export_screen;
	
	public ctor(ALittle.ControlSystem ctrl_sys)
	{
	}
	
	public fun TCtor()
	{
		this._version_list.platform = "WeChat";
		this._version_list.config_key = "wechat_export_info";
	}
	
	public set config_key(string value) { this._version_list.config_key = value; }
	public get config_key() : string { return this._version_list.config_key; }
	
	public fun LoadConfigImpl() : bool
	{
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return false;
		}
	
		this._version_list.LoadConfig();
		this._version_list.HandleRefreshVersionList(null);
		this._version_list.export_old_log.text = "";

		var export_info = g_IDEProject.project.config.GetConfig(this.config_key, new IDEPackageInfo());
	
		// 安装包信息
		var install_info = export_info.install_info;
		if (install_info == null) install_info = new IDEInstallInfo();

		if (install_info.new_log != null)
			this._export_new_log.text = install_info.new_log;
		else
			this._export_new_log.text = "";
		
		if (install_info.res_ip != null)
			this._export_res_ip.text = install_info.res_ip;
		else
			this._export_res_ip.text = "";

		if (install_info.res_port != null)
			this._export_res_port.text = install_info.res_port;
		else
			this._export_res_port.text = "";

		if (install_info.res_base_path != null)
			this._export_res_base_path.text = install_info.res_base_path;
		else
			this._export_res_base_path.text = "";
		
		if (install_info.screen != null)
			this._export_screen.text = install_info.screen;
		else
			this._export_screen.text = "竖屏";
		return true;
	}
	
	public fun SaveConfigImpl() : bool
	{
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return false;
		}
	
		var version_info = this._version_list.GetConfig();
		if (version_info == null) return false;
	
		// 从界面上获取数据
		var export_info = new IDEPackageInfo();
		export_info.version_info = version_info;
		
		// 安装包信息
		var install_info = new IDEInstallInfo();
		export_info.install_info = install_info;
		install_info.file_name = "Install.js";

		install_info.new_log = this._export_new_log.text;
		install_info.res_ip = this._export_res_ip.text;
		install_info.res_port = ALittle.Math_ToIntOrZero(this._export_res_port.text);
		install_info.res_base_path = this._export_res_base_path.text;
		install_info.screen = this._export_screen.text;
	
		g_IDEProject.project.config.SetConfig(this.config_key, export_info);
		return true;
	}
	
	public fun HandleSaveConfig(ALittle.UIEvent event)
	{
		if (this.SaveConfigImpl() == false) return;
		g_AUITool.ShowNotice("提示", "配置保存成功");
	}
	
	public async fun HandleExport(ALittle.UIEvent event)
	{
		if (this.SaveConfigImpl() == false) return;

		var export_info = g_IDEProject.project.config.GetConfig{IDEPackageInfo}(this.config_key, null);
		if (export_info == null) return;
	
		[Language(JavaScript)]
		g_AUITool.ShowNotice("提示", "JavaScript版本不支持导出项目功能");

		[Language(Lua)]
		g_IDEExport.PackagePlatform(g_IDEProject.project.name, export_info.version_info, export_info.install_info, "WeChat");
	}
	
	public async fun HandleSubmit(ALittle.UIEvent event)
	{
		g_IDEExport.SubmitPlatform(g_IDEProject.project.name, "WeChat");
	}
}

public class IDEVersionEmscripten : ALittle.DisplayLayout
{
	private IDEVersionList _version_list;					// 版本列表
	private ALittle.DisplayObject _export_new_log;			// 新版本日志

	public ctor(ALittle.ControlSystem ctrl_sys)
	{
	}

	public fun TCtor()
	{
		this._version_list.platform = "Emscripten";
		this._version_list.config_key = "emscripten_export_info";
	}

	public set config_key(string value) { this._version_list.config_key = value; }
	public get config_key() : string { return this._version_list.config_key; }

	// 加载配置信息
	public fun LoadConfigImpl() : bool
	{
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return false;
		}

            // 加载配置信息
		this._version_list.LoadConfig();
		// 刷新版本列表
		this._version_list.HandleRefreshVersionList(null);
		// 清空日志
		this._version_list.export_old_log.text = "";

		// 获取包信息
		var export_info = g_IDEProject.project.config.GetConfig(this.config_key, new IDEPackageInfo());
	
		// 安装包信息
		var install_info = export_info.install_info;
		if (install_info == null) install_info = new IDEInstallInfo();
        // 新版本日志
		if (install_info.new_log != null)
			this._export_new_log.text = install_info.new_log;
		else
			this._export_new_log.text = "";
	
		return true;
	}

	// 保存版本信息
	public fun SaveConfigImpl() : bool
	{
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return false;
		}
	
		var version_info = this._version_list.GetConfig();
		if (version_info == null) return false;
        
            // 从界面上获取数据
		var export_info = new IDEPackageInfo();
		export_info.version_info = version_info;
    
		// 安装包信息
		var install_info = new IDEInstallInfo();
		export_info.install_info = install_info;
		install_info.file_name = "Install.html";
		// 检查安装包名
		if (install_info.install_name == "")
		{
			g_AUITool.ShowNotice("错误", "安装包名不能为空");
			return false;
		}
            // 设置新版本日志
		install_info.new_log = this._export_new_log.text;
		// 保存配置信息
		g_IDEProject.project.config.SetConfig(this.config_key, export_info);
		return true;
	}

	public fun HandleSaveConfig(ALittle.UIEvent event)
	{
		if (this.SaveConfigImpl() == false) return;
		g_AUITool.ShowNotice("提示", "配置保存成功");
	}

	public async fun HandleExport(ALittle.UIEvent event)
	{
		if (this.SaveConfigImpl() == false) return;

		var export_info = g_IDEProject.project.config.GetConfig{IDEPackageInfo}(this.config_key, null);
		if (export_info == null) return;
	
		[Language(JavaScript)]
		g_AUITool.ShowNotice("提示", "JavaScript版本不支持导出项目功能");
		[Language(Lua)]
		g_IDEExport.PackagePlatform(g_IDEProject.project.name, export_info.version_info, export_info.install_info, "Emscripten");
	}

	public async fun HandleSubmit(ALittle.UIEvent event)
	{
		g_IDEExport.SubmitPlatform(g_IDEProject.project.name, "Emscripten");
	}
}	