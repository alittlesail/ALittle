
namespace ALittleIDE;

public class IDECodeTabChild : IDETabChild
{
    private IDECodeTreeUserInfo _user_info;

	private AUIPlugin.AUICodeEdit _edit;        // 标签页

    private AUIPlugin.AUICodeLanguage _language;

	public ctor(ALittle.ControlSystem ctrl_sys, string module, string name, bool save, IDECodeTreeUserInfo user_info)
	{
        this._user_info = user_info;
		// 创建编辑容器
		this._edit = g_AUIPluinControl.CreateControl{AUIPlugin.AUICodeEdit}("code_tab_screen", this);
        this._edit.AddEventListener(this, this.HandleChangedEvent);
        this._edit.AddEventListener(this, this.HandleEditGotoEvent);
        this._edit.AddEventListener(this, this.HandleJumpCodeEvent);
        this._edit.AddEventListener(this, this.HandleBreakPointEvent);
		this._edit._user_data = this;
    }

    private fun OnUndo() { this._edit.OnUnDo(); }
    private fun OnRedo() { }
    private fun OnHide()
    {
        this._edit.OnHide();
        g_IDECenter.center.tool_code.visible = false;
    }
    private fun OnShow()
    {
        this._edit.OnShow();
        g_IDECenter.center.tool_code.visible = true;
    }
    private fun OnClose() { this._edit.OnClose(); }

    private fun OnOpen()
    {
        this._revoke_list = new ALittle.RevokeList();
        [Language(Lua)]
        if (this._language == null && this._user_info.project != null && ALittle.File_GetFileExtByPathAndUpper(this._user_info.path) == this._user_info.project.upper_ext)
            this._language = new AUIPlugin.AUICodeALittleScript(this._user_info.project, this._user_info.path, this._user_info.module_path);

        this._edit.Load(this._user_info.path, null, this._revoke_list, this._language, g_IDEProject.GetBreakPoint(this._user_info.path));
    }

    private fun OnTabRightMenu(AUIPlugin.AUIRightMenu menu)
    {
        this._edit.OnTabRightMenu(menu);
		menu.AddItem("获取焦点", bind(this.ShowControlFocus, this));
    }

    public fun ShowControlFocus()
    {
        var tree = g_IDECenter.center.code_list.GetCodeTree(this._user_info.path);
        if (tree == null) return;

        g_IDECenter.center.project_edit_tab.tab = g_IDECenter.center.code_list;
        g_IDECenter.center.code_list.ShowTreeItemFocus(tree);
    }

    private fun HandleEditGotoEvent(AUIPlugin.AUICodeEditGotoEvent event)
    {
        var info = new IDECodeJumpInfo();
        info.file_path = event.file_path;
        info.it_line = event.line_start;
        info.it_char = event.char_start;
        g_IDECenter.center.code_list.AddCodeJump(info);

		g_IDECenter.center.code_list.OpenByFullPath(event.file_path, event.line_start, event.char_start, event.line_end, event.char_end);
    }

    private fun HandleJumpCodeEvent(AUIPlugin.AUICodeEditJumpEvent event)
    {
        var info = new IDECodeJumpInfo();
        info.file_path = event.file_path;
        info.it_line = event.it_line;
        info.it_char = event.it_char;
        g_IDECenter.center.code_list.AddCodeJump(info);
    }

    private fun HandleBreakPointEvent(AUIPlugin.AUICodeEditBreakPointEvent event)
    {
        if (event.add_or_remove)
        	g_IDEProject.AddBreakPoint(event.file_path, event.file_line);
        else
            g_IDEProject.RemoveBreakPoint(event.file_path, event.file_line);
    }

    private fun HandleChangedEvent(ALittle.UIChangedEvent event)
    {
        this.save = false;
    }

	public get tab_body() : ALittle.DisplayObject { return this._edit; }

    public set save(bool value)
    {
        if (this._save == value) return;
		if (value == false)
        {
            this._save = false;
            this.UpdateTitle();
            return;
		}
        this._edit.Save();
        this._save = value;
        this.UpdateTitle();
	}

    public get id() : string { return this._user_info.path; }

	public fun Rename(string name)
    {
        this._name = name;
        this.UpdateTitle();
	}

	public fun UpdateTitle()
    {
        var text = this._name;
        if (this._save == false) text = text.." *";
        g_IDECenter.center.content_edit.main_tab.SetChildText(this._edit, text);
	}

	public get title() : string
    {
        return this._name;
	}

    public fun UpdateUserInfo(IDECodeTreeUserInfo info)
    {
        this.OnClose();
        this._language = null;
        this._user_info = info;
        this.OnOpen();
    }

    public fun CreateBySelect(IDECodeTreeUserInfo info)
    {
        this._user_info = info;
        this._edit.EditFocus(0, 0, null, null, true);
    }

    public fun JumpFocus(int line_start, int char_start, int line_end, int char_end)
    {
        this._edit.EditFocus(line_start, char_start, line_end, char_end, true);
    }

    public fun FindText(string text)
    {
        this._edit.FindNext(text);
    }

    public get edit() : AUIPlugin.AUICodeEdit { return this._edit; }
}
