
namespace ALittleIDE;

protected struct IDECodeModuleInfo
{
    string module_name;
	string root_path;
}

struct IDECodeFileSearchInfo
{
    List<IDECodeTreeLogic> list;
	int count;
	int index;
	string name;
}

protected struct IDECodeJumpInfo
{
    string file_path;
    int it_line;
    int it_char;
}

public class IDEUICodeList : ALittle.DisplayLayout
{	
	private ALittle.ScrollScreen _code_scroll_screen;
	private ALittle.DisplayObject _code_search_key;
	private ALittle.TextRadioButtonGroup _group;
	private IDECodeFileSearchInfo _search_info;                // 搜索集合

	private ALittle.LoopLinear _tree_loop_x;
	private ALittle.LoopLinear _tree_loop_y;

    private List<IDECodeJumpInfo> _jump_list = new List<IDECodeJumpInfo>();
    private int _jump_count = 0;
    private int _jump_index = 0;

    private IDECodeTreeItem _cut_item;		// 剪切对象
    private IDECodeTreeItem _copy_item;		// 复制对象

	public ctor(ALittle.ControlSystem ctrl_sys)
	{
		this._group = new ALittle.TextRadioButtonGroup();
	}

	public fun TCtor()
	{
        g_IDEProject.AddEventListener(this, this.HandleProjectOpen);
        g_IDEProject.AddEventListener(this, this.HandleProjectClose);
    }

    public fun AddCodeJump(IDECodeJumpInfo info)
    {
        if (this._jump_count > 0 && this._jump_index < this._jump_count)
        {
        	ALittle.List_Splice(this._jump_list, this._jump_index + 1, this._jump_count - this._jump_index);
            this._jump_count = this._jump_index;
        }
        this._jump_count += 1;
        this._jump_index = this._jump_count;
        this._jump_list[this._jump_count] = info;
    }

    public fun JumpPreCode() : IDECodeJumpInfo
    {
        if (this._jump_count == 0) return null;
        if (this._jump_index <= 1) return null;
        this._jump_index -= 1;
        return this._jump_list[this._jump_index];
    }

    public fun JumpNextCode() : IDECodeJumpInfo
    {
        if (this._jump_count == 0) return null;
        if (this._jump_index >= this._jump_count) return null;
        this._jump_index += 1;
        return this._jump_list[this._jump_index];
    }

	private fun HandleProjectClose(IDEProjectCloseEvent event)
	{
		this._code_scroll_screen.RemoveAllChild();
        this._jump_count = 0;
        this._jump_index = 0;
        this._jump_list = new List<IDECodeJumpInfo>();
    }

    private static CodeModuleInfoSort(IDECodeModuleInfo a, IDECodeModuleInfo b) : bool
    {
        return a.module_name < b.module_name;
    }

	private fun HandleProjectOpen(IDEProjectOpenEvent event)
	{
        this._jump_count = 0;
        this._jump_index = 0;
        this._jump_list = new List<IDECodeJumpInfo>();

		// 添加自己的项目
		var info = new IDECodeTreeUserInfo();
		info.module_name = event.name;
		info.name = "src";
		info.path = ALittle.File_BaseFilePath().."Module/"..event.name.."/src";
		info.module_path = ALittle.File_BaseFilePath().."Module/"..event.name.."/";
		info.group = this._group;
		info.root = true;
		info.project = g_IDEProject.project.code;
		this._code_scroll_screen.AddChild(new IDECodeTree(g_Control, info));
		
		var std_list = ["Core", "Std", "CEngine", "SEngine"];
		for (var index, name in std_list)
        {
            info = new IDECodeTreeUserInfo();
            info.module_name = name;
            info.name = "src";
            info.path = ALittle.File_BaseFilePath().."Module/ALittleIDE/Other/GameLibrary/"..name.."/src";
            info.module_path = ALittle.File_BaseFilePath().."Module/ALittleIDE/Other/GameLibrary/"..name.."/";
            info.group = this._group;
            info.root = true;
            info.project = g_IDEProject.project.code;
            var tree = new IDECodeTree(g_Control, info);
            this._code_scroll_screen.AddChild(tree);
        }

		// 读取客户端项目配置
		var client_module_list = g_IDEProject.project.config.GetConfig("client_module", new List<IDECodeModuleInfo>());
        ALittle.List_Sort(client_module_list, IDEUICodeList.CodeModuleInfoSort);
        // 读取服务端项目配置
        var server_module_list = g_IDEProject.project.config.GetConfig("server_module", new List<IDECodeModuleInfo>());
        ALittle.List_Sort(server_module_list, IDEUICodeList.CodeModuleInfoSort);

        var module_list = new List<IDECodeModuleInfo>();
        ALittle.List_PushList(module_list, client_module_list);
        ALittle.List_PushList(module_list, server_module_list);
    
		// 添加其他模块
		for (var index, module in module_list)
		{
			info = new IDECodeTreeUserInfo();
			info.module_name = module.module_name;
			info.name = ALittle.File_GetFileNameByPath(module.root_path);
			info.path = module.root_path;
            info.module_path = ALittle.File_GetFilePathByPath(module.root_path).."/";
			info.group = this._group;
            info.project = g_IDEProject.project.code;
			info.root = true;
			var tree = new IDECodeTree(g_Control, info);
			this._code_scroll_screen.AddChild(tree);
        }
    }

	public fun OpenByFullPath(string full_path, int line_start, int char_start, int line_end, int char_end) : IDECodeTabChild
	{
        if (full_path == null || full_path == "") return null;

        for (var index, child:IDECodeTreeLogic in this._code_scroll_screen.childs)
		{
            var item = child.FindFile(full_path);
			if (item != null)
			{
                var code_child = g_IDECenter.center.content_edit.StartEditCodeBySelect(item.user_info.name, item.user_info);
				code_child.JumpFocus(line_start, char_start, line_end, char_end);
				return code_child;
            }
        }

		if (ALittle.File_GetFileAttr(full_path) == null) return null;

		var user_info = new IDECodeTreeUserInfo();
		user_info.name = ALittle.File_GetFileNameByPath(full_path);
		user_info.path = full_path;
		var child = g_IDECenter.center.content_edit.StartEditCodeBySelect(user_info.name, user_info);
        if (child == null) return null;
        child.JumpFocus(line_start, char_start, line_end, char_end);
        return child;
    }

    public fun GetCodeTree(string full_path) : IDECodeTreeLogic
    {
        for (var index, child:IDECodeTreeLogic in this._code_scroll_screen.childs)
		{
            var item = child.FindFile(full_path);
			if (item != null)
                return item;
        }

        return null;
    }

	public fun AddModule(string name) : bool
	{
        var file_map = ALittle.File_GetNameListByDir(ALittle.File_BaseFilePath().."Module");
        var attr = file_map[name];
        if (attr == null || !attr.directory) return false;

		var module_list = g_IDEProject.project.config.GetConfig("client_module", new List<IDECodeModuleInfo>());
        for (var index, module in module_list)
            if (module.module_name == name) return true;

		var module_info = new IDECodeModuleInfo();
		module_info.module_name = name;
		module_info.root_path = ALittle.File_BaseFilePath().."Module/"..name.."/src";
        ALittle.List_Push(module_list, module_info);
		g_IDEProject.project.config.SetConfig("client_module", module_list);
		
        var info = new IDECodeTreeUserInfo();
        info.module_name = name;
        info.name = ALittle.File_GetFileNameByPath(module_info.root_path);
        info.path = module_info.root_path;
        info.module_path = ALittle.File_BaseFilePath().."Module/"..name.."/";
        info.group = this._group;
		info.root = true;
        info.project = g_IDEProject.project.code;
        var tree = new IDECodeTree(g_Control, info);
        this._code_scroll_screen.AddChild(tree);

        return true;
    }

    public fun AddServer(string name) : bool
    {
        var file_map = ALittle.File_GetNameListByDir(ALittle.File_BaseFilePath().."Server");
        var attr = file_map[name];
        if (attr == null || !attr.directory) return false;

		var module_list = g_IDEProject.project.config.GetConfig("server_module", new List<IDECodeModuleInfo>());
        for (var index, module in module_list)
            if (module.module_name == name) return true;

		var module_info = new IDECodeModuleInfo();
		module_info.module_name = name;
		module_info.root_path = ALittle.File_BaseFilePath().."Server/"..name.."/src";
        ALittle.List_Push(module_list, module_info);
		g_IDEProject.project.config.SetConfig("server_module", module_list);
    
		var info = new IDECodeTreeUserInfo();
        info.module_name = name;
        info.name = "src";
        info.path = ALittle.File_BaseFilePath().."Server/"..name.."/src";
        info.module_path = ALittle.File_BaseFilePath().."Server/"..name.."/";
        info.group = this._group;
        info.root = true;
        info.project = g_IDEProject.project.code;
        var tree = new IDECodeTree(g_Control, info);
        this._code_scroll_screen.AddChild(tree);

        return true;
    }

	// 在树形区域，设置控件焦点
	public fun ShowTreeItemFocus(IDECodeTreeLogic target)
    {
        // 显示
        target.ShowSelect();

		if (target != this._code_scroll_screen)
        {
            var parent = cast<IDEUITreeLogic>(target.logic_parent);
			while (parent != null && parent != this._code_scroll_screen)
            {
                parent.fold = true;
                parent = cast<IDEUITreeLogic>(parent.logic_parent);
			}
		}
        this._code_scroll_screen.AdjustScrollBar();

		// 如果现在直接看的见的话，就直接返回了
        var x, y = target.LocalToGlobal(this._code_scroll_screen.container);
        var target_x = (this._code_scroll_screen.view_width - target.width / 2) / 2 - x;
        var target_y = (this._code_scroll_screen.view_height - target.height) / 2 - y;

        if (this._tree_loop_x != null) { this._tree_loop_x.Stop(); this._tree_loop_x = null; }
        if (this._tree_loop_y != null) { this._tree_loop_y.Stop(); this._tree_loop_y = null; }

        this._tree_loop_x = new ALittle.LoopLinear(this._code_scroll_screen, "container_x", target_x, 300, 0);
        this._tree_loop_x.Start();
        this._tree_loop_y = new ALittle.LoopLinear(this._code_scroll_screen, "container_y", target_y, 300, 0);
        this._tree_loop_y.Start();
	}

	private fun HandleCodeSearchClick(ALittle.UIEvent event)
	{
		if (this._search_info == null || this._search_info.name != this._code_search_key.text)
		{
            this._search_info = new IDECodeFileSearchInfo();
			this._search_info.name = this._code_search_key.text;
			this._search_info.index = 0;
			this._search_info.list = new List<IDECodeTreeLogic>();
			for (var index, child:IDECodeTreeLogic in this._code_scroll_screen.childs)
                child.SearchFile(this._search_info.name, this._search_info.list);
			this._search_info.count = ALittle.List_Len(this._search_info.list);
        }

		if (this._search_info.count <= 0) return;

		this._search_info.index += 1;
		if (this._search_info.index > this._search_info.count)
			this._search_info.index = 1;
		var item = this._search_info.list[this._search_info.index];
		this.ShowTreeItemFocus(item);
    }

    // 设置剪切内容
    public fun SetCutTreeItem(IDECodeTreeItem item) { this._cut_item = item; this._copy_item = null; }
    // 获取剪切内容
    public fun GetCutTreeItem() : IDECodeTreeItem { return this._cut_item; }

    // 设置复制内容
    public fun SetCopyTreeItem(IDECodeTreeItem item) { this._copy_item = item; this._cut_item = null; }
    // 获取复制内容
    public fun GetCopyTreeItem() : IDECodeTreeItem { return this._copy_item; }

    // 设置剪切内容
    public fun ClearCutAndCopy()
    {
        this._cut_item = null;
        this._copy_item = null;
    }
}