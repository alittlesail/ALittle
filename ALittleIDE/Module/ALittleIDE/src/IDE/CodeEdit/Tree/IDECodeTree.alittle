
namespace ALittleIDE;

public class IDECodeTree : IDECodeTreeLogic
{
	private ALittle.Linear _body;
	private ALittle.DisplayObject _item_checkbutton;

	public ctor(ALittle.ControlSystem ctrl_sys, IDECodeTreeUserInfo user_info)
	{
		this._head = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_code_tree_head", this);
		ALittle.DisplayGroup.AddChild(this, this._head);
		
		this._item_button.selected = false;
		this._item_button.group = user_info.group;
		this._item_button.AddEventListener(this, this.HandleLButtonDown);
		this._item_button.AddEventListener(this, this.HandleRButtonDown);
		this._item_button._user_data = this;
	
		// 对数的身体部分进行处理
		this._body = new ALittle.Linear(ctrl_sys);
		this._body.type = ALittle.UIEnumTypes.TYPE_V;
		this._body.x = 8;
		this._body.y = this._head.height;
		this._body.width = this._head.width;
		this._item_checkbutton.selected = true;
		ALittle.DisplayGroup.AddChild(this, this._body);
		this._body.AddEventListener(this, this.HandleChildResize);
	
		// 设置一下拾取属性
		this._pickup_rect = false;
		this._pickup_child = true;
	
		this.fold = false;
		if (user_info.root)
			this._item_button.text = "["..this._user_info.module_name.."] "..this._user_info.name;
		else
			this._item_button.text = this._user_info.name;
		this.Refresh();
	}
	
	private fun HandleLButtonDown(ALittle.UILButtonDownEvent event)
	{
		if (event.count == 1) return;
		this.fold = !this.fold;
	}

	private fun HandleRButtonDown(ALittle.UIRButtonDownEvent event)
	{
        var menu = new AUIPlugin.AUIRightMenu();
        if (this._user_info.project != null)
            this._user_info.project.OnTreeMenu(this._user_info.path, menu);
		menu.AddItem("新建ALittle文件", bind(this.HandleCreateFile, this));
		menu.AddItem("新建文件夹", bind(this.HandleCreateDir, this));
		menu.AddItem("刷新", bind(this.Refresh, this));

        if (g_IDECenter.center.code_list.GetCutTreeItem() != null
            || g_IDECenter.center.code_list.GetCopyTreeItem() != null)
            menu.AddItem("粘贴", bind(this.PasteFile, this));

		if (!this._user_info.root)
			menu.AddItem("删除", bind(this.HandleDeleteDir, this));

		if (this._user_info.root)
        {
			menu.AddItem("添加模块", bind(this.HandleAddModule, this));
			menu.AddItem("添加库", bind(this.HandleAddLibrary, this));
        }

		var can_remove = this._user_info.root && this._user_info.module_name != "Std" && this._user_info.module_name != "Core" && this._user_info.module_name != "CEngine"
						&& this._user_info.module_name != g_IDEProject.project.name;
		if (can_remove) menu.AddItem("移除模块", bind(this.HandleRemoveModule, this));
			
		menu.Show();
    }

	private async fun HandleCreateFile()
	{
		var x, y = this._head.LocalToGlobal();
        var name = g_AUITool.ShowRename("", x, y + this._head.height, 200);
		if (name == null || name == "") return;

        // 检查文件是否以存在
        if (ALittle.File_GetFileAttr(this._user_info.path.."/"..name..".alittle") != null)
        {
            g_AUITool.ShowNotice("提示", "文件名已存在");
            return;
        }

        var content = "\nnamespace "..g_IDEProject.project.name..";\n\nprotected class "..name.."\n{\n}\n";
		ALittle.File_WriteTextToFile(content, this._user_info.path.."/"..name..".alittle");
		this.Refresh();
    }

	private async fun HandleCreateDir()
	{
		var x, y = this._head.LocalToGlobal();
        var name = g_AUITool.ShowRename("", x, y + this._head.height, 200);
		if (name == null || name == "") return;
		ALittle.File_MakeDir(this._user_info.path.."/"..name);
		this.Refresh();
    }

	private async fun HandleAddModule()
	{
		var x, y = this._head.LocalToGlobal();
        var name = g_AUITool.ShowRename("", x, y + this._head.height, 200);
		if (name == null || name == "") return;
		g_IDECenter.center.code_list.AddModule(name);
    }

	private async fun HandleAddLibrary()
	{
		var x, y = this._head.LocalToGlobal();
        var name = g_AUITool.ShowRename("", x, y + this._head.height, 200);
		if (name == null || name == "") return;
		g_IDECenter.center.code_list.AddLibrary(name);
    }

	private async fun HandleDeleteDir()
	{
		var file_name = ALittle.File_GetFileNameByPath(this._user_info.path);
		var result = g_AUITool.DeleteNotice("删除", "确定要删除"..file_name.."，以及子文件和子文件夹吗?");
		if (result != AUIPlugin.AUIToolOption.YES) return;
		this.OnDelete();
		ALittle.File_DeleteDeepDir(this._user_info.path);

        this.RemoveFromParent();
    }

	private async fun HandleRemoveModule()
	{
		var file_name = ALittle.File_GetFileNameByPath(this._user_info.path);
		var result = g_AUITool.DeleteNotice("移除", "确定要移除"..file_name.."模块吗?");
		if (result != AUIPlugin.AUIToolOption.YES) return;
		this.OnDelete();
        this.RemoveFromParent();
		var module_map = g_IDEProject.project.config.GetConfig("code_module", new Map<string, IDECodeModuleInfo>());
        module_map[this._user_info.module_name] = null;
        g_IDEProject.project.config.SetConfig("code_module", module_map);
    }
	
	public get is_tree() : bool { return true; }

    // 粘贴文件
    private fun PasteFile()
    {
        var item = g_IDECenter.center.code_list.GetCutTreeItem();
        if (item != null)
        {
            var path = ALittle.File_GetFilePathByPath(item.user_info.path);
            var name = ALittle.File_GetFileNameByPath(item.user_info.path);
            if (path == this._user_info.path) return;
            
            // 移动文件
            ALittle.File_RenameFile(item.user_info.path, this._user_info.path.."/"..name);

            // 删除原来的控件
            item.OnDelete();
            var parent = item.parent;
            item.RemoveFromParent();
            if (parent != null) parent.DispatchEvent(new ALittle.UIResizeEvent());
            g_IDECenter.center.content_edit.CloseTabByName{IDECodeTabChild}(item.user_info.name);

            this.Refresh();
            g_IDECenter.center.code_list.ClearCutAndCopy();
            return;
        }

        item = g_IDECenter.center.code_list.GetCopyTreeItem();
        if (item != null)
        {
            var path = ALittle.File_GetFilePathByPath(item.user_info.path);
            var name = ALittle.File_GetFileNameByPath(item.user_info.path);
            if (path == this._user_info.path) return;

            // 移动文件
            ALittle.File_CopyFile(item.user_info.path, this._user_info.path.."/"..name);

            this.Refresh();
            g_IDECenter.center.code_list.ClearCutAndCopy();
            return;
        }
    }

	// 刷新子节点
	public fun Refresh()
	{
		var map = ALittle.File_GetNameListByDir(this._user_info.path);

		// 刷新已存在
		var remove:List<IDECodeTreeLogic> = null;
		for (var index, child:IDECodeTreeLogic in this.childs)
		{
            var attr = map[child._user_info.name];
			if (attr == null)
			{
				if (remove == null) remove = new List<IDECodeTreeLogic>();
				ALittle.List_Push(remove, child);
            }

			map[child._user_info.name] = null;
			child.Refresh();
        }

		if (remove != null)
		{
            for (var index, child:IDECodeTreeLogic in remove)
            {
                // 移除文件
                if (this._user_info.project != null && ALittle.File_GetFileExtByPathAndUpper(child.user_info.path) == this._user_info.project.upper_ext)
                    this._user_info.project.RemoveFile(child.user_info.path);
                this.RemoveChild(child);
            }   
        }

		// 添加
		var add_file:List<string> = null;
		var add_dir:List<string> = null;
		for (var name, attr in map)
		{
			if (attr.directory)
			{
                if (add_dir == null) add_dir = new List<string>();
                ALittle.List_Push(add_dir, name);
            }
			else
			{
                if (add_file == null) add_file = new List<string>();
                ALittle.List_Push(add_file, name);
            }	
		}

		if (add_dir != null)
		{
			ALittle.List_Sort(add_dir);
			for (var index, name in add_dir)
			{
                var attr = map[name];
				var info = new IDECodeTreeUserInfo();
				info.module_name = this._user_info.module_name;
				info.module_path = this._user_info.module_path;
				info.name = name;
				info.path = this._user_info.path.."/"..name;
				info.group = this._user_info.group;
                info.project = this._user_info.project;
				info.root = false;
                this.AddChild(new IDECodeTree(this._ctrl_sys, info));
            }
        }

		if (add_file != null)
		{
			ALittle.List_Sort(add_file);
			for (var index, name in add_file)
			{
                var attr = map[name];
				var info = new IDECodeTreeUserInfo();
				info.module_name = this._user_info.module_name;
				info.module_path = this._user_info.module_path;
				info.name = name;
				info.path = this._user_info.path.."/"..name;
				info.group = this._user_info.group;
				info.project = this._user_info.project;
				info.root = false;
                this.AddChild(new IDECodeTreeItem(this._ctrl_sys, info));

                // 把文件添加到工程中
                if (this._user_info.project != null && ALittle.File_GetFileExtByPathAndUpper(info.path) == this._user_info.project.upper_ext)
                    this._user_info.project.UpdateFile(info.module_path, info.path);
            }
        }

		this.DispatchEvent(new ALittle.UIResizeEvent());
    }
	
	// 搜索文件
	public fun SearchFile(string name, [Nullable] List<IDECodeTreeLogic> list) : List<IDECodeTreeLogic>
	{
		if (list == null) list = new List<IDECodeTreeLogic>();
		
		for (var k, child:IDECodeTreeLogic in this._body.childs)
			child.SearchFile(name, list);
	
		return list;
	}

	// 查找文件
	public fun FindFile(string full_path) : IDECodeTreeLogic
	{
		if (ALittle.String_Find(full_path, this._user_info.path) != 1) return null;

		for (var k, child:IDECodeTreeLogic in this._body.childs)
		{
			var item = child.FindFile(full_path);
			if (item != null) return item;
        }
		return null;
    }

	// 触发删除
	public fun OnDelete()
	{
		for (var index, child:IDECodeTreeLogic in this.childs)
            child.OnDelete();
    }
	
	public fun HandleChildResize(ALittle.UIResizeEvent event)
	{
		this.DispatchEvent(new ALittle.UIResizeEvent());
	}
	
	public fun HandleHeadChanged(ALittle.UIEvent event)
	{
		this._body.visible = event.target.selected;
		this.DispatchEvent(new ALittle.UIResizeEvent());
	}
	//////////////////////////////////////////////////////////////////////////////////////
	public fun GetChildIndex(ALittle.DisplayObject child) : int	{ return this._body.GetChildIndex(child);	}
	public fun SetChildIndex(ALittle.DisplayObject child, int index) : bool { return this._body.SetChildIndex(child, index); }
	public fun GetChildByIndex(int index) : ALittle.DisplayObject {	return this._body.GetChildByIndex(index); }
	public fun GetChildIndex(ALittle.DisplayObject child) : int	{ return this._body.GetChildIndex(child);	}
	public get childs() : List<ALittle.DisplayObject> { return this._body.childs; }
	public get child_count() : int { return this._body.child_count;	}
	public fun HasChild(ALittle.DisplayObject child) : bool { return this._body.HasChild(child); }

	public fun AddChild(ALittle.DisplayObject child, [Nullable] int index) : bool
	{
		if (this._body.AddChild(child, index) == false)
			return false;
		child._logic_parent = this;

		if (this._body.abs_visible)
			this.DispatchEvent(new ALittle.UIResizeEvent());
		return true;
	}
	
	public fun RemoveChild(ALittle.DisplayObject child) : bool
	{
		if (this._body.RemoveChild(child) == false)
			return false;
		child.group = null;
		if (this._body.abs_visible)
			this.DispatchEvent(new ALittle.UIResizeEvent());
		return true;
	}

	public fun SpliceChild(int index, [Nullable] int count) : int
	{
        var remain_count = this._child_count - index + 1;
        if (count == null) count = remain_count;
        elseif (count > remain_count) count = remain_count;
        if (count <= 0) return 0;

        var endv = index + count;
        for (var i = index; i < endv; 1)
        {
            var child = this._childs[i];
            if (child == null) break;

			child.group = null;
        }

		var result = this._body.SpliceChild(index, count);
		if (result == 0) return 0;
		if (this._body.abs_visible)
			this.DispatchEvent(new ALittle.UIResizeEvent());
		return result;
    }
	
	public fun RemoveAllChild()
	{
		for (var index, child in this.childs)
			child.group = null;
		this._body.RemoveAllChild();
		
		if (this._body.abs_visible)
			this.DispatchEvent(new ALittle.UIResizeEvent());
	}
	
	//////////////////////////////////////////////////////////////////////
	public get width() : double
	{
		var head_width = 0.0;
		if (this._head != null) head_width = this._head.width;
		var body_width = 0.0;
		if (this._body.visible)
		{
			var start_x = this._body.x;
			body_width = start_x + this._body.width;
			var childs = this._body.childs;
			for (var k, v in childs)
			{
				var child_width = start_x + v.x + v.width;
				if (body_width < child_width) body_width = child_width;
			}
		}
		if (head_width > body_width) return head_width;
		return body_width;
	}
	
	public get height() : double
	{
		var head_height = 0.0;
		if (this._head != null) head_height = this._head.height;
		if (this._body.visible) return head_height + this._body.height;
		return head_height;
	}
	
	public get fold() : bool { return this._body.visible; }
	public set fold(bool value)
	{
		if (value == this._body.visible) return;
	
		this._body.visible = value;
		this._item_checkbutton.selected = value;
		this.DispatchEvent(new ALittle.UIResizeEvent());
	}
	
	public get max_right() : double	{ return this.width; }
	public get max_bottom() : double { return this.height; }
}
