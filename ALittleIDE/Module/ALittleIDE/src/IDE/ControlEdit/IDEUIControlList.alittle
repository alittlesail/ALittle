
namespace ALittleIDE;

protected struct IDEControlModuleInfo
{
    string module_name;
	string root_path;
}

struct IDEControlFileSearchInfo
{
    List<IDEControlTreeLogic> list;
	int count;
	int index;
	string name;
}

public class IDEUIControlList : ALittle.DisplayLayout
{	
	private ALittle.ScrollScreen _control_scroll_screen;
	private ALittle.DisplayObject _control_search_key;
	private ALittle.DisplayObject _control_search_type;
	private ALittle.TextRadioButtonGroup _group;
	private IDEControlFileSearchInfo _search_info;                // 搜索集合
    
    private ALittle.Dialog _new_control_dialog;	// 对话框
    private ALittle.DropDown _new_control_type;	// 新控件类型
    private ALittle.DropDown _new_control_module;	// 新控件所属模块
    private ALittle.ImageInput _new_control_name;	// 新控件名

    private ALittle.Dialog _extends_control_dialog; // 对话框
    private ALittle.DropDown _extends_control_module; // 新控件所属模块
    private ALittle.ImageInput _extends_control_name; // 新控件名
    private ALittle.DropDown _extends_control_extends_module; // 要继承的控件所属模块
    private ALittle.ImageInput _extends_control_extends_name; // 要继承的控件名

	private ALittle.LoopLinear _tree_loop_x;
	private ALittle.LoopLinear _tree_loop_y;

	public ctor(ALittle.ControlSystem ctrl_sys)
	{
		this._group = new ALittle.TextRadioButtonGroup();
	}

	public fun TCtor()
	{
        g_IDEProject.AddEventListener(this, this.HandleProjectOpen);
        g_IDEProject.AddEventListener(this, this.HandleProjectClose);
    }

	private fun HandleProjectClose(IDEProjectCloseEvent event)
	{
		this._control_scroll_screen.RemoveAllChild();
    }

	private async fun HandleProjectOpen(IDEProjectOpenEvent event)
	{
		// 读取项目配置
		var module_map = g_IDEProject.project.config.GetConfig("control_module", new Map<string, IDEControlModuleInfo>());
		module_map[event.name] = null;

        // 主项目的UI管理器
        var ui = new IDEUIManager();
        ui.Init(event.name);
        g_IDEProject.project.ui[event.name] = ui;

		// 添加自己的项目
		var info = new IDEControlTreeUserInfo();
        info.ui = ui;
		info.module_name = event.name;
		info.name = "ui";
		info.path = ALittle.File_BaseFilePath().."Module/"..event.name.."/UI";
		info.module_path = ALittle.File_BaseFilePath().."Module/"..event.name.."/";
		info.group = this._group;
		info.root = true;
		this._control_scroll_screen.AddChild(new IDEControlTree(g_Control, info));
    
		// 添加其他模块
		for (var index, module in module_map)
		{
			info = new IDEControlTreeUserInfo();
            info.ui = new IDEUIManager();
            info.ui.Init(module.module_name);
			info.module_name = module.module_name;
			info.name = ALittle.File_GetFileNameByPath(module.root_path);
			info.path = module.root_path;
            info.module_path = ALittle.File_GetFilePathByPath(module.root_path).."/";
			info.group = this._group;
			info.root = true;
            
            g_IDEProject.project.ui[module.module_name] = info.ui;
            ui.control.RegisterPlugin(module.module_name, info.ui.control);

			var tree = new IDEControlTree(g_Control, info);
			this._control_scroll_screen.AddChild(tree);
        }

        // 将所有的control system互相注册
        for (var child_name, child_ui in g_IDEProject.project.ui)
        {
            for (var parent_name, parent_ui in g_IDEProject.project.ui)
            {
                if (child_ui != parent_ui)
                    parent_ui.control.RegisterPlugin(child_name, child_ui.control);
            }
        }
    }

    public fun GetControlTree(string module) : IDEControlTree
    {
        for (var index, child:IDEControlTree in this._control_scroll_screen.childs)
        {
            if (child.user_info.module_name == module)
            	return child;
        }
        return null;
    }

    public get scroll_screen() : ALittle.ScrollScreen { return this._control_scroll_screen; }

	public await fun AddModule(string name)
	{
        var ui_manager = g_IDEProject.GetUIManager(null);
        if (ui_manager == null) return;

        for (var index, tree:IDEControlTreeLogic in this._control_scroll_screen.childs)
            if (tree.user_info.module_name == name) return;

		var module_map = g_IDEProject.project.config.GetConfig("control_module", new Map<string, IDEControlModuleInfo>());

		var module_info = new IDEControlModuleInfo();
		module_info.module_name = name;
		module_info.root_path = ALittle.File_BaseFilePath().."Module/"..name.."/UI";
		module_map[name] = module_info;
		g_IDEProject.project.config.SetConfig("control_module", module_map);

        var info = new IDEControlTreeUserInfo();
        info.module_name = name;
        info.name = "ui";
        info.path = module_info.root_path;
        info.module_path = ALittle.File_BaseFilePath().."Module/"..name.."/";
        info.group = this._group;
		info.root = true;
        info.ui = new IDEUIManager();
        info.ui.Init(name);
        g_IDEProject.project.ui[name] = info.ui;
        ui_manager.control.RegisterPlugin(name, info.ui.control);
    
        var tree = new IDEControlTree(g_Control, info);
        this._control_scroll_screen.AddChild(tree);
    }

	// 在树形区域，设置控件焦点
	public fun ShowTreeItemFocus(IDEControlTreeLogic target)
    {
        // 显示
        target.ShowSelect();

		if (target != this._control_scroll_screen)
        {
            var parent = cast<IDEUITreeLogic>(target.logic_parent);
			while (parent != null && parent != this._control_scroll_screen)
            {
                parent.fold = true;
                parent = cast<IDEUITreeLogic>(parent.logic_parent);
			}
		}
        this._control_scroll_screen.AdjustScrollBar();

		// 如果现在直接看的见的话，就直接返回了
        var x, y = target.LocalToGlobal(this._control_scroll_screen.container);
        var target_x = (this._control_scroll_screen.view_width - target.width / 2) / 2 - x;
        var target_y = (this._control_scroll_screen.view_height - target.height) / 2 - y;

        if (this._tree_loop_x != null) { this._tree_loop_x.Stop(); this._tree_loop_x = null; }
        if (this._tree_loop_y != null) { this._tree_loop_y.Stop(); this._tree_loop_y = null; }

        this._tree_loop_x = new ALittle.LoopLinear(this._control_scroll_screen, "container_x", target_x, 300, 0);
        this._tree_loop_x.Start();
        this._tree_loop_y = new ALittle.LoopLinear(this._control_scroll_screen, "container_y", target_y, 300, 0);
        this._tree_loop_y.Start();
	}

	private fun HandleControlSearchClick(ALittle.UIEvent event)
	{
		if (this._search_info == null || this._search_info.name != this._control_search_key.text)
		{
            this._search_info = new IDEControlFileSearchInfo();
			this._search_info.name = this._control_search_key.text;
			this._search_info.index = 0;
			this._search_info.list = new List<IDEControlTreeLogic>();
			for (var index, child:IDEControlTreeLogic in this._control_scroll_screen.childs)
                child.SearchFile(this._search_info.name, this._search_info.list);
			this._search_info.count = ALittle.List_Len(this._search_info.list);
        }

		if (this._search_info.count <= 0) return;

		this._search_info.index += 1;
		if (this._search_info.index > this._search_info.count)
			this._search_info.index = 1;
		var item = this._search_info.list[this._search_info.index];
		this.ShowTreeItemFocus(item);
    }

	public fun ShowNewControl(string module_name)
	{
		// 检查当前是否打开项目
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("提示", "当前没有打开的项目");
			return;
		}

        if (module_name == null) module_name = g_IDEProject.project.name;
		
            // 创建新建控件对话框，并加入模态层
		if (this._new_control_dialog == null)
		{
			this._new_control_dialog = g_Control.CreateControl{ALittle.Dialog}("ide_new_control_dialog", this);
			A_LayerManager.AddToModal(this._new_control_dialog);
			// 把可以新建的空间列表设置到控件中
			this._new_control_type.data_list = g_IDEEnum.child_type_list;
		}

        // 显示类型
        var data_list = new List<string>();
        for (var name, ui in g_IDEProject.project.ui)
        	ALittle.List_Push(data_list, name);
        this._new_control_module.data_list = data_list;
        this._new_control_module.text = module_name;
        
        // 清空输入框
		this._new_control_name.text = "";
		// 隐藏对话框
		this._new_control_dialog.visible = true;
		//- 把输入框设置为焦点
		A_UISystem.focus = this._new_control_name.show_input;
	}

	// 处理新建控件-取消
	private fun HandleNewControlCancel(ALittle.UIEvent event)
	{
		this._new_control_dialog.visible = false;
	}
	// 处理新建控件-确认
	private fun HandleNewControlConfirm(ALittle.UIEvent event)
	{
		// 获取当前项目
		var project = g_IDEProject.project;
		if (project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return;
		}
            // 获取控件名字
		var name = this._new_control_name.text;
		if (name == "")
		{
			g_AUITool.ShowNotice("错误", "请输入控件名");
			return;
		}
            // 检查控件名
		if (IDEUtility_CheckName(name) != null)
		{
			g_AUITool.ShowNotice("错误", "控件名不合法:"..name);
			return;
		}

        // 检查模块名
        var ui_manager = project.ui[this._new_control_module.text];
        if (ui_manager == null)
        {
            g_AUITool.ShowNotice("错误", "模块不存在");
            return;
        }

        // 检查控件是否存在
		if (ui_manager.control_map[name] != null)
		{
			g_AUITool.ShowNotice("错误", "控件已存在:"..name);
			return;
		}
        // 检查控件名是否已经正在编辑了
		if (g_IDECenter.center.content_edit.GetTabById{IDEUITabChild}(name) != null)
		{
			g_AUITool.ShowNotice("错误", "控件名已存在:"..name);
			return;
		}
            // 获取控件类型
		var control_type = this._new_control_type.text;
		if (control_type == "")
		{
			g_AUITool.ShowNotice("错误", "请选择控件类型");
			return;
		}

        // 创建控件
		g_IDECenter.center.content_edit.StartEditControlByNew(this._new_control_module.text, name, control_type);
		// 关闭对话框
		this._new_control_dialog.visible = false;
	}

	public fun ShowExtendsControl(string module_name, [Nullable] string extends_module, [Nullable] string extends_name)
	{
		// 检查当前是否打开项目
		if (g_IDEProject.project == null)
		{
			g_AUITool.ShowNotice("提示", "当前没有打开的项目");
			return;
		}

        if (module_name == null) module_name = g_IDEProject.project.name;
        if (extends_module == null) extends_module = module_name;
        if (extends_name == null) extends_name = "";
		
        // 创建新建控件对话框，并加入模态层
		if (this._extends_control_dialog == null)
		{
			this._extends_control_dialog = g_Control.CreateControl{ALittle.Dialog}("ide_extends_control_dialog", this);
			A_LayerManager.AddToModal(this._extends_control_dialog);
		}

        // 显示类型
        var data_list = new List<string>();
        for (var name, ui in g_IDEProject.project.ui)
        	ALittle.List_Push(data_list, name);
        this._extends_control_module.data_list = data_list;
        this._extends_control_module.text = module_name;

        data_list = new List<string>();
        for (var name, ui in g_IDEProject.project.ui)
        	ALittle.List_Push(data_list, name);
        this._extends_control_extends_module.data_list = data_list;
        this._extends_control_extends_module.text = extends_module;
    
        // 清空输入框
		this._extends_control_name.text = "";
		this._extends_control_extends_name.text = extends_name;
		// 显示对话框
		this._extends_control_dialog.visible = true;
		//- 把输入框设置为焦点
		A_UISystem.focus = this._extends_control_name.show_input;
	}

	// 处理新建控件-取消
	private fun HandleExtendsControlCancel(ALittle.UIEvent event)
	{
		this._extends_control_dialog.visible = false;
	}
	// 处理新建控件-确认
	private fun HandleExtendsControlConfirm(ALittle.UIEvent event)
	{
		// 获取当前项目
		var project = g_IDEProject.project;
		if (project == null)
		{
			g_AUITool.ShowNotice("错误", "当前没有打开的项目");
			return;
		}
        
        // 获取控件名字
		var name = this._extends_control_name.text;
		if (name == "")
		{
			g_AUITool.ShowNotice("错误", "请输入控件名");
			return;
		}
        // 检查控件名
		if (IDEUtility_CheckName(name) != null)
		{
			g_AUITool.ShowNotice("错误", "控件名不合法:"..name);
			return;
		}

        // 检查模块名
        var ui_manager = project.ui[this._extends_control_module.text];
        if (ui_manager == null)
        {
            g_AUITool.ShowNotice("错误", "模块不存在");
            return;
        }

        // 检查控件是否存在
		if (ui_manager.control_map[name] != null)
		{
			g_AUITool.ShowNotice("错误", "控件已存在:"..name);
			return;
		}
        // 检查控件名是否已经正在编辑了
		if (g_IDECenter.center.content_edit.GetTabById{IDEUITabChild}(name) != null)
		{
			g_AUITool.ShowNotice("错误", "控件名已存在:"..name);
			return;
		}

        // 获取控件名字
		var extends_name = this._extends_control_extends_name.text;
		if (extends_name == "")
		{
			g_AUITool.ShowNotice("错误", "请输入要继承的控件名");
			return;
		}

        // 检查模块名
        var extends_ui_manager = project.ui[this._extends_control_extends_module.text];
        if (extends_ui_manager == null)
        {
            g_AUITool.ShowNotice("错误", "要继承的模块不存在");
            return;
        }

        // 检查模块中是否存在extends_name
        if (extends_ui_manager.control_map[extends_name] == null)
        {
            g_AUITool.ShowNotice("错误", "要继承的控件不存在");
            return;
        }

        // 创建控件
		g_IDECenter.center.content_edit.StartEditControlByExtends(this._extends_control_module.text, name, this._extends_control_extends_module.text, extends_name);
		// 关闭对话框
		this._extends_control_dialog.visible = false;
	}
}