
namespace ALittleIDE;

public class IDEControlTreeItem : IDEControlTreeLogic
{
	private ALittle.EffectImage _drag_effect;
	private bool _drag_shift;

	public ctor(ALittle.ControlSystem ctrl_sys, IDEControlTreeUserInfo user_info)
	{
		this._item = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_control_tree_item", this);
		this.AddChild(this._item);
		this.width = this._item.width;
		this.height = this._item.height;

		this._item_button.selected = false;
		this._item_button.group = user_info.group;
		this._item_button.AddEventListener(this, this.HandleClick);
		this._item_button.AddEventListener(this, this.HandleRButtonDown);
		this._item_button.AddEventListener(this, this.HandleControlDragBegin);
		this._item_button.AddEventListener(this, this.HandleControlDrag);
		this._item_button.AddEventListener(this, this.HandleControlDragEnd);
		this._item_button._user_data = this;
		
		this._item_button.text = this._user_info.name;
	}
	
	public get is_tree() : bool { return false; }
	public get fold() : bool { return false; }
	public set fold(bool value) { }

	// 打开文件
	private fun HandleClick(ALittle.UIClickEvent event)
	{
        if (event.is_drag) return;
		g_IDECenter.center.content_edit.StartEditControlBySelect(this._user_info.module_name, this._user_info.name);
    }
	
	// 搜索文件
	public fun SearchFile(string name, [Nullable] List<IDEControlTreeLogic> list) : List<IDEControlTreeLogic>
	{
		if (list == null) list = new List<IDEControlTreeLogic>();
	
		if (ALittle.String_Find(this._user_info.name, name) != null)
			ALittle.List_Push(list, this);
		return list;
	}

	// 查找文件
	public fun FindFile(string full_path) : IDEControlTreeLogic
	{
		if (this._user_info.path == full_path) return this;
		return null;
    }

	private fun HandleRButtonDown(ALittle.UIRButtonDownEvent event)
	{
        var menu = new AUIPlugin.AUIRightMenu();
		menu.AddItem("复制控件名", bind(this.HandleCopyName, this));
		menu.AddItem("复制并新建控件", bind(this.HandleCopyInfo, this));
		menu.AddItem("继承并新建控件", bind(this.HandleExtendsInfo, this));
		menu.AddItem("复制继承代码", bind(this.HandleCopyExtends, this));
		menu.AddItem("修改控件名", bind(this.HandleControlRename, this));
		menu.AddItem("删除", bind(this.HandleDelete, this));
		menu.Show();
    }

	// 处理删除信息
	public async fun HandleDelete()
	{
		var error = this._user_info.ui.CanDelete(this._user_info.name);
		if (error != null)
		{
			g_AUITool.ShowNotice("错误", error);
			return;
		}

		var del_result = g_AUITool.DeleteNotice("提示", "确定要删除"..this._user_info.name.."吗?");
		if (del_result != AUIPlugin.AUIToolOption.YES) return;

		error = this._user_info.ui.DeleteControl(this._user_info.name);
		if (error != null)
		{
			g_AUITool.ShowNotice("提示", error);
			return;
		}

		this.OnDelete();

		var parent = this.parent;
        this.RemoveFromParent();
		if (parent != null) parent.DispatchEvent(new ALittle.UIResizeEvent());
		g_IDECenter.center.content_edit.CloseTabByName{IDEUITabChild}(this._user_info.name);
	}
	// 处理复制控件名
	public fun HandleCopyName()
	{
		ALittle.System_SetClipboardText(this._user_info.name);
	}
	// 处理复制并新建控件
	public async fun HandleCopyInfo()
	{
		var old_name = this._user_info.name;
		var x, y = this.LocalToGlobal();
		var new_name = g_AUITool.ShowRename(old_name, x, y, this.width);
		if (new_name == null || old_name == new_name) return;
		this.ControlCopyInfo(old_name, new_name);
	}
    // 处理继承并新建
    public fun HandleExtendsInfo()
    {
        g_IDECenter.center.control_list.ShowExtendsControl(null, this._user_info.module_name, this._user_info.name);
    }

	// 复制控件信息
	public fun ControlCopyInfo(string target_name, string new_name)
	{
		var error = IDEUtility_CheckName(new_name);
		if (error != null)
		{
			g_AUITool.ShowNotice("错误", error);
			return;
		}

		var info = this._user_info.ui.control_map[new_name];
		if (info != null)
		{
			g_AUITool.ShowNotice("错误", "控件名已存在:"..new_name);
			return;
		}
		info = this._user_info.ui.control_map[target_name];
		if (info == null)
		{
			g_AUITool.ShowNotice("错误", "控件不存在:"..target_name);
			return;
		}
		this._user_info.ui.SaveControl(new_name, ALittle.String_CopyTable(info.info));
        // 刷新控件树
        cast<IDEControlTree>(this.parent).Refresh();
        // 直接打开这个控件
		g_IDECenter.center.content_edit.StartEditControlBySelect(this._user_info.module_name, new_name);
	}

	// 修改控件名事件处理
	public async fun HandleControlRename()
	{
		var error = this._user_info.ui.CanDelete(this._user_info.name);
		if (error != null)
		{
			g_AUITool.ShowNotice("错误", error);
			return;
		}

        var tab_child = g_IDECenter.center.content_edit.GetTabChildById{IDEUITabChild}(this._user_info.name);
        if (tab_child != null && tab_child.save != true)
        {
            g_AUITool.ShowNotice("提示", "请先保存再重命名");
            return;
        }
	
		var x, y = this.LocalToGlobal();
		var new_name = g_AUITool.ShowRename(this._user_info.name, x, y, this.width);
		if (new_name == null || this._user_info.name == new_name) return;
        // 重命名
		error = this._user_info.ui.RenameControl(this._user_info.name, new_name);
		if (error != null)
		{
			g_AUITool.ShowNotice("错误", error);
			return;
		}

        var old_name = this._user_info.name;
	
		this._user_info.name = new_name;   
		this._user_info.path = ALittle.File_GetFilePathByPath(this._user_info.path).."/"..this._user_info.name;
        this._user_info.name = new_name;

        this._item_button.text = this._user_info.name;

        if (tab_child != null) tab_child.Rename(this._user_info.name);
        g_IDECenter.center.content_edit.main_tab.SetChildText(tab_child.tab_body, this._user_info.name);
	}

	// 复制继承代码
	public fun HandleCopyExtends()
	{
		var name = this._user_info.name;
		var save_info = new Map<string, any>();
		save_info["__extends"] = name;
        save_info["__module"] = this._user_info.module_name;
		var copy_list = new List<Map<string, any>>();
		var info = new Map<string, any>();
		info["index"] = 1;
		info["info"] = save_info;
		copy_list[1] = info;
		ALittle.System_SetClipboardText(ALittle.String_JsonEncode(copy_list));
	}

	// 触发删除
	public fun OnDelete()
	{
    }

	private fun HandleControlDragBegin(ALittle.UIButtonDragBeginEvent event)
	{
		this._drag_shift = (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_LSHIFT] != null || A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_RSHIFT] != null);
		if (this._drag_shift == false)
		{
			event.target = g_IDECenter.center.control_list.scroll_screen;
			g_IDECenter.center.control_list.scroll_screen.DispatchEvent(event);
			return;
		}

		var x, y = event.target.LocalToGlobal();
		// 创建渲染图片
		this._drag_effect = new ALittle.EffectImage(g_Control);
		this._drag_effect.Action(event.target);
		// 添加到Tip层
		A_LayerManager.AddToTip(this._drag_effect);
		this._drag_effect.x = x;
		this._drag_effect.y = y;
		this._drag_effect.alpha = 0.6;
    
		// var child = g_IDECenter.center.content_edit.GetTabById{IDEUITabChild}(info.control_info.name);
		// if (child == null) return;
		// g_IDECenter.center.content_edit.CloseTab(child);
		// if (info.pre_index != null) g_IDECenter.center.content_edit.SetCurTabIndex(info.pre_index);
	}

	private fun HandleControlDrag(ALittle.UIButtonDragEvent event)
	{
		if (this._drag_shift == false)
		{
			event.target = g_IDECenter.center.control_list.scroll_screen;
			g_IDECenter.center.control_list.scroll_screen.DispatchEvent(event);
			return;
		}
		if (this._drag_effect == null) return;
		this._drag_effect.x = this._drag_effect.x + event.delta_x;
		this._drag_effect.y = this._drag_effect.y + event.delta_y;
	}
	private fun HandleControlDragEnd(ALittle.UIButtonDragEndEvent event)
	{
		if (this._drag_shift == false)
		{
			event.target = g_IDECenter.center.control_list.scroll_screen;
			g_IDECenter.center.control_list.scroll_screen.DispatchEvent(event);
			return;
		}
		if (this._drag_effect != null)
		{
			// 从Tip层移除
			A_LayerManager.RemoveFromTip(this._drag_effect);
			this._drag_effect.Clear();
			this._drag_effect = null;
		}
	
		var tab_child = ALittle.Cast{IDEUITabChild}(g_IDECenter.center.content_edit.cur_tab_child);
		if (tab_child == null) return;

        tab_child.QuickDragAddControl(event.abs_x, event.abs_y, this._user_info.module_name, this._user_info.name);
	}
}