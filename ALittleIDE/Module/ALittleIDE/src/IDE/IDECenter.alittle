
namespace ALittleIDE;

class IDECenter
{
	private IDEUIAccount _account;
	private IDEUIProjectDropdown _project_dropdown;
	private IDEUIMainMenu _main_menu;
	private IDEUICenter _center;

	public await fun Setup()
	{
		// 创建主界面
		g_Control.CreateControl{ALittle.DisplayObject}("ide_main_scene", this, g_MainLayer);
		// 打开上一次的项目
		g_IDEProject.OpenLastProject();
		// 初始化组合键
		A_UISystem.keydown_callback = bind(this.HandleShortcutKey, this);
        // 退出处理
        A_UISystem.quit_callback = bind(this.HandleQuit, this);
	}
	
	public fun Shutdown()
	{
		if (this._account != null) this._account.Shutdown();
		if (this._main_menu != null) this._main_menu.Shutdown();
	}

	public get center() : IDEUICenter { return this._center; }
	
	public async fun RefreshProject()
	{
		// 检查是否都保存了
		if (!this._center.content_edit.IsSaveAll())
		{
			var result = g_AUITool.SaveNotice("提示", "是否保存当前项目?");
			if (result == AUIPlugin.AUIToolOption.YES)
				this._center.content_edit.SaveAllTab();
		}
		// 刷新当前
		g_IDEProject.RefreshProject();
	}

	////////////////////////////////////////////////////////////////////////////////////////
	// 处理快捷点
	public fun HandleShortcutKey(int mod, int sym, int scancode)
	{
		// 判断F5，运行当前项目快捷键
		if (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_F5])
		{
            if (g_IDEProject.IsDebug())
            	g_IDEProject.ContinueDebug();
            else
            {
				g_IDEProject.RunProject(true);
                g_IDEProject.StartDebugProject();
            }
			return;
		}
        
        if (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_F6])
        {
            g_IDEProject.StopDebugProject();
            g_IDEProject.RunProject(false);

            return;
        }

        if (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_F10])
        {
            if (g_IDEProject.IsDebug())
            	g_IDEProject.NextLineDebug();
            return;
        }

		if (this._center != null)
			this._center.HandleShortcutKey();
	}

    // 处理退出
    public fun HandleQuit() : bool
    {
		// 检查是否都保存了
		if (this._center.content_edit.IsSaveAll()) return true;
        this.HandleQuitImpl();
        return false;
    }

    private async fun HandleQuitImpl()
    {
        var result = g_AUITool.SaveNotice("提示", "是否保存当前项目?");
        if (result == AUIPlugin.AUIToolOption.YES)
            this._center.content_edit.SaveAllTab();
        ALittle.System_Exit();
    }
}

protected var g_IDECenter = new IDECenter();