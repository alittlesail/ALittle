
namespace ALittleIDE;

public struct IDEUICenterScaleChangedEvent : ALittle.UIEvent
{
    double scale;
}

public struct IDEUICenterSelectOpChangedEvent : ALittle.UIEvent
{
    bool value;
}

public struct IDEUICenterHandDragOpChangedEvent : ALittle.UIEvent
{
    bool value;
}

public struct IDEUICenterScaleOpChangedEvent : ALittle.UIEvent
{
    bool value;
}

public struct IDEUICenterPreSeeOpChangedEvent : ALittle.UIEvent
{
    bool value;
}

protected class IDEUICenter : ALittle.DisplayLayout
{
	private ALittle.Tab _main_tab;				// 编辑区标签容器
	private ALittle.Tab _detail_tree_tab;			// 控件树标签容器
	private ALittle.Tab _project_edit_tab;			// 项目库，图片库，控件库标签容器
	private ALittle.Tab _project_quick_tab;			// 便利控件查找，动画容器

	private ALittle.Grid3 _right_edit_grid3;		// 下面全部三宫格
	private ALittle.Grid3 _control_edit_grid3;		// 左边三宫格
	private ALittle.Grid3 _quick_edit_grid3;		// 中间三宫格
	private ALittle.TextCheckButton _quick_fold_updown;	// 对_quick_eidt_grid3的down进行收起
	private double _quick_edit_grid3_down_size;

    private ALittle.DisplayLayout _tool_ui_container;    	// UI工具容器
    private ALittle.DisplayLayout _tool_code_container;		// 代码工具容器

	private ALittle.DisplayObject _tool_h_align_left;		// 水平对齐
	private ALittle.DisplayObject _tool_h_align_center;
	private ALittle.DisplayObject _tool_h_align_right;
	private ALittle.DisplayObject _tool_v_align_top;		// 垂直对齐
	private ALittle.DisplayObject _tool_v_align_center;
	private ALittle.DisplayObject _tool_v_align_bottom;

	private ALittle.DisplayObject _tool_h_align_left_icon;		// 水平对齐图标
	private ALittle.DisplayObject _tool_h_align_center_icon;
	private ALittle.DisplayObject _tool_h_align_right_icon;
	private ALittle.DisplayObject _tool_v_align_top_icon;		// 垂直对齐图标
	private ALittle.DisplayObject _tool_v_align_center_icon;
	private ALittle.DisplayObject _tool_v_align_bottom_icon;
	
	private ALittle.DisplayObject _tool_scale_text;				// 缩放标题
	private ALittle.DisplayObject _tool_scale_input;			// 缩放输入框
	private ALittle.TextRadioButton _tool_singleselect;			// 选择模式
	private ALittle.TextRadioButton _tool_handdrag;				// 拖拽模式
	private ALittle.TextRadioButton _tool_scale;				// 缩放模式
	private ALittle.TextRadioButton _tool_presee;				// 预览模式

    private ALittle.DropDown _tool_language;	// 目标语言下拉菜单
    private ALittle.DisplayObject _tool_jumpprecode;
    private ALittle.DisplayObject _tool_jumpnextcode;

	private IDEUIControlTree _control_tree;	// 控件树
    private IDEUITileBrush _tile_brush;		// 地图笔刷
	private IDEUIControlList _control_list;	// 控件库
	private IDEUICodeList    _code_list;	// 代码库
    private IDEUITileList _tile_list;	// 地图列表
	private IDEUIProjectList _project_list;	// 项目库
	private IDEUIControlAnti _control_anti;	// 动画编辑器
	private IDEContentEdit	 _content_edit;	// 内容编辑管理器

	public fun TCtor()
	{		
		// 初始化左下角数据管理的标签页
		this._project_edit_tab.DisableAllCloseButton();
		this._project_edit_tab.tab_index = 1;
		this._detail_tree_tab.DisableAllCloseButton();
		this._detail_tree_tab.tab_index = 1;

		// 初始化下面快捷标签页，动画编辑器
		this._project_quick_tab.DisableAllCloseButton();
		this._project_quick_tab.tab_index = 1;

        // 工具容器
        this._tool_ui_container.visible = false;
        this._tool_code_container.visible = false;

		this._quick_edit_grid3_down_size = this._quick_edit_grid3.down_size;
		this._quick_edit_grid3.down_size = this._project_quick_tab.up_size;
		this._quick_fold_updown.selected = false;
		ALittle.TextRadioButton.SetGroup([this._tool_singleselect, this._tool_handdrag, this._tool_scale, this._tool_presee]);

        g_IDEProject.AddEventListener(this, this.HandleProjectOpen);
	}
	
    public get project_edit_tab() : ALittle.Tab { return this._project_edit_tab; }
    public get detail_tree_tab() : ALittle.Tab { return this._detail_tree_tab; }

	public get control_tree() : IDEUIControlTree { return this._control_tree; }
    public get tile_brush() : IDEUITileBrush { return this._tile_brush; }
	public get control_list() : IDEUIControlList { return this._control_list; }
	public get code_list() : IDEUICodeList { return this._code_list; }
	public get tile_list() : IDEUITileList { return this._tile_list; }
	public get project_list() : IDEUIProjectList { return this._project_list; }
	public get control_anti() : IDEUIControlAnti { return this._control_anti; }
	public get content_edit() : IDEContentEdit { return this._content_edit; }
    public get tool_ui() : ALittle.DisplayLayout { return this._tool_ui_container; }
    public get tool_code() : ALittle.DisplayLayout { return this._tool_code_container; }

	////////////////////////////////////////////////////////////////////////////////////////

	public fun System_SetVDragCursor(ALittle.UIEvent event) { ALittle.System_SetVDragCursor(); }
	public fun System_SetNormalCursor(ALittle.UIEvent event) { ALittle.System_SetNormalCursor(); }
	public fun System_SetHDragCursor(ALittle.UIEvent event) { ALittle.System_SetHDragCursor(); }
	public fun System_SetHVDragCursor(ALittle.UIEvent event) { ALittle.System_SetHVDragCursor(); }

	////////////////////////////////////////////////////////////////////////////////////////
	// 处理面板大小拖拽
	private fun HandleLeftEditResizeDrag(ALittle.UIButtonDragEvent event)
	{
		var up_size = this._right_edit_grid3.up_size;
		up_size = up_size + event.delta_x;
		var max_size = this._right_edit_grid3.width - this._right_edit_grid3.down_size - 50;
		if (up_size > max_size) up_size = max_size;
		if (up_size < 100) up_size = 100;
		this._right_edit_grid3.up_size = up_size;
	}
	private fun HandleControlEditResizeDrag(ALittle.UIButtonDragEvent event)
	{
		var up_size = this._control_edit_grid3.up_size;
		up_size = up_size + event.delta_y;
		var max_size = this._control_edit_grid3.height - this._control_edit_grid3.down_size - 50;
		if (up_size < 50) up_size = 50;
		if (up_size > max_size) up_size = max_size;
		this._control_edit_grid3.up_size = up_size;
	}
	private fun HandleQuickEditResizeDrag(ALittle.UIButtonDragEvent event)
	{
		var down_size = this._quick_edit_grid3.down_size;
		down_size = down_size - event.delta_y;
		var max_size = this._quick_edit_grid3.height - this._quick_edit_grid3.up_size - 50;
		if (down_size < 50) down_size = 50;
		if (down_size > max_size) down_size = max_size;
		this._quick_edit_grid3.down_size = down_size;
	}
	private fun HandleQuickFoldChanged(ALittle.UIChangedEvent event)
	{
		if (event.target.selected)
		{
            this._quick_edit_grid3.down_size = this._quick_edit_grid3_down_size;
        }
		else
		{
            this._quick_edit_grid3_down_size = this._quick_edit_grid3.down_size;
			this._quick_edit_grid3.down_size = this._project_quick_tab.up_size;
        }
    }

	////////////////////////////////////////////////////////////////////////////////////////
	// 处理快捷点
	public fun HandleShortcutKey()
	{
		// 判断ESC
		if (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_ESC])
		{
            if (g_IDEAttrEventDialog.IsShow())
            {
                g_IDEAttrEventDialog.HideDialog();
                return;
            }
            if (g_IDEAttrControlDialog.IsShow())
			{
                g_IDEAttrControlDialog.HideDialog();
				return;
            }
            if (g_IDEProjectFindFileDialog.IsShow())
            {
                g_IDEProjectFindFileDialog.HideDialog();
                return;
            }
        }

		// 判定Ctrl键是否按下
		var ctrl = A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_CTRL];
		if (ctrl == null) return;
		// 判断Ctrl+Z
		var z = A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_Z];
		if (z)
		{
			this.HandleUndoRevoke(null);
			return;
		}
		// 判断Ctrl+S
		var s = A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_S];
		if (s)
		{
			this.HandleSaveCurrent(null);
			return;
		}
		// 判断Ctrl+N
		var n = A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_N];
		if (n)
		{
			this._control_list.ShowNewControl(null);
			return;
		}
	}
	// 快捷键 撤销
	public fun HandleUndoRevoke(ALittle.UIEvent event)
	{
		// 如果某些对话框打开着那么就直接返回
		if (g_IDEAttrEventDialog.IsShow()) return;
		var tab_child = g_IDECenter.center.content_edit.cur_tab_child;
		if (tab_child == null) return;
		tab_child.revoke_list.UndoRevoke();
		tab_child.OnUndo();
	}
	// 快捷键 重做
	public fun HandleDoRevoke(ALittle.UIEvent event)
	{
		var tab_child = g_IDECenter.center.content_edit.cur_tab_child;
		if (tab_child == null) return;
		tab_child.revoke_list.DoRevoke();
		tab_child.OnRedo();
	}
	// 快捷键 保存
	public fun HandleSaveCurrent(ALittle.UIEvent event)
	{
		var tab_child = g_IDECenter.center.content_edit.cur_tab_child;
		if (tab_child == null) return;
		tab_child.save = true;
	}
	////////////////////////////////////////////////////////////////////////////////////////
	// 工具栏按钮发生变化
	public fun HandleToolSingleSelect(ALittle.UIEvent event)
	{
		var object = event.target;

		var op_event = new IDEUICenterSelectOpChangedEvent();
		op_event.value = object.selected;
		g_IDECenter.center.DispatchEvent(op_event);

		this._tool_h_align_left.visible = object.selected;
		this._tool_h_align_center.visible = object.selected;
		this._tool_h_align_right.visible = object.selected;
		this._tool_v_align_top.visible = object.selected;
		this._tool_v_align_center.visible = object.selected;
		this._tool_v_align_bottom.visible = object.selected;
	
		this._tool_h_align_left_icon.visible = object.selected;
		this._tool_h_align_center_icon.visible = object.selected;
		this._tool_h_align_right_icon.visible = object.selected;
		this._tool_v_align_top_icon.visible = object.selected;
		this._tool_v_align_center_icon.visible = object.selected;
		this._tool_v_align_bottom_icon.visible = object.selected;
	}
	public fun HandleToolHandDrag(ALittle.UIButtonDragEvent event)
	{
		var op_event = new IDEUICenterHandDragOpChangedEvent();
		op_event.value = event.target.selected;
		g_IDECenter.center.DispatchEvent(op_event);
	}
	public fun HandleToolPreSee(ALittle.UIEvent event)
	{
		var op_event = new IDEUICenterPreSeeOpChangedEvent();
		op_event.value = event.target.selected;
		g_IDECenter.center.DispatchEvent(op_event);
	}
	public fun HandleToolScale(ALittle.UIEvent event)
	{
		var op_event = new IDEUICenterScaleOpChangedEvent();
		op_event.value = event.target.selected;
		g_IDECenter.center.DispatchEvent(op_event);

		this._tool_scale_text.visible = event.target.selected;
		this._tool_scale_input.visible = event.target.selected;
	}
	public get singleselect() : bool
	{
		return this._tool_singleselect.selected;
	}
	public get handdrag() : bool
	{
		return this._tool_handdrag.selected;
	}
	public get scale() : bool
	{
		return this._tool_scale.selected;
	}
	public fun UpdateToolScale(double scale)
	{
		this._tool_scale_input.text = scale;
	}
	public fun HandleToolScaleDrag(ALittle.UIButtonDragEvent event)
	{
		var scale = ALittle.Math_ToDouble(this._tool_scale_input.text);
		if (scale == null) scale = 1;
		scale = scale + event.delta_x * 0.05;
		if (scale < 0) scale = 0;
		this._tool_scale_input.text = scale;

		var scale_event = new IDEUICenterScaleChangedEvent();
		scale_event.scale = scale;
		this.DispatchEvent(scale_event);
	}
	public fun HandleToolScaleMoveIn(ALittle.UIEvent event)
	{
		ALittle.System_SetHDragCursor();
	}
	public fun HandleToolScaleMoveOut(ALittle.UIEvent event)
	{
		ALittle.System_SetNormalCursor();
	}
	public fun HandleToolScaleInputFOCUSOUT(ALittle.UIEvent event)
	{
		var tab_child = g_IDECenter.center.content_edit.cur_tab_child;
		if (tab_child == null) return;
	
		var scale = ALittle.Math_ToDouble(this._tool_scale_input.text);
		if (scale == null) scale = 1;
		if (scale < 0)
		{
			scale = 0;
			this._tool_scale_input.text = "0";
		}
		var scale_event = new IDEUICenterScaleChangedEvent();
		scale_event.scale = scale;
		this.DispatchEvent(scale_event);
	}
	
	public fun HandleToolHLAlign(ALittle.UIEvent event)
	{
		var cur_tab = g_IDECenter.center.content_edit.cur_tab;
		if (cur_tab == null) return;
		var tab_child:IDEUITabChild = cur_tab._user_data;
		if (event.target == this._tool_h_align_left)
			tab_child.SelectAlign("h_align_left");
		elseif (event.target == this._tool_h_align_center)
			tab_child.SelectAlign("h_align_center");
		elseif (event.target == this._tool_h_align_right)
			tab_child.SelectAlign("h_align_right");
		elseif (event.target == this._tool_v_align_top)
			tab_child.SelectAlign("v_align_top");
		elseif (event.target == this._tool_v_align_center)
			tab_child.SelectAlign("v_align_center");
		elseif (event.target == this._tool_v_align_bottom)
			tab_child.SelectAlign("v_align_bottom");
	}
	
	public fun HandleImageSelectClick(ALittle.UIEvent event)
	{
		if (g_IDEProject.project == null)
		{
            g_AUITool.ShowNotice("提示", "请先打开项目");
			return;
        }
        var ui_manager = g_IDEProject.GetUIManager(null);
        if (ui_manager == null) return;
		g_IDEImageManagerDialog.SetBasePath(ui_manager.texture_path);
		g_IDEImageManagerDialog.ShowDialog();
	}

    private fun HandleTargetLanguageSelectChange(ALittle.UISelectChangedEvent event)
    {
        if (g_IDEProject.project == null) return;
        if (g_IDEProject.project.code == null) return;
        lua.alittlescript.alittlescriptproject_settargetlanguage(g_IDEProject.project.code.project, event.target.text);
        g_IDEProject.project.config.SetConfig("target_language", event.target.text);
    }
    private fun HandleJumpNextCodeClick(ALittle.UIClickEvent event)
    {
        var info = this._code_list.JumpNextCode();
        if (info == null) return;
		g_IDECenter.center.code_list.OpenByFullPath(info.file_path, info.it_line, info.it_char, null, null);
    }
    private fun HandleJumpPreCodeClick(ALittle.UIClickEvent event)
    {
        var info = this._code_list.JumpPreCode();
        if (info == null) return;
		g_IDECenter.center.code_list.OpenByFullPath(info.file_path, info.it_line, info.it_char, null, null);
    }
    private fun HandleFindFileClick(ALittle.UIClickEvent event)
    {
        g_IDEProjectFindFileDialog.ShowFindFile();
    }

    private fun HandleProjectOpen(IDEProjectOpenEvent event)
    {
        this._tool_ui_container.visible = false;
        this._tool_code_container.visible = false;
        this._tool_language.text = g_IDEProject.project.config.GetConfig("target_language", "Lua");
    }
}