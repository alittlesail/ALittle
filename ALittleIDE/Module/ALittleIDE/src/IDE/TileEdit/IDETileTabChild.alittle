
namespace ALittleIDE;

public class IDETileContainer : ALittle.DisplayLayout
{
    protected fun ClipRect(double x, double y, double width, double height, double h_move, double v_move)
    {
        for (var index, child in this.childs)
    		child.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
    }
}

public class IDETileLinearContainer : ALittle.DisplayLayout
{
    public ALittle.Linear _linear_grid_1;
    public ALittle.Linear _linear_grid_2;

    public ALittle.DisplayGroup _linear_tile_1;
    public ALittle.DisplayGroup _linear_tile_2;

    protected fun ClipRect(double x, double y, double width, double height, double h_move, double v_move)
    {
        this._linear_grid_1.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
        this._linear_grid_2.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
        for (var index, child in this._linear_tile_1.childs)
    		child.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
        for (var index, child in this._linear_tile_2.childs)
    		child.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
    }
}

public class IDETileTabChild : IDETabChild
{
    private IDETileTreeUserInfo _user_info;
	private ALittle.ScrollScreen _tab_screen;        // 标签页
    private IDETileLinearContainer _tile_container;
    private ALittle.DisplayLayout _tab_rb_quad;

    // 格子
    private ALittle.Linear _linear_grid_1;
    private ALittle.Linear _linear_grid_2;

    private ALittle.DisplayGroup _linear_tile_1;
    private ALittle.DisplayGroup _linear_tile_2;

    // 笔刷编辑区
    private IDEUITileLayerEdit _layer_edit;

    private int _drag_cell_row;
    private int _drag_cell_col;

	public ctor(ALittle.ControlSystem ctrl_sys, string module, string name, bool save, IDETileTreeUserInfo user_info)
	{
        this._user_info = user_info;

		this._tab_screen = g_Control.CreateControl{ALittle.ScrollScreen}("ide_tile_tab_screen", this);
        this._tab_screen._user_data = this;
        this._tab_screen.container = new IDETileContainer(g_Control);

        this._linear_grid_1 = new ALittle.Linear(g_Control);
        this._linear_grid_1.type = ALittle.UIEnumTypes.TYPE_V;
        this._tile_container._linear_grid_1 = this._linear_grid_1;
        this._tile_container.AddChild(this._linear_grid_1);

        this._linear_grid_2 = new ALittle.Linear(g_Control);
        this._linear_grid_2.type = ALittle.UIEnumTypes.TYPE_V;
        this._tile_container._linear_grid_2 = this._linear_grid_2;
        this._tile_container.AddChild(this._linear_grid_2);

        this._linear_tile_1 = new ALittle.DisplayGroup(g_Control);
        this._linear_tile_2 = new ALittle.DisplayGroup(g_Control);
        this._tile_container._linear_tile_1 = this._linear_tile_1;
        this._tile_container._linear_tile_2 = this._linear_tile_2;
        this._tile_container.AddChild(this._linear_tile_1);
        this._tile_container.AddChild(this._linear_tile_2);

        this._layer_edit = g_Control.CreateControl{IDEUITileLayerEdit}("ide_tile_layer_detail_layout");

        g_IDECenter.center.AddEventListener(this, this.HandleHandDrag);

        this._tab_rb_quad.AddEventListener(this, this.HandleQuadLButtonDown);
        this._tab_rb_quad.AddEventListener(this, this.HandleQuadDragBegin);
        this._tab_rb_quad.AddEventListener(this, this.HandleQuadDrag);
        this._tab_rb_quad.AddEventListener(this, this.HandleQuadDragEnd);
    }

    private fun HandleHandDrag(IDEUICenterTileHandDragOpChangedEvent event)
    {
        this._tab_rb_quad.hand_cursor = event.value;
    }

    private fun HandleQuadLButtonDown(ALittle.UILButtonDownEvent event)
    {
        if (g_IDECenter.center.tile_brush)
        {
            var brush_info = g_IDECenter.center.tile_brush_edit.GetBrush();
            if (brush_info == null)
            {
                g_AUITool.ShowNotice("提示", "请先从地块库选择地块");
                return;
            }

            var layer_info, layer_index = this._layer_edit.GetCurLayerInfo();
            if (layer_info == null)
            {
                g_AUITool.ShowNotice("提示", "请先选择图层");
                return;
            }

            var row, col = this.CalcRowColByPos(event.rel_x, event.rel_y);
            if (row <= 0 || col <= 0) return;
            this.ResizeGridMap(row, col);
            this._drag_cell_row = row;
            this._drag_cell_col = col;

            var col_map = layer_info._layer.cell_map[row];
            if (col_map == null)
            {
                col_map = new Map<int, ALittle.TileCell>();
                layer_info._layer.cell_map[row] = col_map;
            }
            var cell = col_map[col];
            if (cell == null)
            {
                cell = new ALittle.TileCell();
                col_map[col] = cell;
            }
            var old_tex_path:string;
            if (cell.tex_id != null) old_tex_path = layer_info._user_info.tile_map.tex_map[cell.tex_id];
            var tex_id = layer_info._user_info.tex_id_map[brush_info.tex_path];
            if (tex_id == null)
            {
                tex_id = layer_info._user_info.tex_id_max + 1;
                layer_info._user_info.tex_id_max = tex_id;
                layer_info._user_info.tex_id_map[brush_info.tex_path] = tex_id;
                layer_info._user_info.tile_map.tex_map[tex_id] = brush_info.tex_path;
            }
            cell.tex_id = tex_id;

            var image = this.GetImage(layer_index, row, col);
            image.SetTextureCut(brush_info.module_path, 0, 0, true);

            var revoke = new IDETileBrushCellRevoke(this, layer_info, cell, image, old_tex_path, brush_info.tex_path);
            this._revoke_list.PushRevoke(revoke);

            this.save = false;
        }
        elseif (g_IDECenter.center.tile_erase)
        {
            var layer_info, layer_index = this._layer_edit.GetCurLayerInfo();
            if (layer_info == null)
            {
                g_AUITool.ShowNotice("提示", "请先选择图层");
                return;
            }

            var row, col = this.CalcRowColByPos(event.rel_x, event.rel_y);
            if (row <= 0 || col <= 0) return;
            this.ResizeGridMap(row, col);
            this._drag_cell_row = row;
            this._drag_cell_col = col;

            var col_map = layer_info._layer.cell_map[row];
            if (col_map == null) return;
            var cell = col_map[col];
            if (cell == null) return;
            if (cell.tex_id == null) return;
            var old_tex_path = layer_info._user_info.tile_map.tex_map[cell.tex_id];
            cell.tex_id = null;

            var image = this.GetImage(layer_index, row, col);
            image.SetTextureCut(null, 0, 0, true);

            var revoke = new IDETileBrushCellRevoke(this, layer_info, cell, image, old_tex_path, null);
            this._revoke_list.PushRevoke(revoke);

            this.save = false;
        }
    }

    private fun HandleQuadDragBegin(ALittle.UIButtonDragBeginEvent event)
    {
        if (g_IDECenter.center.tile_handdrag)
        {
            event.target = this._tab_screen;
            this._tab_screen.DispatchEvent(event);
        }
    }

    private fun HandleQuadDrag(ALittle.UIButtonDragEvent event)
    {
        if (g_IDECenter.center.tile_brush)
        {
            var brush_info = g_IDECenter.center.tile_brush_edit.GetBrush();
            if (brush_info == null) return;

            var layer_info, layer_index = this._layer_edit.GetCurLayerInfo();
            if (layer_info == null) return;

            var row, col = this.CalcRowColByPos(event.rel_x, event.rel_y);
            if (row <= 0 || col <= 0) return;
            this.ResizeGridMap(row, col);
            if (this._drag_cell_row == row && this._drag_cell_col == col) return;
            this._drag_cell_row = row;
            this._drag_cell_col = col;
            
            var col_map = layer_info._layer.cell_map[row];
            if (col_map == null)
            {
                col_map = new Map<int, ALittle.TileCell>();
                layer_info._layer.cell_map[row] = col_map;
            }
            var cell = col_map[col];
            if (cell == null)
            {
                cell = new ALittle.TileCell();
                col_map[col] = cell;
            }
            var old_tex_path:string;
            if (cell.tex_id != null) old_tex_path = layer_info._user_info.tile_map.tex_map[cell.tex_id];
            var tex_id = layer_info._user_info.tex_id_map[brush_info.tex_path];
            if (tex_id == null)
            {
                tex_id = layer_info._user_info.tex_id_max + 1;
                layer_info._user_info.tex_id_max = tex_id;
                layer_info._user_info.tex_id_map[brush_info.tex_path] = tex_id;
                layer_info._user_info.tile_map.tex_map[tex_id] = brush_info.tex_path;
            }
            cell.tex_id = tex_id;

            var image = this.GetImage(layer_index, row, col);
            image.SetTextureCut(brush_info.module_path, 0, 0, true);

            var revoke = new IDETileBrushCellRevoke(this, layer_info, cell, image, old_tex_path, brush_info.tex_path);
            this._revoke_list.PushRevoke(revoke);

            this.save = false;
        }
        elseif (g_IDECenter.center.tile_handdrag)
        {
            event.target = this._tab_screen;
            this._tab_screen.DispatchEvent(event);
        }
        elseif (g_IDECenter.center.tile_erase)
        {
            var layer_info, layer_index = this._layer_edit.GetCurLayerInfo();
            if (layer_info == null) return;

            var row, col = this.CalcRowColByPos(event.rel_x, event.rel_y);
            if (row <= 0 || col <= 0) return;
            this.ResizeGridMap(row, col);
            if (this._drag_cell_row == row && this._drag_cell_col == col) return;
            this._drag_cell_row = row;
            this._drag_cell_col = col;

            var col_map = layer_info._layer.cell_map[row];
            if (col_map == null) return;
            var cell = col_map[col];
            if (cell == null) return;
            if (cell.tex_id == null) return;
            var old_tex_path = layer_info._user_info.tile_map.tex_map[cell.tex_id];
            cell.tex_id = null;

            var image = this.GetImage(layer_index, row, col);
            image.SetTextureCut(null, 0, 0, true);

            var revoke = new IDETileBrushCellRevoke(this, layer_info, cell, image, old_tex_path, null);
            this._revoke_list.PushRevoke(revoke);

            this.save = false;
        }
    }

    private fun HandleQuadDragEnd(ALittle.UIButtonDragEndEvent event)
    {
        if (g_IDECenter.center.tile_brush)
        {
        }
        elseif (g_IDECenter.center.tile_handdrag)
        {
            event.target = this._tab_screen;
            this._tab_screen.DispatchEvent(event);
        }
        elseif (g_IDECenter.center.tile_erase)
        {

        }

        this._drag_cell_row = null;
        this._drag_cell_col = null;
    }

    public get layer_edit() : IDEUITileLayerEdit { return this._layer_edit; }

    private fun OnUndo() { }
    private fun OnRedo() { }
    private fun OnHide()
    {
        g_IDECenter.center.tool_tile.visible = false;
        this._layer_edit.visible = false;
    }
    private fun OnShow()
    {
        g_IDECenter.center.tool_tile.visible = true;
        this._layer_edit.visible = true;
        g_IDECenter.center.detail_tree_tab.tab = g_IDECenter.center.tile_brush_edit;
        g_IDECenter.center.project_edit_tab.tab = g_IDECenter.center.tile_brush_list;
    }

    private fun OnClose()
    {
		g_IDECenter.center.tile_brush_edit.layer_container.RemoveChild(this._layer_edit);
    }

    private fun OnOpen()
    {
        this._revoke_list = new ALittle.RevokeList();

		g_IDECenter.center.tile_brush_edit.layer_container.AddChild(this._layer_edit);
    }

    private fun OnTabRightMenu(AUIPlugin.AUIRightMenu menu)
    {
		menu.AddItem("获取焦点", bind(this.ShowTileFocus, this));
    }

    public fun ShowTileFocus()
    {
        var tree = g_IDECenter.center.tile_list.GetFileTree(this._user_info.info.path);
        if (tree == null) return;

        g_IDECenter.center.project_edit_tab.tab = g_IDECenter.center.tile_list;
        g_IDECenter.center.tile_list.ShowTreeItemFocus(tree);
    }

    public fun CreateLayer() : ALittle.Linear, ALittle.Linear
    {
        var linear_1 = new ALittle.Linear(g_Control);
        linear_1.type = ALittle.UIEnumTypes.TYPE_V;
        this._linear_tile_1.AddChild(linear_1);

        var linear_2 = new ALittle.Linear(g_Control);
        linear_2.type = ALittle.UIEnumTypes.TYPE_V;
        linear_2.x = this.CalcLinear2OffsetX();
        linear_2.y = this.CalcLinear2OffsetY();

        this._linear_tile_2.AddChild(linear_2);

        var row_count = this._linear_grid_1.child_count;
        var col_count = this._linear_grid_1.childs[1].child_count;
        this.ResizeLinear(linear_1, linear_2, row_count, col_count, this._linear_tile_1.child_count);
        return linear_1, linear_2;
    }

    public fun GetLayer(int index) : ALittle.Linear, ALittle.Linear
    {
        var linear_1 = cast<ALittle.Linear>(this._linear_tile_1.GetChildByIndex(index));
        var linear_2 = cast<ALittle.Linear>(this._linear_tile_2.GetChildByIndex(index));
        return linear_1, linear_2;
    }

    public fun GetImage(int layer, int row, int col) : ALittle.Image
    {
        var linear_1, linear_2 = this.GetLayer(layer);
        if (linear_1 == null) return null;

        if (row % 2 == 1)
        	return linear_1.childs[ALittle.Math_Floor(row / 2) + 1].childs[col]._user_data;

        return linear_2.childs[ALittle.Math_Floor(row / 2)].childs[col]._user_data;
    }

    public fun AddLayer(ALittle.Linear linear_1, ALittle.Linear linear_2, int index)
    {
        this._linear_tile_1.AddChild(linear_1, index);
        this._linear_tile_2.AddChild(linear_2, index);
    }

    public fun RemoveLayer(ALittle.Linear linear_1, ALittle.Linear linear_2)
    {
        this._linear_tile_1.RemoveChild(linear_1);
        this._linear_tile_2.RemoveChild(linear_2);
    }

    public fun SetLayerIndex(ALittle.Linear linear_1, ALittle.Linear linear_2, int index)
    {
        this._linear_tile_1.SetChildIndex(linear_1, index);
        this._linear_tile_2.SetChildIndex(linear_2, index);
    }

    public get tab_body() : ALittle.DisplayObject { return this._tab_screen; }

    public set save(bool value)
    {
        if (this._save == value) return;
		if (value == false)
        {
            this._save = false;
            this.UpdateTitle();
            return;
		}

        var ui = g_IDEProject.project.ui[g_IDEProject.project.name];
        if (ui == null)
        {
            g_AUITool.ShowNotice("提示", "ui不存在");
            return;
        }

        // 计算行列
        var row_count = 0;
        var col_count = 0;
        for (var index, layer in this._user_info.tile_map.layer_list)
        {
            for (var row, cell_map in layer.cell_map)
            {
                for (var col, cell in cell_map)
                {
                    if (col > col_count) col_count = col;
                }
                if (row > row_count) row_count = row;
            }
        }
        this._user_info.tile_map.row_count = row_count;
        this._user_info.tile_map.col_count = col_count;
    
        ui.control.WriteMessageToFile(this._user_info.tile_map, this._user_info.info.path);

        this._save = value;
        this.UpdateTitle();
	}

    public get id() : string { return this._user_info.info.path; }

	public fun Rename(string name)
    {
        this._name = name;
        this.UpdateTitle();
	}

	public fun UpdateTitle()
    {
        var text = this._name;
        if (this._save == false) text = text.." *";
        g_IDECenter.center.content_edit.main_tab.SetChildText(this._tab_screen, text);
	}

	public get title() : string
    {
        return this._name;
	}

    public fun UpdateUserInfo(IDETileTreeUserInfo info)
    {
        this._user_info = info;
    }

    public fun CreateBySelect(IDETileTreeUserInfo info)
    {
        this._user_info = info;

        info.tex_id_map = new Map<string, int>();
        info.tex_id_max = 0;
        for (var tex_id, tex_path in info.tile_map.tex_map)
        {
        	info.tex_id_map[tex_path] = tex_id;
            if (info.tex_id_max < tex_id) info.tex_id_max = tex_id;
        }

        var col_count = info.tile_map.col_count;
        if (col_count < 10) col_count = 10;
        var row_count = info.tile_map.row_count;
        if (row_count < 10) row_count = 10;

        var grid_map_width = this.CalcCellWidth() * col_count;

        // 初始化格子linear
        this._linear_grid_1.width = grid_map_width;
        this._linear_grid_2.width = grid_map_width;
        this._linear_grid_2.x = this.CalcLinear2OffsetX();
        this._linear_grid_2.y = this.CalcLinear2OffsetY();

        // 创建层
        for (var index, layer in info.tile_map.layer_list)
        {
            var linear = new ALittle.Linear(g_Control);
            linear.type = ALittle.UIEnumTypes.TYPE_V;
            linear.width = grid_map_width;
            this._linear_tile_1.AddChild(linear);

            linear = new ALittle.Linear(g_Control);
            linear.type = ALittle.UIEnumTypes.TYPE_V;
            linear.width = grid_map_width;

            linear.x = this.CalcLinear2OffsetX();
            linear.y = this.CalcLinear2OffsetY();
            this._linear_tile_2.AddChild(linear);
        }
        
        // 重新设置格子地图的大小
        this.ResizeGridMap(row_count, col_count);

        // 设置图片
        for (var index, layer in this._user_info.tile_map.layer_list)
        {
            for (var row, col_map in layer.cell_map)
            {
                for (var col, cell in col_map)
                {
                    if (cell.tex_id != null)
                    {
                        var texture_name = this._user_info.tile_map.tex_map[cell.tex_id];
                        if (texture_name != null)
                        {
                            var image = this.GetImage(index, row, col);
                            image.SetTextureCut("Module/"..g_IDEProject.project.name.."/Texture/"..texture_name, 0, 0, true);
                        }
                    }
                }
            }
        }

        this._layer_edit.Init(this, this._user_info);

        this._tab_screen.RefreshClipDisLine();
    }

    private fun ResizeLinear(ALittle.Linear linear_1, ALittle.Linear linear_2, int row_count, int col_count, int layer)
    {
        if (row_count <= linear_1.child_count + linear_2.child_count && col_count <= linear_1.childs[1].child_count) return;

        linear_1.width = this.CalcCellWidth() * col_count;
        linear_2.width = linear_1.width;

        var linear_height = IDETileTabChild.CalcCellHeight(this._user_info);

        for (var index, child:ALittle.Linear in linear_1.childs)
        {
            for (var col = child.child_count + 1; col <= col_count; 1)
            {
                if (layer == 0)
                    child.AddChild(this.CreateGrid());
                else
                    child.AddChild(this.CreateImage());
            }
        }

        for (var index, child in linear_2.childs)
        {
            for (var col = child.child_count + 1; col <= col_count; 1)
            {
                if (layer == 0)
                    child.AddChild(this.CreateGrid());
                else
                    child.AddChild(this.CreateImage());
            }
        }

        for (var row = linear_1.child_count + linear_2.child_count + 1; row <= row_count; 1)
        {
            var linear = new ALittle.Linear(g_Control);
            linear.type = ALittle.UIEnumTypes.TYPE_H;
            linear.height = linear_height;
            for (var col = 1; col <= col_count; 1)
            {
                if (layer == 0)
                    linear.AddChild(this.CreateGrid());
                else
                    linear.AddChild(this.CreateImage());
            }

            if (row % 2 == 1)
            	linear_1.AddChild(linear);
            else
                linear_2.AddChild(linear);
        }
    }

    private fun ResizeGridMap(int row_count, int col_count)
    {
        var cur_row_count = this._linear_grid_1.child_count;
        var cur_col_count = 0;
        if (cur_row_count > 0) cur_col_count = this._linear_grid_1.childs[1].child_count;

        if (row_count < cur_row_count) row_count = cur_row_count;
        if (col_count < cur_col_count) col_count = cur_col_count;

        this.ResizeLinear(this._linear_grid_1, this._linear_grid_2, row_count, col_count, 0);
        for (var index, linear:ALittle.Linear in this._linear_tile_1.childs)
        	this.ResizeLinear(linear, cast<ALittle.Linear>(this._linear_tile_2.childs[index]), row_count, col_count, index);

        var width_1 = this._linear_grid_1.x + this._linear_grid_1.width;
        var width_2 = this._linear_grid_2.x + this._linear_grid_2.width;
        
        var height_1 = this._linear_grid_1.y + this._linear_grid_1.height;
        var height_2 = this._linear_grid_2.y + this._linear_grid_2.height;

        this._tab_screen.container.width = ALittle.Math_Max(width_1, width_2);
        this._tab_screen.container.height = ALittle.Math_Max(height_1, height_2);
        this._tab_screen.AdjustScrollBar();
    }

    private fun CalcLinear2OffsetX() : double
    {
        var tile_type = this._user_info.tile_map.tile_type;
    	var side_len = this._user_info.tile_map.side_len;

        if (tile_type == ALittle.TileType.SQUARE)
        	return 0;

        if (tile_type == ALittle.TileType.HEX_V)
        	return side_len * 1.732 / 2;

        if (tile_type == ALittle.TileType.HEX_H)
        	return side_len * 3 / 2;

        return 0;
    }

    private fun CalcLinear2OffsetY() : double
    {
        var tile_type = this._user_info.tile_map.tile_type;
    	var side_len = this._user_info.tile_map.side_len;

        if (tile_type == ALittle.TileType.SQUARE)
        	return 0;

        if (tile_type == ALittle.TileType.HEX_V)
        	return side_len * 3 / 2;

        if (tile_type == ALittle.TileType.HEX_H)
        	return side_len * 1.732 / 2;

        return 0;
    }


    public static CalcCellHeight(IDETileTreeUserInfo user_info) : double
    {
        var tile_type = user_info.tile_map.tile_type;
    	var side_len = user_info.tile_map.side_len;

        if (tile_type == ALittle.TileType.SQUARE)
        	return side_len;

        if (tile_type == ALittle.TileType.HEX_V)
        	return side_len * 3;

        if (tile_type == ALittle.TileType.HEX_H)
        	return side_len * 1.732;

        return 0;
    }

    public fun CalcCellWidth() : double
    {
        var tile_type = this._user_info.tile_map.tile_type;
    	var side_len = this._user_info.tile_map.side_len;

        if (tile_type == ALittle.TileType.SQUARE)
        	return side_len;

        if (tile_type == ALittle.TileType.HEX_V)
        	return side_len * 1.732;

        if (tile_type == ALittle.TileType.HEX_H)
        	return side_len * 3;

        return 0;
    }

    private fun CalcPosByRC(int row, int col) : double, double
    {
        var tile_type = this._user_info.tile_map.tile_type;
    	var side_len = this._user_info.tile_map.side_len;

        if (tile_type == ALittle.TileType.SQUARE)
            return (row - 1) * side_len + side_len / 2, (col - 1) * side_len + side_len / 2;

        if (tile_type == ALittle.TileType.HEX_V)
        {
            var x = (col - 1) * (side_len * 1.732) + (side_len * 1.732) / 2;
            var y = (row - 1) * (side_len * 3 / 2) + side_len;
            if (row % 2 == 1) x += (side_len * 1.732) / 2;
            return x, y;
        }

        if (tile_type == ALittle.TileType.HEX_H)
        {
            var x = (col - 1) * (side_len * 3 / 2) + side_len;
            var y = (row - 1) * (side_len * 1.732) + (side_len * 1.732) / 2;
            if (col % 2 == 1) y += (side_len * 1.732) / 2;
            return x, y;
        }

        return 0, 0;
    }

    private fun CalcRowColByPos(double x, double y) : int, int
    {
        var tile_type = this._user_info.tile_map.tile_type;
    	var side_len = this._user_info.tile_map.side_len;

        // 正方形
        if (tile_type == ALittle.TileType.SQUARE)
        {
            var row = ALittle.Math_Floor(x / side_len);
            var col = ALittle.Math_Floor(y / side_len);
            return row + 1, col + 1;
        }

        // 如果是水平正六边形，那么就转为垂直正六边形
        if (tile_type == ALittle.TileType.HEX_H)
        {
            tile_type = ALittle.TileType.HEX_V;
            var tmp = y;
            y = x;
            x = tmp;
        }
        
        // 处理垂直正六边形
        if (tile_type == ALittle.TileType.HEX_V)
        {
            var half_width = side_len * 1.732 / 2;
            var split_x = ALittle.Math_Floor(x / half_width);
            var offset_x = x - split_x * half_width;

            if (split_x % 2 == 0)
            {
                var split_y = ALittle.Math_Floor(y / (side_len * 3));
                var offset_y = y - split_y * (side_len * 3);
                // 把纵向以如下单位进行切割
                // 1 | / |
                // 2 ||  |
                // 3 | \ |
                // 4 | | |

                // 第一段，直线方程： y = -1 / 1.732*x + side_len / 2
                if (offset_y < side_len / 2)
                {
                    var row = split_y * 2;
                    var col = ALittle.Math_Floor(split_x / 2);

                    var test_y = -1 / 1.732 * offset_x + side_len / 2;
                    if (offset_y < test_y)
                    {
                        row -= 1;
                        col -= 1;
                    }

                    return row + 1, col + 1;
                }

                // 第二段，长方形
                if (offset_y < side_len * 3 / 2)
                {
                    var row = split_y * 2;
                    var col = ALittle.Math_Floor(split_x / 2);

                    return row + 1, col + 1;
                }

                // 第三段，直线方程： y = 1 / 1.732*x
                if (offset_y < side_len * 2)
                {
                    var row = split_y * 2;
                    var col = ALittle.Math_Floor(split_x / 2);

                    var test_y = 1 / 1.732 * offset_x;
                    if (offset_y - side_len * 3 / 2 > test_y)
                    {
                        row += 1;
                        col -= 1;
                    }
                    return row + 1, col + 1;
                }

                // 第四段，长方形
                {
                    var row = split_y * 2 + 1;
                    var col = ALittle.Math_Floor(split_x / 2) - 1;
                    return row + 1, col + 1;
                }
            }
            else
            {
                var split_y = ALittle.Math_Floor(y / (side_len * 3));
                var offset_y = y - split_y * (side_len * 3);
                // 把纵向以如下单位进行切割
                // 1 | \ |
                // 2 |  ||
                // 3 | / |
                // 4 ||  |

                // 第一段，直线方程： y = 1 / 1.732*x
                if (offset_y < side_len / 2)
                {
                    var row = split_y * 2;
                    var col = ALittle.Math_Floor(split_x / 2);

                    var test_y = 1 / 1.732 * offset_x;
                    if (offset_y < test_y )
                    {
                        row -= 1;
                    }
                    return row + 1, col + 1;
                }

                // 第二段，长方形
                if (offset_y < side_len * 3 / 2)
                {
                    var row = split_y * 2;
                    var col = ALittle.Math_Floor(split_x / 2);

                    return row + 1, col + 1;
                }

                // 第三段，直线方程： y = -1 / 1.732*x + side_len / 2
                if (offset_y < side_len * 2)
                {
                    var row = split_y * 2;
                    var col = ALittle.Math_Floor(split_x / 2);

                    var test_y = -1 / 1.732 * offset_x + side_len / 2;
                    if (offset_y - side_len * 3 / 2 > test_y)
                    {
                        row += 1;
                    }
                    return row + 1, col + 1;
                }

                // 第四段，长方形
                {
                    var row = split_y * 2 + 1;
                    var col = ALittle.Math_Floor(split_x / 2);
                    return row + 1, col + 1;
                }
            }
        }

        return 0, 0;
    }

    private fun CreateGrid() : ALittle.DisplayObject
    {
        var tile_type = this._user_info.tile_map.tile_type;
    	var side_len = this._user_info.tile_map.side_len;

        if (tile_type == ALittle.TileType.SQUARE)
        {
            var cell = new ALittle.DisplayLayout(g_Control);
            cell.width = this.CalcCellWidth();
            var grid = g_Control.CreateControl{ALittle.DisplayObject}("ide_tile_square_grid");
            grid.width = side_len;
            grid.height = side_len;
            cell.AddChild(grid);
            return cell;
        }

        if (tile_type == ALittle.TileType.HEX_V)
        {
            var cell = new ALittle.DisplayLayout(g_Control);
            cell.width = this.CalcCellWidth();
            var grid = g_Control.CreateControl{ALittle.DisplayObject}("ide_tile_hex_v_grid");
            grid.width = side_len * 1.732;
            grid.height = side_len * 2;
            cell.AddChild(grid);
            return cell;
        }

        if (tile_type == ALittle.TileType.HEX_H)
        {
            var cell = new ALittle.DisplayLayout(g_Control);
            cell.width = this.CalcCellWidth();
            var grid = g_Control.CreateControl{ALittle.DisplayObject}("ide_tile_hex_h_grid");
            grid.width = side_len * 2;
            grid.height = side_len * 1.732;
            cell.AddChild(grid);
            return cell;
        }

        return null;
    }

    private fun CreateImage() : ALittle.DisplayObject
    {
        var tile_type = this._user_info.tile_map.tile_type;
    	var side_len = this._user_info.tile_map.side_len;

        if (tile_type == ALittle.TileType.SQUARE)
        {
            var cell = new ALittle.DisplayLayout(g_Control);
            cell.width = this.CalcCellWidth();
            var grid = new ALittle.Image(g_Control);
            cell._user_data = grid;
            grid.width = this._user_info.tile_map.tile_width;
            grid.height = this._user_info.tile_map.tile_height;
            grid.x = this._user_info.tile_map.tile_x;
            grid.y = this._user_info.tile_map.tile_y;
            cell.AddChild(grid);
            return cell;
        }

        if (tile_type == ALittle.TileType.HEX_V)
        {
            var cell = new ALittle.DisplayLayout(g_Control);
            cell.width = this.CalcCellWidth();
            var grid = new ALittle.Image(g_Control);
            cell._user_data = grid;
            grid.width = this._user_info.tile_map.tile_width;
            grid.height = this._user_info.tile_map.tile_height;
            grid.x = this._user_info.tile_map.tile_x;
            grid.y = this._user_info.tile_map.tile_y;
            cell.AddChild(grid);
            return cell;
        }

        if (tile_type == ALittle.TileType.HEX_H)
        {
            var cell = new ALittle.DisplayLayout(g_Control);
            cell.width = this.CalcCellWidth();
            var grid = new ALittle.Image(g_Control);
            cell._user_data = grid;
            grid.width = this._user_info.tile_map.tile_width;
            grid.height = this._user_info.tile_map.tile_height;
            grid.x = this._user_info.tile_map.tile_x;
            grid.y = this._user_info.tile_map.tile_y;
            cell.AddChild(grid);
            return cell;
        }

        return null;
    }
}
