
namespace ALittleIDE;

protected struct IDEUITileBrushInfo
{
    ALittle.Image _image;
    ALittle.DisplayLayout _item;
    string tex_path;		// 模块下Texture下的路径
    string module_path;	// 模块的相对路径
}

protected struct IDEUITileLayerInfo
{
    ALittle.TextRadioButton _button;
    ALittle.DisplayLayout _item;
    ALittle.Image _see_image;
    ALittle.TileLayer _layer;

    IDETileTreeUserInfo _user_info;
    ALittle.Linear _linear_1;
    ALittle.Linear _linear_2;
}

protected class IDEUITileBrushEdit : ALittle.DisplayLayout
{
	private ALittle.ScrollList _brush_list;
	private ALittle.DisplayLayout _layer_container;

    public fun TCtor()
    {
        g_IDEProject.AddEventListener(this, this.HandleProjectOpen);
        g_IDEProject.AddEventListener(this, this.HandleProjectClose);
    }

    public get layer_container() : ALittle.DisplayLayout { return this._layer_container; }

    private fun HandleClearBrushClick(ALittle.UIClickEvent event)
    {
        this._brush_list.RemoveAllChild();
    }

    private fun HandleProjectOpen(IDEProjectOpenEvent event)
    {
        this._brush_list.RemoveAllChild();
    }

    public fun HandleProjectClose(IDEProjectCloseEvent event)
    {
        this._brush_list.RemoveAllChild();
    }

    public fun AddBrushList(List<string> module_path_list, List<string> tex_path_list, bool ctrl)
    {
        if (!ctrl) this._brush_list.RemoveAllChild();

        for (var index, module_path in module_path_list)
        {
            var tex_path = tex_path_list[index];
            var info = new IDEUITileBrushInfo();
            info._item = g_Control.CreateControl{ALittle.DisplayLayout}("ide_tile_brush_item", info);
            info._image.SetTextureCut(module_path, 0, 0, true);
            info.tex_path = tex_path;
            info.module_path = module_path;
            info._item._user_data = info;
            this._brush_list.AddChild(info._item);
        }
    }

    public fun GetBrush() : IDEUITileBrushInfo
    {
        var child_count = this._brush_list.child_count;
        if (child_count == 0) return null;
        if (child_count == 1) return this._brush_list.childs[1]._user_data;

        var index = ALittle.Math_RandomInt(1, child_count);
        return this._brush_list.childs[index]._user_data;
    }
}

protected class IDEUITileLayerEdit : ALittle.DisplayLayout
{
    private ALittle.ScrollList _layer_list;
    private ALittle.TextRadioButtonGroup _group = new ALittle.TextRadioButtonGroup();

    private IDETileTabChild _tab_child;
    private IDETileTreeUserInfo _user_info;

    public fun Init(IDETileTabChild tab_child, IDETileTreeUserInfo user_info)
    {
        this._tab_child = tab_child;
        this._user_info = user_info;

        for (var index, layer in user_info.tile_map.layer_list)
        {
            var info = new IDEUITileLayerInfo();
            info._user_info = this._user_info;

            info._item = g_Control.CreateControl{ALittle.DisplayLayout}("ide_tile_layer_item", info);
            info._button.text = layer.name;
            info._button.group = this._group;
            info._button._user_data = info;
            info._button.AddEventListener(this, this.HandleRButtonDown);
            info._item._user_data = info;
            this._layer_list.AddChild(info._item);

            info._layer = layer;
            info._linear_1, info._linear_2 = this._tab_child.GetLayer(index);
        }

        if (this._layer_list.child_count > 0)
        {
            var info = cast<IDEUITileLayerInfo>(this._layer_list.childs[this._layer_list.child_count]._user_data);
            info._button.selected = true;
        }
    }

    public get layer_list() : ALittle.ScrollList { return this._layer_list; }

    public fun GetCurLayerInfo() : IDEUITileLayerInfo, int
    {
        for (var index, child in this._layer_list.childs)
        {
            var info = cast<IDEUITileLayerInfo>(child._user_data);
            if (info._button.selected) return info, index;
        }
        return null, null;
    }

    private async fun HandleAddLayerClick(ALittle.UIClickEvent event)
    {
        var x, y = event.target.LocalToGlobal();
        var name = g_AUITool.ShowRename("", x, y + event.target.height, 200);
        if (name == null || name == "") return;

        var info = new IDEUITileLayerInfo();
        info._user_info = this._user_info;

        info._item = g_Control.CreateControl{ALittle.DisplayLayout}("ide_tile_layer_item", info);
        info._button.text = name;
        info._button.group = this._group;
        info._button._user_data = info;
        info._button.AddEventListener(this, this.HandleRButtonDown);
        info._item._user_data = info;
        this._layer_list.AddChild(info._item);

        if (this._layer_list.child_count == 1) info._button.selected = true;

        info._layer = new ALittle.TileLayer();
        info._layer.name = name;
        info._layer.cell_map = new Map<int, Map<int, ALittle.TileCell>>();
        ALittle.List_Push(this._user_info.tile_map.layer_list, info._layer);

        info._linear_1, info._linear_2 = this._tab_child.CreateLayer();

        var revoke = new IDETileAddLayerRevoke(this._tab_child, info);
        this._tab_child.revoke_list.PushRevoke(revoke);
        this._tab_child.save = false;
    }

    private fun HandleRButtonDown(ALittle.UIRButtonDownEvent event)
    {
        var info = cast<IDEUITileLayerInfo>(event.target._user_data);

        var menu = new AUIPlugin.AUIRightMenu();
        menu.AddItem("重命名", bind(this.HandleRenameLayer, this, info));
        menu.AddItem("删除", bind(this.HandleDeleteLayer, this, info));
        menu.AddItem("上移", bind(this.HandleUpLayer, this, info));
        menu.AddItem("下移", bind(this.HandleDownLayer, this, info));
        if (info._see_image.visible)
            menu.AddItem("隐藏", bind(this.HandleHideLayer, this, info));
        else
            menu.AddItem("显示", bind(this.HandleShowLayer, this, info));
        menu.Show();
    }

    private async fun HandleRenameLayer(IDEUITileLayerInfo info)
    {
        var x, y = info._button.LocalToGlobal();
        var name = g_AUITool.ShowRename(info._button.text, x, y + info._button.height, 200);
        if (name == null || name == "") return;

        var old_name = info._layer.name;
        info._button.text = name;
        info._layer.name = name;

        var revoke = new IDETileRenameLayerRevoke(this._tab_child, info, old_name, name);
        this._tab_child.revoke_list.PushRevoke(revoke);
        this._tab_child.save = false;
    }

    private async fun HandleDeleteLayer(IDEUITileLayerInfo info)
    {
        if (g_AUITool.DeleteNotice("删除", "确定要删除该图层吗?") != AUIPlugin.AUIToolOption.YES) return;

        var index = this._layer_list.GetChildIndex(info._item);
        this._layer_list.RemoveChild(info._item);

        if (info._button.selected && this._layer_list.child_count > 0) cast<IDEUITileLayerInfo>(this._layer_list.childs[1]._user_data)._button.selected = true;

        ALittle.List_Remove(info._user_info.tile_map.layer_list, index);
        this._tab_child.RemoveLayer(info._linear_1, info._linear_2);

        var revoke = new IDETileDeleteLayerRevoke(this._tab_child, info, index);
        this._tab_child.revoke_list.PushRevoke(revoke);
        this._tab_child.save = false;
    }

    private fun HandleUpLayer(IDEUITileLayerInfo info)
    {
        var index = this._layer_list.GetChildIndex(info._item);
        if (index == null || index == 1) return;

        this._layer_list.SetChildIndex(info._item, index - 1);

        ALittle.List_Remove(info._user_info.tile_map.layer_list, index);
        ALittle.List_Insert(info._user_info.tile_map.layer_list, index - 1, info._layer);
        this._tab_child.SetLayerIndex(info._linear_1, info._linear_2, index);

        var revoke = new IDETileSetLayerIndexRevoke(this._tab_child, info, index, index - 1);
        this._tab_child.revoke_list.PushRevoke(revoke);
        this._tab_child.save = false;
    }

    private fun HandleDownLayer(IDEUITileLayerInfo info)
    {
        var index = this._layer_list.GetChildIndex(info._item);
        if (index == null || index == this._layer_list.child_count) return;

        this._layer_list.SetChildIndex(info._item, index + 1);

        ALittle.List_Remove(info._user_info.tile_map.layer_list, index);
        ALittle.List_Insert(info._user_info.tile_map.layer_list, index + 1, info._layer);
        this._tab_child.SetLayerIndex(info._linear_1, info._linear_2, index + 1);

        var revoke = new IDETileSetLayerIndexRevoke(this._tab_child, info, index, index + 1);
        this._tab_child.revoke_list.PushRevoke(revoke);
        this._tab_child.save = false;
    }

    private fun HandleHideLayer(IDEUITileLayerInfo info)
    {
        info._see_image.visible = false;
        info._linear_1.visible = false;
        info._linear_2.visible = false;
    }

    private fun HandleShowLayer(IDEUITileLayerInfo info)
    {
        info._see_image.visible = true;
        info._linear_1.visible = true;
        info._linear_2.visible = true;
    }
}
