
namespace ALittleIDE;

public class IDEUITileBrushList : ALittle.DisplayLayout
{
    private AUIPlugin.AUIFileSelectLayout _file_select;

    public fun TCtor()
    {
        g_IDEProject.AddEventListener(this, this.HandleProjectOpen);
        g_IDEProject.AddEventListener(this, this.HandleProjectClose);

        this._file_select.Init(["png","jpg"]);
        this._file_select.AddEventListener(this, this.HandleImageSelect);
        this._file_select.AddEventListener(this, this.HandleImageListSelect);
    }

	private fun HandleProjectClose(IDEProjectCloseEvent event)
	{
        this._file_select.SetBasePath(null);
    }

	private async fun HandleProjectOpen(IDEProjectOpenEvent event)
	{
		var module_path = ALittle.File_BaseFilePath().."Module/"..event.name.."/Texture";
        this._file_select.SetBasePath(module_path);
    }

    private fun HandleImageSelect(AUIPlugin.AUIFileSelectFileClickUIEvent event)
    {
        var module_path_list = new List<string>();
        var tex_path_list = new List<string>();

        module_path_list[1] = this._file_select.base_path.."/"..event.path;
        tex_path_list[1] = event.path;
        g_IDECenter.center.tile_brush_edit.AddBrushList(module_path_list, tex_path_list, event.ctrl);
    }

    private fun HandleImageListSelect(AUIPlugin.AUIFileSelectDirClickUIEvent event)
    {
        var module_path_list = new List<string>();
        var tex_path_list = new List<string>();
        var path_prefix = this._file_select.base_path.."/";

        var name_map = ALittle.File_GetNameListByDir(path_prefix..event.path);
        for (var name, attr in name_map)
        {
            if (!attr.directory)
            {
                ALittle.List_Push(module_path_list, path_prefix..event.path.."/"..name);
                ALittle.List_Push(tex_path_list, event.path.."/"..name);
            }
        }

        g_IDECenter.center.tile_brush_edit.AddBrushList(module_path_list, tex_path_list, event.ctrl);
    }
}