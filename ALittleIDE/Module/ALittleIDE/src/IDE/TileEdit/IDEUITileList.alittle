
namespace ALittleIDE;

protected struct IDETileTreeUserInfo
{
    AUIPlugin.AUIFileTreeUserInfo info;	// 文件树中的信息
    string module_name;	// 所属模块名
    ALittle.TileMap tile_map;	// 格子表
    Map<string, int> tex_id_map;
    int tex_id_max;
}

protected class IDEUITileList : AUIPlugin.AUIFileTreeLayout
{
    public fun TCtor()
    {
        g_IDEProject.AddEventListener(this, this.HandleProjectOpen);
        g_IDEProject.AddEventListener(this, this.HandleProjectClose);

        this.AddEventListener(this, this.HandleSelectFileEvent);
        this.AddEventListener(this, this.HandleDeleteFileEvent);
        this.AddEventListener(this, this.HandleCreateFileEvent);
        this.AddEventListener(this, this.HandleDeleteDirEvent);
    }

    private async fun HandleSelectFileEvent(AUIPlugin.AUIFileSelectFileEvent event)
    {
        var ui = g_IDEProject.project.ui[g_IDEProject.project.name];
        if (ui == null)
        {
            g_AUITool.ShowNotice("提示", "ui不存在");
            return;
        }

        var tile_map = ui.control.LoadMessageFromFile{ALittle.TileMap}(event.info.path);
        if (tile_map == null)
        {
            g_AUITool.ShowNotice("提示", "地图文件读取失败");
            return;
        }

        // 如果还未设置
        if (tile_map.tile_type == ALittle.TileType.NONE || tile_map.side_len <= 0)
        {
            g_IDETileSettingDialog.ShowDialog(tile_map);
            if (tile_map.tile_type == ALittle.TileType.NONE || tile_map.side_len <= 0)
            {
                g_AUITool.ShowNotice("提示", "请设置有效的格子类型和格子边长不能小于或等于0");
                return;
            }

            // 保存修改后的内容
            ui.control.WriteMessageToFile(tile_map, event.info.path);
        }

        var info = new IDETileTreeUserInfo();
        info.info = event.info;
        info.module_name = g_IDEProject.project.name;
        info.tile_map = tile_map;
        g_IDECenter.center.content_edit.StartEditTileBySelect(info.info.name, info);
    }

    private async fun HandleDeleteFileEvent(AUIPlugin.AUIFileDeleteFileEvent event)
    {
        var tab_child = g_IDECenter.center.content_edit.GetTabChildById{IDETileTabChild}(event.path);
        if (tab_child != null) return;
        g_IDECenter.center.content_edit.CloseTab(tab_child.tab_body);
    }

    private fun HandleCreateFileEvent(AUIPlugin.AUIFileCreateFileEvent event)
    {

    }

    private fun HandleDeleteDirEvent(AUIPlugin.AUIFileDeleteDirEvent event)
    {
        var map = g_IDECenter.center.content_edit.GetTabIdMap{IDETileTabChild}();
        for (var id, tab_child in map)
        {
            if (ALittle.String_Find(id, event.path) == 1)
                g_IDECenter.center.content_edit.CloseTab(tab_child.tab_body);
        }
    }

    private fun OnRightMenu(AUIPlugin.AUIFileTreeUserInfo user_info, AUIPlugin.AUIRightMenu menu)
    {
        menu.AddItem("设置", bind(this.ShowSetting, this, user_info));
    }

	private fun HandleProjectClose(IDEProjectCloseEvent event)
	{
		this._file_scroll_screen.RemoveAllChild();
    }

	private async fun HandleProjectOpen(IDEProjectOpenEvent event)
	{
		var module_path = ALittle.File_BaseFilePath().."Module/"..event.name.."/Tile";
        this.SetRoot(module_path, bind(this.OnRightMenu, this));
    }

    private async fun ShowSetting(AUIPlugin.AUIFileTreeUserInfo user_info)
    {
        // 设置之前请先关闭
        var tab_child = g_IDECenter.center.content_edit.GetTabChildById{IDETileTabChild}(user_info.path);
        if (tab_child != null)
        {
            g_AUITool.ShowNotice("提示", "请先关闭编辑页面再设置");
            return;
        }

        var ui = g_IDEProject.project.ui[g_IDEProject.project.name];
        if (ui == null)
        {
            g_AUITool.ShowNotice("提示", "ui不存在");
            return;
        }

        var tile_map = ui.control.LoadMessageFromFile{ALittle.TileMap}(user_info.path);
        if (tile_map == null)
        {
            g_AUITool.ShowNotice("提示", "地图文件读取失败");
            return;
        }

        if (!g_IDETileSettingDialog.ShowDialog(tile_map)) return;
        
        var error = ui.control.WriteMessageToFile(tile_map, user_info.path);
        if (error != null)
        {
            g_AUITool.ShowNotice("提示", "保存失败:"..error);
            return;
        }
            
    }
}