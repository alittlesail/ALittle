
namespace ALittleIDE;

public class IDEAttrEventItem : ALittle.DisplayLayout
{
    private ALittle.ImageInput _name;
    private ALittle.ImageInput _handle;

    private IDEAttrEventDialog _dialog;
    
    public fun Init(IDEAttrEventDialog dialog, string name, string handle)
    {
        this._dialog = dialog;
        this._name.text = name;
        this._handle.text = handle;
    }
    
    private fun HandleDeleteClick(ALittle.UIClickEvent event)
    {
        this._dialog.DeleteItem(this);
    }

    public async fun HandleGotoClick(ALittle.UIClickEvent event)
    {
        var target_class = this._dialog.GetParentTargetClass();
        if (target_class == null) return;
    
        if (g_IDEProject.project.code == null) return;
        var info = g_IDEProject.project.code.FindGoto(target_class.."."..this._handle.text);
        if (info != null) g_IDECenter.center.code_list.OpenByFullPath(info.file_path, info.line_start, info.char_start, info.line_end, info.char_end);
    }

    public fun HandleNameChanged(ALittle.UIChangedEvent event)
    {
        if (g_IDEProject.project.code == null) return;
        g_AUICodeFilterScreen.ShowComplete(g_IDEProject.project.code, "", this._name);
    }

    public fun HandleHandleChanged(ALittle.UIChangedEvent event)
    {
        var target_class = this._dialog.GetParentTargetClass();
        if (target_class == null) return;
        if (g_IDEProject.project.code == null) return;
        g_AUICodeFilterScreen.ShowComplete(g_IDEProject.project.code, target_class, this._handle);
    }

    public fun GetContent() : string
    {
        if (this._name.text == "") return null;
        if (this._handle.text == "") return null;
        return this._name.text..":"..this._handle.text;
    }
}

public class IDEAttrEventDialog
{
    private ALittle.DisplayObject _dialog;
    private DisplayObjectS _target_panel;
    private string _target_text;
    private bool _target_need_reset;

    private ALittle.ScrollScreen _event_scroll_screen;

    private string _edit_old_text;
    private ALittle.RevokeList _revoke_list;

    ////////////////////////////////////////////////////////////////////////////////////////
    public fun ShowDialog(DisplayObjectS target_panel, string text, bool need_reset, [Nullable] double x, [Nullable] double y)
    {
        // 创建模态提示对话框，并添加到模态层
        if (this._dialog == null)
        {
            this._dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_event_edit_dialog", this);
            g_DialogLayer.AddChild(this._dialog);
        }
            // 显示提示对话框，设置标题和内容
        this._dialog.visible = true;
        this._dialog.MoveToTop();
        if (x != null) this._dialog.x = x;
        if (y != null) this._dialog.y = y;
        if (this._dialog.x + this._dialog.width > A_UISystem.view_width)
        	this._dialog.x = A_UISystem.view_width - this._dialog.width;
        if (this._dialog.y + this._dialog.height > A_UISystem.view_height)
        	this._dialog.y = A_UISystem.view_height - this._dialog.height;
        this._target_panel = target_panel;
        this._target_text = text;
        this._target_need_reset = need_reset;
        this.ResetText();
    }
    public fun HideDialog()
    {
        if (this._dialog == null) return;
        this._dialog.visible = false;
    }
    public fun IsShow() : bool
    {
        if (this._dialog == null) return false;
        return this._dialog.visible;
    }

    public fun GetParentTargetClass() : string
    {
        return this._target_panel.GetParentTargetClass();
    }

    private fun HandleAddItem(ALittle.UIClickEvent event)
    {
        var item = g_Control.CreateControl{IDEAttrEventItem}("ide_event_item");
        item.Init(this, "", "");
        this._event_scroll_screen.AddChild(item);
    }

    public fun DeleteItem(IDEAttrEventItem item)
    {
        this._event_scroll_screen.RemoveChild(item);
    }

    public fun HandleEventConfirm(ALittle.UIClickEvent event)
    {
        var content_list = new List<string>();
        for (var index, child in this._event_scroll_screen.childs)
        {
            var text = cast<IDEAttrEventItem>(child).GetContent();
            if (text != null) ALittle.List_Push(content_list, text);
        }
        var content = ALittle.String_Join(content_list, "\r\n");
        if (content == "")
        {
            this._dialog.visible = false;
            var object:ALittle.DisplayObject = cast<Map<string, any>>(this._target_panel)["_"..this._target_text];
            object.text = "";
            this._target_panel.TableDataSet(this._target_text, false);
            return;
        }
        var has_error = false;
        // 根据换行换行键拆分
        var event_list = ALittle.String_SplitSepList(content, ["\n", "\r"]);
        var event_data:List<ALittle.EventInfo> = null;
        for (var index, event_string in event_list)
        {
            if (event_data == null) event_data = new List<ALittle.EventInfo>();
            var event_info:ALittle.EventInfo = null;
            // 根据冒号拆分
            var event_split = ALittle.String_Split(ALittle.String_Trim(event_string), ":");
            var event_count = ALittle.List_Len(event_split);
            if (event_count == 2)
            {
                event_info = new ALittle.EventInfo();
                event_info.type = event_split[1];
                event_info.func = event_split[2];
            }

                // 如果是有效信息，那么就添加到列表中
            if (event_info != null)
                ALittle.List_Push(event_data, event_info);
            else
                has_error = true;
        }
    
        if (event_data == null || has_error)
        {
            g_AUITool.ShowNotice("警告", "事件编辑有错误，请检查");
            return;
        }
        this._dialog.visible = false;
        if (event_data == null) return;
        cast<ALittle.DisplayObject>(cast<Map<string, any>>(this._target_panel)["_"..this._target_text]).text = ALittle.String_JsonEncode(event_data);
        this._target_panel.TableDataSet(this._target_text, false);
    }

    public fun ResetText()
    {
        this._event_scroll_screen.RemoveAllChild();
        var info:List<ALittle.EventInfo> = cast<Map<string, any>>(this._target_panel.base)[this._target_text];
        if (info == null) info = cast<Map<string, any>>(this._target_panel.default)[this._target_text];
        if (info == null) info = new List<ALittle.EventInfo>();
        for (var index, event_info in info)
        {
            var item = g_Control.CreateControl{IDEAttrEventItem}("ide_event_item");
            item.Init(this, event_info.type, event_info.func);
            this._event_scroll_screen.AddChild(item);
        }
        this._revoke_list = new ALittle.RevokeList(10000);
    }

    public fun HandleEventKeyDown(ALittle.UIKeyDownEvent event) : bool
    {
        // 判定Ctrl键是否按下
        var ctrl = A_UISystem.sym_map[1073742048];
        if (ctrl == null) return false;
            // 判断Ctrl+Z
        var z = A_UISystem.sym_map[122];
        if (z)
            this._revoke_list.UndoRevoke();
    
        return true;
    }
}

protected var g_IDEAttrEventDialog = new IDEAttrEventDialog();