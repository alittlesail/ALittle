
namespace ALittleIDE;

public class IDEAntiFrameLinearItem : ALittle.DisplayLayout
{
	private IDEAntiPanel _panel;

	private ALittle.DisplayObject _frame_text;

	public fun Init(IDEAntiPanel panel, int frame)
	{
		this._panel = panel;
		this._frame_text.text = frame;
	}
}

public class IDEAntiFrameLinkItem : ALittle.DisplayLayout
{
	private IDEAntiPanel _panel;

	private ALittle.DisplayObject _link_input;
	private ALittle.DisplayObject _attribute_dropdown;
	private ALittle.DisplayObject _init_input;

	public fun Init(IDEAntiPanel panel, ALittle.LoopListInfo info)
	{
		this._panel = panel;

		if (info != null)
		{
			if (info.link != null)
				this._link_input.text = info.link;
			if (info.attribute != null)
				this._attribute_dropdown.text = info.attribute;
			if (info.init != null)
			{
				if (info.init == true)
					this._init_input.text = "true";
				elseif (info.init == false)
					this._init_input.text = "false";
				else
					this._init_input.text = info.init;
			}
		}
	}

	private fun HandleDeleteClick(ALittle.UIEvent event)
	{
		// 执行删除
		this._panel.RemoveAttr(this._panel.anti_link_linear.GetChildIndex(this));
	}

	private fun HandleLinkChanged(ALittle.UIEvent event)
	{
		var info = this._panel.GetCurLoopInfo();
		if (info == null) return;

		var child_index = this._panel.anti_link_linear.GetChildIndex(this);
		if (child_index <= 0) return;

		var child = info.childs[child_index];
		child.link = this._link_input.text;

		this._panel.tab_child.save = false;
	}

	private fun HandleAttributeChanged(ALittle.UIEvent event)
	{
		var info = this._panel.GetCurLoopInfo();
		if (info == null) return;

		var child_index = this._panel.anti_link_linear.GetChildIndex(this);
		if (child_index <= 0) return;

		var child = info.childs[child_index];
		child.attribute = this._attribute_dropdown.text;
		if (this._init_input.text == "")
		{
			child.init = null;
		}
		else
		{
			if (this._attribute_dropdown.text == "visible"
				|| this._attribute_dropdown.text == "disabled")
				child.init = this._init_input.text == "true";
			else
				child.init = ALittle.Math_ToDouble(this._init_input.text);
		}

		this._panel.tab_child.save = false;
	}

	private fun HandleInitChanged(ALittle.UIEvent event)
	{
		var info = this._panel.GetCurLoopInfo();
		if (info == null) return;

		var child_index = this._panel.anti_link_linear.GetChildIndex(this);
		if (child_index <= 0) return;

		var child = info.childs[child_index];
		if (this._init_input.text == "")
		{
			child.init = null;
		}
		else
		{
			if (this._attribute_dropdown.text == "visible"
				|| this._attribute_dropdown.text == "disabled")
				child.init = this._init_input.text == "true";
			else
				child.init = ALittle.Math_ToDouble(this._init_input.text);
		}
		this._panel.tab_child.save = false;
	}
}

public class IDEAntiFrameLoopItem : ALittle.DisplayLayout
{
	private IDEAntiFrameAntiItem _item;
	private ALittle.DisplayObject _bg_quad;
	private ALittle.DisplayObject _button;	// 用于操作
	private ALittle.LoopChildInfo _info;

	public fun Init(IDEAntiFrameAntiItem item, ALittle.LoopChildInfo info)
	{
		this._item = item;
		this._button.drag_trans_target = this._item.panel.anti_screen;
		this._bg_quad.drag_trans_target = this._item.panel.anti_screen;
		this._info = info;

		this._button.group = this._item.panel.loop_group;

		this.UpdateText();
		this.UpdateShow();
	}

	public get info() : ALittle.LoopChildInfo
	{
		return this._info;
	}

	public get button() : ALittle.DisplayObject
	{
		return this._button;
	}

	public get item() : IDEAntiFrameAntiItem
	{
		return this._item;
	}

	public fun UpdateText()
	{
		var value = "null";
		if (this._info.target == true)
			value = "true";
		elseif (this._info.target == false)
			value = "false";
		else
			value = ALittle.String_ToString(this._info.target);

		if (this._info.clazz == "LoopLinear")
			this._button.text = "L("..value..")";
		elseif (this._info.clazz == "LoopAttribute")
			this._button.text = "A("..value..")";
		elseif (this._info.clazz == "LoopRit")
			this._button.text = "R("..value..")";
	}

	public fun UpdateShow()
	{
		var width = this._item.CalcWidthByTime(this._info.total_time + this._info.delay_time);
		this._button.width = this._item.CalcWidthByTime(this._info.total_time);
		if (this._button.width < this._item.panel._MIN_WIDTH)
			this._button.width = this._item.panel._MIN_WIDTH;
		if (width < this._button.width)
			this._button.x_value = (width - this._button.width) / 2;
		else
			this._button.x_value = 0;

		this.width = width;
	}

	public get info() : ALittle.LoopChildInfo
	{
		return this._info;
	}

	private fun HandleButtonChanged(ALittle.UIEvent event)
	{
		this._item.panel.ShowAntiLoop(this);
	}

	private fun HandleKeyDown(ALittle.UIKeyDownEvent event)
	{
		if (event.sym == 1073741904)
		{
			// 左键
			var child_index = this._item.container.GetChildIndex(this);
			if (child_index > 1)
			{
				-- child_index;
				var item = cast<IDEAntiFrameLoopItem>(this._item.container.GetChildByIndex(child_index));
				item._button.selected = true;
				this._item.panel.ShowAntiLoop(item);
				item._button.focus = true;
			}
			event.handled = true;
		 }
		 elseif (event.sym == 1073741903)
		 {
			 // 右键
			 var child_index = this._item.container.GetChildIndex(this);
			 if (child_index < this._item.container.child_count)
			 {
				 ++ child_index;
				 var item = cast<IDEAntiFrameLoopItem>(this._item.container.GetChildByIndex(child_index));
				 item._button.selected = true;
				 this._item.panel.ShowAntiLoop(item);
				 item._button.focus = true;
			 }
			 event.handled = true;
		 }
	}

	private fun HandleRButtonDown(ALittle.UIEvent event)
	{
		g_IDECenter.center.control_anti.ShowAntiLoopMenu(this);
	}

	public static ValueToString(any value) : string
	{
		if (value == null) return "";
		if (value == true) return "true";
		if (value == false) return "false";
		return ALittle.String_ToString(value);
	}

	public static StringToValue(string attribute, string value) : any
	{
		if (value == "") return null;

		if (attribute == "visible" || attribute == "disabled")
		{
			if (value == "true")
				return true;
			else
				return false;
		}
		else
		{
			return ALittle.Math_ToDouble(value);
		}
	}

	public fun SetTargetValue(string text)
	{
		var old_value = this._info.target;
		this._info.target = IDEAntiFrameLoopItem.StringToValue(this._item.info.attribute, text);

		this.UpdateText();

		if (old_value != this._info.target)
		{
			var old_value_string = IDEAntiFrameLoopItem.ValueToString(old_value);
			var new_value_string = IDEAntiFrameLoopItem.ValueToString(this._info.target);

			var revoke = new IDEAntiLoopTargetValueChangeRevoke(this, old_value_string, new_value_string);
			this._item.panel.tab_child.revoke_list.PushRevoke(revoke);
			this._item.panel.tab_child.save = false;
		}
	}

	public fun SetTotalTime(int time)
	{
		if (this._info.total_time == time) return;
		var old_time = this._info.total_time;
		this._info.total_time = time;
		if (this._info.total_time == null) this._info.total_time = 0;
		this.UpdateShow();
		this.DispatchEvent(new ALittle.UIResizeEvent());


		var revoke = new IDEAntiLoopTotalTimeChangeRevoke(this, old_time, this._info.total_time);
		this._item.panel.tab_child.revoke_list.PushRevoke(revoke);
		this._item.panel.tab_child.save = false;
	}

	public fun SetDelayTime(int time)
	{
		if (this._info.delay_time == time) return;

		var old_time = this._info.delay_time;
		this._info.delay_time = time;
		if (this._info.delay_time == null)
		{
			if (this._info.clazz == "LoopAttribute")
				this._info.delay_time = 1;
			else
				this._info.delay_time = 0;
		}
		this.UpdateShow();
		this.DispatchEvent(new ALittle.UIResizeEvent());

		var revoke = new IDEAntiLoopDelayTimeChangeRevoke(this, old_time, this._info.delay_time);
		this._item.panel.tab_child.revoke_list.PushRevoke(revoke);
		this._item.panel.tab_child.save = false;
	}
}

public class IDEAntiFrameAntiItem : ALittle.DisplayLayout
{
	private IDEAntiPanel _panel;
	private ALittle.Linear _container;
	private ALittle.LoopListInfo _info;
	private ALittle.DisplayObject _bg_quad;

	public fun Init(IDEAntiPanel panel, ALittle.LoopListInfo info)
	{
		this._panel = panel;
		this._bg_quad.drag_trans_target = this._panel.anti_screen;
		this._info = info;
		if (this._info.childs == null) this._info.childs = new List<ALittle.LoopChildInfo>();

		// 初始化对应的控件
		for (var index, child in this._info.childs)
		{
			var loop_item = g_Control.CreateControl{IDEAntiFrameLoopItem}("ide_anti_screen_loop_item");
			loop_item.Init(this, child);
			this._container.AddChild(loop_item);
		}
	}

	public get panel() : IDEAntiPanel
	{
		return this._panel;
	}

	public get info() : ALittle.LoopListInfo
	{
		return this._info;
	}

	public get container() : ALittle.Linear
	{
		return this._container;
	}

	public fun CalcTimeByWidth(double width) : int
	{
		return ALittle.Math_Floor(width / this._panel._FRAME_WIDTH * this._panel._FRAME_TIME);
	}

	public fun CalcWidthByTime(int time) : double
	{
		return time / this._panel._FRAME_TIME * this._panel._FRAME_WIDTH;
	}

	public fun HandleBgRButtonDown(ALittle.UIRButtonDownEvent event)
	{
		var child_index = this._panel.anti_anti_linear.GetChildIndex(this);
		if (child_index <= 0) return;
		g_IDECenter.center.control_anti.ShowAntiAntiMenu(this, child_index, event.rel_x);
	}

	public fun Insert(double rel_x, string clazz)
	{
		var child = new ALittle.LoopChildInfo();
		child.clazz = clazz;
		if (this._info.attribute == "visible" || this._info.attribute == "disabled")
			child.target = true;
		else
			child.target = 0;
		if (clazz == "LoopLinear" || clazz == "LoopRit")
		{
			child.delay_time = 0;
			child.total_time = this.CalcTimeByWidth(rel_x - (this._container.x + this._container.width));
		}
		elseif (clazz == "LoopAttribute")
		{
			child.delay_time = this.CalcTimeByWidth(rel_x - (this._container.x + this._container.width));
			if (child.delay_time <= 0) child.delay_time = 1;
			child.total_time = 0;
		}
		else
			return;

		ALittle.List_Push(this._info.childs, child);

		var loop_item = g_Control.CreateControl{IDEAntiFrameLoopItem}("ide_anti_screen_loop_item");
		loop_item.Init(this, child);
		this._container.AddChild(loop_item);

		var revoke = new IDEAntiInsertLoopRevoke(this, child, loop_item, ALittle.List_Len(this._info.childs));
		this._panel.tab_child.revoke_list.PushRevoke(revoke);

		loop_item.button.selected = true;
		this._panel.ShowAntiLoop(loop_item);
        
		this._panel.tab_child.save = false;
	}
    
	public fun ClearLoop()
	{
		if (this._container.child_count == 0) return;
		this._panel.HideAntiLoop();

		var loop_item_list = new List<IDEAntiFrameLoopItem>();
		for (var index, child in this._container.childs)
			loop_item_list[index] = cast<IDEAntiFrameLoopItem>(child);
		var revoke = new IDEAntiClearLoopRevoke(this, this._info.childs, loop_item_list);
		this._panel.tab_child.revoke_list.PushRevoke(revoke);
        
		this._info.childs = new List<ALittle.LoopChildInfo>();
		this._container.RemoveAllChild();
        
		this._panel.tab_child.save = false;
	}

	public fun InsertBefore(IDEAntiFrameLoopItem loop_item, string clazz)
	{
		var child = new ALittle.LoopChildInfo();
		child.clazz = clazz;
		if (this._info.attribute == "visible" || this._info.attribute == "disabled")
			child.target = true;
		else
			child.target = 0;
		if (clazz == "LoopLinear" || clazz == "LoopRit")
		{
			child.delay_time = 0;
			child.total_time = this._panel._INIT_TIME;
		}
		elseif (clazz == "LoopAttribute")
		{
			child.delay_time = this._panel._INIT_TIME;
			child.total_time = 0;
		}
		else
			return;
        
		var child_index = this._container.GetChildIndex(loop_item);
        
		ALittle.List_Insert(this._info.childs, child_index, child);
        
		loop_item = g_Control.CreateControl{IDEAntiFrameLoopItem}("ide_anti_screen_loop_item");
		loop_item.Init(this, child);
		this._container.AddChild(loop_item, child_index);

		var revoke = new IDEAntiInsertLoopRevoke(this, child, loop_item, child_index);
		this._panel.tab_child.revoke_list.PushRevoke(revoke);
        
		loop_item.button.selected = true;
		this._panel.ShowAntiLoop(loop_item);
        
		this._panel.tab_child.save = false;
	}
    
	public fun DeleteLoop(IDEAntiFrameLoopItem loop_item)
	{     
		this._panel.HideAntiLoop(loop_item);

		var child_index = this._container.GetChildIndex(loop_item);
		if (child_index <= 0) return;
   
		var child = this._info.childs[child_index];
		ALittle.List_Remove(this._info.childs, child_index);
		this._container.RemoveChild(loop_item);
        
		var revoke = new IDEAntiDeleteLoopRevoke(this, child, loop_item, child_index);
		this._panel.tab_child.revoke_list.PushRevoke(revoke);
        
		this._panel.tab_child.save = false;
	}
}

public class IDEAntiPanel : ALittle.DisplayLayout
{
	private IDEUITabChild _tab_child;

	private ALittle.DisplayObject _new_btn;

	private ALittle.DisplayObject _handle_container;
	private ALittle.DisplayObject _add_btn;
	private ALittle.DisplayObject _copy_btn;

	private ALittle.ScrollList _anti_scroll_list;
	private Map<any, bool> _list_group;
	private Map<any, bool> _loop_group;

	private ALittle.ScrollScreen _anti_screen;
	private ALittle.Linear _anti_frame_linear;
	private ALittle.Linear _anti_link_linear;
	private ALittle.Linear _anti_anti_linear;
	private string _cur_show;

	private ALittle.DisplayLayout _loop_linear;
	private ALittle.DisplayObject _linear_target_value;
	private ALittle.DisplayObject _linear_total_time;
	private ALittle.DisplayObject _linear_delay_time;

	private ALittle.DisplayLayout _loop_rit;
	private ALittle.DisplayObject _rit_target_value;
	private ALittle.DisplayObject _rit_total_time;
	private ALittle.DisplayObject _rit_delay_time;

	private ALittle.DisplayLayout _loop_attribute;
	private ALittle.DisplayObject _attribute_target_value;
	private ALittle.DisplayObject _attribute_delay_time;

	private IDEAntiFrameLoopItem _cur_loop_item;
	private ALittle.LoopAnimation _cur_anti;

	private ALittle.Dialog _anti_dialog;
	private ALittle.DisplayView _anti_play_container;

	public double _FRAME_WIDTH;
	public int _FRAME_TIME;
	public int _INIT_TIME;
	public int _MIN_WIDTH;

	public fun TCtor()
	{
		this._handle_container.visible = false;

		this._loop_linear.visible = false;
		this._loop_attribute.visible = false;
		this._loop_rit.visible = false;
		this._cur_loop_item = null;

		this._FRAME_WIDTH = 40;
		this._FRAME_TIME = 50;
		this._INIT_TIME = 10;
		this._MIN_WIDTH = 10;
	}

	public get anti_link_linear() : ALittle.Linear { return this._anti_link_linear; }
	public get anti_anti_linear() : ALittle.Linear { return this._anti_anti_linear; }
	public get anti_screen() : ALittle.ScrollScreen { return this._anti_screen; }
	public get loop_group() : Map<any, bool> { return this._loop_group; }
	public get anti_scroll_list() : ALittle.ScrollList { return this._anti_scroll_list; }
	public get cur_show() : string { return this._cur_show; }
	public get cur_loop_item() : IDEAntiFrameLoopItem { return this._cur_loop_item; }
	public get linear_target_value() : ALittle.DisplayObject { return this._linear_target_value; }
	public get attribute_target_value() : ALittle.DisplayObject { return this._attribute_target_value; }
	public get rit_target_value() : ALittle.DisplayObject { return this._rit_target_value; }
	public get linear_total_time() : ALittle.DisplayObject { return this._linear_total_time; }
	public get rit_total_time() : ALittle.DisplayObject { return this._rit_total_time; }
	public get linear_delay_time() : ALittle.DisplayObject { return this._linear_delay_time; }
	public get attribute_delay_time() : ALittle.DisplayObject { return this._attribute_delay_time; }
	public get rit_delay_time() : ALittle.DisplayObject { return this._rit_delay_time; }

	// 初始化
	public fun Init(IDEUITabChild tab_child)
	{
		this._tab_child = tab_child;
		this._list_group = ALittle.CreateKeyWeakMap();
		this._loop_group = ALittle.CreateKeyWeakMap();

		var user_info = this._tab_child.tree_object.user_info;
		if (user_info.base.loop_map != null)
		{
			for (var name, info in user_info.base.loop_map)
			{
				var item = g_Control.CreateControl{ALittle.DisplayObject}("tree_item_radiobutton");
				item.text = name;
				item.group = this._list_group;
				item.AddEventListener(this, this.HandleAntiListItemRButtonDown);
				item.AddEventListener(this, this.HandleAntiListItemChanged);
				this._anti_scroll_list.AddChild(item);
			}
		}

		var static_object_hv = g_Control.CreateControl{ALittle.DisplayLayout}("ide_anti_screen_hv");

		var static_object_h = g_Control.CreateControl{ALittle.DisplayLayout}("ide_anti_screen_h", this);
		this._anti_frame_linear.x = static_object_hv.width;
		for (var frame = 0; frame <= 10000; 50)
		{
			var text = g_Control.CreateControl{IDEAntiFrameLinearItem}("ide_anti_screen_frame_item");
			text.width = this._FRAME_WIDTH;
			text.Init(this, frame);
			this._anti_frame_linear.AddChild(text);
		}
		static_object_h.width = this._anti_frame_linear.x + this._anti_frame_linear.width;

		var static_object_v = g_Control.CreateControl{ALittle.DisplayLayout}("ide_anti_screen_v", this);
		static_object_v.width = static_object_hv.width;
		static_object_v.height = static_object_hv.height;
		this._anti_link_linear.y = static_object_hv.height;

		this._anti_screen.static_object_h = static_object_h;
		this._anti_screen.static_object_hv = static_object_hv;
		this._anti_screen.static_object_v = static_object_v;

		this._anti_anti_linear.x = static_object_hv.width;
		this._anti_anti_linear.y = static_object_hv.height;
		this._anti_anti_linear.width = static_object_h.width - static_object_hv.width;

		this._anti_screen.AdjustScrollBar();

		if (this._anti_scroll_list.child_count > 0)
		{
			this._anti_scroll_list.childs[1].selected = true;
			this.ShowAnti(this._anti_scroll_list.childs[1].text);
		}
	}

	public get tab_child() : IDEUITabChild
	{
		return this._tab_child;
	}

	// 获取当前的动画数据
	public fun GetCurLoopInfo() : ALittle.LoopGroupInfo
	{
		if (this._cur_show == null) return null;

		// 检查重复
		var user_info = this._tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) return null;
		return user_info.base.loop_map[this._cur_show];
	}
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 新建一个动画
	public fun CreateAnti(string name)
	{
		// 检查重复
		var user_info = this._tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) user_info.base.loop_map = new Map<string, ALittle.LoopGroupInfo>();
		if (user_info.base.loop_map[name] != null)
		{
			g_AUITool.ShowNotice("错误", "动画名称已存在");
			return;
		}

		// 初始化信息
		var root = new ALittle.LoopGroupInfo();
		root.childs = new List<ALittle.LoopListInfo>();
		user_info.base.loop_map[name] = root;

		// 创建控件
		var item = g_Control.CreateControl{ALittle.DisplayObject}("tree_item_radiobutton");
		item.text = name;
		item.group = this._list_group;
		item.AddEventListener(this, this.HandleAntiListItemRButtonDown);
		item.AddEventListener(this, this.HandleAntiListItemClick);
		this._anti_scroll_list.AddChild(item);

		item.selected = true;
		this.ShowAnti(name);

		var revoke = new IDECreateAntiRevoke(this, name, root, item);
		this._tab_child.revoke_list.PushRevoke(revoke);

		// 标记为还未保存
		this._tab_child.save = false;
	}

	// 删除一个动画
	public fun DeleteAnti(string name)
	{
		var user_info = this._tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) return;
		var root = user_info.base.loop_map[name];
		if (root == null) return;
		user_info.base.loop_map[name] = null;

		// 遍历列表来删除
		for (var index, item in this._anti_scroll_list.childs)
		{
			if (item.text == name)
			{
				item.group = null;
				this._anti_scroll_list.RemoveChild(item);
				var revoke = new IDEDeleteAntiRevoke(this, name, root, item, index);
				this._tab_child.revoke_list.PushRevoke(revoke);
				break;
			}
		}

		if (this._anti_scroll_list.child_count == 0)
			user_info.base.loop_map = null;

		// 标记为还未保存
		this._tab_child.save = false;

		if (this._cur_show == name)
		{
			if (this._anti_scroll_list.child_count == 0)
				this.HideAnti();
			else
			{
				this._anti_scroll_list.childs[1].selected = true;
				this.ShowAnti(this._anti_scroll_list.childs[1].text);
			}
		}
	}

	// 复制并新建一个动画
	public fun CopyAndNewAnti(string old_name, string new_name)
	{
		var user_info = this._tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) return;
		var root = user_info.base.loop_map[old_name];
		if (root == null) return;

		if (user_info.base.loop_map[new_name] != null)
		{
			g_AUITool.ShowNotice("错误", "新建的动画名称已存在");
			return;
		}

		// 初始化信息
		var new_root = ALittle.String_CopyTable(root);
		user_info.base.loop_map[new_name] = new_root;

		// 创建控件
		var item = g_Control.CreateControl{ALittle.DisplayObject}("ide_common_item_radiobutton");
		item.text = new_name;
		item.group = this._list_group;
		item.AddEventListener(this, this.HandleAntiListItemRButtonDown);
		item.AddEventListener(this, this.HandleAntiListItemClick);
		this._anti_scroll_list.AddChild(item);

		item.selected = true;
		this.ShowAnti(new_name);

		var revoke = new IDECreateAntiRevoke(this, new_name, new_root, item);
		this._tab_child.revoke_list.PushRevoke(revoke);
        
		// 标记为还未保存
		this._tab_child.save = false;
	}
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 显示动画编辑界面
	public fun ShowAnti(string name)
	{
		if (this._cur_show == name) return;
		this.HideAnti();

		// 获取对应的信息
		var user_info = this._tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) return;
		var info = user_info.base.loop_map[name];
		if (info == null) return;

		this._cur_show = name;

		var static_object_v = this._anti_screen.static_object_v;
		this._anti_link_linear.RemoveAllChild();
		this._anti_anti_linear.RemoveAllChild();
		for (var index, child in info.childs)
		{
			var anti_item = g_Control.CreateControl{IDEAntiFrameAntiItem}("ide_anti_screen_anti_item");
			anti_item.Init(this, child);
			this._anti_anti_linear.AddChild(anti_item);

			var link_item = g_Control.CreateControl{IDEAntiFrameLinkItem}("ide_anti_screen_link_item");
			link_item.Init(this, child);
			this._anti_link_linear.AddChild(link_item);
		}
		static_object_v.height = this._anti_link_linear.y + this._anti_link_linear.height;
		this._anti_screen.AdjustScrollBar();

		this._handle_container.visible = true;
	}

	// 隐藏当前动画编辑界面
	public fun HideAnti()
	{
		if (this._cur_show == null) return;
		this._cur_show = null;
		this._anti_anti_linear.RemoveAllChild();
		this._anti_link_linear.RemoveAllChild();
		this._anti_screen.static_object_v.height = this._anti_link_linear.y;
		this._anti_screen.AdjustScrollBar();

		this._handle_container.visible = false;

		this._loop_linear.visible = false;
		this._loop_attribute.visible = false;
		this._loop_rit.visible = false;
		this._cur_loop_item = null;
		if (this._cur_anti != null) { this._cur_anti.Stop(); this._cur_anti = null; }
		if (this._anti_dialog != null) { this._anti_dialog.visible = false; }
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 动画列表菜单
	public fun HandleAntiListItemRButtonDown(ALittle.UIEvent event)
	{
		g_IDECenter.center.control_anti.ShowAntiListMenu(this, event.target.text);
	}

	// 点击显示某个动画
	public fun HandleAntiListItemClick(ALittle.UIClickEvent event)
	{
		this.ShowAnti(event.target.text);
	}
	public fun HandleAntiListItemChanged(ALittle.UIChangedEvent event)
	{
		this.ShowAnti(event.target.text);
	}

	// 显示动画信件菜单
	public fun HandleNewClick(ALittle.UIEvent event)
	{
		g_IDECenter.center.control_anti.ShowNewAntiDialog(this);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public fun HandleCopyAttrLineClick(ALittle.UIEvent event)
	{
		if (this._cur_loop_item == null) return;
		var info = this.GetCurLoopInfo();
		if (info == null) return;
        
		var child = ALittle.String_CopyTable(this._cur_loop_item.item.info);
		ALittle.List_Push(info.childs, child);
        
		var anti_item = g_Control.CreateControl{IDEAntiFrameAntiItem}("ide_anti_screen_anti_item");
		anti_item.Init(this, child);
		this._anti_anti_linear.AddChild(anti_item);

		var link_item = g_Control.CreateControl{IDEAntiFrameLinkItem}("ide_anti_screen_link_item");
		link_item.Init(this, child);
		this._anti_link_linear.AddChild(link_item);
        
		var static_object_v = this._anti_screen.static_object_v;
		static_object_v.height = this._anti_link_linear.y + this._anti_link_linear.height;
		this._anti_screen.AdjustScrollBar();
        
		var revoke = new IDEAntiAddAttrRevoke(this, this._cur_show, child, anti_item, link_item);
		this._tab_child.revoke_list.PushRevoke(revoke);
        
		this._tab_child.save = false;
	}

	public fun HandleAddAttrClick(ALittle.UIEvent event)
	{
		// 获取对应的信息
		var user_info = this._tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) return;
		var info = user_info.base.loop_map[this._cur_show];
		if (info == null) return;

		var child = new ALittle.LoopListInfo();
		child.childs = new List<ALittle.LoopChildInfo>();
		child.attribute = "x";
		ALittle.List_Push(info.childs, child);
        
		var anti_item = g_Control.CreateControl{IDEAntiFrameAntiItem}("ide_anti_screen_anti_item");
		anti_item.Init(this, child);
		this._anti_anti_linear.AddChild(anti_item);

		var link_item = g_Control.CreateControl{IDEAntiFrameLinkItem}("ide_anti_screen_link_item");
		link_item.Init(this, child);
		this._anti_link_linear.AddChild(link_item);

		var static_object_v = this._anti_screen.static_object_v;
		static_object_v.height = this._anti_link_linear.y + this._anti_link_linear.height;
		this._anti_screen.AdjustScrollBar();

		var revoke = new IDEAntiAddAttrRevoke(this, this._cur_show, child, anti_item, link_item);
		this._tab_child.revoke_list.PushRevoke(revoke);

		this._tab_child.save = false;
	}

	public fun RemoveAttr(int child_index)
	{
		// 获取对应的信息
		var user_info = this._tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) return;
		var info = user_info.base.loop_map[this._cur_show];
		if (info == null) return;

		var child = info.childs[child_index];
		ALittle.List_Remove(info.childs, child_index);
		var anti_item = cast<IDEAntiFrameAntiItem>(this._anti_anti_linear.GetChildByIndex(child_index));
		this._anti_anti_linear.RemoveChild(anti_item);
		var link_item = cast<IDEAntiFrameLinkItem>(this._anti_link_linear.GetChildByIndex(child_index));
		this._anti_link_linear.RemoveChild(link_item);
		this._anti_screen.static_object_v.height = this._anti_link_linear.y + this._anti_link_linear.height;
		this._anti_screen.AdjustScrollBar();

		var revoke = new IDEAntiRemoveAttrRevoke(this, this._cur_show, child, anti_item, link_item, child_index);
		this._tab_child.revoke_list.PushRevoke(revoke);

		this._tab_child.save = false;
	}
        
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public fun ShowAntiLoop(IDEAntiFrameLoopItem loop_item)
	{
		var info = loop_item.info;
		if (info.clazz == "LoopLinear")
		{
			this._loop_linear.visible = true;
			this._loop_attribute.visible = false;
			this._loop_rit.visible = false;
			this._cur_loop_item = loop_item;

			if (info.target == null)
				this._linear_target_value.text = "";
			elseif (info.target == false)
				this._linear_target_value.text = "false";
			elseif (info.target == true)
				this._linear_target_value.text = "true";
			else
				this._linear_target_value.text = info.target;

			this._linear_total_time.text = info.total_time;
			this._linear_delay_time.text = info.delay_time;
		}
		elseif (info.clazz == "LoopLinear" || info.clazz == "LoopRit")
		{
			this._loop_rit.visible = true;
			this._loop_linear.visible = false;
			this._loop_attribute.visible = false;
			this._cur_loop_item = loop_item;

			if (info.target == null)
				this._rit_target_value.text = "";
			elseif (info.target == false)
				this._rit_target_value.text = "false";
			elseif (info.target == true)
				this._rit_target_value.text = "true";
			else
				this._rit_target_value.text = info.target;

			this._rit_total_time.text = info.total_time;
			this._rit_delay_time.text = info.delay_time;
		}
		elseif (info.clazz == "LoopAttribute")
		{
			this._loop_linear.visible = false;
			this._loop_attribute.visible = true;
			this._loop_rit.visible = false;
			this._cur_loop_item = loop_item;

			if (info.target == null)
				this._attribute_target_value.text = "";
			elseif (info.target == false)
				this._attribute_target_value.text = "false";
			elseif (info.target == true)
				this._attribute_target_value.text = "true";
			else
				this._attribute_target_value.text = info.target;

			this._attribute_delay_time.text = info.delay_time;
		}
	}

	public fun HideAntiLoop([Nullable] IDEAntiFrameLoopItem loop_item)
	{
		if (loop_item != null && this._cur_loop_item != loop_item) return;
		this._loop_linear.visible = false;
		this._loop_attribute.visible = false;
		this._loop_rit.visible = false;
		this._cur_loop_item = null;
	}

	public fun HandleDeleteLoopClick(ALittle.UIEvent event)
	{
		if (this._cur_loop_item != null)
		{
			this._cur_loop_item.item.DeleteLoop(this._cur_loop_item);
			this._cur_loop_item = null;
		}
		this.HideAntiLoop();
	}

	public fun HandleTargetValueChanged(ALittle.UIEvent event)
	{
		if (this._cur_loop_item == null) return;
		this._cur_loop_item.SetTargetValue(event.target.text);
	}

	public fun HandleTotalTimeChanged(ALittle.UIEvent event)
	{
		if (this._cur_loop_item == null) return;
		var time = ALittle.Math_ToInt(event.target.text);
		if (time == null || time < 0)
		{
			time = 0;
			event.target.text = time;
		}
		this._cur_loop_item.SetTotalTime(time);
	}
        
	public fun HandleDelayTimeChanged(ALittle.UIEvent event)
	{
		if (this._cur_loop_item == null) return;
		var time = ALittle.Math_ToInt(event.target.text);
		if (time == null || time < 0)
		{
			time = 0;
			event.target.text = time;
		}
		this._cur_loop_item.SetDelayTime(time);
	}
        
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private fun PlayImpl([Nullable] int loop)
	{
		var cur_loop_info = this.GetCurLoopInfo();
		if (cur_loop_info == null) return;
		// 直接保存
		var save = this._tab_child.save;
		this._tab_child.save = true;

		if (this._anti_dialog == null)
		{
			this._anti_dialog = g_Control.CreateControl{ALittle.Dialog}("ide_anti_play_dialog", this);
			this._anti_dialog.title = "动画播放窗口";
			this._anti_dialog.visible = false;
			g_DialogLayer.AddChild(this._anti_dialog);
		}

		if (save == false || this._cur_anti == null || this._anti_dialog.visible == false || this._anti_dialog._user_data != this._tab_child.name)
		{
			var map = new Map<string, ALittle.DisplayObject>();
            var ui_manager = g_IDEProject.GetUIManager(this._tab_child.module);
			var object = ui_manager.control.CreateControl{ALittle.DisplayObject}(this._tab_child.name, map);
			var anti = new ALittle.LoopAnimation(object, cur_loop_info);
			var error = anti.Init(map);
			if (error != null)
			{
				g_AUITool.ShowNotice("错误", error);
				return;
			}

			this._anti_play_container.RemoveAllChild();
			this._anti_play_container.AddChild(object);
			this._anti_dialog._user_data = this._tab_child.name;

			if (object.width_type != ALittle.UIEnumTypes.SIZE_ABS
				|| object.height_type != ALittle.UIEnumTypes.SIZE_ABS)
			{
				this._anti_dialog.width = g_IDEProject.project.config.GetConfig("default_show_width", 800);
				this._anti_dialog.height = g_IDEProject.project.config.GetConfig("default_show_height", 800);
			}
			else
			{
				this._anti_dialog.width = object.width + 10;
				this._anti_dialog.height = object.height + this._anti_dialog.head_size + 10;
			}
			if (this._anti_dialog.width < 300) this._anti_dialog.width = 300;
			if (this._anti_dialog.height < 300) this._anti_dialog.height = 300;

			if (this._anti_dialog.visible == false)
			{
				this._anti_dialog.x = (A_UISystem.view_width - this._anti_dialog.width) / 2;
				this._anti_dialog.y = (A_UISystem.view_height - this._anti_dialog.height) / 2;
			}
			this._anti_dialog.visible = true;

			this._cur_anti = anti;
		}

		this._cur_anti.SetTime(0);
		this._cur_anti.Play(loop);
	}

	public fun HandlePlayClick(ALittle.UIEvent event)
	{
		this.PlayImpl();
	}

	public fun HandleLoopPlayClick(ALittle.UIEvent event)
	{
		this.PlayImpl(-1);
	}

	public fun HandlePauseClick(ALittle.UIEvent event)
	{
		if (this._cur_anti != null)
			this._cur_anti.Pause();
	}
}

public class IDEUIControlAnti : ALittle.DisplayLayout
{
	private ALittle.Tab _main_tab;
	private ALittle.DisplayLayout _main_control;

	private ALittle.DisplayObject _new_anti_dialog;
	private ALittle.DisplayObject _new_anti_name_input;

	public fun Setup(ALittle.Tab tab, ALittle.DisplayLayout control)
	{
		this._main_tab = tab;
		this._main_control = control;

		// 添加第一个分页
		this._main_tab.SetChildText(this._main_control, "动画编辑器");
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public fun ShowNewAntiDialog(IDEAntiPanel panel)
	{
		if (this._new_anti_dialog == null)
		{
			this._new_anti_dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_new_anti_dialog", this);
			A_LayerManager.AddToModal(this._new_anti_dialog);
		}
		this._new_anti_dialog.visible = true;
		this._new_anti_name_input.text = "";
		this._new_anti_dialog._user_data = panel;
	}

	public fun HandleNewAntiCancel(ALittle.UIEvent event)
	{
		this._new_anti_dialog.visible = false;
		this._new_anti_dialog._user_data = null;
	}

	public fun HandleNewAntiConfirm(ALittle.UIEvent event)
	{
		this._new_anti_dialog.visible = false;
		var panel:IDEAntiPanel = this._new_anti_dialog._user_data;
		this._new_anti_dialog._user_data = null;
		panel.CreateAnti(this._new_anti_name_input.text);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public fun ShowAntiListMenu(IDEAntiPanel panel, string name)
	{
		var menu = new AUIPlugin.AUIRightMenu();
		menu.AddItem("复制并新建", bind(this.HandleAntiListRightMenuCopyAnNew, this, panel, name));
		menu.AddItem("删除", bind(panel.DeleteAnti, panel, name));
		menu.Show();
	}

	private async fun HandleAntiListRightMenuCopyAnNew(IDEAntiPanel panel, string name)
	{   
		var x:double, y:double;
		for (var index, child in panel.anti_scroll_list.childs)
		{
			if (child.text == name)
			{
				x, y = child.LocalToGlobal();
				break;
			}
		}

		var old_name = name;
		var new_name = g_AUITool.ShowRename(old_name, x, y, 200);
		if (new_name == null || old_name == new_name) return;
		
		panel.CopyAndNewAnti(old_name, new_name);
	}

	public fun ShowAntiAntiMenu(IDEAntiFrameAntiItem item, int child_index, double rel_x)
	{
		var menu = new AUIPlugin.AUIRightMenu();
		menu.AddItem("插入Linear", bind(item.Insert, item, rel_x, "LoopLinear"));
		menu.AddItem("插入Rit", bind(item.Insert, item, rel_x, "LoopRit"));
		menu.AddItem("插入Attribute", bind(item.Insert, item, rel_x, "LoopAttribute"));
		menu.AddItem("清空", bind(item.ClearLoop, item));
		menu.Show();
	}

	public fun ShowAntiLoopMenu(IDEAntiFrameLoopItem loop_item)
	{
		var menu = new AUIPlugin.AUIRightMenu();
		menu.AddItem("插入Linear", bind(loop_item.item.InsertBefore, loop_item.item, loop_item, "LoopLinear"));
		menu.AddItem("插入Rit", bind(loop_item.item.InsertBefore, loop_item.item, loop_item, "LoopRit"));
		menu.AddItem("插入Attribute", bind(loop_item.item.InsertBefore, loop_item.item, loop_item, "LoopAttribute"));
		menu.AddItem("清空", bind(loop_item.item.DeleteLoop, loop_item.item, loop_item));
		menu.Show();
	}
}