
namespace ALittleIDE;

//////////文本编辑撤销类//////////-
public class IDETextEditRevoke : ALittle.RevokeObject
{
	private ALittle.DisplayObject _target;
	private string _old_text;
	private string _new_text;
	
	// target 目标控件
	// old_text 旧的值
	// new_text 新的值
	public ctor(ALittle.DisplayObject target, string old_text, string  new_text)
	{
		this._target = target; // 目标控件
		this._old_text = old_text; // 旧的值
		this._new_text = new_text; // 新的值
	}

	public fun Forward()
	{
		this._target.text = this._new_text;
	}
	
	public fun Back()
	{
		this._target.text = this._old_text;
	}
}
	//////////删除撤销类//////////-
public class IDEDeleteRevoke : ALittle.RevokeObject
{	
	private IDEUITree _parent;
	private IDEUITreeItem _current;
	private int _index;
    
	// parent 树形父控件
	// current 树形子控件
	// index 子控件在父控件的位置
	public ctor(IDEUITree parent, IDEUITreeItem current, int index)
	{
		this._parent = parent; // 父控件
		this._current = current; // 子控件
		this._index = index; // 位置
	}

	public fun Forward()
	{
		var current = this._current;
		var parent = this._parent;
		// 获取当前对象相对于父控件是child，还是show
		var child_type = current.user_info.child_type;
		if (child_type == null) return;
		// 移除控件树节点，移除表现节点
		parent.RemoveChild(current);
		if (child_type == "child")
			parent.user_info.object.RemoveChild(current.user_info.object);
		elseif (child_type != null)
			cast<Map<string,any>>(parent.user_info.object)[child_type] = null;
		
		// 删除修改面板
		current.RemoveAttributePanel();
		// 删除红框
		current.tab_child.UpdateHandleQuadRemove(current);
		parent.tab_child.UpdateHandleQuadLayout(parent);
		// 设置为未保存
		current.tab_child.save = false;
	}
	
	public fun Back()
	{
		var current = this._current;
		var parent = this._parent;
		var index = this._index;
		// 获取当前对象相对于父控件是child，还是show
		var child_type = current.user_info.child_type;
		if (child_type == null) return;
		// 添加到父控件中去
		parent.AddChild(current, index);
		// 判定子控件类型
		if (child_type == "child")
			parent.user_info.object.AddChild(current.user_info.object, index);
		elseif (child_type != null)
			cast<Map<string,any>>(parent.user_info.object)[child_type] = current.user_info.object;
		parent.tab_child.UpdateHandleQuadLayout(parent);
		// 设置为未保存
		current.tab_child.save = false;
	}
}
	//////////子控件show撤销类//////////-
public class IDEChildShowRevoke : ALittle.RevokeObject
{
	private IDEUITree _parent;
	private IDEUITreeItem _current;
	private int _index;

	public ctor(IDEUITree parent, IDEUITreeItem current, int index)
	{
		this._parent = parent; // 父控件
		this._current = current; // 子控件
		this._index = index; // 位置
	}

	public fun Forward()
	{
		var current = this._current;
		var parent = this._parent;
		var index = this._index;
		// 获取当前对象相对于父控件是child，还是show
		var child_type = current.user_info.child_type;
		if (child_type == null) return;
		// 添加到树形控件
		parent.AddChild(current, index);
		// 处理表现
		if (child_type == "child")
			parent.user_info.object.AddChild(current.user_info.object, index);
		elseif (child_type != null)
			cast<Map<string,any>>(parent.user_info.object)[child_type] = current.user_info.object;

		parent.tab_child.UpdateHandleQuadLayout(parent);
		// 设置为未保存
		current.tab_child.save = false;
	}
	
	public fun Back()
	{
		var current = this._current;
		var parent = this._parent;
		// 获取当前对象相对于父控件是child，还是show
		var child_type = current.user_info.child_type;
		if (child_type == null) return;
		// 从树形控件移除
		parent.RemoveChild(current);
		if (child_type == "child")
			parent.user_info.object.RemoveChild(current.user_info.object);
		elseif (child_type != null)
			cast<Map<string,any>>(parent.user_info.object)[child_type] = null;

		// 移除修改面板
		current.RemoveAttributePanel();
		// 删除红框
		current.tab_child.UpdateHandleQuadRemove(current);
		parent.tab_child.UpdateHandleQuadLayout(parent);
		// 设置为未保存
		current.tab_child.save = false;
	}
}
	//////////拖拉撤销类//////////-
public class IDEDragXYRevoke : ALittle.RevokeObject
{
	private IDEUITreeLogic _target;
	private double _delta_x;
	private double _delta_y;

	public ctor(IDEUITreeLogic target, double delta_x, double delta_y)
	{
		this._target = target; // 当前操作控件
		this._delta_x = delta_x;
		this._delta_y = delta_y; // 偏移量
	}

	public fun Foward()
	{
		// 拖拽
		this._target.DragXY(this._delta_x, this._delta_y);
		// 重置红框大小
		this._target.tab_child.UpdateHandleQuadLayout(this._target);
		// 设置为未保存
		this._target.tab_child.save = false;
	}
	
	public fun Back()
	{
		// 拖拽
		this._target.DragXY(-this._delta_x, -this._delta_y);
		// 重置红框大小
		this._target.tab_child.UpdateHandleQuadLayout(this._target);
		// 设置为未保存
		this._target.tab_child.save = false;
	}
}
	
	//////////拖拉撤销类//////////-
public class IDEDragWHRevoke : ALittle.RevokeObject
{
	private IDEUITreeLogic _target;
	private double _delta_x;
	private double _delta_y;

	public ctor(IDEUITreeLogic target, double delta_x, double delta_y)
	{
		this._target = target; // 当前操作控件
		this._delta_x = delta_x;
		this._delta_y = delta_y; // 偏移量
	}

	public fun Foward()
	{
		// 拖拽
		this._target.DragWH(this._delta_x, this._delta_y);
		// 重置红框
		this._target.tab_child.UpdateHandleQuadLayout(this._target);
		// 设置为未保存
		this._target.tab_child.save = false;
	}
	
	public fun Back()
	{
		// 拖拽
		this._target.DragWH(-this._delta_x, -this._delta_y);
		// 重置红框
		this._target.tab_child.UpdateHandleQuadLayout(this._target);
		// 设置为未保存
		this._target.tab_child.save = false;
	}
}	
	//////////控件上移下移撤销类//////////-
public class IDEChildUpDownRevoke : ALittle.RevokeObject
{	
	private IDEUITree _parent;
	private IDEUITreeItem _current;
	private string _up_down;

	// up_down: 字符串 up 或者 down
	public ctor(IDEUITree parent, IDEUITreeItem current, string up_down)
	{
		this._parent = parent; // 父控件
		this._current = current; // 子控件
		this._up_down = up_down; // 操作类型
	}

	public fun Forward()
	{
		var parent = this._parent;
		var current = this._current;
		var text = this._up_down;
		var index = parent.GetChildIndex(current);
		if (text == "up")
			index = index - 1;
		elseif (text == "down")
			index = index + 1;
		
		parent.SetChildIndex(current, index);
		parent.user_info.object.SetChildIndex(current.user_info.object, index);
	}
	
	public fun Back()
	{
		var parent = this._parent;
		var current = this._current;
		var text = this._up_down;
		var index = parent.GetChildIndex(current);
		if (text == "up")
			index = index + 1;
		elseif (text == "down")
			index = index - 1;
			
		parent.SetChildIndex(current, index);
		parent.user_info.object.SetChildIndex(current.user_info.object, index);
	}
}
	//////////面板修改撤销类//////////-
public class IDENatureChangeRevoke : ALittle.RevokeObject
{
	private IDEUITreeLogic _target;
	private string _nature;
	private any _old_base;
	private any _new_base;
	private any _old_object;
	private any _new_object;
	private bool _need_reset;
	private string _text;

	public ctor(IDEUITreeLogic target, string nature, any old_base, any new_base, any old_object, any new_object, string text, bool need_reset)
	{
		this._target = target; // 操作控件
		this._nature = nature; // 属性
		this._old_base = old_base; // base初始值
		this._new_base = new_base; // base修改值
		this._old_object = old_object; // object初始值
		this._new_object = new_object; // object修改值
		this._need_reset = need_reset; // 标记是否需要重置红框
		this._text = text; // 面板修改值
	}

	public fun Forward()
	{
		var user_info = this._target.user_info;
		var nature = this._nature;
	
		cast<Map<string, any>>(user_info.base)[nature] = this._new_base;
		cast<Map<string,any>>(user_info.object)[nature] = this._new_object;
		
		if (this._target.attr_panel != null && this._text != null)
			cast<ALittle.DisplayObject>(cast<Map<string,any>>(this._target.attr_panel)["_"..nature]).text = this._text;
	
		if (this._need_reset)
			// 重置红框
			this._target.tab_child.UpdateHandleQuadLayout(this._target);
		// 设置为未保存
		this._target.tab_child.save = false;
	}
	
	public fun Back()
	{
		var user_info = this._target.user_info;
		var nature = this._nature;

		cast<Map<string, any>>(user_info.base)[nature] = this._old_base;
		cast<Map<string,any>>(user_info.object)[nature] = this._old_object;
	
		if (this._target.attr_panel != null)
			this._target.attr_panel.LoadNatureBase();

		// 重置红框
		if (this._need_reset)
			this._target.tab_child.UpdateHandleQuadLayout(this._target);
		// 设置为未保存
		this._target.tab_child.save = false;
	}
}


//////////新建动画//////////-
public class IDECreateAntiRevoke : ALittle.RevokeObject
{
	private IDEAntiPanel _target;
	private string _name;
	private ALittle.LoopGroupInfo _info;
	private ALittle.DisplayObject _item;

	public ctor(IDEAntiPanel target, string name, ALittle.LoopGroupInfo info, ALittle.DisplayObject item)
	{
		this._target = target; // 操作控件
		this._name = name; // 名称
		this._info = info; // 动画信息
		this._item = item; // 控件对象
	}
    
	public fun Forward()
	{
		// 检查重复
		var user_info = this._target.tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) user_info.base.loop_map = new Map<string, ALittle.LoopGroupInfo>();

		user_info.base.loop_map[this._name] = this._info;
		this._target.anti_scroll_list.AddChild(this._item);

		// 设置为未保存
		this._target.tab_child.save = false;
	}

	public fun Back()
	{
		// 检查重复
		var user_info = this._target.tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) return;

		user_info.base.loop_map[this._name] = null;
		this._target.anti_scroll_list.RemoveChild(this._item);

		// 设置为未保存
		this._target.tab_child.save = false;
	}
}

public class IDEDeleteAntiRevoke : ALittle.RevokeObject
{
	private IDEAntiPanel _target;
	private string _name;
	private ALittle.LoopGroupInfo _info;
	private ALittle.DisplayObject _item;
	private int _child_index;

	public ctor(IDEAntiPanel target, string name, ALittle.LoopGroupInfo info, ALittle.DisplayObject item, int child_index)
	{
		this._target = target; // 操作控件
		this._name = name; // 名称
		this._info = info; // 动画信息
		this._item = item; // 控件对象
		this._child_index = child_index;
	}

	public fun Forward()
	{
		// 检查重复
		var user_info = this._target.tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) return;

		user_info.base.loop_map[this._name] = null;
		this._target.anti_scroll_list.RemoveChild(this._item);

		// 设置为未保存
		this._target.tab_child.save = false;
	}

	public fun Back()
	{
		// 检查重复
		var user_info = this._target.tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) user_info.base.loop_map = new Map<string, ALittle.LoopGroupInfo>();

		user_info.base.loop_map[this._name] = this._info;
		this._target.anti_scroll_list.AddChild(this._item, this._child_index);

		// 设置为未保存
		this._target.tab_child.save = false;
	}
}

public class IDEAntiAddAttrRevoke : ALittle.RevokeObject
{
	private IDEAntiPanel _target;
	private string _name;
	private ALittle.LoopListInfo _info;
	private IDEAntiFrameAntiItem _anti_item;
	private IDEAntiFrameLinkItem _link_item;

	public ctor(IDEAntiPanel target, string name, ALittle.LoopListInfo info, IDEAntiFrameAntiItem anti_item, IDEAntiFrameLinkItem link_item)
	{
		this._target = target; // 操作控件
		this._name = name; // 名称
		this._info = info; // 动画信息
		this._anti_item = anti_item; // 控件对象
		this._link_item = link_item;
	}

	public fun Forward()
	{
		var user_info = this._target.tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) return;
		var info = user_info.base.loop_map[this._name];
		if (info == null) return;

		ALittle.List_Push(info.childs, this._info);

		if (this._target.cur_show == this._name)
		{
			this._target.anti_anti_linear.AddChild(this._anti_item);
			this._target.anti_link_linear.AddChild(this._link_item);

			var static_object_v = this._target.anti_screen.static_object_v;
			static_object_v.height = this._target.anti_link_linear.y + this._target.anti_link_linear.height;
			this._target.anti_screen.AdjustScrollBar();
		}

		// 设置为未保存
		this._target.tab_child.save = false;
	}

	public fun Back()
	{
		var user_info = this._target.tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) return;
		var info = user_info.base.loop_map[this._name];
		if (info == null) return;

		ALittle.List_Remove(info.childs, ALittle.List_Len(info.childs));

		if (this._target.cur_show == this._name)
		{
			this._target.anti_anti_linear.RemoveChild(this._anti_item);
			this._target.anti_link_linear.RemoveChild(this._link_item);

			var static_object_v = this._target.anti_screen.static_object_v;
			static_object_v.height = this._target.anti_link_linear.y + this._target.anti_link_linear.height;
			this._target.anti_screen.AdjustScrollBar();
		}

		// 设置为未保存
		this._target.tab_child.save = false;
	}
}

public class IDEAntiRemoveAttrRevoke : ALittle.RevokeObject
{
	private IDEAntiPanel _target;
	private string _name;
	private ALittle.LoopListInfo _info;
	private IDEAntiFrameAntiItem _anti_item;
	private IDEAntiFrameLinkItem _link_item;
	private int _child_index;

	public ctor(IDEAntiPanel target, string name, ALittle.LoopListInfo info, IDEAntiFrameAntiItem anti_item, IDEAntiFrameLinkItem link_item, int child_index)
	{
		this._target = target; // 操作控件
		this._name = name; // 名称
		this._info = info; // 动画信息
		this._anti_item = anti_item; // 控件对象
		this._link_item = link_item;
		this._child_index = child_index;
	}

	public fun Forward()
	{
		var user_info = this._target.tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) return;
		var info = user_info.base.loop_map[this._name];
		if (info == null) return;

		ALittle.List_Remove(info.childs, this._child_index);

		if (this._target.cur_show == this._name)
		{
			this._target.anti_anti_linear.RemoveChild(this._anti_item);
			this._target.anti_link_linear.RemoveChild(this._link_item);

			var static_object_v = this._target.anti_screen.static_object_v;
			static_object_v.height = this._target.anti_link_linear.y + this._target.anti_link_linear.height;
			this._target.anti_screen.AdjustScrollBar();
		}

		// 设置为未保存
		this._target.tab_child.save = false;
	}

	public fun Back()
	{
		var user_info = this._target.tab_child.tree_object.user_info;
		if (user_info.base.loop_map == null) return;
		var info = user_info.base.loop_map[this._name];
		if (info == null) return;

		ALittle.List_Insert(info.childs, this._child_index, this._info);

		if (this._target.cur_show == this._name)
		{
			this._target.anti_anti_linear.AddChild(this._anti_item, this._child_index);
			this._target.anti_link_linear.AddChild(this._link_item, this._child_index);

			var static_object_v = this._target.anti_screen.static_object_v;
			static_object_v.height = this._target.anti_link_linear.y + this._target.anti_link_linear.height;
			this._target.anti_screen.AdjustScrollBar();
		}

		// 设置为未保存
		this._target.tab_child.save = false;
	}
}

public class IDEAntiInsertLoopRevoke : ALittle.RevokeObject
{
	private IDEAntiFrameAntiItem _target;
	private ALittle.LoopChildInfo _info;
	private IDEAntiFrameLoopItem _loop_item;
	private int _child_index;

	public ctor(IDEAntiFrameAntiItem target, ALittle.LoopChildInfo info, IDEAntiFrameLoopItem loop_item, int child_index)
	{
		this._target = target; // 操作控件
		this._info = info; // 动画信息
		this._loop_item = loop_item; // 控件对象
		this._child_index = child_index;
	}

	public fun Forward()
	{
		ALittle.List_Insert(this._target.info.childs, this._child_index, this._info);
		this._target.container.AddChild(this._loop_item, this._child_index);
		this._target.panel.tab_child.save = false;
	}

	public fun Back()
	{
		ALittle.List_Remove(this._target.info.childs, this._child_index);
		this._target.container.RemoveChild(this._loop_item);

		if (this._target.panel.cur_loop_item == this._loop_item)
			this._target.panel.HideAntiLoop();

		this._target.panel.tab_child.save = false;
	}
}

public class IDEAntiDeleteLoopRevoke : ALittle.RevokeObject
{
	private IDEAntiFrameAntiItem _target;
	private ALittle.LoopChildInfo _info;
	private IDEAntiFrameLoopItem _loop_item;
	private int _child_index;

	public ctor(IDEAntiFrameAntiItem target, ALittle.LoopChildInfo info, IDEAntiFrameLoopItem loop_item, int child_index)
	{
		this._target = target; // 操作控件
		this._info = info; // 动画信息
		this._loop_item = loop_item; // 控件对象
		this._child_index = child_index;
	}

	public fun Forward()
	{
		ALittle.List_Remove(this._target.info.childs, this._child_index);
		this._target.container.RemoveChild(this._loop_item);

		if (this._target.panel.cur_loop_item == this._loop_item)
		this._target.panel.HideAntiLoop();

		this._target.panel.tab_child.save = false;
	}

	public fun Back()
	{
		ALittle.List_Insert(this._target.info.childs, this._child_index, this._info);
		this._target.container.AddChild(this._loop_item, this._child_index);
		this._target.panel.tab_child.save = false;
	}
}

public class IDEAntiClearLoopRevoke : ALittle.RevokeObject
{
	private IDEAntiFrameAntiItem _target;
	private List<ALittle.LoopChildInfo> _info_list;
	private List<IDEAntiFrameLoopItem> _loop_item_list;

	public ctor(IDEAntiFrameAntiItem target, List<ALittle.LoopChildInfo> info_list, List<IDEAntiFrameLoopItem> loop_item_list)
	{
		this._target = target; // 操作控件
		this._info_list = info_list; // 动画信息
		this._loop_item_list = loop_item_list; // 控件对象
	}

	public fun Forward()
	{
		this._target.info.childs = new List<ALittle.LoopChildInfo>();
		this._target.container.RemoveAllChild();

		this._target.panel.HideAntiLoop();
		this._target.panel.tab_child.save = false;
	}

	public fun Back()
	{
		this._target.info.childs = this._info_list;
		for (var index, child in this._loop_item_list)
			this._target.container.AddChild(child);
		this._target.panel.tab_child.save = false;
	}
}

public class IDEAntiLoopTargetValueChangeRevoke : ALittle.RevokeObject
{
	private IDEAntiFrameLoopItem _target;
	private string _old_value;
	private string _new_value;

	public ctor(IDEAntiFrameLoopItem target, string old_value, string new_value)
	{
		this._target = target; // 操作控件
		this._old_value = old_value;
		this._new_value = new_value;
	}

	public fun Forward()
	{
		this._target.info.target = IDEAntiFrameLoopItem.StringToValue(this._target.item.info.attribute, this._new_value);
		this._target.UpdateText();

		if (this._target.item.panel.cur_loop_item == this._target)
		{
			if (this._target.info.clazz == "LoopLinear")
				this._target.item.panel.linear_target_value.text = IDEAntiFrameLoopItem.ValueToString(this._target.info.target);
			elseif (this._target.info.clazz == "LoopAttribute")
				this._target.item.panel.attribute_target_value.text = IDEAntiFrameLoopItem.ValueToString(this._target.info.target);
			elseif (this._target.info.clazz == "LoopRit")
				this._target.item.panel.rit_target_value.text = IDEAntiFrameLoopItem.ValueToString(this._target.info.target);
		}

		this._target.item.panel.tab_child.save = false;
	}

	public fun Back()
	{
		this._target.info.target = IDEAntiFrameLoopItem.StringToValue(this._target.item.info.attribute, this._old_value);
		this._target.UpdateText();

		if (this._target.item.panel.cur_loop_item == this._target)
		{
			if (this._target.info.clazz == "LoopLinear")
				this._target.item.panel.linear_target_value.text = IDEAntiFrameLoopItem.ValueToString(this._target.info.target);
			elseif (this._target.info.clazz == "LoopAttribute")
				this._target.item.panel.attribute_target_value.text = IDEAntiFrameLoopItem.ValueToString(this._target.info.target);
			elseif (this._target.info.clazz == "LoopRit")
				this._target.item.panel.rit_target_value.text = IDEAntiFrameLoopItem.ValueToString(this._target.info.target);
		}

		this._target.item.panel.tab_child.save = false;
	}
}

public class IDEAntiLoopTotalTimeChangeRevoke : ALittle.RevokeObject
{
	private IDEAntiFrameLoopItem _target;
	private int _old_value;
	private int _new_value;

	public ctor(IDEAntiFrameLoopItem target, int old_value, int new_value)
	{
		this._target = target; // 操作控件
		this._old_value = old_value;
		this._new_value = new_value;
	}

	public fun Forward()
	{
		this._target.info.total_time = this._new_value;
		this._target.UpdateText();

		if (this._target.item.panel.cur_loop_item == this._target)
		{
			if (this._target.info.clazz == "LoopLinear")
				this._target.item.panel.linear_total_time.text = this._target.info.total_time;
			elseif (this._target.info.clazz == "LoopRit")
				this._target.item.panel.rit_total_time.text = this._target.info.total_time;
		}

		this._target.UpdateShow();
		this._target.DispatchEvent(new ALittle.UIResizeEvent());
		this._target.item.panel.tab_child.save = false;
	}

	public fun Back()
	{
		this._target.info.total_time = this._old_value;
		this._target.UpdateText();

		if (this._target.item.panel.cur_loop_item == this._target)
		{
			if (this._target.info.clazz == "LoopLinear")
				this._target.item.panel.linear_total_time.text = this._target.info.total_time;
			elseif (this._target.info.clazz == "LoopRit")
				this._target.item.panel.rit_total_time.text = this._target.info.total_time;
		}

		this._target.UpdateShow();
		this._target.DispatchEvent(new ALittle.UIResizeEvent());
		this._target.item.panel.tab_child.save = false;
	}
}

public class IDEAntiLoopDelayTimeChangeRevoke : ALittle.RevokeObject
{
	private IDEAntiFrameLoopItem _target;
	private int _old_value;
	private int _new_value;

	public ctor(IDEAntiFrameLoopItem target, int old_value, int new_value)
	{
		this._target = target; // 操作控件
		this._old_value = old_value;
		this._new_value = new_value;
	}

	public fun Forward()
	{
		this._target.info.delay_time = this._new_value;
		this._target.UpdateText();

		if (this._target.item.panel.cur_loop_item == this._target)
		{
			if (this._target.info.clazz == "LoopLinear")
				this._target.item.panel.linear_delay_time.text = this._target.info.delay_time;
			elseif (this._target.info.clazz == "LoopAttribute")
				this._target.item.panel.attribute_delay_time.text = this._target.info.delay_time;
			elseif (this._target.info.clazz == "LoopRit")
				this._target.item.panel.rit_delay_time.text = this._target.info.delay_time;
		}

		this._target.UpdateShow();
		this._target.DispatchEvent(new ALittle.UIResizeEvent());
		this._target.item.panel.tab_child.save = false;
	}

	public fun Back()
	{
		this._target.info.delay_time = this._old_value;
		this._target.UpdateText();

		if (this._target.item.panel.cur_loop_item == this._target)
		{
			if (this._target.info.clazz == "LoopLinear")
				this._target.item.panel.linear_delay_time.text = this._target.info.delay_time;
			elseif (this._target.info.clazz == "LoopAttribute")
				this._target.item.panel.attribute_delay_time.text = this._target.info.delay_time;
			elseif (this._target.info.clazz == "LoopRit")
				this._target.item.panel.rit_delay_time.text = this._target.info.delay_time;
		}
		this._target.UpdateShow();
		this._target.DispatchEvent(new ALittle.UIResizeEvent());
		this._target.item.panel.tab_child.save = false;
	}
}

