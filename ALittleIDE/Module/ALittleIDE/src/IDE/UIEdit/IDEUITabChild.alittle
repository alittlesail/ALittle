
namespace ALittleIDE;

// 选中操作信息
struct IDEUITabChildHandleInfo
{
    ALittle.DisplayObject display_group;        // 选中后的显示集合
    ALittle.DisplayObject handle_quad;          // 选中后 用于显示的Quad集合
    ALittle.DisplayObject focus_quad;           // 选中后 用于拖拽移动的Quad
    ALittle.DisplayObject size_quad_container;  // 选中后的拖拽大小的Quad集合
    IDEUITreeLogic target;                        // 选中的节点目标
    bool buttondown_lock;                       // 按钮按下锁定
    int buttondown_count;                       // 记录多次点击
    
    double delta_x;
    double delta_y;
    bool lock_x_or_y;		// 锁定位置

    double delta_width;
    double delta_height;
    bool lock_width_or_height;  // 锁定宽或者高
}

// 操作控件的信息
struct IDEUITabChildControlLine
{
    ALittle.DisplayObject quad;                 // 用于拖拽移动的Quad
    ALittle.DisplayObject size_quad;            // 用于拖拽大小的Quad
    ALittle.DisplayObject size_quad_container;  // 拖拽大小的Quad集合
}

// 控件树搜索信息
struct IDEUITabChildSearchInfo
{
	string name;        // 名称
	int index;          // 下标
}

// 快捷拖拽携带信息
struct IDEUITabChildQuickDragAddUserData
{
    double abs_x;           // 绝对坐标X
    double abs_y;           // 绝对坐标Y
    string module_name;     // 模块名
    string control_name;    // 拖拽的控件名称
}

public class IDEUITabChild : IDETabChild
{
	private Map<ALittle.TextRadioButton, bool> _group;     // 组名称

	private ALittle.ScrollScreen _tab_screen;        // 标签页
	private ALittle.ScrollScreen _tree_screen;      // 控件树滚动屏
    private IDEAntiPanel _anti_panel;               // 动画部分的面板
	private ALittle.ScrollScreen _attr_screen;      // 属性部分的滚动屏
	private ALittle.ScrollScreen _edit_screen;      // 编辑部分的滚动屏

	private IDEUITreeLogic _tree_object;              // 根节点

	private ALittle.DisplayLayout _tab_container;               // 总容器
    private ALittle.DisplayObject _tab_rb_quad;
	
    private ALittle.DisplayLayout _tab_select_container;        // 选中部分容器
	private ALittle.DisplayLayout _tab_handle_quad;             // 用于感应鼠标操作的Quad
    private ALittle.DisplayLayout _tab_select_rect;               // 用于多选

	private ALittle.DisplayLayout _tab_quad_container;          // 用于存放红色Quad的容器
	private ALittle.DisplayLayout _tab_handdrag_container;      // 拖拽部分容器
	private ALittle.DisplayLayout _tab_scale_container;         // 缩放分布容器
    private ALittle.DisplayLayout _tab_object_container;        // 显示部分容器
	private ALittle.Quad _tab_handdrag_quad;        // 用于感应手动拖拽的Quad
	private ALittle.Quad _tab_scale_quad;           // 用于感应缩放的Quad
	
	private Map<IDEUITreeLogic, IDEUITabChildHandleInfo> _tab_quad_map; // 选中的控件集合
	private IDEUITabChildSearchInfo _tree_search_info;                // 搜索集合
	
	private ALittle.LoopLinear _tree_loop_x;    // 进行获取焦点操作时，移动到焦点位置时的动画
	private ALittle.LoopLinear _tree_loop_y;    // 进行获取焦点操作时，移动到焦点位置时的动画

    private ALittle.ImageInput _control_tabchild_textinput;

    private bool _container_drag;
    private double _container_drag_x;
    private double _container_drag_y;
    private IDEUITree _container_drag_parent;

	public ctor(ALittle.ControlSystem ctrl_sys, string module, string name, bool save)
	{
        g_IDECenter.center.AddEventListener(this, this.HandleShowSelectLayer);
        g_IDECenter.center.AddEventListener(this, this.HandleShowHandDragLayer);
        g_IDECenter.center.AddEventListener(this, this.HandleShowScaleLayer);
        g_IDEProject.AddEventListener(this, this.HandleProjectSettingChanged);
	
		// 组名
		this._group = ALittle.CreateKeyWeakMap();
	
		// 创建编辑容器
		this._tab_screen = g_Control.CreateControl{ALittle.ScrollScreen}("ide_edit_tab_screen", this);
		this._tree_screen = g_Control.CreateControl{ALittle.ScrollScreen}("ide_edit_tree_screen", this);
		this._attr_screen = g_Control.CreateControl{ALittle.ScrollScreen}("ide_edit_attr_screen", this);
        this._anti_panel = g_Control.CreateControl{IDEAntiPanel}("ide_edit_anti_panel", this);
        this._tree_object = null; // 树形结构根节点
	
		// 初始化容器
		this._tab_screen.container.scale_x = 1;
		this._tab_screen.container.scale_y = 1;
		this._tab_container.width = g_IDEProject.project.config.GetConfig("default_show_width", 800);
		this._tab_container.height = g_IDEProject.project.config.GetConfig("default_show_height", 600);
        this._tab_container.x = 100;
        this._tab_container.y = 100;
        this._tab_rb_quad.x = this._tab_container.x + this._tab_container.width + 100;
        this._tab_rb_quad.y = this._tab_container.y + this._tab_container.height + 100;
		this._tab_screen.AdjustScrollBar();
	
		// 控件层
		// this._tab_object_container
		// 选择层
		this._tab_select_container.visible = g_IDECenter.center.singleselect;
		this._tab_handle_quad.AddEventListener(this, this.HandleHandleContainerLButtonDown);
		this._tab_handle_quad.AddEventListener(this, this.HandleHandleContainerLButtonUp);
		this._tab_handle_quad.AddEventListener(this, this.HandleHandleContainerDragBegin);
		this._tab_handle_quad.AddEventListener(this, this.HandleHandleContainerDrag);
		this._tab_handle_quad.AddEventListener(this, this.HandleHandleContainerDragEnd);
        this._tab_select_rect.visible = false;
		// 选中层
		this._tab_quad_container.RemoveAllChild();
		this._tab_quad_map = new Map<IDEUITreeLogic, IDEUITabChildHandleInfo>(); // 收集的选中的TreeLogic
		// 拖拽层
		this._tab_handdrag_container.visible = g_IDECenter.center.handdrag;
		this._tab_handdrag_quad.drag_trans_target = this._tab_screen;
		// 缩放层
		this._tab_scale_container.visible = g_IDECenter.center.scale;
		this._tab_scale_quad.AddEventListener(this, this.HandleScaleContainerLButtonDown);
		// 搜索信息
		this._tree_search_info = new IDEUITabChildSearchInfo();
		this._tree_search_info.name = "";
		this._tree_search_info.index = 0;
	
		// 把自己作为容器的携带数据
		this._tab_screen._user_data = this;
		this._tree_screen._user_data = this;
	
		// 左侧控件树滚动Loop
		this._tree_loop_x = null;
		this._tree_loop_y = null;

        this.AddEventListener(this, this.HandleSavePng);
    }

    private fun OnHide()
    {   
		// 隐藏属性滚动屏
		this._tree_screen.visible = false;
		this._attr_screen.visible = false;
		this._anti_panel.visible = false;
        g_IDECenter.center.tool_ui.visible = false;
		g_IDEAttrControlDialog.SetTitle("");
        g_IDEAttrControlDialog.HideDialog();
        g_IDECenter.center.RemoveEventListener(this, this.HandleEditScaleChanged);
    }

    private fun OnShow()
    {
		// 在控件树区域载入to的结构
		this._tree_screen.visible = true;
		this._attr_screen.visible = true;
		this._anti_panel.visible = true;
        g_IDECenter.center.tool_ui.visible = true;

        g_IDECenter.center.detail_tree_tab.tab = g_IDECenter.center.control_tree;
	
		var panel_childs = this._attr_screen.childs;
		if (panel_childs[1] != null)
			g_IDEAttrControlDialog.SetTitle(cast<IDEUITreeLogic>(panel_childs[1]._user_data).title);
		g_IDECenter.center.UpdateToolScale(this.GetScale());
    
        g_IDECenter.center.AddEventListener(this, this.HandleEditScaleChanged);
    }

    private fun OnClose()
    {
        g_IDECenter.center.control_tree.RemoveChild(this._tree_screen);
		g_IDEAttrControlDialog.attr_container.RemoveChild(this._attr_screen);
		g_IDECenter.center.control_anti.RemoveChild(this._anti_panel);
        g_IDEProject.RemoveEventListener(this, this.HandleProjectSettingChanged);
        g_IDECenter.center.RemoveEventListener(this, this.HandleEditScaleChanged);
        g_IDECenter.center.RemoveEventListener(this, this.HandleShowSelectLayer);
        g_IDECenter.center.RemoveEventListener(this, this.HandleShowHandDragLayer);
        g_IDECenter.center.RemoveEventListener(this, this.HandleShowScaleLayer);
    }

    private fun OnOpen()
    {
		g_IDECenter.center.control_tree.AddChild(this._tree_screen);
		g_IDEAttrControlDialog.attr_container.AddChild(this._attr_screen);
		g_IDECenter.center.control_anti.AddChild(this._anti_panel);
    }

    // 调整到中心位置
    public fun ShowInCenter()
    {
        var object = this._tree_object.user_info.object;
        var x, y = object.LocalToGlobal(this._tab_object_container);
        if (x > 0 && y > 0)
        {
            var real_width = this._tab_object_container.width - this._tab_screen.view_width;
            if (object.width < this._tab_object_container.width && real_width > 0)
            {
                var view_x = this._tab_screen.view_width / 2;
                var center_x = x + object.width / 2;
                this._tab_screen.bottom_scrollbar.offset_rate = (center_x - view_x) / real_width;
            }

            var real_height = this._tab_object_container.height - this._tab_screen.view_height;
            if (object.height < this._tab_object_container.height && real_height > 0)
            {
                var view_y = this._tab_screen.view_height / 2;
                var center_y = y + object.height / 2;
                this._tab_screen.right_scrollbar.offset_rate = (center_y - view_y) / real_height;
            }

            this._tab_screen.AdjustScrollBar();
        }
    }

    private fun OnTabRightMenu(AUIPlugin.AUIRightMenu menu)
    {
		menu.AddItem("截图导出", bind(A_OtherSystem.SystemSaveFile, A_OtherSystem, this, this._name..".png", null));
		menu.AddItem("复制控件名", bind(ALittle.System_SetClipboardText, this._name));
		menu.AddItem("复制继承代码", bind(this.CopyExtends, this));
		menu.AddItem("刷新", bind(this.Refresh, this));
		menu.AddItem("获取焦点", bind(this.ShowControlFocus, this));
	}
    
	private fun CopyExtends()
	{
		var display_info = new ALittle.DisplayInfo();
        display_info.__module = this._module;
		display_info.__extends = this._name;
		var copy_list = new List<IDEControlCopyInfo>();
		var info = new IDEControlCopyInfo();
		info.index = 1;
		info.info = display_info;
		copy_list[1] = info;
		ALittle.System_SetClipboardText(ALittle.String_JsonEncode(copy_list));
    }

    private fun HandleProjectSettingChanged(IDEProjectSettingChanged event)
    {
        this._tab_container.width = event.default_show_width;
        this._tab_container.height = event.default_show_height;
        this._tab_screen.AdjustScrollBar();
	
		for (var target, handle_info in this._tab_quad_map)
            this.UpdateHandleQuadLayout(target);
    }
	
	public fun HandleTreeSizeChanged(ALittle.UIResizeEvent event)
	{
		this._tree_screen.AdjustScrollBar();
	}

    private fun HandleSavePng(ALittle.UISystemSaveFileEvent event)
    {
        g_Control.SaveControlToFile(this._tree_object.user_info.object, event.path);
    }
	
	////////////////////////////////////////////////////////////////////////////////////////////-
	public get tab_body() : ALittle.DisplayObject { return this._tab_screen; }
    public get edit_screen() : ALittle.ScrollScreen { return this._edit_screen; }
	public get tree_screen() : ALittle.ScrollScreen { return this._tree_screen; }
	public get attr_screen() : ALittle.ScrollScreen { return this._attr_screen; }
    public get anti_panel() : IDEAntiPanel { return this._anti_panel; }
	public get group() : Map<ALittle.TextRadioButton, bool> { return this._group; }
	public get tree_object() : IDEUITreeLogic  { return this._tree_object; }
	public set save(bool value)
    {
        if (this._save == value) return;
		if (value == false)
        {
            this._save = false;
            this.UpdateTitle();
            return;
		}
        if (this._tree_object == null) return;

        var ui_manager = g_IDEProject.GetUIManager(this._module);
        if (ui_manager == null)
        {
            g_AUITool.ShowNotice("错误", "模块不存在:"..this._module);
            return;
        }
	
        var info = this._tree_object.CalcInfo();

        // 判断原来是否有这个控件
        var create = ui_manager.control_map[this._name] == null;

        // 保存控件
        var error = ui_manager.SaveControl(this._name, info);
        if (error != null) return;
	
        // 刷新控件树
        if (create)
        {
            var tree = g_IDECenter.center.control_list.GetControlTree(this._module);
            if (tree != null) tree.Refresh();
        }

        this._save = value;
        this.UpdateTitle();
	}
	
	public fun Rename(string name)
    {
        this._name = name;
	
        this.UpdateTitle();
	}
	
	public fun UpdateTitle()
    {
        if (this._tree_object == null) return;
	
        var text = this._tree_object.GetDesc();
		if (text == "")
        {
            text = this._name;
			if (ALittle.String_Len(this._name) > 30)
                text =  "..."..ALittle.String_Sub(this._name, -30, -1);
		}
        if (this._save == false) text = text.." *";
        g_IDECenter.center.content_edit.main_tab.SetChildText(this._tab_screen, text);
	}
	
	public get title() : string
    {
        var text = this._tree_object.GetDesc();
        if (text == "") return this._name;
        return this._name.."("..text..")";
	}
	
	// 对选中的控件进行处理
	// align_type 对齐方式
	// h_align_left 水平居左
	// h_align_center 水平居中
	// h_align_right 水平居右
	// v_align_top 垂直置顶
	// v_align_center 垂直居中
	// v_align_bottom 垂直置底
	public fun SelectAlign(string align_type)
    {
		// 计算个数
        var count = 0;
		// 获取其中一个目标
        var first_target:IDEUITreeLogic = null;
		for (var target, handle_info in this._tab_quad_map)
        {
            count = count + 1;
            first_target = target;
		}
		// 如果没有就直接返回
        if (count == 0) return;
		// 根节点不能进行对齐
        if (first_target == this._tree_object) return;
		if (count == 1)
        {
			// 获取父控件
            var parent = cast<IDEUITreeLogic>(first_target.logic_parent);
            var parent_object = parent.user_info.object;
            var drag_x = 0.0;
            var drag_y = 0.0;
            var target_object = first_target.user_info.object;
			if (align_type == "h_align_left")
                drag_x = - target_object.x;
			elseif (align_type == "h_align_center")
                drag_x = (parent_object.width - target_object.width) / 2 - target_object.x;
			elseif (align_type == "h_align_right")
                drag_x = (parent_object.width - target_object.width) - target_object.x;
			elseif (align_type == "v_align_top")
                drag_y = - target_object.y;
			elseif (align_type == "v_align_center")
                drag_y = (parent_object.height - target_object.height) / 2 - target_object.y;
			elseif (align_type == "v_align_bottom")
                drag_y = (parent_object.height - target_object.height) - target_object.y;

            first_target.DragXY(drag_x, drag_y);
            this.UpdateHandleQuadLayout(first_target);
            var revoke = new IDEDragXYRevoke(first_target, drag_x, drag_y);
            this._revoke_list.PushRevoke(revoke);
        }
		else
        {
            var revoke_bind = new ALittle.RevokeBind();
			if (align_type == "h_align_left")
            {
                var common = first_target.user_info.object.x;
				for (var target, v in this._tab_quad_map)
                {
                    if (target.user_info.object.x < common)
                        common = target.user_info.object.x;
				}
				for (var target, v in this._tab_quad_map)
                {
                    var drag_x = common - target.user_info.object.x;
                    target.DragXY(drag_x, 0);
                    this.UpdateHandleQuadLayout(target);
                    var revoke = new IDEDragXYRevoke(target, drag_x, 0);
                    revoke_bind.PushRevoke(revoke);
				}
            }
			elseif (align_type == "h_align_center")
            {
                var common = 0.0;
				for (var target, v in this._tab_quad_map)
                    common = common + target.user_info.object.x + target.user_info.object.width / 2;
                common = common / count;
				for (var target, v in this._tab_quad_map)
                {
                    var drag_x = common - (target.user_info.object.x + target.user_info.object.width / 2);
                    target.DragXY(drag_x, 0);
                    this.UpdateHandleQuadLayout(target);
                    var revoke = new IDEDragXYRevoke(target, drag_x, 0);
                    revoke_bind.PushRevoke(revoke);
				}
            }
			elseif (align_type == "h_align_right")
            {
                var common = first_target.user_info.object.x + first_target.user_info.object.width;
				for (var target, v in this._tab_quad_map)
                {
					if (target.user_info.object.x + target.user_info.object.width > common)
                        common = target.user_info.object.x + target.user_info.object.width;
				}
				for (var target, v in this._tab_quad_map)
                {
                    var drag_x = common - (target.user_info.object.x + target.user_info.object.width);
                    target.DragXY(drag_x, 0);
                    this.UpdateHandleQuadLayout(target);
                    var revoke = new IDEDragXYRevoke(target, drag_x, 0);
                    revoke_bind.PushRevoke(revoke);
				}
            }
			elseif (align_type == "v_align_top")
            {
                var common = first_target.user_info.object.y;
				for (var target, v in this._tab_quad_map)
                {
					if (target.user_info.object.y < common)
                        common = target.user_info.object.y;
				}
				for (var target, v in this._tab_quad_map)
                {
                    var drag_y = common - target.user_info.object.y;
                    target.DragXY(0, drag_y);
                    this.UpdateHandleQuadLayout(target);
                    var revoke = new IDEDragXYRevoke(target, 0, drag_y);
                    revoke_bind.PushRevoke(revoke);
				}
            }
			elseif (align_type == "v_align_center")
            {
                var common = 0.0;
				for (var target, v in this._tab_quad_map)
                    common = common + target.user_info.object.y + target.user_info.object.height / 2;
                common = common / count;
				for (var target, v in this._tab_quad_map)
                {
                    var drag_y = common - (target.user_info.object.y + target.user_info.object.height / 2);
                    target.DragXY(0, drag_y);
                    this.UpdateHandleQuadLayout(target);
                    var revoke = new IDEDragXYRevoke(target, 0, drag_y);
                    revoke_bind.PushRevoke(revoke);
				}
            }
			elseif (align_type == "v_align_bottom")
            {
                var common = first_target.user_info.object.y + first_target.user_info.object.height;
				for (var target, v in this._tab_quad_map)
                {
					if (target.user_info.object.y + target.user_info.object.height > common)
                        common = target.user_info.object.y + target.user_info.object.height;
				}
				for (var target, v in this._tab_quad_map)
                {
                    var drag_y = common - (target.user_info.object.y + target.user_info.object.height);
                    target.DragXY(0, drag_y);
                    this.UpdateHandleQuadLayout(target);
                    var revoke = new IDEDragXYRevoke(target, 0, drag_y);
                    revoke_bind.PushRevoke(revoke);
				}
			}
            this._revoke_list.PushRevoke(revoke_bind);
		}
        this.save = false;
	}
	
	private fun HandleShowSelectLayer(IDEUICenterSelectOpChangedEvent event)
    {
        this._tab_select_container.visible = event.value;
	}
	
	private fun HandleShowHandDragLayer(IDEUICenterHandDragOpChangedEvent event)
    {
        this._tab_handdrag_container.visible = event.value;
	}
	
	private fun HandleShowScaleLayer(IDEUICenterScaleOpChangedEvent event)
    {
        this._tab_scale_container.visible = event.value;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////-

    public fun Refresh()
    {
        var ui_manager = g_IDEProject.GetUIManager(this._module);
        if (ui_manager == null) return;

        // 获取控件信息
        var control_info = ui_manager.control_map[this._name];
        if (control_info == null) return;
		// 新建控件对象
        var object = ui_manager.control.CreateControl{ALittle.DisplayObject}(this._name);
		// 添加到标签页
        this._tab_object_container.RemoveAllChild();
        this._tab_object_container.AddChild(object);
		//控件树
        this._tree_object = IDEUIUtility_CreateTree(control_info.info, this._module, false, object, null, this, true);
        this._tree_object.AddEventListener(this, this.HandleTreeSizeChanged);
        this._tree_object.fold = true;
        this._tree_screen.RemoveAllChild();
        this._tree_screen.AddChild(this._tree_object);
        this._anti_panel.Init(this);

		// 组名
		this._group = ALittle.CreateKeyWeakMap();

		// 选中层
		this._tab_quad_container.RemoveAllChild();
		this._tab_quad_map = new Map<IDEUITreeLogic, IDEUITabChildHandleInfo>(); // 收集的选中的TreeLogic
		// 搜索信息
		this._tree_search_info = new IDEUITabChildSearchInfo();
		this._tree_search_info.name = "";
		this._tree_search_info.index = 0;

        // 标记为保存，然后更新标题
		this._save = true;
        this.UpdateTitle();
		// 清空撤销列表
		this._revoke_list = new ALittle.RevokeList(10000);
    }

    public fun ShowControlFocus()
    {
        var tree = g_IDECenter.center.control_list.GetControlTree(this._module);
        if (tree == null) return;

        for (var index, child:IDEControlTreeLogic in tree.childs)
        {
            if (child.user_info.name == this._name)
            {
                g_IDECenter.center.project_edit_tab.tab = g_IDECenter.center.control_list;
                g_IDECenter.center.control_list.ShowTreeItemFocus(child);
                return;
            }
        }
    }
	
	public fun CreateByNew(string type)
    {
        var ui_manager = g_IDEProject.GetUIManager(this._module);
        if (ui_manager == null) return;

		// 创建初始信息
        var info = new ALittle.DisplayInfo();
        info.__class = type;
		// 新建控件对象
        var object = ALittle.NewObject(cast<Map<string,any>>(ALittle)[type], ui_manager.control);
		// 初始化一些数据，便于编辑
        IDEUIUtility_NewGiveBaseCase(info, object);
		// 添加到标签页
        this._tab_object_container.AddChild(object);
		// 添加控件树
        this._tree_object = IDEUIUtility_CreateTree(info, this._module, false, object, null, this, true);
        this._tree_object.AddEventListener(this, this.HandleTreeSizeChanged);
        this._tree_object.fold = true;
        this._tree_screen.AddChild(this._tree_object);
        this._anti_panel.Init(this);
	}
	
	public fun CreateByExtends(string extends_module, string extends_name) : bool
    {
        var extends_ui = g_IDEProject.GetUIManager(extends_module);
        if (extends_ui == null) return false;

        if (extends_ui.control_map[extends_name] == null) return false;

		// 创建初始信息
        var info = new ALittle.DisplayInfo();
        info.__module = extends_module;
        info.__extends = extends_name;

		// 新建控件对象
        var object = extends_ui.control.CreateControl{ALittle.DisplayObject}(extends_name);
		// 添加到标签页
        this._tab_object_container.AddChild(object);
		//控件树
        this._tree_object = IDEUIUtility_CreateTree(info, this._module, false, object, null, this, true);
        this._tree_object.AddEventListener(this, this.HandleTreeSizeChanged);
        this._tree_object.fold = true;
        this._tree_screen.AddChild(this._tree_object);
        this._anti_panel.Init(this);

        return true;
	}
	
	public fun CreateBySelect(const ALittle.DisplayInfo info)
    {
        var ui_manager = g_IDEProject.GetUIManager(this._module);
        if (ui_manager == null) return;

		// 新建控件对象
        var object = ui_manager.control.CreateControl{ALittle.DisplayObject}(ALittle.File_GetJustFileNameByPath(this._name));
		// 添加到标签页
        this._tab_object_container.AddChild(object);
		//控件树
        this._tree_object = IDEUIUtility_CreateTree(info, this._module, false, object, null, this, true);
        this._tree_object.AddEventListener(this, this.HandleTreeSizeChanged);
        this._tree_object.fold = true;
        this._tree_screen.AddChild(this._tree_object);
        // this.ShowHandleQuad(this._tree_object);
        this._anti_panel.Init(this);
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////-
	public fun IsShowHandleQuad(IDEUITreeLogic target) : bool
    {
        return this._tab_quad_map[target] != null;
	}
	
	public fun FocusInHandleQuad(IDEUITreeLogic target)
    {
        var handle_info = this._tab_quad_map[target];
        if (handle_info == null) return;
        A_UISystem.focus = handle_info.focus_quad;
	}

    public fun ClearHandQuad()
    {
        this._tab_quad_map = new Map<IDEUITreeLogic, IDEUITabChildHandleInfo>();
        this._tab_quad_container.RemoveAllChild();
    }
	
	public fun ShowHandleQuad(IDEUITreeLogic target, [Nullable] bool force_shift)
    {
		// 检查是否有按下shift键
        var shift = (A_UISystem.sym_map[1073742049] != null || A_UISystem.sym_map[1073742053] != null);
        if (force_shift) shift = true;
		var ctrl = (A_UISystem.sym_map[1073742048] != null || A_UISystem.sym_map[1073742052] != null);
        if (shift) ctrl = false;

		// 如果没有按下shift键，那么就直接清空所有的
		if (shift == false && ctrl == false)
        {
            this._tab_quad_map = new Map<IDEUITreeLogic, IDEUITabChildHandleInfo>();
            this._tab_quad_container.RemoveAllChild();
		}

		// 不是同一个父控件的不能同时选中
        var common_parent:IDEUITreeLogic = null;
        var has_target = false;
		for (var tree_target, handle_info in this._tab_quad_map)
        {
            common_parent = cast<IDEUITreeLogic>(tree_target.logic_parent);
            has_target = true;
            break;
		}
		if (has_target && common_parent != target.logic_parent)
        {
            var parent = target.logic_parent;
            while (parent != null && common_parent != parent)
            {
                target = cast<IDEUITreeLogic>(parent);
                parent = parent.logic_parent;
            }
            if (parent == null) return;
        }

        // 需要处理的列表
        var list = new List<IDEUITreeLogic>();
        if (!has_target || common_parent == null || ctrl)
        {
            list[1] = target;
        }
        else
        {
            // 找到最小的子控件下标
            var max_index = common_parent.GetChildIndex(target);
            var min_index = max_index;
            for (var child, info in this._tab_quad_map)
            {
                var index = common_parent.GetChildIndex(child);
                if (index < min_index) min_index = index;
                elseif (index > max_index) max_index = index;
            }
            for (var index = min_index; index <= max_index; 1)
            {
                var child = cast<IDEUITreeLogic>(common_parent.GetChildByIndex(index));
                if (this._tab_quad_map[child] == null)
                    ALittle.List_Push(list, child);
            }
        }

        for (var index, child in list)
        {
            var control_line = new IDEUITabChildControlLine();
            var handle_quad = g_Control.CreateControl{ALittle.DisplayObject}("aui_handle_quad", control_line);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadLButtonUp);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadLButtonDown);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadDragBegin);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadDrag);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadDragEnd);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadRButtonDown);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadKeyDown);
	
		    // control_line.size_quad_container.visible = false
            control_line.size_quad.AddEventListener(this, this.HandleHandleQuadKeyDown);
            control_line.size_quad.AddEventListener(this, this.HandleHandleSizeQuadDragBegin);
            control_line.size_quad.AddEventListener(this, this.HandleHandleSizeQuadDrag);
            control_line.size_quad.AddEventListener(this, this.HandleHandleSizeQuadDragEnd);
            control_line.size_quad.AddEventListener(this, this.HandleHandleSizeQuadMoveIn);
            control_line.size_quad.AddEventListener(this, this.HandleHandleSizeQuadMoveOut);

            var handle_info = new IDEUITabChildHandleInfo();
	
            var target_parent = child.user_info.object;
            var quad_parent = handle_quad;
		    while (target_parent != null)
            {
                quad_parent.x = target_parent.x;
                quad_parent.y = target_parent.y;
                quad_parent.width = target_parent.width;
                quad_parent.height = target_parent.height;
                quad_parent.scale_x = target_parent.scale_x;
                quad_parent.scale_y = target_parent.scale_y;
                quad_parent.center_x = target_parent.center_x;
                quad_parent.center_y = target_parent.center_y;
                quad_parent.angle = target_parent.angle;
	
                var display_group = new ALittle.DisplayGroup(g_Control);
                display_group.AddChild(quad_parent);
	
			    if (target_parent.show_parent == this._tab_object_container)
                {
                    handle_info.display_group = display_group;
                    this._tab_quad_container.AddChild(display_group);
                    break;
			    }
	
                quad_parent = display_group;
                target_parent = target_parent.show_parent;
		    }
		
            handle_info.handle_quad = handle_quad;
            handle_info.focus_quad = control_line.quad;
            handle_info.size_quad_container = control_line.size_quad_container;
            control_line.quad._user_data = handle_info;
            control_line.size_quad._user_data = handle_info;
	
            child.ShowAttributePanel();
		
            handle_info.target = child;
            this._tab_quad_map[child] = handle_info;
        }
	
        var loop = new ALittle.LoopFunction(bind(this.FocusInHandleQuad, this, target), 1, 0, 1);
        loop.Start();
	}

    public fun ShowHandleQuadList(List<IDEUITreeLogic> list)
    {
        this._tab_quad_map = new Map<IDEUITreeLogic, IDEUITabChildHandleInfo>();
        this._tab_quad_container.RemoveAllChild();
	
        var target:IDEUITreeLogic = null;
        for (var index, child in list)
        {
            target = child;
            var control_line = new IDEUITabChildControlLine();
            var handle_quad = g_Control.CreateControl{ALittle.DisplayObject}("ide_common_handle_quad", control_line);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadLButtonUp);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadLButtonDown);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadDragBegin);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadDrag);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadDragEnd);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadRButtonDown);
            control_line.quad.AddEventListener(this, this.HandleHandleQuadKeyDown);
	
		    // control_line.size_quad_container.visible = false
            control_line.size_quad.AddEventListener(this, this.HandleHandleQuadKeyDown);
            control_line.size_quad.AddEventListener(this, this.HandleHandleSizeQuadDragBegin);
            control_line.size_quad.AddEventListener(this, this.HandleHandleSizeQuadDrag);
            control_line.size_quad.AddEventListener(this, this.HandleHandleSizeQuadDragEnd);
            control_line.size_quad.AddEventListener(this, this.HandleHandleSizeQuadMoveIn);
            control_line.size_quad.AddEventListener(this, this.HandleHandleSizeQuadMoveOut);

            var handle_info = new IDEUITabChildHandleInfo();
	
            var target_parent = child.user_info.object;
            var quad_parent = handle_quad;
		    while (target_parent != null)
            {
                quad_parent.x = target_parent.x;
                quad_parent.y = target_parent.y;
                quad_parent.width = target_parent.width;
                quad_parent.height = target_parent.height;
                quad_parent.scale_x = target_parent.scale_x;
                quad_parent.scale_y = target_parent.scale_y;
                quad_parent.center_x = target_parent.center_x;
                quad_parent.center_y = target_parent.center_y;
                quad_parent.angle = target_parent.angle;
	
                var display_group = new ALittle.DisplayGroup(g_Control);
                display_group.AddChild(quad_parent);
	
			    if (target_parent.show_parent == this._tab_object_container)
                {
                    handle_info.display_group = display_group;
                    this._tab_quad_container.AddChild(display_group);
                    break;
			    }
	
                quad_parent = display_group;
                target_parent = target_parent.show_parent;
		    }
		
            handle_info.handle_quad = handle_quad;
            handle_info.focus_quad = control_line.quad;
            handle_info.size_quad_container = control_line.size_quad_container;
            control_line.quad._user_data = handle_info;
            control_line.size_quad._user_data = handle_info;
	
            child.ShowAttributePanel();
		
            handle_info.target = child;
            this._tab_quad_map[child] = handle_info;
        }
	
        if (target == null) return;
        var loop = new ALittle.LoopFunction(bind(this.FocusInHandleQuad, this, target), 1, 0, 1);
        loop.Start();
    }
	
	public fun HideHandleQuad(IDEUITreeLogic target, [Nullable] bool shift)
    {
        var handle_info = this._tab_quad_map[target];
        if (handle_info == null) return;
	
		if (shift == null)
            shift = (A_UISystem.sym_map[1073742049] != null || A_UISystem.sym_map[1073742053] != null);
		var ctrl = (A_UISystem.sym_map[1073742048] != null || A_UISystem.sym_map[1073742052] != null);
        if (shift) ctrl = false;

		if (shift == false && ctrl == false)
        {
            this._tab_quad_map = new Map<IDEUITreeLogic, IDEUITabChildHandleInfo>();
            this._tab_quad_container.RemoveAllChild();
	
            target.ShowAttributePanel();
            this._tab_quad_map[handle_info.target] = handle_info;
            this._tab_quad_container.AddChild(handle_info.display_group);
            return;
		}
	
        this._tab_quad_container.RemoveChild(handle_info.display_group);
        this._tab_quad_map[handle_info.target] = null;
	}
	
	public fun UpdateHandleQuadLayout(IDEUITreeLogic target)
    {
        var handle_info = this._tab_quad_map[target];
        if (handle_info == null) return;
	
        handle_info.handle_quad.x = target.user_info.object.x;
        handle_info.handle_quad.y = target.user_info.object.y;
        handle_info.handle_quad.width = target.user_info.object.width;
        handle_info.handle_quad.height = target.user_info.object.height;
        handle_info.handle_quad.scale_x = target.user_info.object.scale_x;
        handle_info.handle_quad.scale_y = target.user_info.object.scale_y;
        handle_info.handle_quad.center_x = target.user_info.object.center_x;
        handle_info.handle_quad.center_y = target.user_info.object.center_y;
        handle_info.handle_quad.angle = target.user_info.object.angle;
	}
	
	public fun UpdateHandleQuadRemove(IDEUITreeLogic target)
    {
        var handle_info = this._tab_quad_map[target];
        if (handle_info == null) return;
        this._tab_quad_container.RemoveChild(handle_info.handle_quad);
        this._tab_quad_map[target] = null;
	}
    
	private fun HandleHandleContainerLButtonDown(ALittle.UILButtonDownEvent event)
    {
        this._container_drag = false;
    }
	
	private fun HandleHandleContainerLButtonUp(ALittle.UILButtonUpEvent event)
    {
        if (this._container_drag) return;

		// 检查必要参数
        if (this._tree_object == null) return;
	
        var target = this._tree_object.EditPickUp(event.rel_x, event.rel_y);
        if (target == null) return;
	
        this.ShowHandleQuad(target);
	}

    private fun HandleHandleContainerDragBegin(ALittle.UIButtonDragBeginEvent event)
    {
        this.ClearHandQuad();

        var target = this._tree_object.EditPickUp(event.rel_x, event.rel_y);
        if (target == null) return;

        // 记录开始位置
        this._container_drag_x = event.rel_x;
        this._container_drag_y = event.rel_y;
        
        this._container_drag_parent = cast<IDEUITree>(target.logic_parent);

        this._tab_select_rect.visible = true;
        this._tab_select_rect.x = this._container_drag_x;
        this._tab_select_rect.y = this._container_drag_y;
        this._tab_select_rect.width = 0;
        this._tab_select_rect.height = 0;
    }

    private fun HandleHandleContainerDrag(ALittle.UIButtonDragEvent event)
    {
        if (this._container_drag_x == null) return;

        var min_x = this._container_drag_x;
        var max_x = event.rel_x;
        if (this._container_drag_x > event.rel_x)
        {
            min_x = event.rel_x;
            max_x = this._container_drag_x;
        }
        
        var min_y = this._container_drag_y;
        var max_y = event.rel_y;
        if (this._container_drag_y > event.rel_y)
        {
            min_y = event.rel_y;
            max_y = this._container_drag_y;
        }

        this._tab_select_rect.x = min_x;
        this._tab_select_rect.y = min_y;
        this._tab_select_rect.width = max_x - min_x;
        this._tab_select_rect.height = max_y - min_y;
    }

    private fun HandleHandleContainerDragEnd(ALittle.UIButtonDragEndEvent event)
    {
        this._tab_select_rect.visible = false;
        // 遍历判断
        if (this._container_drag_parent == null) return;
        var rel_x, rel_y = this._container_drag_parent.user_info.object.LocalToGlobal(this._edit_screen);

		var offset_x, offset_y = this._container_drag_parent.user_info.object.GetChildOffset();
        rel_x += offset_x;
        rel_y += offset_y;
                
        var min_x = this._container_drag_x;
        var max_x = event.rel_x;
        if (this._container_drag_x > event.rel_x)
        {
            min_x = event.rel_x;
            max_x = this._container_drag_x;
        }
        min_x -= rel_x;
        max_x -= rel_x;
        
        var min_y = this._container_drag_y;
        var max_y = event.rel_y;
        if (this._container_drag_y > event.rel_y)
        {
            min_y = event.rel_y;
            max_y = this._container_drag_y;
        }
        min_y -= rel_y;
        max_y -= rel_y;

        var list = new List<IDEUITreeLogic>();
        for (var index, tree_logic in this._container_drag_parent.childs)
        {
            if (cast<IDEUITreeLogic>(tree_logic).SelectPickRange(min_x, min_y, max_x, max_y))
                ALittle.List_Push(list, cast<IDEUITreeLogic>(tree_logic));
        }

        this.ShowHandleQuadList(list);

        this._container_drag_x = null;
        this._container_drag_y = null;
        this._container_drag_parent = null;
        this._container_drag = true;
    }
	
	public fun HandleSelectRightExItemClick(ALittle.UIEvent event)
    {
        var tree = event.target._user_data;
        if (tree == null) return;
	
        this.ShowHandleQuad(tree);
	}
	
	public fun HandleScaleContainerLButtonDown(ALittle.UILButtonDownEvent event)
    {
        var shift = (A_UISystem.sym_map[1073742049] != null || A_UISystem.sym_map[1073742053] != null);
        var scale = this._tab_screen.container.scale_x;
		if (shift)
        {
            scale = scale - 0.1;
            if (scale < 0) scale = 0;
        }
		else
            scale = scale + 0.1;

        this._tab_screen.container.scale_x = scale;
        this._tab_screen.container.scale_y = scale;
        this._tab_screen.AdjustScrollBar();
        g_IDECenter.center.UpdateToolScale(scale);
	}
	
	private fun HandleEditScaleChanged(IDEUICenterScaleChangedEvent event)
    {
        this._tab_screen.container.scale_x = event.scale;
        this._tab_screen.container.scale_y = event.scale;
        this._tab_screen.AdjustScrollBar();
	}

	public fun GetScale() : double
    {
        return this._tab_screen.container.scale_x;
	}
	
	public fun HandleHandleQuadLButtonDown(ALittle.UILButtonDownEvent event)
    {
		// 获取信息
        var handle_info:IDEUITabChildHandleInfo = event.target._user_data;
        handle_info.buttondown_lock = true;
        handle_info.buttondown_count = event.count;
	}
	
	public fun HandleHandleQuadLButtonUp(ALittle.UILButtonUpEvent event)
    {
		// 获取信息
        var handle_info:IDEUITabChildHandleInfo = event.target._user_data;
        if (handle_info.buttondown_lock != true) return;

        this.HideHandleQuad(handle_info.target);
        if (handle_info.buttondown_count >= 2)
            g_IDEAttrControlDialog.ShowDialog(handle_info.target.user_info.object);
        else
            g_IDEAttrControlDialog.HideDialog();
	}

    public static ControlCopyInfoCmp(IDEControlCopyInfo a, IDEControlCopyInfo b) : bool
    {
        return a.index < b.index;
    }
	
	public fun HandleHandleQuadKeyDown(ALittle.UIKeyDownEvent event)
    {
	    //处理Ctrl+C////////////////////////////////////////////////////////////////////////
		if (event.sym == ALittle.UIEnumTypes.KEY_C && event.mod & ALittle.UIEnumTypes.KMOD_CTRL != 0)
        {
            var copy_list = new List<IDEControlCopyInfo>();
            var copy_list_count = 0;
			for (var target, handle_info in this._tab_quad_map)
            {
				if (handle_info.target.logic_parent != null)
                {
                    var info = new IDEControlCopyInfo();
                    info.module = this._module;
                    info.index = handle_info.target.logic_parent.GetChildIndex(handle_info.target);
					info.info = handle_info.target.CalcInfo();
                    ++ copy_list_count;
                    copy_list[copy_list_count] = info;
				}
			}
			if (copy_list_count > 0)
            {
                ALittle.List_Sort(copy_list, IDEUITabChild.ControlCopyInfoCmp);
                ALittle.System_SetClipboardText(ALittle.String_JsonEncode(copy_list));
			}
            return;
		}
	    //处理Ctrl+X////////////////////////////////////////////////////////////////////////
		if (event.sym == ALittle.UIEnumTypes.KEY_X && event.mod & ALittle.UIEnumTypes.KMOD_CTRL != 0)
        {
            var copy_list = new List<IDEControlCopyInfo>();
            var copy_list_count = 0;
			for (var target, handle_info in this._tab_quad_map)
            {
                var info = new IDEControlCopyInfo();
                info.module = this._module;
                info.index = handle_info.target.logic_parent.GetChildIndex(handle_info.target);
                info.info = handle_info.target.CalcInfo();
                ++ copy_list_count;
                copy_list[copy_list_count] = info;
			}
			if (copy_list_count > 0)
            {
                ALittle.List_Sort(copy_list, IDEUITabChild.ControlCopyInfoCmp);
                ALittle.System_SetClipboardText(ALittle.String_JsonEncode(copy_list));
                var revoke_bind = new ALittle.RevokeBind();
				for (var target, handle_info in this._tab_quad_map)
                    handle_info.target.TreeCut(revoke_bind);
                this._revoke_list.PushRevoke(revoke_bind);
			}
            return;
		}
	    //处理Delete键
		if (event.sym == ALittle.UIEnumTypes.KEY_DELETE)
        {
            var revoke_bind = new ALittle.RevokeBind();
            var has_target = false;
			for (var target, handle_info in this._tab_quad_map)
            {
                handle_info.target.TreeDelete(revoke_bind);
                has_target = true;
			}
			if (has_target)
            {
                this._tab_quad_map = new Map<IDEUITreeLogic, IDEUITabChildHandleInfo>();
                this._tab_quad_container.RemoveAllChild();
                this._revoke_list.PushRevoke(revoke_bind);
			}
            return;
		}
	    //处理Ctrl+V////////////////////////////////////////////////////////////////////////
		if (event.sym == ALittle.UIEnumTypes.KEY_V && event.mod & ALittle.UIEnumTypes.KMOD_CTRL != 0)
        {
            var handle_info:IDEUITabChildHandleInfo = event.target._user_data;
			// 获取父控件
            var common_parent = handle_info.target.logic_parent;
            var child_index = 1;
			if (common_parent == null)
                common_parent = handle_info.target;
			else
                child_index = common_parent.GetChildIndex(handle_info.target) + 1;
            
            this.RightControlTreePasteImpl(cast<IDEUITreeLogic>(common_parent), null, child_index);
            return;
		}
	    //处理键盘上下左右//////////////////////////////////////////////////////////////////
        var delta_x = 0;
        var delta_y = 0;
		if (event.sym == 1073741904) // 左键
            delta_x = -1;
		elseif (event.sym == 1073741903) // 右键
            delta_x = 1;
		elseif (event.sym == 1073741906) // 上键
            delta_y = -1;
		elseif (event.sym == 1073741905) // 下键
            delta_y = 1;
		else
            return;
	
		// 当前没有控件，或者是根节点，不能拖动
        var common_parent:IDEUITreeLogic = null;
		for (var tree_target, handle_info in this._tab_quad_map)
        {
            common_parent = cast<IDEUITreeLogic>(tree_target.logic_parent);
            break;
		}
        if (common_parent == null) return;
		// 检查这个父控件的子控件是否可以移动
		if (g_IDEEnum.can_move_child_map[common_parent.user_info.default.__class] == null)
            return;
	
		// 创建一批撤销
        var revoke_bind = new ALittle.RevokeBind();
	
		// 开始拖动
        var has_target = false;
		for (var target, handle_info in this._tab_quad_map)
        {
            target.DragXY(delta_x, delta_y);
            this.UpdateHandleQuadLayout(target);
	
            has_target = true;
            var revoke = new IDEDragXYRevoke(target, delta_x, delta_y);
            revoke_bind.PushRevoke(revoke);
		}
        if (has_target == false) return;
        this._revoke_list.PushRevoke(revoke_bind);
	
        this.save = false;
	}
	
	public fun HandleHandleQuadDragBegin(ALittle.UIButtonDragBeginEvent event)
    {
		// 当前没有控件，或者是根节点，不能拖动
        var common_parent:IDEUITreeLogic = null;
		for (var tree_target, handle_info in this._tab_quad_map)
        {
            common_parent = cast<IDEUITreeLogic>(tree_target.logic_parent);
            break;
		}
        if (common_parent == null) return;
		// 检查这个父控件的子控件是否可以移动
		if (g_IDEEnum.can_move_child_map[common_parent.user_info.default.__class] == null)
            return;
        
		// 标记一下刚才的位置
		for (var target, handle_info in this._tab_quad_map)
        {
            handle_info.delta_x = 0;
            handle_info.delta_y = 0;
            handle_info.lock_x_or_y = null;
            handle_info.buttondown_lock = false;
		}
	
        this.save = false;
	}
	
	public fun HandleHandleQuadDrag(ALittle.UIButtonDragEvent event)
    {
		// 当前没有控件，或者是根节点，不能拖动
        var common_parent:IDEUITreeLogic = null;
		for (var tree_target, handle_info in this._tab_quad_map)
        {
            common_parent = cast<IDEUITreeLogic>(tree_target.logic_parent);
            break;
		}
        if (common_parent == null) return;
		// 检查这个父控件的子控件是否可以移动
		if (g_IDEEnum.can_move_child_map[common_parent.user_info.default.__class] == null)
            return;
	
        var shift = (A_UISystem.sym_map[1073742049] != null || A_UISystem.sym_map[1073742053] != null);
		
		// 开始拖动
		for (var target, handle_info in this._tab_quad_map)
        {
            var delta_x = event.delta_x;
            var delta_y = event.delta_y;

			if (shift)
            {
                if (handle_info.lock_x_or_y == null)
                    handle_info.lock_x_or_y = ALittle.Math_Abs(delta_x) > ALittle.Math_Abs(delta_y);

				if (handle_info.lock_x_or_y)
                    delta_y = 0;
				else
                    delta_x = 0;
			}
            else
            {
                handle_info.lock_x_or_y = null;
            }

			// 旧的绝对位置
            var old_abs_x = event.abs_x - delta_x;
            var old_abs_y = event.abs_y - delta_y;
        
			// 旧的绝对位置，转为旧的相对位置
            var old_rel_x, old_rel_y = target.user_info.object.show_parent.GlobalToLocalMatrix2D(old_abs_x, old_abs_y);
			// 新的绝对位置，转为新的相对位置
            var new_rel_x, new_rel_y = target.user_info.object.show_parent.GlobalToLocalMatrix2D(event.abs_x, event.abs_y);
			// 新的相对位置 减去 旧的相对位置，才是真正的差值
            delta_x = new_rel_x - old_rel_x;
            delta_y = new_rel_y - old_rel_y;
	
            target.DragXY(delta_x, delta_y);
	
            this.UpdateHandleQuadLayout(target);
	
            handle_info.delta_x = handle_info.delta_x + delta_x;
            handle_info.delta_y = handle_info.delta_y + delta_y;
		}
	}
	
	public fun HandleHandleQuadDragEnd(ALittle.UIButtonDragEndEvent event)
    {
		// 创建一批撤销
        var revoke_bind = new ALittle.RevokeBind();
	
        var has_target = false;
		for (var target, handle_info in this._tab_quad_map)
        {
            has_target = true;
            var revoke = new IDEDragXYRevoke(target, handle_info.delta_x, handle_info.delta_y);
            revoke_bind.PushRevoke(revoke);
		}
	
        if (has_target == false) return;
        this._revoke_list.PushRevoke(revoke_bind);
	}
	
	public fun HandleHandleQuadRButtonDown(ALittle.UIRButtonDownEvent event)
    {
        var handle_info:IDEUITabChildHandleInfo = event.target._user_data;
        var target = handle_info.target;
        
		var menu = new AUIPlugin.AUIRightMenu();
		menu.AddItem("获取焦点", bind(this.ShowTreeItemFocus, this, target));
		menu.AddItem("拾取父节点", bind(this.PickParent, this, target), target.user_info.root);
		menu.AddItem("设置", bind(g_IDEAttrControlDialog.ShowDialog, g_IDEAttrControlDialog, target.user_info.object));
		menu.AddItem("文本编辑", bind(this.TextEdit, this, target), g_IDEEnum.text_edit_display_map[target.user_info.default.__class] == null);
		menu.AddItem("上移", bind(target.TransferUp, target), target.user_info.root || target.user_info.child_type != "child");
		menu.AddItem("下移", bind(target.TransferDown, target), target.user_info.root || target.user_info.child_type != "child");
		menu.AddItem("添加", bind(g_IDECenter.center.control_tree.ShowAddDialog, g_IDECenter.center.control_tree, target), !target.is_tree);
		menu.AddItem("添加Image", bind(g_IDECenter.center.control_tree.ShowAddImageDialog, g_IDECenter.center.control_tree, target), !target.is_tree);
		menu.AddItem("添加Text", bind(g_IDECenter.center.control_tree.ShowAddTextDialog, g_IDECenter.center.control_tree, target), !target.is_tree);
		menu.AddItem("复制", bind(this.Copy, this, target));
		menu.AddItem("粘贴", bind(this.Paste, this, target));
		menu.AddItem("剪切", bind(this.Cut, this, target), target.user_info.root);
		menu.AddItem("删除", bind(this.Delete, this, target), target.user_info.root);
		menu.AddItem("跳转", bind(this.Jump, this, target), !target.user_info.extends_root);
		menu.AddItem("生成成员变量代码", bind(this.GenerateClassMember, this, target), target.is_tree && target.user_info.base.__target_class == null && target.user_info.default.__target_class == null);
        menu.Show();
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public fun HandleHandleSizeQuadDragBegin(ALittle.UIButtonDragBeginEvent event)
    {
		// 获取信息
        var target_handle_info:IDEUITabChildHandleInfo = event.target._user_data;
		// 获取target
        var target = target_handle_info.target;
        var parent = cast<IDEUITreeLogic>(target.logic_parent);
		
		// 检查这个父控件的子控件是否可以变化大小
		if (parent != null && g_IDEEnum.can_move_child_map[parent.user_info.default.__class] == null)
            return;

		// 标记一下刚才的位置
		for (var child, handle_info in this._tab_quad_map)
        {
            handle_info.delta_width = 0;
            handle_info.delta_height = 0;
            handle_info.lock_width_or_height = null;
		}
	
        this.save = false;
	}
	public fun HandleHandleSizeQuadDrag(ALittle.UIButtonDragEvent event)
    {
		// 获取信息
        var handle_info:IDEUITabChildHandleInfo = event.target._user_data;
        // 获取target
        var target = handle_info.target;
        var parent = cast<IDEUITreeLogic>(target.logic_parent);
		
		// 检查这个父控件的子控件是否可以变化大小
		if (parent != null && g_IDEEnum.can_move_child_map[parent.user_info.default.__class] == null)
            return;
	
        var shift = (A_UISystem.sym_map[1073742049] != null || A_UISystem.sym_map[1073742053] != null);
		
		// 开始拖动
        var delta_x = event.delta_x;
        var delta_y = event.delta_y;
			
		if (shift)
        {
            if (handle_info.lock_width_or_height == null)
                handle_info.lock_width_or_height = ALittle.Math_Abs(delta_x) > ALittle.Math_Abs(delta_y);

			if (handle_info.lock_width_or_height)
                delta_y = 0;
			else
                delta_x = 0;
		}
        else
        {
            handle_info.lock_width_or_height = null;
        }
	
		// 旧的绝对位置
        var old_abs_x = event.abs_x - delta_x;
        var old_abs_y = event.abs_y - delta_y;
	
		// 旧的绝对位置，转为旧的相对位置
        var old_rel_x, old_rel_y = target.user_info.object.GlobalToLocalMatrix2D(old_abs_x, old_abs_y);
		// 新的绝对位置，转为新的相对位置
        var new_rel_x, new_rel_y = target.user_info.object.GlobalToLocalMatrix2D(event.abs_x, event.abs_y);
		// 新的相对位置 减去 旧的相对位置，才是真正的差值
        delta_x = new_rel_x - old_rel_x;
        delta_y = new_rel_y - old_rel_y;
	
        var quad_width = handle_info.handle_quad.width + delta_x;
		if (quad_width < 0)
            delta_x = - handle_info.handle_quad.width;
	
        var quad_height = handle_info.handle_quad.height + delta_y;
		if (quad_height < 0)
            delta_y = - handle_info.handle_quad.height;
	
        target.DragWH(delta_x, delta_y);
	
        handle_info.handle_quad.width = handle_info.handle_quad.width + delta_x;
        handle_info.handle_quad.height = handle_info.handle_quad.height + delta_y;
	
        handle_info.delta_width = handle_info.delta_width + delta_x;
        handle_info.delta_height = handle_info.delta_height + delta_y;
		// 重置红框位置
        this.UpdateHandleQuadLayout(target);
	}
	
	public fun HandleHandleSizeQuadDragEnd(ALittle.UIButtonDragEndEvent event)
    {
		// 获取信息
        var handle_info:IDEUITabChildHandleInfo = event.target._user_data;
		// 获取target
        var target = handle_info.target;
        var revoke = new IDEDragWHRevoke(target, handle_info.delta_width, handle_info.delta_height);
        this._revoke_list.PushRevoke(revoke);
	}
	
	public fun HandleHandleSizeQuadMoveIn(ALittle.UIMoveInEvent event)
    {
        ALittle.System_SetHVDragCursor();
	}
	public fun HandleHandleSizeQuadMoveOut(ALittle.UIMoveOutEvent event)
    {
        ALittle.System_SetNormalCursor();
	}
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// 处理复制
	public fun Copy(IDEUITreeLogic target)
    {
		// 计算信息
        var copy_list = new List<IDEControlCopyInfo>();
        var copy_list_count = 0;
		for (var child, handle_info in this._tab_quad_map)
        {
            var info = new IDEControlCopyInfo();
            info.index = handle_info.target.logic_parent.GetChildIndex(handle_info.target);
            info.info = handle_info.target.CalcInfo();
            ++ copy_list_count;
            copy_list[copy_list_count] = info;
		}
		if (copy_list_count > 0)
        {
            ALittle.List_Sort(copy_list, IDEUITabChild.ControlCopyInfoCmp);
            ALittle.System_SetClipboardText(ALittle.String_JsonEncode(copy_list));
		}
	}
	// 实际处理粘贴的函数
	public fun RightControlTreePasteImpl(IDEUITreeLogic target, [Nullable] List<IDEControlCopyInfo> copy_list, [Nullable] int child_index, [Nullable] ALittle.RevokeBind revoke_bind,  [Nullable] Functor<(bool, List<IDEUITreeLogic>)> callback)
    {
		// 获取剪切板内容
		if (copy_list == null)
        {
            var text_info = ALittle.System_GetClipboardText();
			if (text_info == null)
            {
                g_AUITool.ShowNotice("错误", "剪切板的内容不能粘帖");
                if (callback != null) callback(false, null);
                return;
			}
	
            var error, copy_list_tmp:List<IDEControlCopyInfo> = tcall(ALittle.String_JsonDecode, text_info);
			if (error != null || ALittle.List_Len(copy_list_tmp) == 0)
            {
                g_AUITool.ShowNotice("错误", "剪切板的内容不能粘帖");
                if (callback != null) callback(false, null);
                return;
			}
            copy_list = copy_list_tmp;
		}
	
		for (var k, info in copy_list)
        {
			if (info.info.__class == null && info.info.__extends == null)
            {
                g_AUITool.ShowNotice("错误", "剪切板的内容不能粘帖");
                if (callback != null) callback(false, null);
                return;
			}

            // 检查模块
            if (info.module != null && info.module != this._module)
            {
                g_AUITool.ShowNotice("错误", "剪切板的内容属于其他模块不能粘帖");
                if (callback != null) callback(false, null);
                return;
            }
		}

        // 清理红色矩形
        this.ClearHandQuad();
	
        var clazz = target.user_info.default.__class;
		// 如果只有child，那么就直接添加
		if (g_IDEEnum.can_add_child_map[clazz] && g_IDEEnum.child_show_map[clazz] == null)
        {
            var add_list = new List<IDEUITreeLogic>();
            var add_list_count = 0;
            var inner_revoke_bind = new ALittle.RevokeBind();
			for (var k, info in copy_list)
            {
				if (k == 1)
                {
                    var tree_object = target.TreePaste(info.info, "child", child_index, false, inner_revoke_bind);
                    ++ add_list_count;
                    add_list[add_list_count] = tree_object;
                }
				else
                {
                    var tree_object = target.TreePaste(info.info, "child", child_index, true, inner_revoke_bind);
                    ++ add_list_count;
                    add_list[add_list_count] = tree_object;
				}
			}
			if (revoke_bind != null)
                revoke_bind.PushRevoke(inner_revoke_bind);
			else
                this._revoke_list.PushRevoke(inner_revoke_bind);

            if (callback != null) callback(true, add_list);
        }
		else
            g_IDECenter.center.control_tree.ShowPasteDialog(target, copy_list[1].info, child_index, revoke_bind, callback);
	}
	// 处理粘帖
	public fun Paste(IDEUITreeLogic target)
    {
		if (target.is_tree)
            this.RightControlTreePasteImpl(target);
		else
        {
            var common_parent = cast<IDEUITreeLogic>(target.logic_parent);
            var child_index = 1;
			if (common_parent == null)
                common_parent = target;
			else
                child_index = common_parent.GetChildIndex(target) + 1;

            this.RightControlTreePasteImpl(common_parent, null, child_index);
		}
	}
	// 处理删除
	public fun Delete(IDEUITreeLogic target)
    {
		// 执行删除
        var revoke_bind = new ALittle.RevokeBind();
        var has_target = false;
		for (var child, handle_info in this._tab_quad_map)
        {
            handle_info.target.TreeDelete(revoke_bind);
            has_target = true;
		}
		if (has_target)
        {
            this._tab_quad_map = new Map<IDEUITreeLogic, IDEUITabChildHandleInfo>();
            this._tab_quad_container.RemoveAllChild();
            this._revoke_list.PushRevoke(revoke_bind);
		}
	}
	// 处理剪切
	public fun Cut(IDEUITreeLogic target)
    {
        var copy_list = new List<IDEControlCopyInfo>();
        var copy_list_count = 0;
		for (var child, handle_info in this._tab_quad_map)
        {
            var info = new IDEControlCopyInfo();
            info.index = handle_info.target.logic_parent.GetChildIndex(handle_info.target);
			info.info = handle_info.target.CalcInfo();
            ++ copy_list_count;
            copy_list[copy_list_count] = info;
		}
		if (copy_list_count > 0)
        {
            ALittle.List_Sort(copy_list, IDEUITabChild.ControlCopyInfoCmp);
            ALittle.System_SetClipboardText(ALittle.String_JsonEncode(copy_list));
            var revoke_bind = new ALittle.RevokeBind();
			for (var child, handle_info in this._tab_quad_map)
                handle_info.target.TreeCut(revoke_bind);
            this._revoke_list.PushRevoke(revoke_bind);
		}
	}
	// 处理跳转
	public fun Jump(IDEUITreeLogic target)
    {
        var extends_module = target.user_info.base.__module;
        if (extends_module == null) extends_module = target.user_info.module;
        var extends_name = target.user_info.base.__extends;

        var ui_manager = g_IDEProject.GetUIManager(extends_module);
        if (ui_manager == null) return;

        var control_info = ui_manager.control_map[extends_name];
		if (control_info == null)
        {
            g_AUITool.ShowNotice("错误", "控件不存在:"..extends_name);
            return;
		}
	
        g_IDECenter.center.content_edit.StartEditControlBySelect(extends_module, extends_name);
	}
    // 生成类成员变量代码
    public async fun GenerateClassMember(IDEUITreeLogic target)
    {
        if (!target.is_tree)
        {
            g_AUITool.ShowNotice("错误", "容器才能生成成员变量代码");
            return;
        }

        var target_class = target.user_info.base.__target_class;
        if (target_class == null) target_class = target.user_info.default.__target_class;
        if (target_class == null)
        {
            g_AUITool.ShowNotice("错误", "没有设置插件类");
            return;
        }

        if (g_IDEProject.project.code == null) return;
        var find_text = ALittle.String_Join(target_class, ".");
        var info = g_IDEProject.project.code.FindGoto(find_text);
        if (info == null)
        {
            g_AUITool.ShowNotice("错误", "找不到插件类:"..find_text);
            return;
        }
        var tab_child = g_IDECenter.center.code_list.OpenByFullPath(info.file_path, info.line_start, info.char_start, info.line_end, info.char_end);
        if (tab_child == null)
        {
            g_AUITool.ShowNotice("错误", "找不到插件类:"..find_text);
            return;
        }

        // 生成link相关的代码
        var member_list = new List<string>();
        for (var index, child:IDEUITreeLogic in target.childs)
            child.GenerateClassMember(member_list);
        if (ALittle.List_Len(member_list) == 0) return;

        var text = ALittle.String_Join(member_list, "");
        tab_child.edit.EditFocus(info.line_end + 2, 0, null, null, true);
        tab_child.edit.InsertText(text, true);
    }

	// 处理文本编辑
	public fun TextEdit(IDEUITreeLogic target)
    {
        var object = target.user_info.object;
	
		// 创建输入框
		if (this._control_tabchild_textinput == null)
        {
            this._control_tabchild_textinput = g_Control.CreateControl{ALittle.ImageInput}("aui_rename_image_input", this);
            this._control_tabchild_textinput.width = 200;
            A_LayerManager.AddToModal(this._control_tabchild_textinput);
		}
		// 初始化输入框内容
        this._control_tabchild_textinput.visible = true;
        var x, y = object.LocalToGlobal();
        this._control_tabchild_textinput.text = object.text;
        this._control_tabchild_textinput.x = x;
        this._control_tabchild_textinput.y = y;
        this._control_tabchild_textinput._user_data = target;
        this._control_tabchild_textinput.SelectAll();
        A_UISystem.focus = this._control_tabchild_textinput.show_input;
	}
    // 拾取控件父节点
    public fun PickParent(IDEUITreeLogic target)
    {
        var parent = cast<IDEUITreeLogic>(target.logic_parent);
        if (parent == null) return;

        this.ShowHandleQuad(parent);
    }
	// 处理文本编辑结果
	public fun HandleRenameConfirm(ALittle.UIEvent event)
    {
		// 获取目标
        var target:IDEUITreeLogic = this._control_tabchild_textinput._user_data;
        if (target == null) return;
		// 清空目标
        this._control_tabchild_textinput._user_data = null;
		// 隐藏输入框
        this._control_tabchild_textinput.visible = false;
		// 获取输入框文本
        var text = this._control_tabchild_textinput.text;
	
		// 如果输入框没有文本，那么就直接返回
        if (text == "") return;
		// 调用重命名函数
        target.ChangeText(text);
	}
	
	//////////////////////////////////////////////////////////////////-
	// 在树形区域，设置控件焦点
	public fun ShowTreeItemFocus(IDEUITreeLogic target)
    {
        if (this._tree_object == null) return;
		// 显示
		if (target != this._tree_object)
        {
            var parent = cast<IDEUITreeLogic>(target.logic_parent);
			while (parent != null && parent != this._tree_object)
            {
                parent.fold = true;
                parent = cast<IDEUITreeLogic>(parent.logic_parent);
			}
		}
        this._tree_object.fold = true;
        this._tree_screen.AdjustScrollBar();
	
		// 如果现在直接看的见的话，就直接返回了
        var x, y = target.LocalToGlobal(this._tree_screen.container);
        var target_x = (this._tree_screen.view_width - target.width / 2) / 2 - x;
        var target_y = (this._tree_screen.view_height - target.height) / 2 - y;
	
        if (this._tree_loop_x != null) { this._tree_loop_x.Stop(); this._tree_loop_x = null; }
        if (this._tree_loop_y != null) { this._tree_loop_y.Stop(); this._tree_loop_y = null; }
	
        this._tree_loop_x = new ALittle.LoopLinear(this._tree_screen, "container_x", target_x, 300, 0);
        this._tree_loop_x.Start();
        this._tree_loop_y = new ALittle.LoopLinear(this._tree_screen, "container_y", target_y, 300, 0);
        this._tree_loop_y.Start();
	}
	//////////////////////////////////////////////////////////////////-
	public fun SearchLink(string name)
    {
        if (this._tree_object == null) return;
	
		if (this._tree_search_info.name != name)
        {
            this._tree_search_info.name = name;
            this._tree_search_info.index = 0;
		}
        var list = this._tree_object.SearchLink(name);
        var count = ALittle.List_Len(list);
        if (count == 0) return;
	
        this._tree_search_info.index = this._tree_search_info.index + 1;
        this._tree_search_info.index = this._tree_search_info.index % (count + 1);
	
        var target = list[this._tree_search_info.index];
        this.ShowTreeItemFocus(target);
        target.ShowAttributePanel();
        this.ShowHandleQuad(target);
	}
	
	public fun SearchEvent(string name)
    {
        if (this._tree_object == null) return;
	
		if (this._tree_search_info.name != name)
        {
            this._tree_search_info.name = name;
            this._tree_search_info.index = 0;
		}
        var list = this._tree_object.SearchEvent(name);
        var count = ALittle.List_Len(list);
        if (count == 0) return;
	
        this._tree_search_info.index = this._tree_search_info.index + 1;
        this._tree_search_info.index = this._tree_search_info.index % (count + 1);
	
        var target = list[this._tree_search_info.index];
        this.ShowTreeItemFocus(target);
        target.ShowAttributePanel();
        this.ShowHandleQuad(target);
	}
	
	public fun SearchDescription(string name)
    {
        if (this._tree_object == null) return;
	
		if (this._tree_search_info.name != name)
        {
            this._tree_search_info.name = name;
            this._tree_search_info.index = 0;
		}
        var list = this._tree_object.SearchDescription(name);
        var count = ALittle.List_Len(list);
        if (count == 0) return;
	
        this._tree_search_info.index = this._tree_search_info.index + 1;
        this._tree_search_info.index = this._tree_search_info.index % (count + 1);
	
        var target = list[this._tree_search_info.index];
        this.ShowTreeItemFocus(target);
        target.ShowAttributePanel();
        this.ShowHandleQuad(target);
	}
	
	public fun SearchTargetClass(string name)
    {
        if (this._tree_object == null) return;
	
		if (this._tree_search_info.name != name)
        {
            this._tree_search_info.name = name;
            this._tree_search_info.index = 0;
		}
        var list = this._tree_object.SearchTargetClass(name);
        var count = ALittle.List_Len(list);
        if (count == 0) return;
	
        this._tree_search_info.index = this._tree_search_info.index + 1;
        this._tree_search_info.index = this._tree_search_info.index % (count + 1);
	
        var target = list[this._tree_search_info.index];
        this.ShowTreeItemFocus(target);
        target.ShowAttributePanel();
        this.ShowHandleQuad(target);
	}
	
	public fun SearchTextureName(string name)
    {
        if (this._tree_object == null) return;
	
		if (this._tree_search_info.name != name)
        {
            this._tree_search_info.name = name;
            this._tree_search_info.index = 0;
		}
        var list = this._tree_object.SearchTextureName(name);
        var count = ALittle.List_Len(list);
        if (count == 0) return;
	
        this._tree_search_info.index = this._tree_search_info.index + 1;
        this._tree_search_info.index = this._tree_search_info.index % (count + 1);
	
        var target = list[this._tree_search_info.index];
        this.ShowTreeItemFocus(target);
        target.ShowAttributePanel();
        this.ShowHandleQuad(target);
	}
	//////////////////////////////////////////////////////////////////-
	
	// 实际处理快捷操作添加控件
	public fun QuickDragAddControl(double abs_x, double abs_y, string module_name, string control_name)
    {
		// 检查必要参数
        if (this._tree_object == null) return;

        // 如果超出编辑区，那么就直接返回
        var screen_x, screen_y = this._tab_screen.LocalToGlobal();
        if (abs_x < screen_x || abs_y < screen_y
            || abs_x > screen_x + this._tab_screen.width || abs_y > screen_y + this._tab_screen.height)
            return;
        
        var global_x, global_y = this._tab_handle_quad.LocalToGlobal();
	
        var list = new List<IDEUITreeLogic>();
        this._tree_object.QuickPickUp(abs_x - global_x, abs_y - global_y, list);
        var count = ALittle.List_Len(list);
        if (count == 0) return;
	
        var user_data = new IDEUITabChildQuickDragAddUserData();
        user_data.abs_x = abs_x;
        user_data.abs_y = abs_y;
        user_data.module_name = module_name;
        user_data.control_name = control_name;
	
		if (count == 1)
        {
            this.QuickDragAddStart(list[1], user_data);
            return;
		}

        var menu = new AUIPlugin.AUIRightMenu();
		for (var index, tree in list)
            menu.AddItem(tree.title, bind(this.QuickDragAddStart, this, tree, user_data));
        menu.AddItem("取消", null);
	}
	
	public fun QuickDragAddStart(IDEUITreeLogic tree, IDEUITabChildQuickDragAddUserData user_data)
    {
		// 定义撤销
        var revoke_bind = new ALittle.RevokeBind();
	
        var display_info = new ALittle.DisplayInfo();
        display_info.__module = user_data.module_name;
        display_info.__extends = user_data.control_name;
        var info = new IDEControlCopyInfo();
        info.index = 1;
        info.info = display_info;
        var copy_list = new List<IDEControlCopyInfo>();
        copy_list[1] = info;
		this.RightControlTreePasteImpl(tree, copy_list, tree.child_count + 1, revoke_bind
                                      , bind(this.QuickDragAddEnd, this, tree, user_data, revoke_bind));
	}
	
	public fun QuickDragAddEnd(IDEUITreeLogic tree, IDEUITabChildQuickDragAddUserData user_data, ALittle.RevokeBind revoke_bind, bool result, List<IDEUITreeLogic> add_list)
    {
        if (result == false) return;
	
        var global_x, global_y = tree.user_info.object.LocalToGlobal();
	
		// 设置一下位置
		for (var k, tree_object in add_list)
        {
            tree_object.attr_panel.SetXType(ALittle.UIEnumTypes.POS_ABS, revoke_bind);
            tree_object.attr_panel.SetYType(ALittle.UIEnumTypes.POS_ABS, revoke_bind);
            tree_object.attr_panel.SetXValue(user_data.abs_x - global_x, revoke_bind);
            tree_object.attr_panel.SetYValue(user_data.abs_y - global_y, revoke_bind);
		}
	
		// 添加撤销
        this._revoke_list.PushRevoke(revoke_bind);
	}
}
