
namespace ALittleIDE;

public class VertexImageS : DisplayObjectS
{
	public ctor(IDEUITreeUserInfo user_info, IDEUITabChild tab_child, IDEUITreeLogic tree_logic)
	{
		this._layer_name = "ide_setting_verteximage";
	}

	public fun LoadNatureBase()
	{
		DisplayObjectS.LoadNatureBase(this);
		this.LoadDefaultNilString("texture_name");
		this.LoadValueData("u1");
		this.LoadValueData("v1");
		this.LoadValueData("u2");
		this.LoadValueData("v2");
		this.LoadValueData("u3");
		this.LoadValueData("v3");
		this.LoadValueData("u4");
		this.LoadValueData("v4");
		this.LoadValueData("x1");
		this.LoadValueData("y1");
		this.LoadValueData("x2");
		this.LoadValueData("y2");
		this.LoadValueData("x3");
		this.LoadValueData("y3");
		this.LoadValueData("x4");
		this.LoadValueData("y4");
	}
	//texture_name
	public fun HandleImageTextureNameFOCUSOUT(ALittle.UIEvent event)
	{
		this.DefaultNilStringInputChange("texture_name", false);
	}
	//texture_name
	public async fun HandleImageTextureNameSelect(ALittle.UIEvent event)
	{
        var ui_manager = g_IDEProject.GetUIManager(this._tree_logic.user_info.module);
        if (ui_manager == null)
        {
            g_AUITool.ShowNotice("错误", "模块不存在:"..this._tree_logic.user_info.module);
            return;
        }

		g_IDEImageSelectDialog.SetBasePath(ui_manager.texture_path);
		var path = g_IDEImageSelectDialog.ShowSelect();
		if (path == null) return;
		this.ImagePathSelectCallback("texture_name", this.HandleImageTextureNameFOCUSOUT, null, path, true);
	}
	//设置texture_name
	public fun SetTextureName(string texture_name, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (texture_name == null) return;
		this.ImagePathSelectCallback("texture_name", this.HandleImageTextureNameFOCUSOUT, revoke_bind, texture_name, true);
	}

	//u1
	public fun HandleU1FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("u1", true);
	}
	//v1
	public fun HandleV1FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("v1", true);
	}

	//u2
	public fun HandleU2FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("u2", true);
	}
	//v2
	public fun HandleV2FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("v2", true);
	}

	//u3
	public fun HandleU3FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("u3", true);
	}
	//v3
	public fun HandleV3FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("v3", true);
	}

	//u4
	public fun HandleU4FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("u4", true);
	}
	//v4
	public fun HandleV4FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("v4", true);
	}

	//x1
	public fun HandleX1FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("x1", true);
	}
	//y1
	public fun HandleY1FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("y1", true);
	}

	//x2
	public fun HandleX2FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("x2", true);
	}
	//y2
	public fun HandleY2FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("y2", true);
	}

	//x3
	public fun HandleX3FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("x3", true);
	}
	//y3
	public fun HandleY3FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("y3", true);
	}

	//x4
	public fun HandleX4FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("x4", true);
	}
	//y4
	public fun HandleY4FOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("y4", true);
	}
}