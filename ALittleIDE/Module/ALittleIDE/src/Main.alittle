namespace ALittleIDE;

// 壳入口函数
public async static __Browser_Setup(ALittle.DisplayLayout layer_group
                             , ALittle.ControlSystem control
                             , string module_base_path, string script_base_path)
{
    // 删除7天前的日志
    ALittle.DeleteLog(7);
    
    // 创建窗口
    var window_width, window_height, flag, scale = ALittle.System_CalcLandscape(1200, 600
        , ALittle.BitOr(ALittle.UIEnumTypes.VIEW_MAXIMIZED, ALittle.UIEnumTypes.VIEW_RESIZABLE));
    ALittle.System_CreateView("ALittleIDE", window_width, window_height, flag, scale);
    ALittle.System_SetViewIcon(module_base_path.."Other/ic_launcher.png");
    
    // 加载模块
    A_ModuleSystem.LoadModule(module_base_path, "ALittleIDE");
}

// 壳处理添加模块，layer_group是模块的层组
// 返回false，或者nil，表示不处理，下面的层直接挂姐在壳下面
public static __Browser_AddModule(string module_name, ALittle.DisplayLayout layer_group, ALittle.ModuleInfo module_info)
{
}

// 壳结束函数
public static __Browser_Shutdown()
{
}

protected var g_Control:ALittle.ControlSystem;
protected var g_AUIPluinControl:ALittle.ControlSystem;
protected var g_LayerGroup:ALittle.DisplayLayout;
protected var g_ModuleBasePath:string;
protected var g_ScriptBasePath:string;
protected var g_ModuleBasePathEx:string;

protected var g_IDEConfig:ALittle.IJsonConfig;
protected var g_IDEServerConfig:ALittle.IJsonConfig;

protected var g_MainLayer:ALittle.DisplayLayout;
protected var g_DialogLayer:ALittle.DisplayLayout;

// 模块入口函数
public async static __Module_Setup(ALittle.DisplayLayout layer_group, ALittle.ControlSystem control
                            , string module_base_path, string script_base_path)
{
    // 把resource, layer_group变量保存到全局，便于使用
    g_Control = control;
    g_LayerGroup = layer_group;
    g_ModuleBasePath = module_base_path;
    g_ModuleBasePathEx = ALittle.File_BaseFilePath()..module_base_path;
    g_ScriptBasePath = script_base_path;

	// 加载UI插件
    g_AUIPluinControl = A_ModuleSystem.LoadPlugin("AUIPlugin");
    
    // 获取配置信息
	g_IDEConfig = ALittle.CreateConfigSystem("ALittleIDE.cfg");
	// 获取配置信息
	g_IDEServerConfig = ALittle.CreateConfigSystem(g_ModuleBasePath.."/Other/Server.cfg");
	// 生成随机数种子
	ALittle.Math_RandomSeed(ALittle.Time_GetCurTime());
	// 设置5个线程
	ALittle.System_SetThreadCount(5);
    
    // 创建主层
    g_MainLayer = new ALittle.DisplayLayout(g_Control);
    g_MainLayer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    g_MainLayer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    g_LayerGroup.AddChild(g_MainLayer);
    // 创建对话框层
	g_DialogLayer = new ALittle.DisplayLayout(g_Control);
	g_DialogLayer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
	g_DialogLayer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
	g_LayerGroup.AddChild(g_DialogLayer);
    
    // 这里加载必要的代码，最好把所有的都加载进来
	alittle.RequireFromPaths(g_ScriptBasePath, "Data/", paths("src/Data"));	
    alittle.RequireFromPaths(script_base_path, "Dialog/", paths("src/Dialog"));
    alittle.RequireFromPaths(script_base_path, "IDE/", paths("src/IDE"));

    // 初始化
    g_IDECenter.Setup();
}

// 模块结束函数
public static __Module_Shutdown()
{
    g_IDEProject.CloseProject();
    g_IDECenter.Shutdown();
    
	g_IDEImageSelectDialog.Shutdown();
	g_IDEImageManagerDialog.Shutdown();
	g_IDEEditImageDialog.Shutdown();
}

// 提供给壳的模块信息
public static __Module_GetInfo(ALittle.ControlSystem control, string module_base_path, string script_base_path) : ALittle.ModuleShortInfo
{
    var info = new ALittle.ModuleShortInfo();
    info.title = "ALittle集成开发环境";
    info.icon = null;
    info.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    info.width_value = 0;
    info.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    info.height_value = 0;
    return info;
}