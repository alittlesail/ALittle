
namespace AUIPlugin;

public struct AUIFileSelectRightButtonDownEvent : ALittle.Event
{
    string path;
	bool directory;
}

public class AUIFileSelectDialog : ALittle.EventDispatcher
{
	private ALittle.Dialog _dialog;

	private string _title;
	private ALittle.DisplayLayout _layer;
    private AUIFileSelectLayout _layout;
	private List<string> _ext_list;

	private ALittle.DisplayObject _drag_lr_quad;
	private ALittle.DisplayObject _drag_ud_quad;

	public ctor(string title, ALittle.DisplayLayout layer, List<string> ext_list)
	{
		this._title = title;
		this._layer = layer;
        this._ext_list = ext_list;
	}

    // 释放
	public fun Shutdown()
	{
        if (this._layout != null)
        	this._layout.Release();

		if (this._dialog != null)
		{
			if (this._layer != null)
				this._layer.RemoveChild(this._dialog);
			else
				A_LayerManager.RemoveFromModal(this._dialog);
            this._dialog = null;
        }
    }
	
    // 关闭对话框
	public fun HideDialog()
	{
        if (this._layout != null)
        	this._layout.Release();

		if (this._dialog != null) this._dialog.visible = false;
	}

    // 显示对话框
	public fun ShowDialog()
	{
        if (this._layout != null)
        	this._layout.Release();

		this.CreateDialog();
		this._dialog.visible = true;
	}

    // 创建对话框
	private fun CreateDialog()
	{
        // 创建模态提示对话框，并添加到模态层
		if (this._dialog == null)
		{
			this._dialog = g_Control.CreateControl{ALittle.Dialog}("file_select_dialog", this);
			this._dialog.title = this._title;
			if (this._layer != null) this._layer.AddChild(this._dialog);
			else A_LayerManager.AddToModal(this._dialog);
            this._dialog.close_callback = bind(this.HandleDialogClose, this);

            this._layout.Init(this._ext_list);
            this._layout.AddEventListener(this, this.HandleItemRButtonDown);
		}
    }

    private fun HandleItemRButtonDown(AUIFileSelectRightButtonDownUIEvent event)
    {
        var e = new AUIFileSelectRightButtonDownEvent();
        e.path = event.path;
        e.directory = event.directory;
        this.DispatchEvent(e);
    }

    // 获取基础路径
    public get base_path() : string
    {
        if (this._layout == null) return null;
        return this._layout.base_path;
    }

    // 显示
	public await fun ShowSelect() : string
	{
		this.ShowDialog();
        var result = this._layout.ShowSelect();
        this._dialog.visible = false;
        return result;
    }

    private fun HandleDialogClose() : bool
    {
        if (this._layout != null)
        	this._layout.Release();
        return true;
    }

	// 选择图片    
    private fun System_SetVDragCursor(ALittle.UIEvent event) { ALittle.System_SetVDragCursor(); }
    private fun System_SetNormalCursor(ALittle.UIEvent event) { ALittle.System_SetNormalCursor(); }
    private fun System_SetHDragCursor(ALittle.UIEvent event) { ALittle.System_SetHDragCursor(); }
    private fun System_SetHVDragCursor(ALittle.UIEvent event) { ALittle.System_SetHVDragCursor(); }
	
	// base_path 为根路径，尾部不要带 /
	// rel_path 初始化相对于base_path的路径，尾部不要带 /
	private fun SetPath(string base_path, string rel_path) : bool
	{
        this.CreateDialog();
        return this._layout.SetPath(base_path, rel_path);
	}

	public fun SetBasePath(string base_path) : bool
	{
		if (this.base_path == base_path) return true;
		return this.SetPath(base_path, "");
    }

    public fun Refresh()
    {
        if (this._layout != null)
    		this._layout.Refresh();
    }
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public fun HandleDialogDrag(ALittle.UIButtonDragEvent event)
	{
		var delta_x = event.delta_x;
		var delta_y = event.delta_y;
	
		if (event.target == this._drag_lr_quad)
			delta_y = 0;
		elseif (event.target == this._drag_ud_quad)
			delta_x = 0;

		if (this._dialog.width + delta_x < 506)
			delta_x = 506 - this._dialog.width;
		if (this._dialog.height + delta_y < 200)
			delta_y = 200 - this._dialog.height;
	
		this._dialog.width = this._dialog.width + delta_x;
		this._dialog.height = this._dialog.height + delta_y;
	}
	
	public fun HandleDialogDragEnd(ALittle.UIButtonDragEndEvent event)
	{
		this._layout.Refresh();
	}

	// 检查资源名是否合法
	private fun CheckResourceName(string name) : bool, string
	{
		// 检查合法性
		var len = ALittle.String_Len(name);
		if (len == 0) return false, "命名只能支持字母数字下划线";
		for (var i = 1; i <= len; 1)
		{
			var byte = ALittle.String_Byte(name, i);
			var check_all = byte >= 65 && byte <= 90
						 || byte >= 97 && byte <= 122
						 || byte >= 48 && byte <= 57
						 || byte == 95;
			if (check_all == false)
				return false, "命名只能支持字母数字下划线";
		}

		return true, null;
	}
}