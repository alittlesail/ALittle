
namespace AUIPlugin;

public struct AUIWebAccountReconnectEvent : ALittle.Event { }
public struct AUIWebAccountLogoutEvent : ALittle.Event { }
public struct AUIWebAccountLoginEvent : ALittle.Event { }

public class AUIWebLoginManager : ALittle.EventDispatcher
{
	private string _logingate_ip;
	private int _logingate_port;
	private string _version_ip;
	private int _version_port;
	private ALittle.IMsgCommonTemplate _msg_client;
	private string _session_id;

	private ALittle.S2CWebAccountInfo _account_info;
	private ALittle.S2CWebServerInfo _server_info;

	private string _account_name;
	private string _account_pwd;
	private bool _first_login;
	private bool _is_login;
	
	private bool _save_password;
	private bool _auto_login;

	private ALittle.DisplayObject _login_dialog;
	private ALittle.DisplayObject _login_account;
	private ALittle.DisplayObject _login_password;
	private ALittle.DisplayObject _save_password_check;
	private ALittle.DisplayObject _auto_login_check;

	private ALittle.DisplayObject _password_dialog;
	private ALittle.DisplayObject _pas_old_password;
	private ALittle.DisplayObject _pas_new_password;
	private ALittle.DisplayObject _pas_repeat_password;
	
	private ALittle.DisplayObject _login_button;
	private ALittle.DisplayObject _change_pas_confirm;

	private ALittle.IJsonConfig _config;

	public fun Setup(string ip, int port, ALittle.IJsonConfig config)
	{
		// 登录网关
		this._logingate_ip = ip;
		this._logingate_port = port;
		this._config = config;
	
		// 短链接会话ID
		this._session_id = "";
		// 账号信息
		this._account_info = new ALittle.S2CWebAccountInfo();
		// 短链接调用信息 
		this._server_info = new ALittle.S2CWebServerInfo();
		this._server_info.http_ip = "";
		this._server_info.http_port = 0;
	
		// 账号密码，以及登录信息
		this._account_name = "";
		this._account_pwd = "";
		this._first_login = true;
		this._is_login = false;
		// 从配置中获取记住密码，和自动登录
		this._save_password = config.GetConfig("save_password", false);
		this._auto_login = config.GetConfig("auto_login", false);

		if (this._save_password)
		{
			this._account_name = config.GetConfig("account_name", "");
			this._account_pwd = ALittle.String_DecryptPassword(this._account_name, config.GetConfig("account_pwd", ""));
		}

		this.Connect();
	}
	
	public fun Shutdown()
	{
		if (this._msg_client != null)
		{
			this._msg_client.Close();
			this._msg_client = null;
		}

		if (this._login_dialog != null)
		{
            A_LayerManager.RemoveFromModal(this._login_dialog);
			this._login_dialog = null;
        }

		if (this._password_dialog != null)
		{
            A_LayerManager.RemoveFromModal(this._password_dialog);
			this._password_dialog = null;
        }
	}
    
	public async fun Connect()
	{
        var param = new GatewayServer.QRouteInfo();
        param.route_type = ALittle.RouteType.RT_VERSION; // 版本服务器
		var client = ALittle.CreateHttpSender(this._logingate_ip, this._logingate_port);
		var error, result = GatewayServer.HandleQRouteInfo(client, param);
		if (error != null)
		{
            ALittle.Log(error); 
			this._msg_client = null;
			this.OnConnectFailed();
			A_LoopSystem.AddTimer(5000, bind(this.Connect, this));
			return;
		}

        if (result.client_ip == null || result.client_ip == "" || result.client_port == null)
        {
			this._msg_client = null;
			this.OnConnectFailed();
			A_LoopSystem.AddTimer(5000, bind(this.Connect, this));
			return;
        }

		this._msg_client = ALittle.CreateMsgSender(60, true, bind(this.OnDisconnected, this));
		this._msg_client._user_data = this;
		error = this._msg_client.Connect(result.client_ip, result.client_port);
		if (error != null)
		{
			this._msg_client = null;
			this.OnConnectFailed();
			A_LoopSystem.AddTimer(5000, bind(this.Connect, this));
			return;
		}

		this.OnConnectSucceed();
	}

	private fun OnConnectFailed()
	{
		this.DispatchEvent(new AUIWebAccountReconnectEvent());
		this.HidePasswordDialog(); 
	}

	private fun OnConnectSucceed()
	{
		if ((this._first_login && this._auto_login)
			|| (this._login_button != null && this._login_button.disabled)
			|| this._is_login)
			this.LoginImpl();
		else
			this.DispatchEvent(new AUIWebAccountLogoutEvent());
	}

	private fun OnDisconnected()
	{
		this.DispatchEvent(new AUIWebAccountReconnectEvent());
		this.HidePasswordDialog();
		A_LoopSystem.AddTimer(5000, bind(this.Connect, this));
	}
	
	// 创建登录对话框
	public fun ShowLoginDialog()
	{
		if (this._login_dialog == null)
		{
			this._login_dialog = g_Control.CreateControl{ALittle.DisplayObject}("account_login_dialog", this);
			A_LayerManager.AddToModal(this._login_dialog);
	
			this._login_account.text = this._account_name;
			this._login_password.text = "";
			this._save_password_check.selected = this._save_password;
			this._auto_login_check.selected = this._auto_login;
		}
		this._login_dialog.visible = true;
		this._login_account.DelayFocus();
	}
	
	public fun HideLoginDialog()
	{
		if (this._login_dialog == null) return;
		this._login_dialog.visible = false;
	}
	
	// 创建密码修改对话框
	public fun ShowPasswordDialog()
	{
		if (this._password_dialog == null)
		{
			this._password_dialog = g_Control.CreateControl{ALittle.DisplayObject}("account_password_dialog", this);
			A_LayerManager.AddToModal(this._password_dialog);
		}
		this._password_dialog.visible = true;
		this._pas_old_password.focus = true;
		this._pas_old_password.text = "";
		this._pas_new_password.text = "";
		this._pas_repeat_password.text = "";
	}
	
	public fun HidePasswordDialog()
	{
		if (this._password_dialog == null) return;
		this._password_dialog.visible = false;
	}
	
	// 执行登录操作
	private fun HandleLoginClick(ALittle.UIEvent event)
	{
		// 如果已经禁用那么直接返回
		if (this._login_button.disabled) return;
	
		this._login_button.disabled = true;
		if (this._msg_client.IsConnected() == false) return;
	
		this._account_name = this._login_account.text;
		if (this._login_password.text != "")
			this._account_pwd = ALittle.String_Md5(this._login_password.text);

		this._save_password = this._save_password_check.selected;
		this._auto_login = this._auto_login_check.selected;
		this.LoginImpl();
	}

	// 执行tab按钮
	private fun HandleLoginAccountTabKey(ALittle.UITabKeyEvent event) { this._login_password.focus = true; }
	private fun HandleLoginPasswordTabKey(ALittle.UITabKeyEvent event) { this._login_account.focus = true; }
	private fun HandleOldPasswordTabKey(ALittle.UITabKeyEvent event) { this._pas_new_password.focus = true; }
	private fun HandleNewPasswordTabKey(ALittle.UITabKeyEvent event) { this._pas_repeat_password.focus = true; }
	
	// 登出
	public async fun Logout()
	{
		if (this._msg_client == null) return;
		var param = new ALittle.QWebLogout();
		var error, result = ALittle.HandleQWebLogout(this._msg_client, param);
		if (error != null)
		{
			ALittle.Error(error);
			return;
		}

		this._is_login = false;
		if (this._login_button != null)
		{
			this._login_password.text = "";
			this._account_name = "";
			this._account_pwd = "";
		}
		if (this._change_pas_confirm != null)
			this._change_pas_confirm.disabled = false;

		this.DispatchEvent(new AUIWebAccountLogoutEvent());
	}

	// 处理强制登出
	private fun HandleMsgNForceLogout()
	{
		this._is_login = false;
		g_AUITool.ShowNotice("提示", "您的账号在另一个地方登录");
		if (this._login_button != null)
		{
			this._login_password.text = "";
			this._account_name = "";
			this._account_pwd = "";
		}
		if (this._change_pas_confirm != null)
			this._change_pas_confirm.disabled = false;
		
		this.DispatchEvent(new AUIWebAccountLogoutEvent());
	}

	private fun HandleMsgNWebSession(ALittle.S2CWebSession msg) { this._session_id = msg.session_id; }
	private fun HandleMsgNWebAccountInfo(ALittle.S2CWebAccountInfo msg) { this._account_info = msg; }
	private fun HandleMsgNWebServerInfo(ALittle.S2CWebServerInfo msg) { this._server_info = msg; }

	// 执行登录操作
	private async fun LoginImpl()
	{
		if (this._msg_client == null) return;

		this._first_login = false;
		var param = new ALittle.QWebLogin();
		param.device_id = "";
		param.third_platform = "account";
		param.client_platform = ALittle.System_GetPlatform();
		param.account_name = this._account_name;
		param.account_pwd = this._account_pwd;
		var error, result = ALittle.HandleQWebLogin(this._msg_client, param);
		if (this._login_button != null)
			this._login_button.disabled = false;
		this._is_login = (error == null);
		if (error != null)
		{
			g_AUITool.ShowNotice("提示", error);
			return;
		}

		if (this._save_password)
		{
			this._config.SetConfig("account_name", this._account_name);
			this._config.SetConfig("account_pwd", ALittle.String_CryptPassword(this._account_name, this._account_pwd));
		}
		this._config.SetConfig("save_password", this._save_password);
		this._config.SetConfig("auto_login", this._auto_login);
		this.HideLoginDialog();
		this.DispatchEvent(new AUIWebAccountLoginEvent());
	}
	
	// 修改密码
	private async fun HandlePasswordAlterClick(ALittle.UIEvent event)
	{
		var old_password = this._pas_old_password.text;
		var new_password = this._pas_new_password.text;
		var repeat_password = this._pas_repeat_password.text;
		if (new_password != repeat_password) {
			g_AUITool.ShowNotice("提示", "新密码和重复密码不一致");
			return;
		}
		this._change_pas_confirm.disabled = true;
		var param = new ALittle.QWebChangePassword();
		param.old_password = ALittle.String_Md5(old_password);
		param.new_password = ALittle.String_Md5(new_password);
		var error, result = ALittle.HandleQWebChangePassword(this._msg_client, param);
		this._change_pas_confirm.disabled = false;
		if (this._change_pas_confirm != null)
			this._change_pas_confirm.disabled = false;
		if (error != null) {
			g_AUITool.ShowNotice("提示", error);
			return;
		}
		g_AUITool.ShowNotice("提示", "密码修改成功");
		this.HidePasswordDialog();
	}

	private fun HandlePasswordCancelClick(ALittle.UIEvent event)
	{
		this.HidePasswordDialog();
	}

	//////////////////////////////////////////////////////////////////////////////-
	
	// 是否已经登录
	public fun IsLogin() : bool { return this._is_login; }
	public get account_name() : string { return this._account_name; }
	public get account_id() : string { return this._account_info.account_id; }
	public get session_id() : string { return this._session_id; }
	public get http_ip() : string { return this._server_info.http_ip; }
	public get http_port() : int { return this._server_info.http_port; }
	public get version_ip() : string { return this._version_ip; }
	public get version_port() : int { return this._version_port; }
}

[Msg]
public static HandleMsgNForceLogout(ALittle.IMsgCommon client, ALittle.S2CWebForceLogout msg)
{
	var manager:AUIWebLoginManager = client._user_data;
	if (manager == null) return;
	manager.HandleMsgNForceLogout();
}
[Msg]
public static HandleMsgNWebSession(ALittle.IMsgCommon client, ALittle.S2CWebSession msg)
{
	var manager:AUIWebLoginManager = client._user_data;
	if (manager == null) return;
	manager.HandleMsgNWebSession(msg);
}
[Msg]
public static HandleMsgNWebAccountInfo(ALittle.IMsgCommon client, ALittle.S2CWebAccountInfo msg)
{
	var manager:AUIWebLoginManager = client._user_data;
	if (manager == null) return;
	manager.HandleMsgNWebAccountInfo(msg);
}
[Msg]
public static HandleMsgNWebServerInfo(ALittle.IMsgCommon client, ALittle.S2CWebServerInfo msg)
{
	var manager:AUIWebLoginManager = client._user_data;
	if (manager == null) return;
	manager.HandleMsgNWebServerInfo(msg);
}
