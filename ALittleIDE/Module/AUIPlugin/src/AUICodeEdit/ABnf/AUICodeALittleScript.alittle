
namespace AUIPlugin;

private var g_ALittleScriptColor:Map<int, ABnfColor>;

enum ALittleScriptColorType
{
    COMMENT = 1;
    DEFINE_NAME = 2;
    VAR_NAME = 3;
    CUSTOM_NAME = 4;
    CTRL_KEYWORD = 5;
    KEYWORD = 6;
    METHOD_NAME = 7;
    DEFAULT = 8;
    TEXT = 9;
}

enum ALittleScriptIconType
{
    CLASS = 1;
    STRUCT = 2;
    PROPERTY = 3;
    NAMESPACE = 4;
    TEMPLATE = 5;
    ENUM = 6;
    LANGUAGE = 7;
    GLOBAL_METHOD = 8;
    MEMBER_METHOD = 9;
    FIELD_METHOD = 10;
    STATIC_METHOD = 11;
    INSTANCE = 12;
    PARAM = 13;
    VARIABLE = 14;
}

private var g_ALittleScriptIcon:Map<int, string> = new Map<int, string>();
g_ALittleScriptIcon[ALittleScriptIconType.CLASS] = "ABnf/ALittleScript/ALittleScriptClassIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.STRUCT] = "ABnf/ALittleScript/ALittleScriptStructIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.PROPERTY] = "ABnf/ALittleScript/ALittleScriptPropertyIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.NAMESPACE] = "ABnf/ALittleScript/ALittleScriptNamespaceIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.TEMPLATE] = "ABnf/ALittleScript/ALittleScriptTemplateIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.ENUM] = "ABnf/ALittleScript/ALittleScriptEnumIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.LANGUAGE] = "ABnf/ALittleScript/ALittleScriptNamespaceIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.GLOBAL_METHOD] = "ABnf/ALittleScript/ALittleScriptStaticIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.MEMBER_METHOD] = "ABnf/ALittleScript/ALittleScriptMethodIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.FIELD_METHOD] = "ABnf/ALittleScript/ALittleScriptFieldIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.STATIC_METHOD] = "ABnf/ALittleScript/ALittleScriptStaticIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.INSTANCE] = "ABnf/ALittleScript/ALittleScriptInstanceIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.PARAM] = "ABnf/ALittleScript/ALittleScriptParamIcon.png";
g_ALittleScriptIcon[ALittleScriptIconType.VARIABLE] = "ABnf/ALittleScript/ALittleScriptVariableIcon.png";

public class AUICodeALittleScript : AUICodeLanguage
{
    public ctor(AUICodeProject project, string full_path, string module_path)
    {
        if (g_ALittleScriptColor == null)
        {
            g_ALittleScriptColor = new Map<int, ABnfColor>();
            var color:ABnfColor;
            {
                color = new ABnfColor();
                color.red = 87/255;
                color.green = 166/255;
                color.blue = 74/255;
                g_ALittleScriptColor[ALittleScriptColorType.COMMENT] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 78/255;
                color.green = 201/255;
                color.blue = 176/255;
                g_ALittleScriptColor[ALittleScriptColorType.DEFINE_NAME] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 218/255;
                color.green = 218/255;
                color.blue = 218/255;
                g_ALittleScriptColor[ALittleScriptColorType.VAR_NAME] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 146/255;
                color.green = 210/255;
                color.blue = 244/255;
                g_ALittleScriptColor[ALittleScriptColorType.CUSTOM_NAME] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 216/255;
                color.green = 160/255;
                color.blue = 223/255;
                g_ALittleScriptColor[ALittleScriptColorType.CTRL_KEYWORD] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 86/255;
                color.green = 156/255;
                color.blue = 214/255;
                g_ALittleScriptColor[ALittleScriptColorType.KEYWORD] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 210/255;
                color.green = 210/255;
                color.blue = 160/255;
                g_ALittleScriptColor[ALittleScriptColorType.METHOD_NAME] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 169/255;
                color.green = 183/255;
                color.blue = 198/255;
                g_ALittleScriptColor[ALittleScriptColorType.DEFAULT] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 214/255;
                color.green = 157/255;
                color.blue = 133/255;
                g_ALittleScriptColor[ALittleScriptColorType.TEXT] = color;   
            }
        }

        this._abnf_file = lua.alittlescript.create_alittlescript_file(project.project, module_path, full_path, "");
    }

    public fun OnRightMenu(AUIRightMenu menu)
    {
        menu.AddItem("生成", bind(this.GenerateLanguage, this, true));
    }

    public fun OnSave()
    {
        this.GenerateLanguage(false);
    }

    // 生成对应的代码
    public async fun GenerateLanguage(bool notice)
    {
        var error = this.Generate(this._full_path);
        if (error != null)
        {
            if (notice)
                g_AUITool.ShowNotice("错误", error.error.." 文件路径"..error.full_path);
            return;
        }

        if (notice)
            g_AUITool.ShowNotice("提示", "生成成功");
    }

    // 颜色查询
    public fun QueryColorValue(int tag) : ABnfColor { return g_ALittleScriptColor[tag]; }


    // 查询自动格式化行
    public fun QueryAutoFormat(string input) : bool
    {
        return input == ";" || input == "}";
    }

    // 查询是否支持自动格式化
    public fun NeedAutoFormat() : bool
    {
        return true;
    }

    // 设置目标生成语言
    public fun SetTargetLanguage(string target_languaeg)
    {
        lua.alittlescript.alittlescriptproject_settargetlanguage(this._project.project, target_languaeg);
    }

    // 生成目标语言
    public await fun Generate(string full_path) : lua.ALittleScriptGenerateError
    {
        var query_id = this._project.Add(co);
        lua.alittlescript.alittlescriptproject_generate(this._project.project, query_id, full_path);
        return yield;
    }

    // 查询提示图标路径
    public fun QueryCompleteIcon(int tag) : string
    {
        return g_ALittleScriptIcon[tag];
    }
}

public class AUICodeALittleScriptProject : AUICodeProject
{
    public get upper_ext() : string { return "ALITTLE"; }

    public fun OnTreeMenu(string full_path, AUIRightMenu menu)
    {
        menu.AddItem("生成目标代码", bind(this.GenerateDir, this, full_path));
    }

    public fun OnTreeItemMenu(string full_path, AUIRightMenu menu)
    {
        menu.AddItem("生成目标代码", bind(this.GenerateFile, this, full_path));
        menu.AddItem("打开Lua代码", bind(this.OpenTargetLuaFile, this, full_path));
        menu.AddItem("打开JavaScript代码", bind(this.OpenTargetJavaScriptFile, this, full_path));
        menu.AddItem("打开Lua字节码", bind(this.OpenTargetLuaByteCode, this, full_path));
    }

    // 生成对应的代码
    public async fun GenerateDir(string full_path)
    {
        var index = ALittle.String_Find(full_path, "/src");
        if (index == null)
        {
            g_AUITool.ShowNotice("提示", "当前不是/src的子目录");
            return;
        }

        var pre = "";
        if (lua.alittlescript.alittlescriptproject_gettargetlanguage(this._project) == "JavaScript")
        	pre = "JS";
        var new_path = ALittle.String_Sub(full_path, 1, index)..pre.."Script"..ALittle.String_Sub(full_path, index + 4);
        ALittle.File_DeleteDeepDir(new_path);
        ALittle.File_MakeDeepDir(new_path);

        var file_map = ALittle.File_GetFileAttrByDir(full_path);
        for (var file_path, attr in file_map)
        {
            var error = this.Generate(file_path);
            if (error != null)
            {
                if (AUIToolOption.YES == g_AUITool.DeleteNotice("错误", error.error.."\n 文件路径"..file_path.."\n是否打开该文件?"))
                {
                    var goto_event = new AUICodeProjectGotoEvent();
                    goto_event.file_path = error.full_path;
                    if (goto_event.file_path == null)
                        goto_event.file_path = file_path;
                    goto_event.line_start = error.line_start;
                    goto_event.char_start = error.char_start;
                    goto_event.line_end = error.line_end;
                    goto_event.char_end = error.char_end;
                    this.DispatchEvent(goto_event);
                }
                return;
            }   
        }
        g_AUITool.ShowNotice("提示", "生成成功");
    }

    // 生成对应的代码
    public async fun GenerateFile(string full_path)
    {
        var error = this.Generate(full_path);
        if (error != null)
        {
            g_AUITool.ShowNotice("错误", error.error.." 文件路径"..error.full_path);
            return;
        }

        g_AUITool.ShowNotice("提示", "生成成功");
    }

    // 打开目标代码
    public fun OpenTargetLuaFile(string full_path)
    {
        full_path = ALittle.File_ChangeFileExtByPath(full_path, "lua");
        var index = ALittle.String_Find(full_path, "/src/");
        if (index == null) return;

        var new_path = ALittle.String_Sub(full_path, 1, index).."Script/"..ALittle.String_Sub(full_path, index + 5);
        var event = new AUICodeProjectGotoEvent();
        event.file_path = new_path;
        this.DispatchEvent(event);
    }

    // 打开Lua字节码
    public fun OpenTargetLuaByteCode(string full_path)
    {
        full_path = ALittle.File_ChangeFileExtByPath(full_path, "lua");
        var index = ALittle.String_Find(full_path, "/src/");
        if (index == null) return;

        var new_path = ALittle.String_Sub(full_path, 1, index).."Script/"..ALittle.String_Sub(full_path, index + 5);
        var out_path = ALittle.String_Sub(full_path, 1, index).."ByteCode/"..ALittle.String_Sub(full_path, index + 5);
        var out_dir = ALittle.File_GetFilePathByPath(out_path);
        ALittle.File_MakeDeepDir(out_dir);
        out_path = ALittle.File_ChangeFileExtByPath(out_path, "txt");

        var decompile = new carp.CarpLuaDecompile();
        decompile.Decompile(new_path, out_path);

        var event = new AUICodeProjectGotoEvent();
        event.file_path = out_path;
        this.DispatchEvent(event);
    }

    // 打开目标代码
    public fun OpenTargetJavaScriptFile(string full_path)
    {
        full_path = ALittle.File_ChangeFileExtByPath(full_path, "js");
        var index = ALittle.String_Find(full_path, "/src/");
        if (index == null) return;

        var new_path = ALittle.String_Sub(full_path, 1, index).."JSScript/"..ALittle.String_Sub(full_path, index + 5);
        var event = new AUICodeProjectGotoEvent();
        event.file_path = new_path;
        this.DispatchEvent(event);
    }

    // 生成目标语言
    public await fun Generate(string full_path) : lua.ALittleScriptGenerateError
    {
        var query_id = this.Add(co);
        lua.alittlescript.alittlescriptproject_generate(this._project, query_id, full_path);
        return yield;
    }

    // 查询提示图标路径
    public fun QueryCompleteIcon(int tag) : string
    {
        return g_ALittleScriptIcon[tag];
    }
}