
namespace AUIPlugin;

protected struct AUICodeCompleteItemInfo
{
    ALittle.TextRadioButton _item_button;
    ALittle.Text _item_title;
    ALittle.Image _tag_image;
    ALittle.DisplayObject _item;

    List<int> pos;        // 用于排序
    string upper;
    lua.ABnfQueryCompleteInfo complete;
}

protected class AUICodeCompleteScreen
{
    private ALittle.ScrollScreen _screen;
    private List<AUICodeCompleteItemInfo> _item_list;

    private List<AUICodeCompleteItemInfo> _item_pool = new List<AUICodeCompleteItemInfo>();
    private int _item_pool_count = 0;

    private ALittle.DisplayObject _tip_dialog;
    private ALittle.TextArea _tip_text;
    
    private ALittle.TextRadioButtonGroup _item_group;

    private lua.ABnfQueryComplete _complete;
    private int _line_end;
    private int _char_end;
    private AUICodeEdit _edit; // 测试
    private double _item_height = 0;

    public ctor(AUICodeEdit edit)
    {
        this._edit = edit;
    }

    public async fun ShowComplete()
    {
        if (this._complete == null)
        {
            if (!this.ReInit())
            {
                this.Hide();
                return;
            }
        }

        this._line_end = this._edit.cursor.line;
        this._char_end = this._edit.cursor.char;
        var text = this._edit.GetTargetText(this._complete.line_start, this._complete.char_start - 1, this._edit.cursor.line, this._edit.cursor.char);
        if (text == null || text == "")
        {
            this.Hide();
            return;
        }

        if (!this.Fliter(text))
        {
            this.Hide();
            if (!this.ReInit()) return;

            this._line_end = this._edit.cursor.line;
            this._char_end = this._edit.cursor.char;
            text = this._edit.GetTargetText(this._complete.line_start, this._complete.char_start - 1, this._edit.cursor.line, this._edit.cursor.char);
            if (text == null || text == "") return;

            if (!this.Fliter(text)) this.Hide();
        }
    }

    public fun IsShow() : bool { return this._complete != null; }

    public fun SelectUp()
    {
        var target = this.GetSelectIndex();
        target -= 1;
        if (target < 1) return;
        var item = this._screen.childs[target];
        var info = cast<AUICodeCompleteItemInfo>(item._user_data);
        info._item_button.selected = true;
        
        if (info.complete.descriptor != null)
            this.ShowTip(info.complete.descriptor);
        else
            this.HideTip();

        var delta = this._screen.container.height - this._screen.height;
        if (delta > 0)
        {
            var offset = (target - 1) * this._item_height + this._screen.container_y;
            if (offset < 0)
            {
                this._screen.right_scrollbar.offset_rate = ((target - 1) * this._item_height) / delta; 
                this._screen.AdjustScrollBar();
            }
        }
    }

    public fun SelectDown()
    {
        var target = this.GetSelectIndex();
        target += 1;
        if (target > this._screen.child_count) return;
        var item = this._screen.childs[target];
        var info = cast<AUICodeCompleteItemInfo>(item._user_data);
        info._item_button.selected = true;

        if (info.complete.descriptor != null)
            this.ShowTip(info.complete.descriptor);
        else
            this.HideTip();
        
        var delta = this._screen.container.height - this._screen.height;
        if (delta > 0)
        {
            var offset = target * this._item_height + this._screen.container_y;
            if (offset > this._screen.height)
            {
                this._screen.right_scrollbar.offset_rate = (target * this._item_height - this._screen.height) / delta;   
                this._screen.AdjustScrollBar();   
            }
        }
    }

    public fun DoSelect() : bool
    {
        var target = this.GetSelectIndex();
        if (target == null) return false;

        this._edit.select_cursor.StartLineChar(this._complete.line_start, this._complete.char_start - 1);
        this._edit.select_cursor.UpdateLineChar(this._edit.cursor.line, this._edit.cursor.char);

        var item = this._screen.childs[target];
        var text:string;
        var complete = cast<AUICodeCompleteItemInfo>(item._user_data).complete;
        if (complete.insert != null) text = complete.insert;
        else text = complete.display;

        var result = this._edit.InsertText(text, true);
        this.Hide();
        return result;
    }

    private fun GetSelectIndex() : int
    {
        var target:int = null;
        for (var index, child in this._screen.childs)
        {
            if (cast<AUICodeCompleteItemInfo>(child._user_data)._item_button.selected)
            {
                target = index;
                break;
            }   
        }
        return target;
    }

    private await fun ReInit() : bool
    {
        if (this._edit.language == null) return false;
        this._complete = this._edit.language.QueryComplete(this._edit.cursor.line, this._edit.cursor.char - 1);
        if (this._complete == null) return false;
        // 计算坐标
        var x, y = this._edit.CalcPosition(this._complete.line_start, this._complete.char_start, true);
        y += CODE_LINE_HEIGHT;

        if (this._screen == null)
        {
            this._screen = g_Control.CreateControl{ALittle.ScrollScreen}("code_scroll_screen");
            this._screen.width = 200;
        }
        this._screen.RemoveAllChild();

        this._screen.x = x;
        this._screen.y = y;

        if (this._item_list != null)
        {
            for (var index, info in this._item_list)
            {
                this._item_pool_count += 1;
                this._item_pool[this._item_pool_count] = info;
            }
        }

        var max_width = 200.0;

        this._item_group = new ALittle.TextRadioButtonGroup();
        this._item_list = new List<AUICodeCompleteItemInfo>();
        for (var index, info in this._complete.complete_list)
        {
            var item_info:AUICodeCompleteItemInfo;
            if (this._item_pool_count > 0)
            {
                item_info = this._item_pool[this._item_pool_count];
                this._item_pool[this._item_pool_count] = null;
                this._item_pool_count -= 1;
            }
            else
            {
                item_info = new AUICodeCompleteItemInfo();   
                item_info._item = g_Control.CreateControl{ALittle.DisplayObject}("code_complete_item", item_info);
            }
            item_info._item_button.group = this._item_group;
            item_info._item_title.text = info.display;
            if (info.insert == null)
                item_info.upper = ALittle.String_Upper(info.display);
            else
                item_info.upper = ALittle.String_Upper(info.insert);
            item_info._tag_image.texture_name = this._edit.language.QueryCompleteIcon(info.tag);
            item_info._item._user_data = item_info;
            item_info.complete = info;
            this._item_list[index] = item_info;

            var title_wdith = item_info._item_title.width + item_info._item_title.x + 5;
            if (max_width < title_wdith) max_width = title_wdith;

            this._item_height = item_info._item.height;
        }

        this._screen.width = max_width + this._screen.right_scrollbar.width;

        this._edit.help_container.AddChild(this._screen);
        return true;
    }

    private static ItemInfoSort(AUICodeCompleteItemInfo a, AUICodeCompleteItemInfo b) : bool
    {
        for (var index, pos in a.pos)
        {
            if (b.pos[index] == null) return true;
            if (pos != b.pos[index]) return pos < b.pos[index];
        }
        return false;
    }

    private fun Fliter(string text) : bool
    {
        // 将内容改为大写
        var upper_text = ALittle.String_Upper(text);
        // 找出第一个分隔符
        var first_split = ALittle.String_Find(upper_text, "_");
        if (first_split == null) first_split = 1;
        else first_split += 1;
        // 切割大写，并且要跳过第一个分隔符
        var upper_list = ALittle.String_Split(upper_text, "_", first_split);
        // 将第一个分隔符前面的字符添加到列表
        if (first_split > 1) ALittle.List_Insert(upper_list, 1, ALittle.String_Sub(upper_text, 1, first_split - 1));
        // 如果数组长度大于0，并且最后一个是空串，那么就剔除掉
        var upper_list_count = ALittle.List_Len(upper_list);
        if (upper_list_count > 1 && upper_list[upper_list_count] == "") upper_list[upper_list_count] = null;

        var sort_list = new List<AUICodeCompleteItemInfo>();
        var count = 0;
        this._screen.RemoveAllChild();
        for (var index, info in this._item_list)
        {
            // 初始化数据
            info.pos = null;
            var pos = 1;
            // 遍历匹配列表
            for (var _, upper in upper_list)
            {
                // 查找upper进行匹配
                pos = ALittle.String_Find(info.upper, upper, pos);
                if (pos != null)
                {
                    // 如果是第一次设置，那么就加入列表
                    if (info.pos == null)
                    {
                        info.pos = new List<int>();
                        ++count;
                        sort_list[count] = info;
                    }

                    ALittle.List_Push(info.pos, pos);
                }
            }
        }

        // 排序
        ALittle.List_Sort(sort_list, AUICodeCompleteScreen.ItemInfoSort);
        count = 0;

        var descriptor:string;
        for (var index, info in sort_list)
        {
            if (this._screen.child_count == 0)
            {
                info._item_button.selected = true;
                descriptor = info.complete.descriptor;
            }
            this._screen.AddChild(info._item); 
            if (count >= 50) break;
        }

        if (this._screen.child_count == 0) return false;
        
        var height = this._screen.child_count * this._item_height;
        if (height < 200) this._screen.height = height;
        else this._screen.height = 200;

        if (descriptor != null)
            this.ShowTip(descriptor);
        else
            this.HideTip();

        return true;
    }

    public fun Hide()
    {
        this.HideTip();
        this._complete = null;
        if (this._screen != null) this._screen.RemoveAllChild();
        this._edit.help_container.RemoveChild(this._screen);
    }

    public fun TryHide()
    {
        if (this._complete == null) return;

        // 检查光标
        if (this._edit.cursor.line < this._complete.line_start || this._edit.cursor.line > this._line_end)
        {
            this.Hide();
            return;
        }

        if (this._edit.cursor.line == this._complete.line_start && this._edit.cursor.char < this._complete.char_start)
        {
            this.Hide();
            return;
        }

        if (this._edit.cursor.line == this._line_end && this._edit.cursor.char > this._char_end)
        {
            this.Hide();
            return;
        }
    }

	// 显示TIP
	private fun ShowTip(string content)
	{
		// 创建模态提示对话框，并添加到模态层
		if (this._tip_dialog == null)
		{
			this._tip_dialog = g_Control.CreateControl{ALittle.DisplayObject}("code_area_tip", this);
            this._tip_dialog.width = 200;
		}

        this._edit.help_container.AddChild(this._tip_dialog);
		this._tip_dialog.visible = true;
		this._tip_text.text = content;
		this._tip_dialog.height = this._tip_text.real_height + 16;

		this._tip_dialog.x = this._screen.x + this._screen.width;
		this._tip_dialog.y = this._screen.y;
        if (this._tip_dialog.x + this._tip_dialog.width > A_UISystem.view_width)
        {
            this._tip_dialog.x = this._screen.x;
            this._tip_dialog.y = this._screen.y + this._screen.height;
        }
	}

	// 隐藏TIP
	private fun HideTip()
	{
		if (this._tip_dialog == null) return;
		this._tip_dialog.visible = false;
        this._edit.help_container.RemoveChild(this._tip_dialog);
	}
}