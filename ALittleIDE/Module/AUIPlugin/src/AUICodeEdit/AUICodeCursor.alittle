
namespace AUIPlugin;

public class AUICodeCursor : ALittle.Quad
{
    private double _flash_alpha = 0;
    private double _flash_dir = 0.05;
    private ALittle.LoopFunction _loop;

    private AUICodeEdit _edit;

    // 单光标的位置
    private int _it_line = 1;
    private int _it_char = 0;

    // 缩进数量
    private int _virtual_indent = 0;
    // 记录当前列
    private double _move_acc_width = 0;

    public ctor(ALittle.ControlSystem ctrl_sys, AUICodeEdit edit)
    {
        this._edit = edit;
    }

    public get line() : int { return this._it_line; }
    public get char() : int { return this._it_char; }
    public get virtual_indent() : string
    {
        if (this._virtual_indent == 0) return "";
        var indent = this._virtual_indent;
        var indent_str = "";
        for (var i = 1; i <= indent; 1)
            indent_str = indent_str.." ";
        return indent_str;
    }

    public fun Show([Nullable]double x, [Nullable]double y)
    {
        if (this._loop == null) this._loop = new ALittle.LoopFunction(bind(this.Update, this), -1, 1, 1);
		if (!A_LoopSystem.HasUpdater(this._loop)) A_LoopSystem.AddUpdater(this._loop);
        this.visible = true;
    }

    // 获取光标当前的字符
    public fun GetCurCharInLine() : string
    {
        var line = this._edit.line_list[this._it_line];
        if (line == null) return null;

        var index = this._it_char + 1;
        if (index > line.char_count) return null;
        return line.char_list[index].char;
    }

    // 获取光标下一个的字符
    public fun GetNextCharInLine() : string
    {
        var line = this._edit.line_list[this._it_line];
        if (line == null) return null;

        var index = this._it_char + 2;
        if (index > line.char_count) return null;
        return line.char_list[index].char;
    }

    // 根据当前光标选中文本
    public fun CalcSelectWord() : int, int
    {
        var line = this._edit.line_list[this._it_line];
        if (line == null) return null, null;

        var count = line.char_count;
        while (count > 0 && line.char_list[count].width <= 0)
            -- count;
        var cur_char = line.char_list[this._it_char + 1];
        var is_word = ALittle.String_IsWordChar(cur_char.char);
        // 从当前光标向后找
        var it_end = this._it_char;
        for (var i = this._it_char + 1; i <= count; 1)
        {
            if (ALittle.String_IsWordChar(line.char_list[i].char) != is_word)
                break;
            it_end = i;
        }
        // 从当前光标向前找
        var it_start = this._it_char;
        for (var i = this._it_char; i >= 1; -1)
        {
            if (ALittle.String_IsWordChar(line.char_list[i].char) != is_word)
                break;
            it_start = i - 1;
        }
        if (it_start == it_end) return null, null;
        return it_start, it_end;
    }

    public fun SetOffsetXY(double x, double y, [Nullable]bool show)
    {
        if (this._edit.line_count <= 0)
        {
            this._it_line = 1;
            this._it_char = 0;
        }
        else
        {
            this._it_line, this._it_char = this._edit.CalcLineAndChar(x, y);
        }

        this.y = (this._it_line - 1) * CODE_LINE_HEIGHT;
        var line = this._edit.line_list[this._it_line];
        if (line == null || this._it_char == 0)
            this.x = 0;
        else
        {
            var char = line.char_list[this._it_char];
            this.x = char.pre_width + char.width;
        }
        if (show == null || show) this.Show();

        this._virtual_indent = 0;
        this._move_acc_width = this.x;
    }

    public fun SetLineChar(int it_line, int it_char)
    {
        this.SetLineCharInner(it_line, it_char);
        this._move_acc_width = this.x;
    }

    private fun SetLineCharInner(int it_line, int it_char)
    {
        this._it_line = it_line;
        this._it_char = it_char;

        this.y = (this._it_line - 1) * CODE_LINE_HEIGHT;
        var line = this._edit.line_list[this._it_line];
        if (line == null || this._it_char <= 0)
            this.x = 0;
        else
            this.x = line.char_list[this._it_char].pre_width + line.char_list[this._it_char].width;
        this._virtual_indent = 0;
    }

    public fun CurLineHasChar() : bool
    {
        var line = this._edit.line_list[this._it_line];
        if (line == null) return false;

        // 如果当前行没有字符，那么调整显示位置，不调整逻辑位置
        if (line.char_count < 1 || line.char_list[1].char == "\r" || line.char_list[1].char == "\n")
            return false;

        return true;
    }

    public fun AdjustShowCursor()
    {
        var line = this._edit.line_list[this._it_line];
        if (line == null) return;

        // 如果当前行没有字符，那么调整显示位置，不调整逻辑位置
        if (line.char_count < 1 || line.char_list[1].char == "\r" || line.char_list[1].char == "\n")
        {
            if (this._edit.language != null)
            {
                this._virtual_indent = this._edit.language.QueryDesiredIndent(this._it_line, this._it_char);
                if (this._virtual_indent > 0)
                {
                    this.x = this._virtual_indent * this._edit.ascii_width;
                    if (this.x > this._move_acc_width)
                    	this._move_acc_width = this.x;
                }
            }
        }
    }

    public fun UpdateVirtualIndent()
    {
        if (this._edit.language != null)
            this._virtual_indent = this._edit.language.QueryDesiredIndent(this._it_line, this._it_char);
    }

    // 向上移动一行
    public fun OffsetUp()
    {
        if (this._it_line <= 1) return;
        var it_line = this._it_line - 1;
        var line = this._edit.line_list[it_line];
        if (line == null) return;

        var it_char = line.char_count;
        while (it_char > 0 && line.char_list[it_char].width <= 0)
            -- it_char;
        while (it_char > 0)
        {
            if (line.char_list[it_char].pre_width + line.char_list[it_char].width <= this._move_acc_width)
                break;
            --it_char;
        }

        this.SetLineCharInner(it_line, it_char);
    }

    // 向下移动一行
    public fun OffsetDown()
    {
        if (this._it_line >= this._edit.line_count) return;
        var it_line = this._it_line + 1;
        var line = this._edit.line_list[it_line];
        if (line == null) return;
        var it_char = line.char_count;
        while (it_char > 0 && line.char_list[it_char].width <= 0)
            -- it_char;
        while (it_char > 0)
        {
            if (line.char_list[it_char].pre_width + line.char_list[it_char].width <= this._move_acc_width)
                break;
            --it_char;
        }

        this.SetLineCharInner(it_line, it_char);
    }

    // 向左移动一格
    public fun OffsetLeft(bool ctrl)
    {
        if (this._it_char > 0)
        {
            if (!ctrl)
            {
                this.SetLineChar(this._it_line, this._it_char - 1);
                return;   
            }

            // 检查当前字符是【字母，数字，下划线】或者【其他】
            var line = this._edit.line_list[this._it_line];
            if (line == null) return;
            var cur_char = line.char_list[this._it_char];
            var is_word = ALittle.String_IsWordChar(cur_char.char);
            
            var it_char = this._it_char - 1;
            while (it_char > 0)
            {
                if (ALittle.String_IsWordChar(line.char_list[it_char].char) != is_word)
                {
                    this.SetLineChar(this._it_line, it_char);
                    return;   
                }   
                -- it_char;
            }

            this.SetLineChar(this._it_line, 0);
            return;
        }

        if (this._it_line > 1)
        {
            var it_line = this._it_line - 1;
            var line = this._edit.line_list[it_line];
            var it_char = line.char_count;
            while (it_char > 0 && line.char_list[it_char].width <= 0)
                -- it_char;
            this.SetLineChar(it_line, it_char);
            return;
        }

        this.SetLineChar(1, 0);
    }

    // 向右移动一格
    public fun OffsetRight(bool ctrl)
    {
        if (this._edit.line_count <= 0) return;
        var line = this._edit.line_list[this._it_line];
        var count = line.char_count;
        while (count > 0 && line.char_list[count].width <= 0)
            -- count;
        if (this._it_char < count)
        {
            if (!ctrl)
            {
                this.SetLineChar(this._it_line, this._it_char + 1);
                return;
            }

            // 检查当前字符是【字母，数字，下划线】或者【其他】
            var cur_char = line.char_list[this._it_char + 1];
            var is_word = ALittle.String_IsWordChar(cur_char.char);

            var it_char = this._it_char + 1;
            while (it_char <= count)
            {
                if (ALittle.String_IsWordChar(line.char_list[it_char + 1].char) != is_word)
                {
                    this.SetLineChar(this._it_line, it_char);
                    return;   
                }   
                ++ it_char;
            }

            this.SetLineChar(this._it_line, count);
            return;
        }

        if (this._it_line >= this._edit.line_count)
        {
            return;
        }

        this.SetLineChar(this._it_line + 1, 0);
    }

    // 向第一个字符
    public fun OffsetHome()
    {
        if (this._it_char <= 0) return;
        var line = this._edit.line_list[this._it_line];
        if (line == null) return;
        var it_char = 1;
        while (it_char <= line.char_count)
        {
            var char = line.char_list[it_char];
            if (char.char != " " && char.char != "\t")
                break;
            ++it_char;
        }
        if (this._it_char == it_char - 1)
            this.SetLineChar(this._it_line, 0);
        else
            this.SetLineChar(this._it_line, it_char - 1);
    }

    // 向最后一列
    public fun OffsetEnd()
    {
        var line = this._edit.line_list[this._it_line];
        if (line == null) return;
        var count = line.char_count;
        while (count > 0 && line.char_list[count].width <= 0)
            -- count;
        if (this._it_char < count)
            this.SetLineChar(this._it_line, count);
    }

    // 向前删除一个字符
    public fun DeleteLeft(bool need_revoke, [Nullable] ALittle.RevokeBind revoke_bind) : bool
    {
        var old_it_line = this._it_line;
        var old_it_char = this._it_char;

        // 如果不在第一列
        if (this._it_char > 0)
        {
            var line = this._edit.line_list[this._it_line];
            if (line == null) return false;

            var char = line.char_list[this._it_char];
            var revoke_content = char.char;
            if (char.text != null) line.container._text.RemoveChild(char.text);
            line.char_count -= 1;
            ALittle.List_Remove(line.char_list, this._it_char);
            for (var i = this._it_char; i <= line.char_count; 1)
            {
                line.char_list[i].pre_width -= char.width;
                if (line.char_list[i].text != null)
                    line.char_list[i].text.x -= char.width;
            }

            this.SetLineChar(this._it_line, this._it_char - 1);

            if (this._edit.language != null)
                this._edit.language.DeleteText(this._it_line, this._it_char, this._it_line, this._it_char);

            var last_char = line.char_list[line.char_count];
            if (last_char != null)
                line.container.width = last_char.pre_width + last_char.width;
            else
                line.container.width = 0;

            var rejust = true;
            for (var index, line_info in this._edit.line_list)
            {
                if (line_info.container.width > line.container.width)
                {
                    rejust = false;
                    break;
                }
            }
            if (rejust)
            {
                this._edit.code_screen.container.width = line.container.width + CODE_LINE_NUMBER_WIDTH;
                this._edit.code_screen.AdjustScrollBar();
            }

            if (need_revoke)
            {
                var new_it_line = this._it_line;
                var new_it_char = this._it_char;

                var revoke = new AUICodeDeleteLeftRevoke(this._edit, this, old_it_line, old_it_char, new_it_line, new_it_char, revoke_content, revoke_bind == null);
                if (revoke_bind != null)
                    revoke_bind.PushRevoke(revoke);
                else
                    this._edit.revoke_list.PushRevoke(revoke);
            }

            this._edit.UpdateLineFind(this._it_line);
            return true;
        }

        if (this._it_line <= 1) return false;
        var pre_line = this._edit.line_list[this._it_line - 1];
        if (pre_line == null) return false;
        var cur_line = this._edit.line_list[this._it_line];
        if (cur_line == null) return false;

        // 1. 删除上一行的\r\n，
        var old_char_count = pre_line.char_count;
        var it_char = pre_line.char_count;
        var revoke_content = "";
        while (it_char > 0 && pre_line.char_list[it_char].width <= 0)
        {
            revoke_content = pre_line.char_list[it_char].char..revoke_content;
            pre_line.char_count -= 1;
            pre_line.char_list[it_char] = null;
            it_char -= 1;
        }
        var new_it_line = this._it_line - 1;
        var new_it_char = it_char;

        if (this._edit.language != null)
            this._edit.language.DeleteText(new_it_line, new_it_char, new_it_line, old_char_count - 1);

        // 2. 当前行拼到上一行的尾部
        var pre_width = 0.0;
        if (pre_line.char_count > 0)
        {
            var last_char = pre_line.char_list[pre_line.char_count];
            pre_width = last_char.pre_width + last_char.width;
        }
        for (var i = 1; i <= cur_line.char_count; 1)
        {
            var char = cur_line.char_list[i];
            char.pre_width = pre_width;
            if (char.text != null) char.text.x = pre_width;
            pre_line.container.AddChar(char);
            pre_width += char.width;
            pre_line.char_count += 1;
            pre_line.char_list[pre_line.char_count] = char;
        }
        pre_line.container.width = pre_width;
        this._edit.code_linear.RemoveChild(cur_line.container);
        this._edit.line_count -= 1;
        ALittle.List_Remove(this._edit.line_list, this._it_line);
        // 3. 下面的行依次往前移动
        // for (var i = this._it_line; i < this._edit.line_count; 1)
        //     this._edit.line_list[i].container.y -= this._edit.line_height;
        // 设置新的光标位置
        this.SetLineChar(new_it_line, new_it_char);
        if (this._edit.code_screen.container.width < pre_line.container.width + CODE_LINE_NUMBER_WIDTH)
            this._edit.code_screen.container.width = pre_line.container.width + CODE_LINE_NUMBER_WIDTH;
        this._edit.code_screen.AdjustScrollBar();

        if (need_revoke)
        {
            var revoke = new AUICodeDeleteLeftRevoke(this._edit, this, old_it_line, old_it_char, new_it_line, new_it_char, revoke_content, revoke_bind == null);
            if (revoke_bind != null)
                revoke_bind.PushRevoke(revoke);
            else
                this._edit.revoke_list.PushRevoke(revoke);
        }

        this._edit.UpdateLineFind(this._it_line);
        this._edit.UpdateLineNumber();
        return true;
    }

    // 向后删除一个字符
    public fun DeleteRight(bool need_revoke, [Nullable] ALittle.RevokeBind revoke_bind) : bool
    {
        var old_it_line = this._it_line;
        var old_it_char = this._it_char;

        var line = this._edit.line_list[this._it_line];
        if (line == null) return false;
        var count = line.char_count;
        while (count > 0 && line.char_list[count].width <= 0)
            -- count;

        // 如果不在最后一列
        if (this._it_char < count)
        {
            if (this._edit.language != null)
                this._edit.language.DeleteText(this._it_line, this._it_char, this._it_line, this._it_char);

            var char = line.char_list[this._it_char + 1];
            var revoke_content = char.char;
            if (char.text != null) line.container._text.RemoveChild(char.text);
            line.char_count -= 1;
            ALittle.List_Remove(line.char_list, this._it_char + 1);
            for (var i = this._it_char + 1; i <= line.char_count; 1)
            {
                line.char_list[i].pre_width -= char.width;
                if (line.char_list[i].text != null)
                    line.char_list[i].text.x -= char.width;
            }

            this.SetLineChar(this._it_line, this._it_char);

            var last_char = line.char_list[line.char_count];
            if (last_char != null)
                line.container.width = last_char.pre_width + last_char.width;
            else
                line.container.width = 0;
            var rejust = true;
            for (var index, line_info in this._edit.line_list)
            {
                if (line_info.container.width > line.container.width)
                {
                    rejust = false;
                    break;
                }
            }
            if (rejust)
            {
                this._edit.code_screen.container.width = line.container.width + CODE_LINE_NUMBER_WIDTH;
                this._edit.code_screen.AdjustScrollBar();
            }

            var new_it_line = this._it_line;
            var new_it_char = this._it_char;

            if (need_revoke)
            {
                var revoke = new AUICodeDeleteRightRevoke(this._edit, this, old_it_line, old_it_char, new_it_line, new_it_char, revoke_content, revoke_bind == null);
                if (revoke_bind != null)
                    revoke_bind.PushRevoke(revoke);
                else
                    this._edit.revoke_list.PushRevoke(revoke);
            }

            this._edit.UpdateLineFind(this._it_line);
            return true;
        }

        if (this._it_line >= this._edit.line_count) return false;

        var cur_line = line;
        var next_line = this._edit.line_list[this._it_line + 1];
        if (next_line == null) return false;

        // 1. 删除当前行的\r\n，
        var old_char_count = cur_line.char_count;
        var it_char = cur_line.char_count;
        var revoke_content = "";
        while (it_char > 0 && (cur_line.char_list[it_char].char == "\r" || cur_line.char_list[it_char].char == "\n"))
        {
            revoke_content = cur_line.char_list[it_char].char..revoke_content;
            cur_line.char_count -= 1;
            cur_line.char_list[it_char] = null;
            it_char -= 1;
        }
        var new_it_line = this._it_line;
        var new_it_char = it_char;

        if (this._edit.language != null)
            this._edit.language.DeleteText(this._it_line, it_char, this._it_line, old_char_count - 1);

        // 2. 下一行拼到当前行的尾部
        var pre_width = 0.0;
        if (cur_line.char_count > 0)
        {
            var last_char = cur_line.char_list[cur_line.char_count];
            pre_width = last_char.pre_width + last_char.width;
        }
        for (var i = 1; i <= next_line.char_count; 1)
        {
            var char = next_line.char_list[i];
            char.pre_width = pre_width;
            if (char.text != null) char.text.x = pre_width;
            cur_line.container.AddChar(char);
            pre_width += char.width;
            cur_line.char_count += 1;
            cur_line.char_list[cur_line.char_count] = char;
        }
        cur_line.container.width = pre_width;
        this._edit.code_linear.RemoveChild(next_line.container);
        this._edit.line_count -= 1;
        ALittle.List_Remove(this._edit.line_list, this._it_line + 1);
        // 3. 下面的行依次往前移动
        // for (var i = this._it_line + 1; i < this._edit.line_count; 1)
        //    this._edit.line_list[i].container.y -= this._edit.line_height;
        // 设置新的光标位置
        this.SetLineChar(new_it_line, new_it_char);
        if (this._edit.code_screen.container.width < cur_line.container.width + CODE_LINE_NUMBER_WIDTH)
            this._edit.code_screen.container.width = cur_line.container.width + CODE_LINE_NUMBER_WIDTH;
        this._edit.code_screen.AdjustScrollBar();

        if (need_revoke)
        {
            var revoke = new AUICodeDeleteRightRevoke(this._edit, this, old_it_line, old_it_char, new_it_line, new_it_char, revoke_content, revoke_bind == null);
            if (revoke_bind != null)
                revoke_bind.PushRevoke(revoke);
            else
                this._edit.revoke_list.PushRevoke(revoke);
        }

        this._edit.UpdateLineFind(this._it_line);
        this._edit.UpdateLineNumber();
        return true;
    }

    public fun Hide()
    {
        if (this._loop != null) { this._loop.Stop(); this._loop = null; }
        this.visible = false;
    }

    private fun Update()
    {
        if (this.abs_visible)
        {
            this._flash_alpha = this._flash_alpha + this._flash_dir;
            if ((this._flash_dir < 0 && this._flash_alpha < -0.05) || (this._flash_dir > 0 && this._flash_alpha > 1.5))
                this._flash_dir = -this._flash_dir;
            this.alpha = this._flash_alpha;
        }
    }
}
