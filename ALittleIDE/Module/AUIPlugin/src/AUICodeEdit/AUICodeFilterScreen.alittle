
namespace AUIPlugin;

protected struct AUICodeFilterItemInfo
{
    ALittle.TextRadioButton _item_button;
    ALittle.Text _item_title;
    ALittle.Image _tag_image;
    ALittle.DisplayObject _item;

    int pos;        // 用于排序
    string upper;
    lua.ABnfQueryCompleteInfo complete;
}

protected class AUICodeFilterScreen
{
    private ALittle.ScrollScreen _screen;
    private List<AUICodeFilterItemInfo> _item_list;

    private List<AUICodeFilterItemInfo> _item_pool = new List<AUICodeFilterItemInfo>();
    private int _item_pool_count = 0;

    private ALittle.DisplayObject _tip_dialog;
    private ALittle.TextArea _tip_text;

    private ALittle.TextRadioButtonGroup _item_group;

    private List<lua.ABnfQueryCompleteInfo> _complete;
    private int _line_end;
    private int _char_end;
    private ALittle.DisplayObject _edit;
    private AUICodeProject _project;
    private double _item_height = 0;

    // 显示列表
    public async fun ShowComplete(AUICodeProject project, string pre_input, ALittle.DisplayObject edit)
    {
        if (this._edit != edit)
        {
            if (this._edit != null)
                this._edit.RemoveEventListener(this, this.HandleEditKeyDown);
            this._edit = edit;
            if (this._edit != null)
            	this._edit.AddEventListener(this, this.HandleEditKeyDown);
        }

        var text = this._edit.text;
        var split = ALittle.String_Split(text, ".");
        var split_len = ALittle.List_Len(split);
        if (split_len > 0) 
        {
            if (split[split_len] == "") this._complete = null;
            split[split_len] = null;
        }

        this._project = project;
        if (this._complete == null)
        {
            if (!this.ReInit(pre_input, ALittle.String_Join(split, ".")))
            {
                this.Hide();
                return;
            }
        }

        if (!this.Fliter(text))
        {
            this.Hide();
            return;
        }
    }

    private fun HandleEditKeyDown(ALittle.UIKeyDownEvent event)
    {
        if (event.sym == ALittle.UIEnumTypes.KEY_ENTER)
            this.DoSelect();
        elseif (event.sym == ALittle.UIEnumTypes.KEY_UP)
        	this.SelectUp();
        elseif (event.sym == ALittle.UIEnumTypes.KEY_DOWN)
        	this.SelectDown();
    }

    public fun IsShow() : bool { return this._edit != null; }

    public fun SelectUp()
    {
        var target = this.GetSelectIndex();
        target -= 1;
        if (target < 1) return;
        var item = this._screen.childs[target];
        var info = cast<AUICodeFilterItemInfo>(item._user_data);
        info._item_button.selected = true;

        if (info.complete.descriptor != null)
            this.ShowTip(info.complete.descriptor);
        else
            this.HideTip();

        var delta = this._screen.container.height - this._screen.height;
        if (delta > 0)
        {
            var offset = (target - 1) * this._item_height + this._screen.container_y;
            if (offset < 0)
            {
                this._screen.right_scrollbar.offset_rate = ((target - 1) * this._item_height) / delta; 
                this._screen.AdjustScrollBar();
            }
        }
    }

    public fun SelectDown()
    {
        var target = this.GetSelectIndex();
        target += 1;
        if (target > this._screen.child_count) return;
        var item = this._screen.childs[target];
        var info = cast<AUICodeFilterItemInfo>(item._user_data);
        info._item_button.selected = true;

        if (info.complete.descriptor != null)
            this.ShowTip(info.complete.descriptor);
        else
            this.HideTip();
    
        var delta = this._screen.container.height - this._screen.height;
        if (delta > 0)
        {
            var offset = target * this._item_height + this._screen.container_y;
            if (offset > this._screen.height)
            {
                this._screen.right_scrollbar.offset_rate = (target * this._item_height - this._screen.height) / delta;   
                this._screen.AdjustScrollBar();   
            }
        }
    }

    public fun DoSelect() : bool
    {
        var target = this.GetSelectIndex();
        if (target == null) return false;

        var item = this._screen.childs[target];
        var text:string;
        var complete = cast<AUICodeFilterItemInfo>(item._user_data).complete;
        if (complete.insert != null) text = complete.insert;
        else text = complete.display;

        this._edit.text = text;
        this.Hide();
        return true;
    }

    private fun GetSelectIndex() : int
    {
        var target:int = null;
        for (var index, child in this._screen.childs)
        {
            if (cast<AUICodeFilterItemInfo>(child._user_data)._item_button.selected)
            {
                target = index;
                break;
            }   
        }
        return target;
    }

    private await fun ReInit(string pre_input, string input) : bool
    {
        if (this._project == null) return false;
        this._complete = this._project.FindDefine(pre_input, input);
        if (this._complete == null) return false;
            // 计算坐标
        var x, y = this._edit.LocalToGlobal();
        y += this._edit.height;

        if (this._screen == null)
        {
            this._screen = g_Control.CreateControl{ALittle.ScrollScreen}("code_scroll_screen");
            this._screen.width = 200;

            this._screen.AddEventListener(this, this.HandleHide);
        }
        this._screen.RemoveAllChild();

        this._screen.x = x;
        this._screen.y = y;

        if (this._item_list != null)
        {
            for (var index, info in this._item_list)
            {
                this._item_pool_count += 1;
                this._item_pool[this._item_pool_count] = info;
            }
        }

        var max_width = 200.0;

        this._item_group = new ALittle.TextRadioButtonGroup();
        this._item_list = new List<AUICodeFilterItemInfo>();
        for (var index, info in this._complete)
        {
            var item_info:AUICodeFilterItemInfo;
            if (this._item_pool_count > 0)
            {
                item_info = this._item_pool[this._item_pool_count];
                this._item_pool[this._item_pool_count] = null;
                this._item_pool_count -= 1;
            }
            else
            {
                item_info = new AUICodeFilterItemInfo();
                item_info._item = g_Control.CreateControl{ALittle.DisplayObject}("code_complete_item", item_info);
            }
            item_info._item_button.group = this._item_group;
            item_info._item_title.text = info.display;
            if (info.insert == null)
                item_info.upper = ALittle.String_Upper(info.display);
            else
                item_info.upper = ALittle.String_Upper(info.insert);
            item_info._tag_image.texture_name = this._project.QueryCompleteIcon(info.tag);
            item_info._item._user_data = item_info;
            item_info.complete = info;
            this._item_list[index] = item_info;

            var title_wdith = item_info._item_title.width + item_info._item_title.x + 5;
            if (max_width < title_wdith) max_width = title_wdith;

            this._item_height = item_info._item.height;
        }

        this._screen.width = max_width;

        A_LayerManager.ShowFromRight(this._screen, false);

        return true;
    }

    private fun HandleHide(ALittle.UIHideEvent event)
    {
        this.HideImpl();
    }

    private static ItemInfoSort(AUICodeFilterItemInfo a, AUICodeFilterItemInfo b) : bool
    {
        return a.pos < b.pos;
    }

    private fun Fliter(string text) : bool
    {
        var descriptor:string;
        var upper = ALittle.String_Upper(text);
    
        var sort_list = new List<AUICodeFilterItemInfo>();
        var count = 0;
        this._screen.RemoveAllChild();
        for (var index, info in this._item_list)
        {
            info.pos = ALittle.String_Find(info.upper, upper);
            if (info.pos != null)
            {
                ++count;
                sort_list[count] = info;
            }
        }
        ALittle.List_Sort(sort_list, AUICodeFilterScreen.ItemInfoSort);
        count = 0;
        for (var index, info in sort_list)
        {
            if (this._screen.child_count == 0)
            {
                info._item_button.selected = true;
                descriptor = info.complete.descriptor;
            }
            this._screen.AddChild(info._item);      
            if (count >= 50) break;
        }

        if (this._screen.child_count == 0) return false;

        var height = this._screen.child_count * this._item_height;
        if (height < 200) this._screen.height = height;
        else this._screen.height = 200;

        if (descriptor != null)
            this.ShowTip(descriptor);
        else
            this.HideTip();

        return true;
    }

    public fun Hide()
    {
        this.HideImpl();
        A_LayerManager.HideFromRight(this._screen);
    }

    private fun HideImpl()
    {
        this.HideTip();
        if (this._edit != null) this._edit.RemoveEventListener(this, this.HandleEditKeyDown);
        this._edit = null;
        this._complete = null;
        if (this._screen != null) this._screen.RemoveAllChild();
    }

	// 显示TIP
	private fun ShowTip(string content)
	{
		// 创建模态提示对话框，并添加到模态层
		if (this._tip_dialog == null)
		{
			this._tip_dialog = g_Control.CreateControl{ALittle.DisplayObject}("code_area_tip", this);
            this._tip_dialog.width = 200;
		}

        A_LayerManager.AddToTip(this._tip_dialog);
		this._tip_dialog.visible = true;
		this._tip_text.text = content;
		this._tip_dialog.height = this._tip_text.real_height + 16;

		this._tip_dialog.x = this._screen.x + this._screen.width;
		this._tip_dialog.y = this._screen.y;
        if (this._tip_dialog.x + this._tip_dialog.width > A_UISystem.view_width)
        {
            this._tip_dialog.x = this._screen.x;
            this._tip_dialog.y = this._screen.y + this._screen.height;
        }
	}

	// 隐藏TIP
	private fun HideTip()
	{
		if (this._tip_dialog == null) return;
		this._tip_dialog.visible = false;
        A_LayerManager.RemoveFromTip(this._tip_dialog);
	}

    public fun Shutdown()
    {
        this.Hide();
    }
}

public var g_AUICodeFilterScreen = new AUICodeFilterScreen();