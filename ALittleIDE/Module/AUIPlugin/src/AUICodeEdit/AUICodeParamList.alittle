
namespace AUIPlugin;

struct AUICodeParamItemInfo
{
    List<ALittle.DisplayObject> text_list;
}

protected class AUICodeParamList
{
    private ALittle.DisplayLayout _dialog;			// 实际显示的对话框
    private ALittle.DisplayLayout _text_container;	// 文本容器
    private List<AUICodeParamItemInfo> _item_list;	// 每个参数文本信息列表

    private lua.ABnfQueryParamList _param_info;		// 查询的信息列表
    private int _param_count;
    private int _param_index;	// 当前的参数焦点
    private int _start_offset;
    private AUICodeEdit _edit;

    public ctor(AUICodeEdit edit)
    {
        this._edit = edit;
    }

    public async fun ShowParamList()
    {
        if (this._param_info == null)
        {
            if (!this.ReInit())
            {
                this.Hide();
                return;
            }
        }

        // 查询坐标位置
        var param_index, start_offset = this._edit.language.QueryParamIndex(this._edit.cursor.line, this._edit.cursor.char - 1);
        if (param_index < 1)
        {
            this.Hide();
            return;
        }

        if (this._start_offset == null)
        {
            this._start_offset = start_offset;
        }
        elseif (this._start_offset != start_offset)
        {
            this.Hide();
            if (!this.ReInit())
            {
                this.Hide();
                return;
            }
            this._start_offset = start_offset;
        }
    
        // 如果参数一致，那么就直接返回
        if (this._param_index == param_index) return;

        if (param_index > this._param_count)
        {
            this.Hide();
            return;
        }

        // 更新参数焦点
        var item_info = this._item_list[this._param_index];
        if (item_info != null)
        {
            for (var index, text in item_info.text_list)
            {
                text.red = CODE_PARAMLIST_RED;
                text.green = CODE_PARAMLIST_GREEN;
                text.blue = CODE_PARAMLIST_BLUE;
            }
        }
        this._param_index = param_index;
        item_info = this._item_list[this._param_index];
        if (item_info != null)
        {
            for (var index, text in item_info.text_list)
            {
                text.red = CODE_PARAMLIST_FOCUS_RED;
                text.green = CODE_PARAMLIST_FOCUS_GREEN;
                text.blue = CODE_PARAMLIST_FOCUS_BLUE;
            }
        }
    }

    public fun IsShow() : bool { return this._param_info != null; }

    private await fun ReInit() : bool
    {
        if (this._edit.language == null) return false;
        this._param_info = this._edit.language.QueryParamList(this._edit.cursor.line, this._edit.cursor.char - 1);
        if (this._param_info == null) return false;
        this._param_count = ALittle.List_Len(this._param_info.param_list);
        if (this._param_count == 0) return false;
        
        // 计算坐标
        var x, y = this._edit.CalcPosition(this._param_info.line_start, this._param_info.char_start, true);
        if (this._dialog == null)
        {
            this._dialog = g_Control.CreateControl{ALittle.DisplayLayout}("code_paramlist_tip", this);
            this._dialog.width = 200;
            this._dialog.height = CODE_LINE_HEIGHT + this._text_container.height_value;
        }
        y -= this._dialog.height;
        this._text_container.RemoveAllChild();

        this._dialog.x = x;
        this._dialog.y = y;

        this._item_list = new List<AUICodeParamItemInfo>();
        this._param_index = 0;
        var offset = 0.0;
        var param_len = ALittle.List_Len(this._param_info.param_list);
        for (var param_index, param in this._param_info.param_list)
        {
            var info = new AUICodeParamItemInfo();
            info.text_list = new List<ALittle.DisplayObject>();
            var text_count = 0;
            var param_name = param.name;
            if (param_index != param_len) {
                param_name = param_name..", ";
            }
            var text_list = ALittle.String_SplitUTF8(param_name);
            for (var index, char in text_list)
            {
                if (char == "\t")
                    offset += this._edit.ascii_width * 4;
                elseif (char == " ")
                    offset += this._edit.ascii_width;
                elseif (char != "\r" && char != "\n")
                {
                    var is_asicc = true;
                    [Language(Lua)]
                    {
                        var byte_count = carp.UTF8ByteCount(char, 0, 1);
                        if (byte_count > 1) is_asicc = false;
                    }
                    [Language(JavaScript)]
                    {
                        var code = cast<javascript.String>(char).charCodeAt(0);
                        if (code > 255) is_asicc = false;
                    }

                    var text = new ALittle.Text(g_Control);
                    text.red = CODE_PARAMLIST_RED;
                    text.green = CODE_PARAMLIST_GREEN;
                    text.blue = CODE_PARAMLIST_BLUE;
                    text.text = char;
                    text.x = offset;
                    text.font_path = CODE_FONT_PATH;
                    text.font_size = CODE_FONT_SIZE;
                    this._text_container.AddChild(text);
                    
                    if (is_asicc) offset += this._edit.ascii_width;
                    else offset += this._edit.word_width;

                    ++ text_count;
                    info.text_list[text_count] = text;
                }	
            }
            this._item_list[param_index] = info;
        }
        this._dialog.width = offset + this._text_container.width_value;
        this._edit.help_container.AddChild(this._dialog);
        return true;
    }

    public fun Hide()
    {
        this._param_info = null;
        this._start_offset = null;
        this._param_count = 0;
        this._param_index = 0;
        this._edit.help_container.RemoveChild(this._dialog);
    }

    public fun TryHide()
    {
        if (this._param_info == null) return;

        // 检查光标
        if (this._edit.cursor.line < this._param_info.line_start || this._edit.cursor.line > this._param_info.line_end)
        {
            this.Hide();
            return;
        }

        if (this._edit.cursor.line == this._param_info.line_start && this._edit.cursor.char < this._param_info.char_start)
        {
            this.Hide();
            return;
        }

        if (this._edit.cursor.line == this._param_info.line_end && this._edit.cursor.char > this._param_info.char_end)
        {
            this.Hide();
            return;
        }
    }
}