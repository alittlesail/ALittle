
namespace AUIPlugin;

public class AUICodeSelectCursor
{
    private AUICodeEdit _edit;

    // 选中光标的范围
    private int _it_line_start;
    private int _it_char_start;
    private int _it_line_end;
    private int _it_char_end;
    private bool _clear_quad = true;

	public ctor(AUICodeEdit edit)
    {
        this._edit = edit;
    }

    private fun ClearQuad()
    {
        if (this._clear_quad) return;
        this._clear_quad = true;

        if (this._it_line_start != null && this._it_line_end != null)
        {
            if (this._it_line_start < this._it_line_end)
            {
                var line_list = this._edit.line_list;
                var it_line_end = this._it_line_end;
                for (var i = this._it_line_start; i <= it_line_end; 1)
                    line_list[i].container._select.visible = false;
            }
            else
            {
                var line_list = this._edit.line_list;
                var it_line_start = this._it_line_start;
                for (var i = this._it_line_end; i <= it_line_start; 1)
                    line_list[i].container._select.visible = false;
            }
        }
    }

    private fun SetQuad()
    {
        var it_line_start = this._it_line_start;
        var it_char_start = this._it_char_start;
        var it_line_end = this._it_line_end;
        var it_char_end = this._it_char_end;

        var swap = false;
        if (it_line_start > it_line_end)
            swap = true;
        elseif (it_line_start == it_line_end)
            swap = it_char_start > it_char_end;
        if (swap)
        {
            var temp = it_line_start;
            it_line_start = it_line_end;
            it_line_end = temp;

            temp = it_char_start;
            it_char_start = it_char_end;
            it_char_end = temp;
        }

        if (it_line_start == it_line_end)
        {
            if (this._it_char_start == this._it_char_end) return;
            var line = this._edit.line_list[it_line_start];
            if (line.char_count == 0) return;
            line.container._select.visible = true;
            this._clear_quad = false;
            line.container._select.x = line.char_list[it_char_start + 1].pre_width;
            line.container._select.width = line.char_list[it_char_end].pre_width + line.char_list[it_char_end].width - line.container._select.x;
            return;
        }
        var line_list = this._edit.line_list;
        for (var i = it_line_start; i <= it_line_end; 1)
        {
            var line = line_list[i];
            if (line.char_count > 0)
            {
                if (i == it_line_start)
                {
                    if (it_char_start < line.char_count)
                    {
                        line.container._select.visible = true;
                        this._clear_quad = false;
                        line.container._select.x = line.char_list[it_char_start + 1].pre_width;
                        line.container._select.width = line.container.width - line.container._select.x;   
                    }
                }
                elseif (i == it_line_end)
                {
                    if (it_char_end > 0)
                    {
                        line.container._select.visible = true;
                        this._clear_quad = false;
                        line.container._select.x = 0;
                        line.container._select.width = line.char_list[it_char_end].pre_width + line.char_list[it_char_end].width;   
                    }
                }
                else
                {
                    line.container._select.visible = true;
                    this._clear_quad = false;
                    line.container._select.x = 0;
                    line.container._select.width = line.container.width;
                }

                if (line.container._select.width <= 0)
                    line.container._select.width = this._edit.ascii_width;
            }
            else
            {
                line.container._select.visible = true;
                this._clear_quad = false;
                line.container._select.x = 0;
                line.container._select.width = this._edit.ascii_width;
            }
        }
    }

    public get line_start() : int { return this._it_line_start; }
    public get char_start() : int { return this._it_char_start; }
    public get line_end() : int { return this._it_line_end; }
    public get char_end() : int { return this._it_char_end; }

    public fun GetLineCharCloseToEnd() : int, int
    {
        if (this._it_line_start < this._it_line_end)
            return this._it_line_end, this._it_char_end;

        if (this._it_line_start > this._it_line_end)
        	return this._it_line_start, this._it_char_start;

        if (this._it_char_start < this._it_char_end)
            return this._it_line_end, this._it_char_end;	

        return this._it_line_start, this._it_char_start;
	}

    public fun GetLineCharCloseToHome() : int, int
    {
        if (this._it_line_start > this._it_line_end)
            return this._it_line_end, this._it_char_end;

        if (this._it_line_start < this._it_line_end)
        	return this._it_line_start, this._it_char_start;

        if (this._it_char_start > this._it_char_end)
            return this._it_line_end, this._it_char_end;	

        return this._it_line_start, this._it_char_start;
	}

    public fun StartLineChar(int line, int char)
    {
        this.Hide();
        if (this._edit.line_count == 0)
            return;
        this._it_line_start = line;
        this._it_char_start = char;
    }

    public fun UpdateLineChar(int it_line, int it_char)
    {
        this.ClearQuad();
        this._it_line_end = it_line;
        var line = this._edit.line_list[it_line];
        if (line == null)
        	this._it_char_end = 0;
        elseif (line.char_count < it_char)
        	this._it_line_end = line.char_count;
        else
	        this._it_char_end = it_char;
        this.SetQuad();
    }

    public fun StartOffsetXY(double x, double y)
    {
        this.Hide();
        if (this._edit.line_count == 0)
            return;
        this._it_line_start, this._it_char_start = this._edit.CalcLineAndChar(x, y);
    }

    public fun UpdateOffsetXY(double x, double y)
    {
        this.ClearQuad();
        if (this._it_line_start == null) return;

        this._it_line_end, this._it_char_end = this._edit.CalcLineAndChar(x, y);
        this.SetQuad();
    }

    // 获取目标文本
    public fun GetTargetText(int it_line_start, int it_char_start, int it_line_end, int it_char_end) : string
    {
        var swap = false;
        if (it_line_start > it_line_end)
            swap = true;
        elseif (it_line_start == it_line_end)
            swap = it_char_start > it_char_end;
        if (swap)
        {
            var temp = it_line_start;
            it_line_start = it_line_end;
            it_line_end = temp;

            temp = it_char_start;
            it_char_start = it_char_end;
            it_char_end = temp;
        }

        if (it_line_start == it_line_end)
        {
            if (it_char_start == it_char_end) return "";
            var line = this._edit.line_list[it_line_start];
            if (line.char_count == 0) return "";
            var text = new List<string>();
            var text_count = 0;
            for (var i = it_char_start + 1; i <= it_char_end; 1)
            {
                ++text_count;
                text[text_count] = line.char_list[i].char;
            }
            return ALittle.String_Join(text, "");
        }

        var text = new List<string>();
        var text_count = 0;
        for (var i = it_line_start; i <= it_line_end; 1)
        {
            var line = this._edit.line_list[i];
            if (line.char_count > 0)
            {
                if (i == it_line_start)
                {
                    for (var j = it_char_start + 1; j <= line.char_count; 1)
                    {
                        ++text_count;
                        text[text_count] = line.char_list[j].char;
                    }
                }
                elseif (i == it_line_end)
                {
                    for (var j = 1; j <= it_char_end; 1)
                    {
                        ++text_count;
                        text[text_count] = line.char_list[j].char;
                    }
                }
                else
                {
                    for (var j = 1; j <= line.char_count; 1)
                    {
                        ++text_count;
                        text[text_count] = line.char_list[j].char;
                    }
                }   
            }
        }
        return ALittle.String_Join(text, "");
    }

    // 复制选中文本
    public fun GetSelectText() : string
    {
        if (this._it_line_start == null) return null;
        return this.GetTargetText(this._it_line_start, this._it_char_start, this._it_line_end, this._it_char_end);
    }

    public fun DeleteSelect(bool need_revoke, [Nullable]ALittle.RevokeBind revoke_bind) : bool, int, int
    {
        if (this._it_line_start == null) return false, null, null;

        // 获取行列表
        var edit_line_list = this._edit.line_list;

        // 如果删除的是同一行
        if (this._it_line_start == this._it_line_end)
        {
            // 如果删除的是同一列
            if (this._it_char_start == this._it_char_end)
            {
                this.Hide();
                return false, null, null;
            }

            // 获取当前行
            var line = edit_line_list[this._it_line_start];
            if (line == null) return false, null, null;

            var old_it_line_start = this._it_line_start;
            var old_it_char_start = this._it_char_start;
            var old_it_line_end = this._it_line_end;
            var old_it_char_end = this._it_char_end;

            var it_line_start = this._it_line_start;
            // 交换
            var it_char_start = this._it_char_start;
            var it_char_end = this._it_char_end;
            if (it_char_start > it_char_end)
            {
                var temp = it_char_start;
                it_char_start = it_char_end;
                it_char_end = temp;
            }

            if (this._edit.language != null)
                this._edit.language.DeleteText(it_line_start, it_char_start, it_line_start, it_char_end - 1);

            // 先隐藏
            this.Hide();
            
            // 计算长度
            var acc_width = 0.0;
            for (var i = it_char_start + 1; i <= it_char_end; 1)
                acc_width += line.char_list[i].width;

            // 移动
            for (var i = it_char_end + 1; i <= line.char_count; 1)
            {
                var char = line.char_list[i];
                char.pre_width -= acc_width;
                if (char.text != null) char.text.x -= acc_width;
            }

            // 移除
            var revoke_content = "";
            for (var i = it_char_start + 1; i <= it_char_end; 1)
            {
                var char = line.char_list[i];
                revoke_content = revoke_content..char.char;
                if (char.text != null) line.container._text.RemoveChild(char.text);
            }
            var count = it_char_end - it_char_start;
            line.char_count -= count;
            ALittle.List_Splice(line.char_list, it_char_start + 1, count);

            var last_char = line.char_list[line.char_count];
            if (last_char != null)
                line.container.width = last_char.pre_width + last_char.width;
            else
                line.container.width = 0;
            var rejust = true;
            for (var index, line_info in edit_line_list)
            {
                if (line_info.container.width > line.container.width)
                {
                    rejust = false;
                    break;
                }
            }
            if (rejust)
                this._edit.AdjustCodeScreen(line.container.width + CODE_LINE_NUMBER_WIDTH);
            
            if (need_revoke)
            {
                var revoke = new AUICodeDeleteSelectRevoke(this._edit, this._edit.cursor, this
                            , old_it_line_start, old_it_char_start, old_it_line_end, old_it_char_end
                            , it_line_start, it_char_start, revoke_content, revoke_bind == null);
                if (revoke_bind != null)
                    revoke_bind.PushRevoke(revoke);
                else
                    this._edit.revoke_list.PushRevoke(revoke);
            }

            this._edit.UpdateLineFind(it_line_start);
            return true, it_line_start, it_char_start;
        }

        var old_it_line_start = this._it_line_start;
        var old_it_char_start = this._it_line_start;
        var old_it_line_end = this._it_line_end;
        var old_it_char_end = this._it_char_end;

        // 交换
        var it_line_start = this._it_line_start;
        var it_char_start = this._it_char_start;
        var it_line_end = this._it_line_end;
        var it_char_end = this._it_char_end;
        if (it_line_start > it_line_end)
        {
            var temp = it_line_start;
            it_line_start = it_line_end;
            it_line_end = temp;

            temp = it_char_start;
            it_char_start = it_char_end;
            it_char_end = temp;
        }

        if (this._edit.language != null)
        {
            var delete_line_end = it_line_end;
            var delete_char_end = it_char_end - 1;
            if (delete_char_end < 0)
            {
                delete_line_end -= 1;
                delete_char_end = edit_line_list[delete_line_end].char_count - 1;
            }
            this._edit.language.DeleteText(it_line_start, it_char_start, delete_line_end, delete_char_end);
        }

        // 先隐藏
        this.Hide();

        // 先删除中间的行
        var revoke_center = new List<string>();
        var revoke_c_count = 0;
        var line_count = it_line_end - it_line_start - 1;
        if (line_count > 0)
        {
            for (var it_line = it_line_start + 1; it_line < it_line_end; 1)
            {
                var line = edit_line_list[it_line];
                for (var it_char = 1; it_char <= line.char_count; 1)
                {
                    revoke_c_count += 1;
                    revoke_center[revoke_c_count] = line.char_list[it_char].char;
                }
            }
            this._edit.code_linear.SpliceChild(it_line_start + 1, line_count);
            ALittle.List_Splice(edit_line_list, it_line_start + 1, line_count);
            this._edit.line_count -= line_count;
            it_line_end -= line_count;
        }
        // 删除开始行
        var revoke_start = "";
        var start_line = edit_line_list[it_line_start];
        for (var it_char = it_char_start + 1; it_char <= start_line.char_count; 1)
        {
            var char = start_line.char_list[it_char];
            revoke_start = revoke_start..char.char;
            if (char.text != null) start_line.container._text.RemoveChild(char.text);
        }
        var count = start_line.char_count - it_char_start;
        start_line.char_count -= count;
        ALittle.List_Splice(start_line.char_list, it_char_start + 1, count);

        // 2. 下一行拼到当前行的尾部
        var end_line = edit_line_list[it_line_end];
        var pre_width = 0.0;
        var last_char = start_line.char_list[start_line.char_count];
        if (last_char != null)
            pre_width = last_char.pre_width + last_char.width;
        
        var revoke_end = "";
        for (var i = 1; i <= it_char_end; 1)
            revoke_end = revoke_end..end_line.char_list[i].char;

        for (var i = it_char_end + 1; i <= end_line.char_count; 1)
        {
            var char = end_line.char_list[i];
            char.pre_width = pre_width;
            if (char.text != null) char.text.x = pre_width;
            start_line.container.AddChar(char);
            pre_width += char.width;
            start_line.char_count += 1;
            start_line.char_list[start_line.char_count] = char;
        }
        start_line.container.width = pre_width;
        this._edit.code_linear.RemoveChild(end_line.container);
        this._edit.line_count -= 1;
        ALittle.List_Remove(edit_line_list, it_line_end);
        
        // 从新计算宽度
        var max_width = 0.0;
        for (var index, line in edit_line_list)
        {
            if (max_width < line.container.width)
                max_width = line.container.width;
        }
        this._edit.AdjustCodeScreen(max_width);

        if (need_revoke)
        {
            var revoke = new AUICodeDeleteSelectRevoke(this._edit, this._edit.cursor, this
                , old_it_line_start, old_it_char_start, old_it_line_end, old_it_char_end
            , it_line_start, it_char_start, revoke_start..ALittle.String_Join(revoke_center, "")..revoke_end, revoke_bind == null);
            if (revoke_bind != null)
                revoke_bind.PushRevoke(revoke);
            else
                this._edit.revoke_list.PushRevoke(revoke);
        }

        for (var i = it_line_start; i <= it_line_end; 1)
        	this._edit.UpdateLineFind(i);
        this._edit.UpdateLineNumber();
        return true, it_line_start, it_char_start;
    }

    public fun TryHide()
    {
        if (this._it_line_start == null
            || this._it_line_end == null
            || this._it_char_start == null
            || this._it_char_end == null)
        {
            this.Hide();
            return;
        }

        if (this._it_line_start == this._it_line_end
            && this._it_char_start == this._it_char_end)
        {
            this.Hide();
            return;
        }
    }

	public fun Hide()
	{
        this.ClearQuad();
        this._clear_quad = true;
        this._it_line_start = null;
        this._it_char_start = null;
        this._it_line_end = null;
        this._it_char_end = null;
    }
}
