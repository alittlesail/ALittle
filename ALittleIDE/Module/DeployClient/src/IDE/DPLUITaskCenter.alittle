
namespace DeployClient;

protected struct TaskItemInfo
{
    ALittle.DisplayObject item;
    DeployServer.D_TaskInfo info;
    ALittle.DisplayObject _button;
    ALittle.DisplayObject _status;

    // 任务面板详细信息
    DPLUITaskDetail detail;
}

public class DPLUITaskCenter : ALittle.DisplayLayout
{
	private ALittle.Grid3 _task_grid3;		// 任务三宫格

    private ALittle.DisplayObject _task_key;	// 搜索输入
    private ALittle.ScrollList _scroll_list;	// 滚动屏
    private ALittle.TextRadioButtonGroup _group = new ALittle.TextRadioButtonGroup(); 
    private ALittle.DisplayLayout _task_detail_container;
    public ALittle.DisplayObject _build_edit;

    private Map<int, TaskItemInfo> _item_map = new Map<int, TaskItemInfo>();

    // 面板拖拽 //////////////////////////////////////////////////////////////////////////////////////
	public fun System_SetVDragCursor(ALittle.UIEvent event) { ALittle.System_SetVDragCursor(); }
	public fun System_SetNormalCursor(ALittle.UIEvent event) { ALittle.System_SetNormalCursor(); }
	public fun System_SetHDragCursor(ALittle.UIEvent event) { ALittle.System_SetHDragCursor(); }
	public fun System_SetHVDragCursor(ALittle.UIEvent event) { ALittle.System_SetHVDragCursor(); }

	// 处理面板大小拖拽
	private fun HandleGrid3UpResizeDrag(ALittle.UIButtonDragEvent event)
	{
		var up_size = this._task_grid3.up_size;
		up_size = up_size + event.delta_x;
		var max_size = this._task_grid3.width - this._task_grid3.down_size - 50;
		if (up_size > max_size) up_size = max_size;
		if (up_size < 100) up_size = 100;
		this._task_grid3.up_size = up_size;
	}

	// 处理面板大小拖拽
	private fun HandleGrid3DownResizeDrag(ALittle.UIButtonDragEvent event)
	{
		var down_size = this._task_grid3.down_size;
		down_size = down_size - event.delta_x;
		var max_size = this._task_grid3.width - this._task_grid3.down_size - 50;
		if (down_size > max_size) down_size = max_size;
		if (down_size < 100) down_size = 100;
		this._task_grid3.down_size = down_size;
	}
    //////////////////////////////////////////////////////////////////////////////////////////////

    public fun AddTaskItem(DeployServer.D_TaskInfo info)
    {
        var task_info = new TaskItemInfo();
        task_info.item = g_Control.CreateControl{ALittle.DisplayObject}("dpl_task_item", task_info);
        task_info.info = info;
        task_info._button.text = info.task_name;
        task_info._button._user_data = task_info;
        task_info._button.AddEventListener(this, this.HandleItemRButtonDown);
        task_info._button.AddEventListener(this, this.HandleItemChanged);
        task_info._button.group = this._group;
        this._scroll_list.AddChild(task_info.item);

        if (info.status == DeployServer.TaskStatus.IDLE)
        	task_info._status.text = "";
        else
            task_info._status.text = ALittle.Math_Floor(info.progress * 100) / 100 .."%";

        this._item_map[info.task_id] = task_info;
    }

    public fun AddJobItem(int task_id, int job_index, DeployServer.D_JobInfo info)
    {
        var task_info = this._item_map[task_id];
        if (task_info == null) return;

        if (job_index == null || job_index <= 0 || job_index > ALittle.List_Len(task_info.info.job_list))
        {
            ALittle.List_Push(task_info.info.job_list, info);
            job_index = ALittle.List_Len(task_info.info.job_list);
        }
        else
	        ALittle.List_Insert(task_info.info.job_list, job_index, info);
        if (task_info.detail != null) task_info.detail.AddJobItem(job_index, info);
    }

    public fun AddBuildItem(int task_id, DeployServer.D_BuildInfo info)
    {
        var task_info = this._item_map[task_id];
        if (task_info == null) return;

	    ALittle.List_Push(task_info.info.build_list, info);
        if (task_info.detail != null) task_info.detail.AddBuildItem(info);
    }

    private fun HandleItemRButtonDown(ALittle.UIRButtonDownEvent event)
    {
        var task_info:TaskItemInfo = event.target._user_data;

        var menu = new AUIPlugin.AUIRightMenu();
        if (task_info.info.status == DeployServer.TaskStatus.IDLE) menu.AddItem("执行", bind(this.HandleStartTask, this, task_info));
        menu.AddItem("复制", bind(this.HandleCopyTask, this, task_info));
        if (task_info.info.status == DeployServer.TaskStatus.IDLE) menu.AddItem("删除", bind(this.HandleDeleteTask, this, task_info));
        menu.Show();
    }

    private fun HandleItemChanged(ALittle.UIChangedEvent event)
    {
        var task_info:TaskItemInfo = event.target._user_data;

        if (event.target.selected)
        {
            if (task_info.detail == null)
            {
                task_info.detail = g_Control.CreateControl{DPLUITaskDetail}("dpl_task_detail");
                this._task_detail_container.AddChild(task_info.detail);
                task_info.detail.Init(task_info);
            }
            task_info.detail.Show();
        }
        else
        {
            if (task_info.detail != null) task_info.detail.Hide();
        }
    }

    public async fun HandleStartTask(TaskItemInfo task_info)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        var msg = new DeployServer.C2SStartTask();
        msg.task_id = task_info.info.task_id;
        var error = DeployServer.HandleC2SStartTask(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    public async fun HandleCopyTask(TaskItemInfo task_info)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        var msg = new DeployServer.C2SCopyTask();
        msg.task_id = task_info.info.task_id;
        var error = DeployServer.HandleC2SCopyTask(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    private async fun HandleDeleteTask(TaskItemInfo task_info)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        var result = g_AUITool.DeleteNotice("删除", "确定要删除该任务吗?");
        if (result != AUIPlugin.AUIToolOption.YES) return;

        var msg = new DeployServer.C2SDeleteTask();
        msg.task_id = task_info.info.task_id;
        var error = DeployServer.HandleC2SDeleteTask(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    public fun RemoveTaskItem(int task_id)
    {
        var task_info = this._item_map[task_id];
        if (task_info == null) return;
        task_info._button.group = null;
        this._item_map[task_id] = null;

        this._scroll_list.RemoveChild(task_info.item);
        if (task_info.detail != null) this._task_detail_container.RemoveChild(task_info.detail);
    }

    public fun UpdateTaskItem(DeployServer.NUpdateTaskInfo info)
    {
        var task_info = this._item_map[info.task_id];
        if (task_info == null) return;

        task_info.info.task_name = info.task_name;
        task_info._button.text = info.task_name;
        task_info.info.task_desc = info.task_desc;
        task_info.info.web_hook = info.web_hook;

        if (task_info.detail != null) task_info.detail.UpdateTaskInfo();
    }

    public fun UpdateJobItem(DeployServer.NModifyJob info)
    {
        var task_info = this._item_map[info.task_id];
        if (task_info == null) return;

        var job_info = task_info.info.job_list[info.job_index];
        if (job_info == null) return;

        task_info.info.job_list[info.job_index] = info.job_info;

        if (task_info.detail != null) task_info.detail.UpdateJobInfo(info.job_index);
    }

    public fun RemoveJobItem(int task_id, int job_index)
    {
        var task_info = this._item_map[task_id];
        if (task_info == null) return;

        if (task_info.detail != null) task_info.detail.RemoveJobItem(job_index);
        ALittle.List_Remove(task_info.info.job_list, job_index);
    }

    public fun MoveJobItem(int task_id, int job_index, int target_index)
    {
        var task_info = this._item_map[task_id];
        if (task_info == null) return;

        if (task_info.detail != null) task_info.detail.MoveJobItem(job_index, target_index);

        var job = task_info.info.job_list[job_index];
        ALittle.List_Remove(task_info.info.job_list, job_index);

        var job_len = ALittle.List_Len(task_info.info.job_list);
        if (target_index <= 0 || target_index > job_len)
            ALittle.List_Push(task_info.info.job_list, job);
        else
        	ALittle.List_Insert(task_info.info.job_list, target_index, job);
    }

    public fun RemoveBuildItem(int task_id, int build_index)
    {
        var task_info = this._item_map[task_id];
        if (task_info == null) return;

        if (task_info.detail != null) task_info.detail.RemoveBuildItem(build_index);
        ALittle.List_Remove(task_info.info.build_list, build_index);
    }

    public fun RemoveAllTaskItem()
    {
        this._item_map = new Map<int, TaskItemInfo>();
        this._scroll_list.RemoveAllChild();
        this._task_detail_container.RemoveAllChild();
    }

    public fun UpdateTaskStatus(DeployServer.NTaskStatus info)
    {
        var task_info = this._item_map[info.task_id];
        if (task_info == null) return;

        task_info.info.status = info.status;
        task_info.info.progress = info.progress;

        if (info.status == DeployServer.TaskStatus.IDLE)
        	task_info._status.text = "";
        else
            task_info._status.text = ALittle.Math_Floor(info.progress * 100) / 100 .."%";
    }

    public fun UpdateJobStatus(DeployServer.NJobStatus msg)
    {
        var task_info = this._item_map[msg.task_id];
        if (task_info == null) return;

        var job_info = task_info.info.job_list[msg.index];
        if (job_info == null) return;
        job_info.status = msg.status;
        job_info.progress = msg.progress;

        if (task_info.detail != null) task_info.detail.UpdateJobInfo(msg.index);
    }

    private async fun HandleNewTaskClick(ALittle.UIClickEvent event)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        var x, y = event.target.LocalToGlobal();
        var result = g_AUITool.ShowRename("", x, y + event.target.height, 200);
        if (result == null || result == "") return;

        var msg = new DeployServer.C2SCreateTask();
        msg.task_name = result;
        var error = DeployServer.HandleC2SCreateTask(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }
}

[Msg]
public static HandleS2CTaskList(ALittle.IMsgCommon sender, DeployServer.S2CTaskList msg)
{
    g_DPLCenter.center.task_center.RemoveAllTaskItem();
    for (var index, info in msg.task_list)
    	g_DPLCenter.center.task_center.AddTaskItem(info);
}

[Msg]
public static HandleS2CCreateTask(ALittle.IMsgCommon sender, DeployServer.NCreateTask msg)
{
    g_DPLCenter.center.task_center.AddTaskItem(msg.task_info);
}

[Msg]
public static HandleNTaskStatus(ALittle.IMsgCommon sender, DeployServer.NTaskStatus msg)
{
    g_DPLCenter.center.task_center.UpdateTaskStatus(msg);
}

[Msg]
public static HandleNDeleteTask(ALittle.IMsgCommon sender, DeployServer.NDeleteTask msg)
{
    g_DPLCenter.center.task_center.RemoveTaskItem(msg.task_id);
}

[Msg]
public static HandleNUpdateTaskInfo(ALittle.IMsgCommon sender, DeployServer.NUpdateTaskInfo msg)
{
    g_DPLCenter.center.task_center.UpdateTaskItem(msg);
}

[Msg]
public static HandleNCreateJob(ALittle.IMsgCommon sender, DeployServer.NCreateJob msg)
{
    g_DPLCenter.center.task_center.AddJobItem(msg.task_id, msg.job_index, msg.job_info);
}

[Msg]
public static HandleNJobStatus(ALittle.IMsgCommon sender, DeployServer.NJobStatus msg)
{
    g_DPLCenter.center.task_center.UpdateJobStatus(msg);
}

[Msg]
public static HandleNModifyJob(ALittle.IMsgCommon sender, DeployServer.NModifyJob msg)
{
    g_DPLCenter.center.task_center.UpdateJobItem(msg);
}

[Msg]
public static HandleNDeleteJob(ALittle.IMsgCommon sender, DeployServer.NDeleteJob msg)
{
    g_DPLCenter.center.task_center.RemoveJobItem(msg.task_id, msg.job_index);
}

[Msg]
public static HandleNMoveJob(ALittle.IMsgCommon sender, DeployServer.NMoveJob msg)
{
    g_DPLCenter.center.task_center.MoveJobItem(msg.task_id, msg.job_index, msg.target_index);
}

[Msg]
public static HandleNCreateBuild(ALittle.IMsgCommon sender, DeployServer.NCreateBuild msg)
{
    g_DPLCenter.center.task_center.AddBuildItem(msg.task_id, msg.build_info);
}

[Msg]
public static HandleNDeleteBuild(ALittle.IMsgCommon sender, DeployServer.NDeleteBuild msg)
{
    g_DPLCenter.center.task_center.RemoveBuildItem(msg.task_id, msg.build_index);
}