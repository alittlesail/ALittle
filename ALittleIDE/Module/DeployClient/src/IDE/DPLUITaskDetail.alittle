
namespace DeployClient;

public struct JobItemInfo
{
    ALittle.DisplayObject item;
    DeployServer.D_JobInfo info;

    ALittle.DisplayObject _button;
    ALittle.DisplayObject _status;
}

public struct BuildItemInfo
{
    ALittle.DisplayObject item;
    DeployServer.D_BuildInfo info;

    ALittle.DisplayObject _button;
    ALittle.DisplayObject _download_button;
}

public class DPLUITaskDetail : ALittle.DisplayLayout
{
    private TaskItemInfo _task_item;
    private ALittle.TextRadioButtonGroup _job_group = new ALittle.TextRadioButtonGroup();
    private ALittle.TextRadioButtonGroup _build_group = new ALittle.TextRadioButtonGroup();

    private ALittle.DisplayObject _task_name_input;
    private ALittle.DisplayObject _task_desc_input;
    private ALittle.DisplayObject _webhook_input;
    private ALittle.DisplayObject _save_button;

    private ALittle.ScrollList _job_list;
    private ALittle.ScrollList _build_list;

    public fun Init(TaskItemInfo task_item)
    {
        this._task_item = task_item;
        this.UpdateTaskInfo();
        this.RefreshJobInfo();
        this.RefreshBuildInfo();
    }

    public fun Show()
    {
        this.visible = true;

        if (!this._save_button.disabled)
            this.UpdateTaskInfo();
    }

    public fun Hide()
    {
        this.visible = false;
    }

    public fun UpdateTaskInfo()
    {
        this._save_button.disabled = true;
        this._task_name_input.text = this._task_item.info.task_name;
        this._task_desc_input.text = this._task_item.info.task_desc;
        this._webhook_input.text = ALittle.String_Join(this._task_item.info.web_hook, "\n");
    }

    public fun UpdateJobInfo(int index)
    {
        var job_info = this._task_item.info.job_list[index];
        if (job_info == null) return;

        var job_item = cast<JobItemInfo>(this._job_list.childs[index]._user_data);
        job_item.info = job_info;
        this.RefreshJobItem(job_item);
    }

    public fun RemoveJobItem(int index)
    {
        var job_info = this._task_item.info.job_list[index];
        if (job_info == null) return;

        this._job_list.SpliceChild(index, 1);
    }

    public fun MoveJobItem(int index, int target_index)
    {
        var job_info = this._task_item.info.job_list[index];
        if (job_info == null) return;

        this._job_list.SetChildIndex(this._job_list.GetChildByIndex(index), target_index);
    }

    public fun RemoveBuildItem(int index)
    {
        var build_info = this._task_item.info.build_list[index];
        if (build_info == null) return;

        this._build_list.SpliceChild(index, 1);
    }

    private fun RefreshJobInfo()
    {
        this._job_list.RemoveAllChild();
        for (var index, job_info in this._task_item.info.job_list)
            this.AddJobItem(null, job_info);
    }

    private fun RefreshBuildInfo()
    {
        this._build_list.RemoveAllChild();
        for (var index, build_info in this._task_item.info.build_list)
            this.AddBuildItem(build_info);
    }

    private fun HandleTaskBaseChanged(ALittle.UIChangedEvent event)
    {
        this._save_button.disabled = false;
    }

    public fun HandleTaskStart()
    {
        for (var index, child in this._job_list.childs)
        {
            var job_item = cast<JobItemInfo>(child._user_data);
            job_item._status.text = "等待";
        }
    }

    private async fun HandleTaskSaveClick(ALittle.UIClickEvent event)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        if (this._task_name_input.text == "")
        {
            g_AUITool.ShowNotice("提示", "任务名称不能为空!");
            return;
        }

        var msg = new DeployServer.C2SUpdateTaskInfo();
        msg.task_id = this._task_item.info.task_id;
        msg.task_name = this._task_name_input.text;
        msg.task_desc = this._task_desc_input.text;
        msg.web_hook = ALittle.String_SplitSepList(this._webhook_input.text, ["\r", "\n"]);
        var error = DeployServer.HandleC2SUpdateTaskInfo(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    private fun HandleNewJobClick(ALittle.UIClickEvent event)
    {
        var menu = new AUIPlugin.AUIRightMenu();
        menu.AddItem("批处理", bind(this.HandleNewCommonJob, this, "batch_job_dialog"));
        menu.AddItem("复制目录", bind(this.HandleNewCommonJob, this, "deepcopy_job_dialog"));
        menu.AddItem("复制文件", bind(this.HandleNewCommonJob, this, "copyfile_job_dialog"));
        menu.AddItem("发送命令", bind(this.HandleNewCommonJob, this, "sendvirtualkey_job_dialog"));
        menu.AddItem("等待进程退出", bind(this.HandleNewCommonJob, this, "waitprocessexit_job_dialog"));
        menu.AddItem("创建进程", bind(this.HandleNewCommonJob, this, "createprocess_job_dialog"));
        menu.AddItem("杀死进程", bind(this.HandleNewCommonJob, this, "killprocess_job_dialog"));
        menu.Show();
    }

    private fun HandleStartTaskClick(ALittle.UIClickEvent event)
    {
        g_DPLCenter.center.task_center.HandleStartTask(this._task_item);
    }

    private fun HandleNewCommonJob(string ui)
    {
        var dialog = g_Control.CreateControl{CommonJobDialog}(ui);
        dialog.Show(this._task_item.info.task_id, null, null);
    }

    public fun AddJobItem(int job_index, DeployServer.D_JobInfo job_info)
    {
        var job_item = new JobItemInfo();
        job_item.info = job_info;
        job_item.item = g_Control.CreateControl{ALittle.DisplayObject}("dpl_job_item", job_item);
        job_item.item._user_data = job_item;
        job_item._button._user_data = job_item;
        job_item._button.group = this._job_group;
        job_item._button.AddEventListener(this, this.HandleJobRButtonDown);
        this._job_list.AddChild(job_item.item, job_index);

        this.RefreshJobItem(job_item);
    }

    public fun AddBuildItem(DeployServer.D_BuildInfo build_info)
    {
        var build_item = new BuildItemInfo();
        build_item.info = build_info;
        build_item.item = g_Control.CreateControl{ALittle.DisplayObject}("dpl_build_item", build_item);
        build_item.item._user_data = build_item;
        build_item._button._user_data = build_item;
        build_item._button.group = this._build_group;
        build_item._button.AddEventListener(this, this.HandleBuildRButtonDown);
        build_item._button.AddEventListener(this, this.HandlePreSeeBuild);
        build_item._download_button.AddEventListener(this, this.HandleDownloadBuild);
        build_item._download_button._user_data = build_item;
        this._build_list.AddChild(build_item.item);
        this._build_list.ScrollToBottom();

        build_item._button.text = ALittle.Time_GetCurDate(build_info.create_time);
    }

    private fun RefreshJobItem(JobItemInfo job_item)
    {
        if (job_item.info.job_type == DeployServer.JobType.BATCH)
        	job_item._button.text = "[批处理] "..job_item.info.job_name..":"..job_item.info.detail.batch_cmd;
        elseif (job_item.info.job_type == DeployServer.JobType.DEEPCOPY)
        	job_item._button.text = "[复制目录] "..job_item.info.job_name..":"..job_item.info.detail.deepcopy_src.."->"..job_item.info.detail.deepcopy_dst;
        elseif (job_item.info.job_type == DeployServer.JobType.COPYFILE)
        	job_item._button.text = "[复制文件] "..job_item.info.job_name..":"..job_item.info.detail.copyfile_src.."->"..job_item.info.detail.copyfile_dst;
        elseif (job_item.info.job_type == DeployServer.JobType.SENDVIRTUALKEY)
        	job_item._button.text = "[发送命令] "..job_item.info.job_name..":"..job_item.info.detail.virtualkey_exepath;
        elseif (job_item.info.job_type == DeployServer.JobType.WAITPROCSSEXIT)
        	job_item._button.text = "[等待进程退出] "..job_item.info.job_name;
        elseif (job_item.info.job_type == DeployServer.JobType.CREATEPROCESS)
        	job_item._button.text = "[创建进程] "..job_item.info.job_name..":"..job_item.info.detail.createprocess_cmd;
        elseif (job_item.info.job_type == DeployServer.JobType.KILLPROCESS)
        	job_item._button.text = "[杀死进程] "..job_item.info.job_name;

        if (this._task_item.info.status == DeployServer.TaskStatus.IDLE)
            job_item._status.text = "";
        else
        {
            if (job_item.info.status == DeployServer.JobStatus.WAITING)
                job_item._status.text = "等待";
            elseif (job_item.info.status == DeployServer.JobStatus.DOING)
                job_item._status.text = ALittle.Math_Floor(job_item.info.progress * 10000) / 100.."%";
            elseif (job_item.info.status == DeployServer.JobStatus.COMPLETED)
                job_item._status.text = "完成";
            elseif (job_item.info.status == DeployServer.JobStatus.FAILED)
                job_item._status.text = "失败";
        }
    }

    private fun HandleJobRButtonDown(ALittle.UIRButtonDownEvent event)
    {
        var job_item = cast<JobItemInfo>(event.target._user_data);
        var job_index = this._job_list.GetChildIndex(job_item.item);

        var menu = new AUIPlugin.AUIRightMenu();
        menu.AddItem("修改", bind(this.HandleModifyJob, this, job_item, job_index));
        menu.AddItem("上移", bind(this.HandleMoveJob, this, job_item, job_index, job_index - 1));
        menu.AddItem("下移", bind(this.HandleMoveJob, this, job_item, job_index, job_index + 1));
        menu.AddItem("复制", bind(this.HandleCopyJob, this, job_item, job_index));
        menu.AddItem("删除", bind(this.HandleDeleteJob, this, job_item, job_index));
        menu.Show();
    }

    private fun HandleBuildRButtonDown(ALittle.UIRButtonDownEvent event)
    {
        var build_item = cast<BuildItemInfo>(event.target._user_data);
        var build_index = this._build_list.GetChildIndex(build_item.item);

        var menu = new AUIPlugin.AUIRightMenu();
        menu.AddItem("删除", bind(this.HandleDeleteBuild, this, build_item, build_index));
        menu.Show();
    }

    private async fun HandlePreSeeBuild(ALittle.UIChangedEvent event)
    {
        var build_item = cast<BuildItemInfo>(event.target._user_data);
        var build_index = this._build_list.GetChildIndex(build_item.item);

        g_DPLCenter.center.task_center._build_edit.text = "";

        var msg = new DeployServer.QPreSeeBuild();
        msg.task_id = this._task_item.info.task_id;
        msg.build_index = build_index;
        var sender = g_DPLCenter.CreateHttpSender();
        var error, rsp = DeployServer.HandlePreSeeBuild(sender, msg);
        if (error != null)
        {
            g_AUITool.ShowNotice("提示", error);
            return;
        }

        g_DPLCenter.center.task_center._build_edit.text = ALittle.String_Join(rsp.log_list, "\r\n");
    }

    private async fun HandleDownloadBuild(ALittle.UISystemSelectDirectoryEvent event)
    {
        if (event.path == null || event.path == "") return;

        var build_item = cast<BuildItemInfo>(event.target._user_data);
        var build_index = this._build_list.GetChildIndex(build_item.item);
        
        var msg = new DeployServer.QDownloadBuild();
        msg.task_id = this._task_item.info.task_id;
        msg.build_index = build_index;

        var sender = g_DPLCenter.CreateHttpFileSender(event.path.."/"..ALittle.Time_GetCurDate(build_item.info.create_time)..".log");
        var error = DeployServer.HandleDownloadBuild(sender, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    private fun HandleModifyJob(JobItemInfo info, int index)
    {
        var ui:string = null;

        if (info.info.job_type == DeployServer.JobType.BATCH)
            ui = "batch_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.DEEPCOPY)
            ui = "deepcopy_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.COPYFILE)
            ui = "copyfile_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.SENDVIRTUALKEY)
            ui = "sendvirtualkey_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.WAITPROCSSEXIT)
            ui = "waitprocessexit_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.CREATEPROCESS)
            ui = "createprocess_job_dialog";
        elseif (info.info.job_type == DeployServer.JobType.KILLPROCESS)
            ui = "killprocess_job_dialog";

        if (ui != null)
        {
            var dialog = g_Control.CreateControl{CommonJobDialog}(ui);
            dialog.Show(this._task_item.info.task_id, index, info.info);
        }
    }

    private async fun HandleMoveJob(JobItemInfo info, int index, int new_index)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        var msg = new DeployServer.C2SMoveJob();
        msg.task_id = this._task_item.info.task_id;
        msg.job_index = index;
        msg.target_index = new_index;
        var error = DeployServer.HandleC2SMoveJob(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    private async fun HandleCopyJob(JobItemInfo info, int index)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        var msg = new DeployServer.C2SCopyJob();
        msg.task_id = this._task_item.info.task_id;
        msg.job_index = index;
        var error = DeployServer.HandleC2SCopyJob(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    private async fun HandleDeleteJob(JobItemInfo info, int index)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        var result = g_AUITool.DeleteNotice("删除", "确定要删除该任务吗?");
        if (result != AUIPlugin.AUIToolOption.YES) return;

        var msg = new DeployServer.C2SDeleteJob();
        msg.task_id = this._task_item.info.task_id;
        msg.job_index = index;
        var error = DeployServer.HandleC2SDeleteJob(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }

    private async fun HandleDeleteBuild(BuildItemInfo info, int index)
    {
        var msg_client = g_DPLWebLoginManager.msg_client;
        if (msg_client == null || !msg_client.IsConnected())
        {
            g_AUITool.ShowNotice("提示", "当前还未连接成功!");
            return;
        }

        var result = g_AUITool.DeleteNotice("删除", "确定要删除该构建信息吗?");
        if (result != AUIPlugin.AUIToolOption.YES) return;

        var msg = new DeployServer.C2SDeleteBuild();
        msg.task_id = this._task_item.info.task_id;
        msg.build_index = index;
        var error = DeployServer.HandleC2SDeleteBuild(msg_client, msg);
        if (error != null) g_AUITool.ShowNotice("提示", error);
    }
}
