
namespace NESEmulator;

protected enum NesCPUIRQ
{
    IRQ_NORMAL = 0;
    IRQ_NMI = 1;
    IRQ_RESET = 2;
}

protected class NesCPU
{
    private NesCore _nes;

    // 内存
    [Native]
    private List<int> _mem;
    private int _mem_len = 0x10000;

    // 寄存器
    private int _reg_acc;
    private int _reg_x;
    private int _reg_y;
    private int _reg_sp;	// 栈寄存器
    private int _reg_pc;
    private int _reg_pc_new;
    private int _reg_status;

    // 状态
    private int _f_carry;
    private int _f_zero;
    private int _f_interrupt;
    private int _f_interrupt_new;
    private int _f_decimal;
    private int _f_brk;
    private int _f_brk_new;
    private int _f_notused;
    private int _f_notused_new;
    private int _f_overflow;
    private int _f_sign;

    public ctor(NesCore nes)
    {
        this._nes = nes;
    }

    public fun Reset()
    {
        // 内存
        this._mem = new List<int>();

        for (var i = 0; i < this._mem_len; 1)
            this._mem[i] = 0;

        for (var i = 0; i < 0x2000; 1)
            this._mem[i] = 0xff;

        for (var p = 0; p < 4; 1)
        {
            var j = p * 0x800;
            this._mem[j + 0x008] = 0xf7;
            this._mem[j + 0x009] = 0xef;
            this._mem[j + 0x00a] = 0xdf;
            this._mem[j + 0x00f] = 0xbf;
        }

        for (var k = 0x2001; k < this._mem_len; 1) {
            this._mem[k] = 0;
        }

        // 寄存器
        this._reg_acc = 0;
        this._reg_x = 0;
        this._reg_y = 0;
        // 栈寄存器
        this._reg_sp = 0x01ff;
        // 指令寄存器
        this._reg_pc = 0x8000 - 1;
        this._reg_pc_new = 0x8000 - 1;
        // 状态寄存器
        this._reg_status = 0x28;

        this.SetStatus(0x28);

        // 设置标记
        this._f_carry = 0;
        this._f_decimal = 0;
        this._f_interrupt = 1;
        this._f_interrupt_new = 1;
        this._f_overflow = 0;
        this._f_sign = 0;
        this._f_zero = 1;

        this._f_notused = 1;
        this._f_notused_new = 1;
        this._f_brk = 1;
        this._f_brk_new = 1;
    }

    public fun GetStatus() : int
    {
        return this._f_carry |
                (this._f_zero <- 1) |
                (this._f_interrupt <- 2) |
                (this._f_decimal <- 3) |
                (this._f_brk <- 4) |
                (this._f_notused <- 5) |
                (this._f_overflow <- 6) |
                (this._f_sign <- 7);
    }

    public fun SetStatus(int st)
    {
        this._f_carry = st & 1;
        this._f_zero = (st -> 1) & 1;
        this._f_interrupt = (st -> 2) & 1;
        this._f_decimal = (st -> 3) & 1;
        this._f_brk = (st -> 4) & 1;
        this._f_notused = (st -> 5) & 1;
        this._f_overflow = (st -> 6) & 1;
        this._f_sign = (st -> 7) & 1;
    }
}
