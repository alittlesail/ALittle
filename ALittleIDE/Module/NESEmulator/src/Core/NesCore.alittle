
namespace NESEmulator;

protected class NesCore
{
    // 音频的采样率
    public int _sample_rate = 48000;
    // 视频的帧率
    public int _preferred_frame_rate = 60;
    // 是否模拟声音
    private bool _emulate_sound = true;

    // 图像输出，提供外部继承
    public fun OnFrame(Map<int, int> frame_buffer)
    {

    }

    // 声音输出，提供外部继承
    public fun OnAudioSample(double left, double right)
    {

    }

    // 模拟器状态输出函数，提供外部继承
    public fun OnStatusUpdate(string content)
    {

    }

    // 写入卡带上的内存块，用于存档
    public fun OnBatteryRamWrite(int address, int value)
    {

    }

    // 每帧的间隔时间，单位毫秒
    private double _frame_time;
    // 帧计数
    private int _fps_frame_count = 0;
    // 上一帧的时间
    private int _last_fps_time = 0;
    // 卡带内容
    private ALittle.LocalFile _rom_data;

    // 核心主键
    public NesCPU _cpu;
    public NesPPU _ppu;
    public NesPAPU _papu;
    public NesMapper _mmap;
    public Map<int, NesController> _controllers = new Map<int, NesController>();

    // 卡带
    public NesRom _rom;

    // 运行时的错误信息
    private string _run_error;

    public ctor()
    {
        this._frame_time = 1000 / this._preferred_frame_rate;

        this._cpu = new NesCPU(this);
        this._ppu = new NesPPU(this);
        this._papu = new NesPAPU(this);
        this._mmap = null; // 在加载卡带的时候创建
        this._controllers[1] = new NesController();
        this._controllers[2] = new NesController();

        this.OnStatusUpdate("Ready to load a ROM.");
    }

    // 重置系统
    public fun Reset()
    {
        if (this._mmap != null)
            this._mmap.Reset();
        this._cpu.Reset();
        this._ppu.Reset();
        this._papu.Reset();

        this._last_fps_time = 0;
        this._fps_frame_count = 0;
        this._run_error = null;
    }

    // 帧处理
    // 返回是否继续执行
    public fun Frame() : string
    {
        if (this._run_error != null) return this._run_error;

        this._ppu.StartFrame();

        var cycles = 0;
        var emulate_sound = this._emulate_sound;
        var cpu = this._cpu;
        var ppu = this._ppu;
        var papu = this._papu;

        var run = true;
        while (run)
        {
            if (cpu._cycles_to_halt == 0)
            {
                // 执行一个CPU指令
                cycles = cpu.Emulate();
                if (emulate_sound)
                    papu.ClockFrameCounter(cycles);
                cycles *= 3;
            }
            else
            {
                if (cpu._cycles_to_halt > 8)
                {
                    cycles = 24;
                    if (emulate_sound)
                        papu.ClockFrameCounter(8);
                    cpu._cycles_to_halt -= 8;
                }
                else
                {
                    cycles = cpu._cycles_to_halt * 3;
                    if (emulate_sound) {
                        papu.ClockFrameCounter(cpu._cycles_to_halt);
                    }
                    cpu._cycles_to_halt = 0;
                }
            }

            while (cycles > 0)
            {
                if (ppu._cur_x == ppu._spr_0_hit_x && ppu._f_sp_visibility == 1 && ppu._scanline - 21 == ppu._spr_0_hit_y)
                {
                    // Set sprite 0 hit flag:
                    ppu.SetStatusFlag(NesPPUStatus.STATUS_SPRITE0HIT, true);
                }

                if (ppu._request_end_frame)
                {
                    --ppu._nmi_counter;
                    if (ppu._nmi_counter == 0)
                    {
                        ppu._request_end_frame = false;
                        ppu.StartVBlank();
                        // 标记为停止执行，并跳出当前循环
                        run = false;
                        break;
                    }
                }

                ++ppu._cur_x;
                if (ppu._cur_x == 341)
                {
                    ppu._cur_x = 0;
                    ppu.EndScanline();
                }
                --cycles;
            }
        }
        ++this._fps_frame_count;

        return this._run_error;
    }

    // 按钮按下
    public fun ButtonDown(int controller, int button)
    {
        this._controllers[controller].ButtonDown(button);
    }

    // 按钮弹起
    public fun ButtonUp(int controller, int button)
    {
        this._controllers[controller].ButtonUp(button);
    }

    // 方向盘移动
    public fun ZapperMove(int x, int y)
    {
        if (this._mmap == null) return;
        this._mmap._zapper_x = x;
        this._mmap._zapper_y = x;
    }

    // 攻击按下
    public fun ZapperFireUp()
    {
        if (this._mmap == null) return;
        this._mmap._zapper_fired = false;
    }

    // 攻击弹起
    public fun ZapperFireDown()
    {
        if (this._mmap == null) return;
        this._mmap._zapper_fired = true;
    }

    // 读取帧率
    public fun GetFPS() : double
    {
        var now = ALittle.System_GetCurMSTime();
        var fps = 0.0;
        if (this._last_fps_time != 0)
        	fps = this._fps_frame_count / ((now - this._last_fps_time) / 1000);
        this._fps_frame_count = 0;
        this._last_fps_time = now;
        return fps;
    }

    // 读取卡带
    // 读取成功会返回null，否则返回错误信息
    public fun ReloadROM(ALittle.LocalFile data) : string
    {
        var rom = new NesRom(this);
        var error = rom.Load(data, null);
        if (error != null) return error;

        // 创建Mapper
        var mapper = rom.CreateMapper();
        if (mapper == null) return "not support mapper type:"..rom._mapper_type;

        // 保存卡带信息
        this._rom = rom;
        this._rom_data = data;

        // 重置系统
        this.Reset();
        error = mapper.LoadROM();
        if (error != null) return error;
        // 加载rom
        this._mmap = mapper;
        // 设置镜像类型
        this._ppu.SetMirroring(this._rom.GetMirroringType());
        // 返回成功
        return null;
    }

    // 设置帧率
    public fun SetFramerate(int rate)
    {
        this._preferred_frame_rate = rate;
        this._frame_time = 1000 / rate;
    }

    // 停止
    public fun Stop(string error)
    {
        this._run_error = error;
    }
}
