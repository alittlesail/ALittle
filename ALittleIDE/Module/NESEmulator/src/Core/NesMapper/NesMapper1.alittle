
namespace NESEmulator;

protected class NesMapper1 : NesMapper0
{
    private int _reg_buffer;
    private int _reg_buffer_counter;

    private int _mirroring;
    private int _one_screen_mirroring;
    private int _prg_switching_area;
    private int _prg_switching_size;
    private int _vrom_switching_size;

    private int _rom_selection_reg_0;

    private int _rom_selection_reg_1;

    private int _rom_bank_select;

    public fun Reset()
    {
        NesMapper0.Reset(this);

        // 5-bit buffer:
        this._reg_buffer = 0;
        this._reg_buffer_counter = 0;

        // Register 0:
        this._mirroring = 0;
        this._one_screen_mirroring = 0;
        this._prg_switching_area = 1;
        this._prg_switching_size = 1;
        this._vrom_switching_size = 0;

        // Register 1:
        this._rom_selection_reg_0 = 0;

        // Register 2:
        this._rom_selection_reg_1 = 0;

        // Register 3:
        this._rom_bank_select = 0;
    }

    public fun Write(int address, int value)
    {
        // Writes to addresses other than MMC registers are handled by NoMapper.
        if (address < 0x8000) {
            NesMapper0.Write(this, address, value);
            return;
        }

            // See what should be done with the written value:
        if ((value & 128) != 0) {
            // Reset buffering:
            this._reg_buffer_counter = 0;
            this._reg_buffer = 0;

            // Reset register:
            if (this.GetRegNumber(address) == 0) {
                this._prg_switching_area = 1;
                this._prg_switching_size = 1;
            }
        } else {
            // Continue buffering:
            //regBuffer = (regBuffer & (0xFF-(1<<regBufferCounter))) | ((value & (1<<regBufferCounter))<<regBufferCounter);
            this._reg_buffer = (this._reg_buffer & (0xff - (1 <<- this._reg_buffer_counter))) | ((value & 1) <<- this._reg_buffer_counter);
            ++this._reg_buffer_counter;

            if (this._reg_buffer_counter == 5) {
            	// Use the buffered value:
            	this.SetReg(this.GetRegNumber(address), this._reg_buffer);

                // Reset buffer:
                this._reg_buffer = 0;
                this._reg_buffer_counter = 0;
            }
        }
    }

    public fun SetReg(int reg, int value)
    {
        var tmp = 0;

        if (reg == 0)
        {
        	// Mirroring:
        	tmp = value & 3;
        	if (tmp != this._mirroring)
            {
            	// Set mirroring:
            	this._mirroring = tmp;
            	if ((this._mirroring & 2) == 0)
                {
                	// SingleScreen mirroring overrides the other setting:
                	this._nes._ppu.SetMirroring(NESMirroringType.SINGLESCREEN_MIRRORING);
            	}
                elseif ((this._mirroring & 1) != 0)
                {
                    // Not overridden by SingleScreen mirroring.
                    this._nes._ppu.SetMirroring(NESMirroringType.HORIZONTAL_MIRRORING);
                }
                else
                {
                    this._nes._ppu.SetMirroring(NESMirroringType.VERTICAL_MIRRORING);
                }
        	}

            // PRG Switching Area;
        	this._prg_switching_area = (value ->> 2) & 1;

        	// PRG Switching Size:
        	this._prg_switching_size = (value ->> 3) & 1;

        	// VROM Switching Size:
        	this._vrom_switching_size = (value ->> 4) & 1;
        }
        elseif (reg == 1)
        {
        	// ROM selection:
        	this._rom_selection_reg_0 = (value ->> 4) & 1;

        	// Check whether the cart has VROM:
        	if (this._nes._rom._vrom_count > 0)
            {
            	// Select VROM bank at 0x0000:
            	if (this._vrom_switching_size == 0)
                {
                	// Swap 8kB VROM:
                	if (this._rom_selection_reg_0 == 0)
                    {
                    	this.Load8kVromBank(value & 0xf, 0x0000);
                	} else {
                    	this.Load8kVromBank(ALittle.Math_Floor(this._nes._rom._vrom_count / 2) + (value & 0xf), 0x0000);
                	}
            	} else {
                	// Swap 4kB VROM:
                	if (this._rom_selection_reg_0 == 0) {
                    	this.LoadVromBank(value & 0xf, 0x0000);
                	} else {
                    	this.LoadVromBank(ALittle.Math_Floor(this._nes._rom._vrom_count / 2) + (value & 0xf), 0x0000);
                	}
            	}
        	}
        }
        elseif (reg == 2)
        {
        	// ROM selection:
        	this._rom_selection_reg_1 = (value ->> 4) & 1;

        	// Check whether the cart has VROM:
        	if (this._nes._rom._vrom_count > 0)
            {
            	// Select VROM bank at 0x1000:
            	if (this._vrom_switching_size == 1)
                {
                	// Swap 4kB of VROM:
                	if (this._rom_selection_reg_1 == 0)
                    {
                    	this.LoadVromBank(value & 0xf, 0x1000);
                	} else {
                    	this.LoadVromBank(ALittle.Math_Floor(this._nes._rom._vrom_count / 2) + (value & 0xf), 0x1000);
                	}
            	}
        	}
        }
        else
        {
        	// Select ROM bank:
        	// -------------------------
        	tmp = value & 0xf;
        	var bank = 0;
        	var baseBank = 0;

        	if (this._nes._rom._rom_count >= 32)
            {
	            // 1024 kB cart
    	        if (this._vrom_switching_size == 0)
                {
                	if (this._rom_selection_reg_0 == 1)
                    {
                    	baseBank = 16;
                	}
            	} else {
                	baseBank = (this._rom_selection_reg_0 | (this._rom_selection_reg_1 <<- 1)) <<- 3;
            	}
        	}
            else if (this._nes._rom._rom_count >= 16)
            {
                // 512 kB cart
                if (this._rom_selection_reg_0 == 1)
                {
                    baseBank = 8;
                }
            }

        	if (this._prg_switching_size == 0)
            {
            	// 32kB
            	bank = baseBank + (value & 0xf);
            	this.Load32kRomBank(bank, 0x8000);
        	} else {
            	// 16kB
            	bank = baseBank * 2 + (value & 0xf);
            	if (this._prg_switching_area == 0)
                {
                	this.LoadRomBank(bank, 0xc000);
            	} else {
                	this.LoadRomBank(bank, 0x8000);
            	}
        	}
    	}
    }

    public fun GetRegNumber(int address) : int
    {
        if (address >= 0x8000 && address <= 0x9fff) {
            return 0;
        } else if (address >= 0xa000 && address <= 0xbfff) {
            return 1;
        } else if (address >= 0xc000 && address <= 0xdfff) {
            return 2;
        } else {
            return 3;
        }
    }

    public fun LoadROM() : string
    {
        if (!this._nes._rom._valid) {
            return "MMC1: Invalid ROM! Unable to load.";
        }

        // Load PRG-ROM:
        this.LoadRomBank(0, 0x8000); //   First ROM bank..
        this.LoadRomBank(this._nes._rom._rom_count - 1, 0xc000); // ..and last ROM bank.

        // Load CHR-ROM:
        this.LoadCHRROM();

        // Load Battery RAM (if present):
        this.LoadBatteryRam();

        // Do Reset-Interrupt:
        this._nes._cpu.RequestIrq(NesCPUIRQ.IRQ_RESET);

        return null;
    }

    // eslint-disable-next-line no-unused-vars
    public fun switchLowHighPrgRom(int old_setting)
    {
        // not yet.
    }

    public fun Switch16to32()
    {
        // not yet.
    }

    public fun Switch32to16()
    {
        // not yet.
    }
}
