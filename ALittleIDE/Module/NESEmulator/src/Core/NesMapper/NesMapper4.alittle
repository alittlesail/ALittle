
namespace NESEmulator;

protected class NesMapper4 : NesMapper0
{
    private int CMD_SEL_2_1K_VROM_0000 = 0;
    private int CMD_SEL_2_1K_VROM_0800 = 1;
    private int CMD_SEL_1K_VROM_1000 = 2;
    private int CMD_SEL_1K_VROM_1400 = 3;
    private int CMD_SEL_1K_VROM_1800 = 4;
    private int CMD_SEL_1K_VROM_1C00 = 5;
    private int CMD_SEL_ROM_PAGE1 = 6;
    private int CMD_SEL_ROM_PAGE2 = 7;


	private int _command;
	private int _prg_address_select;
	private int _chr_address_select;
	private int _page_number;
	private int _irq_counter;
	private int _irq_latch_value;
	private int _irq_enable;
	private bool _prg_address_changed;

    public ctor(NesCore nes)
    {
        this._command = null;
        this._prg_address_select = null;
        this._chr_address_select = null;
        this._page_number = null;
        this._irq_counter = null;
        this._irq_latch_value = null;
        this._irq_enable = null;
        this._prg_address_changed = false;
    }

    public fun Write(int address, int value)
    {
        // Writes to addresses other than MMC registers are handled by NoMapper.
        if (address < 0x8000) {
            NesMapper0.Write(this, address, value);
            return;
        }

        if (address == 0x8000)
        {
        	// Command/Address Select register
        	this._command = value & 7;
        	var tmp = (value ->> 6) & 1;
        	if (tmp != this._prg_address_select)
            {
            	this._prg_address_changed = true;
        	}
        	this._prg_address_select = tmp;
        	this._chr_address_select = (value ->> 7) & 1;
        }
        elseif (address == 0x8001)
        {
            // Page number for command
            this.ExecuteCommand(this._command, value);
        }
        elseif (address == 0xa000)
        {
	        // Mirroring select
    	    if ((value & 1) != 0) {
                this._nes._ppu.SetMirroring(NESMirroringType.HORIZONTAL_MIRRORING);
    		} else {
				this._nes._ppu.SetMirroring(NESMirroringType.VERTICAL_MIRRORING);
			}
        }
        elseif (address == 0xa001)
        {
			// SaveRAM Toggle
			// TODO
			//nes.getRom().setSaveState((value&1)!=0);
		}
        elseif (address == 0xc000)
        {
			// IRQ Counter register
            this._irq_counter = value;
            //nes.ppu.mapperIrqCounter = 0;
        }
        elseif (address == 0xc001)
        {
            // IRQ Latch register
            this._irq_latch_value = value;
        }
        elseif (address == 0xe000)
        {
            // IRQ Control Reg 0 (disable)
            //irqCounter = irqLatchValue;
            this._irq_enable = 0;
        }
        elseif (address == 0xe001)
        {
            // IRQ Control Reg 1 (enable)
            this._irq_enable = 1;
        }
        else
        {
            // Not a MMC3 register.
            // The game has probably crashed,
            // since it tries to write to ROM..
            // IGNORE.
        }
    }

    public fun ExecuteCommand(int cmd, int arg)
    {
        if (cmd == this.CMD_SEL_2_1K_VROM_0000)
        {
             // Select 2 1KB VROM pages at 0x0000:
             if (this._chr_address_select == 0) {
                this.Load1kVromBank(arg, 0x0000);
        		this.Load1kVromBank(arg + 1, 0x0400);
    		} else {
				this.Load1kVromBank(arg, 0x1000);
				this.Load1kVromBank(arg + 1, 0x1400);
			}
        }
        elseif (cmd == this.CMD_SEL_2_1K_VROM_0800)
        {
            // Select 2 1KB VROM pages at 0x0800:
            if (this._chr_address_select == 0) {
                this.Load1kVromBank(arg, 0x0800);
        		this.Load1kVromBank(arg + 1, 0x0c00);
            } else {
                this.Load1kVromBank(arg, 0x1800);
                this.Load1kVromBank(arg + 1, 0x1c00);
            }
        }
        elseif (cmd == this.CMD_SEL_1K_VROM_1000)
        {
            // Select 1K VROM Page at 0x1000:
            if (this._chr_address_select == 0) {
                this.Load1kVromBank(arg, 0x1000);
            } else {
                this.Load1kVromBank(arg, 0x0000);
            }
        }
        elseif (cmd == this.CMD_SEL_1K_VROM_1400)
        {
            // Select 1K VROM Page at 0x1400:
            if (this._chr_address_select == 0) {
            	this.Load1kVromBank(arg, 0x1400);
            } else {
            	this.Load1kVromBank(arg, 0x0400);
            }
	    }
        elseif (cmd == this.CMD_SEL_1K_VROM_1800)
        {
            // Select 1K VROM Page at 0x1800:
            if (this._chr_address_select == 0) {
            	this.Load1kVromBank(arg, 0x1800);
            } else {
            	this.Load1kVromBank(arg, 0x0800);
            }
    	}
    	elseif (cmd == this.CMD_SEL_1K_VROM_1C00)
        {
            // Select 1K VROM Page at 0x1C00:
            if (this._chr_address_select == 0) {
            	this.Load1kVromBank(arg, 0x1c00);
            } else {
            	this.Load1kVromBank(arg, 0x0c00);
            }
    	}
        elseif (cmd == this.CMD_SEL_ROM_PAGE1)
        {
            if (this._prg_address_changed) {
            	// Load the two hardwired banks:
            	if (this._prg_address_select == 0) {
            		this.Load8kRomBank((this._nes._rom._rom_count - 1) * 2, 0xc000);
            	} else {
        			this.Load8kRomBank((this._nes._rom._rom_count - 1) * 2, 0x8000);
            	}
            	this._prg_address_changed = false;
            }
            
                // Select first switchable ROM page:
            if (this._prg_address_select == 0) {
            	this.Load8kRomBank(arg, 0x8000);
            } else {
            	this.Load8kRomBank(arg, 0xc000);
			}
    	}
        elseif (cmd == this.CMD_SEL_ROM_PAGE2)
        {
            // Select second switchable ROM page:
            this.Load8kRomBank(arg, 0xa000);

            // hardwire appropriate bank:
            if (this._prg_address_changed) {
                // Load the two hardwired banks:
                if (this._prg_address_select == 0) {
                	this.Load8kRomBank((this._nes._rom._rom_count - 1) * 2, 0xc000);
                } else {
                    this.Load8kRomBank((this._nes._rom._rom_count - 1) * 2, 0x8000);
                }
                this._prg_address_changed = false;
            }
        }
    }

    public fun LoadROM() : string
    {
        if (!this._nes._rom._valid) {
            return "MMC3: Invalid ROM! Unable to load.";
        }

        // Load hardwired PRG banks (0xC000 and 0xE000):
        this.Load8kRomBank((this._nes._rom._rom_count - 1) * 2, 0xc000);
        this.Load8kRomBank((this._nes._rom._rom_count - 1) * 2 + 1, 0xe000);

        // Load swappable PRG banks (0x8000 and 0xA000):
        this.Load8kRomBank(0, 0x8000);
        this.Load8kRomBank(1, 0xa000);

        // Load CHR-ROM:
        this.LoadCHRROM();

        // Load Battery RAM (if present):
        this.LoadBatteryRam();

        // Do Reset-Interrupt:
        this._nes._cpu.RequestIrq(NesCPUIRQ.IRQ_RESET);

        return null;
    }

    public fun ClockIrqCounter()
    {
        if (this._irq_enable == 1) {
            --this._irq_counter;
            if (this._irq_counter < 0) {
                // Trigger IRQ:
                this._nes._cpu.RequestIrq(NesCPUIRQ.IRQ_NORMAL);
                this._irq_counter = this._irq_latch_value;
            }
        }
    }
}
