
namespace NESEmulator;

protected class NesMapper5 : NesMapper0
{
    private int _prg_size;
    private int _chr_size;
    private int _sram_we_a;
    private int _sram_we_b;
    private int _graphic_mode;
    private int _nametable_mode;
    private Map<int, int> _nametable_type = new Map<int, int>();
    private int _fill_chr;
    private int _fill_pal;
    private int _chr_mode;
    private Map<int, Map<int, int>> _chr_page;
    private int _split_control;
    private int _split_scroll;
    private int _split_page;
    private int _irq_line;
    private int _irq_enable;
    private int _mult_a;
    private int _mult_b;
    private int _graphic_mode;
    private int _irq_status;

    public fun Write(int address, int value)
    {
        // Writes to addresses other than MMC registers are handled by NoMapper.
        if (address < 0x5000) {
            NesMapper0.Write(this, address, value);
            return;
        }
        if (address == 0x5100) {
        	this._prg_size = value & 3;
        } elseif (address == 0x5101) {
        	this._chr_size = value & 3;
        } elseif (address == 0x5102) {
        	this._sram_we_a = value & 3;
        } elseif (address == 0x5103) {
        	this._sram_we_b = value & 3;
        } elseif (address == 0x5104) {
        	this._graphic_mode = value & 3;
        } elseif (address == 0x5105) {
        	this._nametable_mode = value;
        	this._nametable_type[0] = value & 3;
        	this.Load1kVromBank(value & 3, 0x2000);
            value = value ->> 2;
        	this._nametable_type[1] = value & 3;
        	this.Load1kVromBank(value & 3, 0x2400);
            value = value ->> 2;
        	this._nametable_type[2] = value & 3;
        	this.Load1kVromBank(value & 3, 0x2800);
            value = value ->> 2;
        	this._nametable_type[3] = value & 3;
        	this.Load1kVromBank(value & 3, 0x2c00);
        } elseif (address == 0x5106) {
        	this._fill_chr = value;
        } elseif (address == 0x5107) {
        	this._fill_pal = value & 3;
        } elseif (address == 0x5113) {
        	// this.SetBank_SRAM(3, value & 3);
        } elseif (address == 0x5114 || address == 0x5115 || address == 0x5116 || address == 0x5117) {
        	// this.SetBank_CPU(address, value);
        } elseif (address == 0x5120 || address == 0x5121
        		|| address == 0x5122 || address == 0x5123
                || address == 0x5124 || address == 0x5125
                || address == 0x5126 || address == 0x5127) {
        	this._chr_mode = 0;
        	this._chr_page[0][address & 7] = value;
        	// this.SetBank_PPU();
        } elseif (address == 0x5128 || address == 0x5129 || address == 0x512a || address == 0x512b) {
        	this._chr_mode = 1;
            this._chr_page[1][(address & 3) + 0] = value;
            this._chr_page[1][(address & 3) + 4] = value;
        	// this.SetBank_PPU();
        } elseif (address == 0x5200) {
        	this._split_control = value;
        } elseif (address == 0x5201) {
        	this._split_scroll = value;
        } elseif (address == 0x5202) {
        	this._split_page = value & 0x3f;
        } elseif (address == 0x5203) {
        	this._irq_line = value;
        	this._nes._cpu.ClearIrq();
        } elseif (address == 0x5204) {
        	this._irq_enable = value;
            this._nes._cpu.ClearIrq();
        } elseif (address == 0x5205) {
        	this._mult_a = value;
        } elseif (address == 0x5206) {
        	this._mult_b = value;
        } else {
        	if (address >= 0x5000 && address <= 0x5015) {
                // this._nes._papu.ExWrite(address, value);
    		} else if (address >= 0x5c00 && address <= 0x5fff) {
				if (this._graphic_mode == 2) {
					// ExRAM
					// vram write
				} else if (this._graphic_mode != 3) {
					// Split,ExGraphic
					if (this._irq_status & 0x40 != 0) {
						// vram write
					} else {
						// vram write
					}
				}
			} else if (address >= 0x6000 && address <= 0x7fff) {
				if (this._sram_we_a == 2 && this._sram_we_b == 1) {
					// additional ram write
				}
			}
		}
    }

    public fun LoadROM() : string
    {
        if (!this._nes._rom._valid) {
            return "UNROM: Invalid ROM! Unable to load.";
        }

            // Load PRG-ROM:
        this.Load8kRomBank(this._nes._rom._rom_count * 2 - 1, 0x8000);
        this.Load8kRomBank(this._nes._rom._rom_count * 2 - 1, 0xa000);
        this.Load8kRomBank(this._nes._rom._rom_count * 2 - 1, 0xc000);
        this.Load8kRomBank(this._nes._rom._rom_count * 2 - 1, 0xe000);

        // Load CHR-ROM:
        this.LoadCHRROM();

        // Do Reset-Interrupt:
        this._nes._cpu.RequestIrq(NesCPUIRQ.IRQ_RESET);

        return null;
    }
}
