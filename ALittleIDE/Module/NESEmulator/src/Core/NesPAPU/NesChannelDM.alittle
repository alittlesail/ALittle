
namespace NESEmulator;

protected class NesChannelDM
{
    private NesPAPU _papu;

    private int MODE_NORMAL = 0;
	private int MODE_LOOP = 1;
	private int MODE_IRQ = 2;

    public bool _is_enabled;
    public bool _irq_generated;
    private int _play_mode;
    public int _dma_frequency;
    private int _dma_counter;
    private int _delta_counter;
    private int _play_start_address;
    private int _play_address;
    private int _play_length;
    private int _play_length_counter;
    public int _sample;
    private int _dac_lsb;
    public int _shift_counter;
    private int _reg4012;
    private int _reg4013;
    private int _data;

    private bool _has_sample;

    public ctor(NesPAPU papu)
    {
        this._papu = papu;
    }

    public fun Reset()
    {
        this._is_enabled = false;
        this._irq_generated = false;
        this._play_mode = this.MODE_NORMAL;
        this._dma_frequency = 0;
        this._dma_counter = 0;
        this._delta_counter = 0;
        this._play_start_address = 0;
        this._play_address = 0;
        this._play_length = 0;
        this._play_length_counter = 0;
        this._sample = 0;
        this._dac_lsb = 0;
        this._shift_counter = 0;
        this._reg4012 = 0;
        this._reg4013 = 0;
        this._data = 0;
    }

    public fun ClockDmc()
    {
        // Only alter DAC value if the sample buffer has data:
        if (this._has_sample) {
            if ((this._data & 1) == 0) {
                // Decrement delta:
                if (this._delta_counter > 0) {
                    --this._delta_counter;
                }
            } else {
                // Increment delta:
                if (this._delta_counter < 63) {
                    ++this._delta_counter;
                }
            }

            // Update sample value:
            this._sample = 0;
            if (this._is_enabled) this._sample = (this._delta_counter <<- 1) + this._dac_lsb;

            // Update shift register:
            this._data = this._data ->> 1;
        }

        --this._dma_counter;
        if (this._dma_counter <= 0) {
            // No more sample bits.
            this._has_sample = false;
            this.EndOfSample();
            this._dma_counter = 8;
        }

        if (this._irq_generated) {
            this._papu._nes._cpu.RequestIrq(NesCPUIRQ.IRQ_NORMAL);
        }
    }

    public fun EndOfSample()
    {
        if (this._play_length_counter == 0 && this._play_mode == this.MODE_LOOP) {
            // Start from beginning of sample:
            this._play_address = this._play_start_address;
            this._play_length_counter = this._play_length;
        }

        if (this._play_length_counter > 0) {
            // Fetch next sample:
            this.NextSample();

            if (this._play_length_counter == 0) {
                // Last byte of sample fetched, generate IRQ:
                if (this._play_mode == this.MODE_IRQ) {
                    // Generate IRQ:
                    this._irq_generated = true;
                }
            }
        }
    }

    public fun NextSample()
    {
        // Fetch byte:
        this._data = this._papu._nes._mmap.Load(this._play_address);
        this._papu._nes._cpu.HaltCycles(4);

        --this._play_length_counter;
        ++this._play_address;
        if (this._play_address > 0xffff) {
            this._play_address = 0x8000;
        }

        this._has_sample = true;
    }

    public fun WriteReg(int address, int value)
    {
        if (address == 0x4010) {
            // Play mode, DMA Frequency
            if (value ->> 6 == 0) {
                this._play_mode = this.MODE_NORMAL;
            } else if (((value ->> 6) & 1) == 1) {
                this._play_mode = this.MODE_LOOP;
            } else if (value ->> 6 == 2) {
                this._play_mode = this.MODE_IRQ;
            }
            if ((value & 0x80) == 0) {
                this._irq_generated = false;
            }

            this._dma_frequency = this._papu.GetDmcFrequency(value & 0xf);
        } else if (address == 0x4011) {
            // Delta counter load register:
            this._delta_counter = (value ->> 1) & 63;
            this._dac_lsb = value & 1;
            this._sample = (this._delta_counter <<- 1) + this._dac_lsb; // update sample value
        } else if (address == 0x4012) {
            // DMA address load register
            this._play_start_address = (value <<- 6) | 0x0c000;
            this._play_address = this._play_start_address;
            this._reg4012 = value;
        } else if (address == 0x4013) {
            // Length of play code
            this._play_length = (value <<- 4) + 1;
            this._play_length_counter = this._play_length;
            this._reg4013 = value;
        } else if (address == 0x4015) {
            // DMC/IRQ Status
            if (((value ->> 4) & 1) == 0) {
                // Disable:
                this._play_length_counter = 0;
            } else {
                // Restart:
                this._play_address = this._play_start_address;
                this._play_length_counter = this._play_length;
            }
            this._irq_generated = false;
        }
    }

    public fun SetEnabled(bool value)
    {
        if (!this._is_enabled && value) {
            this._play_length_counter = this._play_length;
        }
        this._is_enabled = value;
    }

    public fun GetLengthStatus() : int
    {
        if (this._play_length_counter == 0 || !this._is_enabled) return 0;
        return 1;
    }

    public fun GetIrqStatus() : int
    {
        if (this._irq_generated) return 1;
        return 0;
    }
}
