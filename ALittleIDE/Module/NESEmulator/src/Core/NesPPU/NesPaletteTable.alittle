
namespace NESEmulator;

protected class NesPaletteTable
{
    private Map<int, int> _cur_table;
    private Map<int, Map<int, int>> _emph_table;
    private int _current_emph;

    public ctor()
    {
        this._cur_table = new Map<int, int>();
        this._emph_table = new Map<int, Map<int, int>>();
        this._current_emph = -1;
    }

    public fun Reset()
    {
        this.SetEmphasis(0);
    }

    public fun LoadNTSCPalette()
    {
        // prettier-ignore
        var values = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];
        for (var index, value in values)
            this._cur_table[index - 1] = value;
        this.MakeTables();
        this.SetEmphasis(0);
    }
    
    public fun LoadPALPalette()
    {
        // prettier-ignore
        var values = [0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000, 0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000, 0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000, 0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000];
        for (var index, value in values)
            this._cur_table[index - 1] = value;
        this.MakeTables();
        this.SetEmphasis(0);
    }

    public fun MakeTables()
    {
        var r = 0;
        var g = 0;
        var b = 0;
        var col = 0;
        var rFactor = 0.0;
        var gFactor = 0.0;
        var bFactor = 0.0;

        // Calculate a table for each possible emphasis setting:
        for (var emph = 0; emph < 8; 1) {
            // Determine color component factors:
            rFactor = 1.0;
            gFactor = 1.0;
            bFactor = 1.0;

            if ((emph & 1) != 0) {
                rFactor = 0.75;
                bFactor = 0.75;
            }
            if ((emph & 2) != 0) {
                rFactor = 0.75;
                gFactor = 0.75;
            }
            if ((emph & 4) != 0) {
                gFactor = 0.75;
                bFactor = 0.75;
            }

            this._emph_table[emph] = new Map<int, int>();

            // Calculate table:
            for (var i = 0; i < 64; 1) {
                col = this._cur_table[i];
                r = ALittle.Math_Floor(this.GetRed(col) * rFactor);
                g = ALittle.Math_Floor(this.GetGreen(col) * gFactor);
                b = ALittle.Math_Floor(this.GetBlue(col) * bFactor);
                this._emph_table[emph][i] = this.GetRgb(r, g, b);
            }
        }
    }

    public fun SetEmphasis(int emph)
    {
        if (emph != this._current_emph) {
            this._current_emph = emph;
            for (var i = 0; i < 64; 1) {
                this._cur_table[i] = this._emph_table[emph][i];
            }
        }
    }

    public fun GetEntry(int yiq) : int
    {
        return this._cur_table[yiq];
	}

	public fun GetRed(int rgb) : int
    {
    	return (rgb ->> 16) & 0xff;
    }

	public fun GetGreen(int rgb) : int
    {
    	return (rgb ->> 8) & 0xff;
    }

	public fun GetBlue(int rgb) : int
    {
		return rgb & 0xff;
	}

	public fun GetRgb(int r, int g, int b) : int
    {
		return (r <<- 16) | (g <<- 8) | b;
	}

    public fun LoadDefaultPalette()
    {
        this._cur_table[0] = this.GetRgb(117, 117, 117);
        this._cur_table[1] = this.GetRgb(39, 27, 143);
        this._cur_table[2] = this.GetRgb(0, 0, 171);
        this._cur_table[3] = this.GetRgb(71, 0, 159);
        this._cur_table[4] = this.GetRgb(143, 0, 119);
        this._cur_table[5] = this.GetRgb(171, 0, 19);
        this._cur_table[6] = this.GetRgb(167, 0, 0);
        this._cur_table[7] = this.GetRgb(127, 11, 0);
        this._cur_table[8] = this.GetRgb(67, 47, 0);
        this._cur_table[9] = this.GetRgb(0, 71, 0);
        this._cur_table[10] = this.GetRgb(0, 81, 0);
        this._cur_table[11] = this.GetRgb(0, 63, 23);
        this._cur_table[12] = this.GetRgb(27, 63, 95);
        this._cur_table[13] = this.GetRgb(0, 0, 0);
        this._cur_table[14] = this.GetRgb(0, 0, 0);
        this._cur_table[15] = this.GetRgb(0, 0, 0);
        this._cur_table[16] = this.GetRgb(188, 188, 188);
        this._cur_table[17] = this.GetRgb(0, 115, 239);
        this._cur_table[18] = this.GetRgb(35, 59, 239);
        this._cur_table[19] = this.GetRgb(131, 0, 243);
        this._cur_table[20] = this.GetRgb(191, 0, 191);
        this._cur_table[21] = this.GetRgb(231, 0, 91);
        this._cur_table[22] = this.GetRgb(219, 43, 0);
        this._cur_table[23] = this.GetRgb(203, 79, 15);
        this._cur_table[24] = this.GetRgb(139, 115, 0);
        this._cur_table[25] = this.GetRgb(0, 151, 0);
        this._cur_table[26] = this.GetRgb(0, 171, 0);
        this._cur_table[27] = this.GetRgb(0, 147, 59);
        this._cur_table[28] = this.GetRgb(0, 131, 139);
        this._cur_table[29] = this.GetRgb(0, 0, 0);
        this._cur_table[30] = this.GetRgb(0, 0, 0);
        this._cur_table[31] = this.GetRgb(0, 0, 0);
        this._cur_table[32] = this.GetRgb(255, 255, 255);
        this._cur_table[33] = this.GetRgb(63, 191, 255);
        this._cur_table[34] = this.GetRgb(95, 151, 255);
        this._cur_table[35] = this.GetRgb(167, 139, 253);
        this._cur_table[36] = this.GetRgb(247, 123, 255);
        this._cur_table[37] = this.GetRgb(255, 119, 183);
        this._cur_table[38] = this.GetRgb(255, 119, 99);
        this._cur_table[39] = this.GetRgb(255, 155, 59);
        this._cur_table[40] = this.GetRgb(243, 191, 63);
        this._cur_table[41] = this.GetRgb(131, 211, 19);
        this._cur_table[42] = this.GetRgb(79, 223, 75);
        this._cur_table[43] = this.GetRgb(88, 248, 152);
        this._cur_table[44] = this.GetRgb(0, 235, 219);
        this._cur_table[45] = this.GetRgb(0, 0, 0);
        this._cur_table[46] = this.GetRgb(0, 0, 0);
        this._cur_table[47] = this.GetRgb(0, 0, 0);
        this._cur_table[48] = this.GetRgb(255, 255, 255);
        this._cur_table[49] = this.GetRgb(171, 231, 255);
        this._cur_table[50] = this.GetRgb(199, 215, 255);
        this._cur_table[51] = this.GetRgb(215, 203, 255);
        this._cur_table[52] = this.GetRgb(255, 199, 255);
        this._cur_table[53] = this.GetRgb(255, 199, 219);
        this._cur_table[54] = this.GetRgb(255, 191, 179);
        this._cur_table[55] = this.GetRgb(255, 219, 171);
        this._cur_table[56] = this.GetRgb(255, 231, 163);
        this._cur_table[57] = this.GetRgb(227, 255, 163);
        this._cur_table[58] = this.GetRgb(171, 243, 191);
        this._cur_table[59] = this.GetRgb(179, 255, 207);
        this._cur_table[60] = this.GetRgb(159, 255, 243);
        this._cur_table[61] = this.GetRgb(0, 0, 0);
        this._cur_table[62] = this.GetRgb(0, 0, 0);
        this._cur_table[63] = this.GetRgb(0, 0, 0);

        this.MakeTables();
        this.SetEmphasis(0);
    }
}
