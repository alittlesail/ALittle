
namespace NESEmulator;

protected enum NESMirroringType
{
    VERTICAL_MIRRORING = 0;
    HORIZONTAL_MIRRORING = 1;
    FOURSCREEN_MIRRORING = 2;
    SINGLESCREEN_MIRRORING = 3;
    SINGLESCREEN_MIRRORING2 = 4;
    SINGLESCREEN_MIRRORING3 = 5;
    SINGLESCREEN_MIRRORING4 = 6;
    CHRROM_MIRRORING = 7;
}

protected class NesRom
{
    private NesCore _nes;

    // 卡带类型名
    private Map<int, string> _mapper_name = new Map<int, string>();

    // PRG 块数量
    private int _rom_count = 0;
    // CHR 块数量 * 2
    private int _vrom_count = 0;
    // 镜像类型
    private int _mirroring = 0;
    // 卡带上有没有电池
    private bool _battery_ram = false;
    // trainer 标志
    private bool _trainer = false;
    // 4-Screen 模式
    private bool _four_screen = false;
    // 卡带类型
    private int _mapper_type = 0;

    // PRG-ROM 内容
    private Map<int, Map<int, int>> _rom;
	// CHR-ROM 内容
    private Map<int, Map<int, int>> _vrom;
    // vrom Tile
    private Map<int, Map<int, NesTile>> _vrom_tile;

    // 标记是否可用
    private bool _valid = false;

    public ctor(NesCore nes)
    {
        this._nes = nes;

        for (var i = 0; i < 92; 1)
        	this._mapper_name[i] = "Unknown Mapper";

        this._mapper_name[0] = "Direct Access";
        this._mapper_name[1] = "Nintendo MMC1";
        this._mapper_name[2] = "UNROM";
        this._mapper_name[3] = "CNROM";
        this._mapper_name[4] = "Nintendo MMC3";
        this._mapper_name[5] = "Nintendo MMC5";
        this._mapper_name[6] = "FFE F4xxx";
        this._mapper_name[7] = "AOROM";
        this._mapper_name[8] = "FFE F3xxx";
        this._mapper_name[9] = "Nintendo MMC2";
        this._mapper_name[10] = "Nintendo MMC4";
        this._mapper_name[11] = "Color Dreams Chip";
        this._mapper_name[12] = "FFE F6xxx";
        this._mapper_name[15] = "100-in-1 switch";
        this._mapper_name[16] = "Bandai chip";
        this._mapper_name[17] = "FFE F8xxx";
        this._mapper_name[18] = "Jaleco SS8806 chip";
        this._mapper_name[19] = "Namcot 106 chip";
        this._mapper_name[20] = "Famicom Disk System";
        this._mapper_name[21] = "Konami VRC4a";
        this._mapper_name[22] = "Konami VRC2a";
        this._mapper_name[23] = "Konami VRC2a";
        this._mapper_name[24] = "Konami VRC6";
        this._mapper_name[25] = "Konami VRC4b";
        this._mapper_name[32] = "Irem G-101 chip";
        this._mapper_name[33] = "Taito TC0190/TC0350";
        this._mapper_name[34] = "32kB ROM switch";

        this._mapper_name[64] = "Tengen RAMBO-1 chip";
        this._mapper_name[65] = "Irem H-3001 chip";
        this._mapper_name[66] = "GNROM switch";
        this._mapper_name[67] = "SunSoft3 chip";
        this._mapper_name[68] = "SunSoft4 chip";
        this._mapper_name[69] = "SunSoft5 FME-7 chip";
        this._mapper_name[71] = "Camerica chip";
        this._mapper_name[78] = "Irem 74HC161/32-based";
        this._mapper_name[91] = "Pirate HK-SF3 chip";
    }

    // 加载卡带，如果失败会返回错误码
    public fun Load(ALittle.LocalFile data) : string
    {
        // 判定文件头
        var offset = 0;
        if (data.ReadUChar(offset) != 0x4E) return "Not a valid NES ROM.";
        ++offset;
        if (data.ReadUChar(offset) != 0x45) return "Not a valid NES ROM.";
        ++offset;
        if (data.ReadUChar(offset) != 0x53) return "Not a valid NES ROM.";
        ++offset;
        if (data.ReadUChar(offset) != 0x1A) return "Not a valid NES ROM.";
        ++offset;

        // PRG 块数量
        this._rom_count = data.ReadUChar(offset); ++offset;
        // CHR 块数量 * 2
        this._vrom_count = data.ReadUChar(offset) * 2; ++offset;
        
        var flag = data.ReadUChar(offset);
        ++offset;
        // 镜像类型
        this._mirroring = 0;
        if (flag & 1 != 0) this._mirroring = 1;
        // 判断卡带上是否有电池
        this._battery_ram = flag & 2 != 0;
        // trainer 标志
        this._trainer = flag & 4 != 0;
        // 4-Screen 模式
        this._four_screen = flag & 8 != 0;
        // 卡带类型
        this._mapper_type = (flag & 6) ->> 4 | (flag & 7) & 0xf0;

        // 这里不对battery_ram进行而外处理

        // 检查8-15是否是0
        var found_error = false;
        for (var i = 8; i < 16; 1)
        {
            if (data.ReadUChar(i) != 0)
            {
                found_error = true;
                break;
            }
        }
        // 如果发现错误，那么就忽略第7个字节
        if (found_error) this._mapper_type = this._mapper_type & 0xf;

        // 加载 PRG-ROM
        offset = 16;
        this._rom = new Map<int, Map<int, int>>();
        for (var i = 0; i < this._rom_count; 1)
        {
            this._rom[i] = new Map<int, int>();
            for (var j = 0; j < 16384; 1)
            {
                if (offset + j >= data.GetSize()) break;
                this._rom[i][j] = data.ReadUChar(offset + j);
            }
            offset += 16384;
        }
        // 加载 CHR-ROM
        this._vrom = new Map<int, Map<int, int>>();
        for (var i = 0;i < this._vrom_count; 1)
        {
            this._vrom[i] = new Map<int, int>();
            for (var j = 0; j < 4096; 1)
            {
                if (offset + j >= data.GetSize()) break;
                this._vrom[i][j] = data.ReadUChar(offset + j);
            }
            offset += 4096;
        }

        // 创建VROM对应的Tile
        this._vrom_tile = new Map<int, Map<int, NesTile>>();
        for (var i = 0; i < this._vrom_count; 1)
        {
            this._vrom_tile[i] = new Map<int, NesTile>();
            for (var j = 0; j < 256; 1)
            	this._vrom_tile[i][j] = new NesTile();
        }

        // 将CHR-ROM转为tile
        for (var v = 0; v < this._vrom_count; 1)
        {
            for (var i = 0; i < 4096; 1)
            {
                var tile_index = i ->> 4;
                var left_over = i % 16;
                if (left_over < 8)
                    this._vrom_tile[v][tile_index].SetScanline(left_over, this._vrom[v][i], this._vrom[v][i + 8]);
                else
                	this._vrom_tile[v][tile_index].SetScanline(left_over - 8, this._vrom[v][i - 8], this._vrom[v][i]);
            }
        }

        this._valid = true;
        return null;
    }

    public fun GetMirroringType() : int
    {
        if (this._four_screen) return NESMirroringType.FOURSCREEN_MIRRORING;
        if (this._mirroring == 0) return NESMirroringType.HORIZONTAL_MIRRORING;
        return NESMirroringType.VERTICAL_MIRRORING;
    }

    public fun GetMapperName() : string
    {
        var name = this._mapper_name[this._mapper_type];
        if (name != null) return name;

        return "Unknow Mapper, ".. this._mapper_type;
    }

    public fun CreateMapper() : NesMapper
    {
        return CreateNesMapper(this._mapper_type);
    }
}
