namespace NESEmulator;

protected var g_GConfig:ALittle.IJsonConfig;

class GCenter
{
    private ALittle.DisplayLayout _main_layer;
    private ALittle.DisplayLayout _dialog_layer;

    private ALittle.DisplayLayout _canvas;
    private ALittle.DynamicImage _screen;
    private GController _controller;

    private ALittle.TextRadioButton _file_menu;
    private ALittle.TextRadioButton _rom_menu;
    private ALittle.TextRadioButton _help_menu;

    public ctor()
    {
    }

    public fun Setup()
    {
        // 获取配置信息
        g_GConfig = ALittle.CreateConfigSystem(g_ModuleBasePath.."/User.cfg");
        // 生成随机数种子
        ALittle.Math_RandomSeed(ALittle.Time_GetCurTime());
        // 设置1个线程
        ALittle.System_SetThreadCount(1);

        // 创建主层
        this._main_layer = new ALittle.DisplayLayout(g_Control);
        this._main_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._main_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        g_LayerGroup.AddChild(this._main_layer, null);
        this._dialog_layer = new ALittle.DisplayLayout(g_Control);
        this._dialog_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._dialog_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        g_LayerGroup.AddChild(this._dialog_layer, null);

        A_UISystem.view_resize_callback = bind(this.HandleViewResize, this);

        var main_scene = g_Control.CreateControl{ALittle.DisplayObject}("main_scene", this, this._main_layer);

        var group = new ALittle.TextRadioButtonGroup();
        this._file_menu.group = group;
        this._rom_menu.group = group;
        this._help_menu.group = group;

        this._file_menu.AddEventListener(this, this.HandleSelectFile);

        this._screen = new ALittle.DynamicImage(g_Control);
        this.UpdateScreenWH();
        this._screen.SetSurfaceSize(SCREEN_WIDTH, SCREEN_HEIGHT, 0);
        this._canvas.AddChild(this._screen);

        g_GNes.Setup(this._screen);
    }

    private fun HandleViewResize(int width, int height)
    {
        this.UpdateScreenWH();
    }

    private fun UpdateScreenWH()
    {
        if (this._screen == null) return;

        if (this._canvas.width > this._canvas.height)
        {
            this._screen.height = this._canvas.height;
            this._screen.width = this._canvas.height * SCREEN_WIDTH / SCREEN_HEIGHT;
        }
        else
        {
            this._screen.width = this._canvas.width;
            this._screen.height = this._canvas.width * SCREEN_HEIGHT / SCREEN_WIDTH;
        }

        this._screen.x = (this._canvas.width - this._screen.width) / 2;
    }

    private fun HandleFileClick(ALittle.UIClickEvent event)
    {
        var menu = new AUIPlugin.AUIRightMenu();
        [Language(Lua)]
        menu.AddItem("打开", bind(this.HandleOpenFile, this));
        menu.AddItem("退出", bind(this.HandleExit, this));
        menu.Show(this._file_menu);
    }

    private fun HandleRomClick(ALittle.UIClickEvent event)
    {
        var menu = new AUIPlugin.AUIRightMenu();
        menu.AddItem("坦克大战", bind(this.HandleLoadRom, this, "BattleCity.nes"));
        menu.AddItem("马里奥兄弟", bind(this.HandleLoadRom, this, "SuperMarioBros.nes"));
        menu.AddItem("重装机兵", bind(this.HandleLoadRom, this, "MetalMax.nes"));
        menu.Show(this._rom_menu);
    }

    private fun HandleHelpClick(ALittle.UIClickEvent event)
    {
        var menu = new AUIPlugin.AUIRightMenu();
        menu.AddItem("控制器", bind(this.HandleShowControl, this));
        menu.AddItem("关于", bind(this.HandleShowAbout, this));
        [Language(Lua)]
        menu.AddItem("版本更新", bind(this.HandleVersionUpdate, this));
        menu.Show(this._help_menu);
    }

    private fun HandleShowControl()
    {
        g_AUITool.ShowNotice("提示", "左:A    右:D\n上:W    下:D\n选择:G    开始:H\nB键:J    A键:K");
    }

    private fun HandleShowAbout()
    {
        g_AUITool.ShowNotice("提示", "本模拟器提供的ROM只提供学习使用，不作为商业用途");
    }

    private fun HandleVersionUpdate()
    {
        [Language(Lua)]
        g_VersionManager.ShowDialog();
    }

    private async fun HandleSelectFile(ALittle.UISystemSelectFileEvent event)
    {
        var error = g_GNes.LoadROMFromPath(event.path);
        if (error != null) g_AUITool.ShowNotice("错误", error);
    }

    private async fun HandleLoadRom(string file_name)
    {
        var error = g_GNes.LoadROMFromOther(file_name);
        if (error != null) g_AUITool.ShowNotice("错误", error);
    }

    private fun HandleOpenFile()
    {
        A_OtherSystem.SystemSelectFile(this._file_menu);
    }

    private fun HandleExit()
    {
        ALittle.System_Exit();
    }

    public fun Shutdown()
    {
        g_GNes.Shutdown();
    }
}

public var g_GCenter = new GCenter();