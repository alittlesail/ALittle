
namespace NESEmulator;

protected class GNes : NesCore
{
    private ALittle.DynamicImage _image;
    private ALittle.LoopFrame _loop_frame;
    private ALittle.LoopFunction _loop_func;

    private Map<int, int> _frame_buffer = new Map<int, int>();

    public fun Setup(ALittle.DynamicImage image)
    {
        this._image = image;
        A_UISystem.keydown_callback = bind(this.HandleKey, this, true);
        A_UISystem.keyup_callback = bind(this.HandleKey, this, false);
        ALittle.System_SetFPS(1000);
    }

    public await fun LoadROMFromOther(string file_name) : string
    {
        this.Reset();

        if (this._loop_frame != null)
        {
        	this._loop_frame.Stop();
            this._loop_frame = null;
        }

        if (this._loop_func != null)
        {
            this._loop_func.Stop();
            this._loop_func = null;
        }

        var path = g_ModuleBasePath.."Other/"..file_name;

        [Language(JavaScript)]
        g_Control.HttpDownload(path);

        var nes_rom = new ALittle.LocalFile();
        if (!nes_rom.Load(path)) return "can't find rom:"..file_name;

        var error = this.ReloadROM(nes_rom);
        if (error != null) return error;

        this._loop_frame = new ALittle.LoopFrame(bind(this.UpdateFrame, this));
        this._loop_frame.Start();
        this._loop_func = new ALittle.LoopFunction(bind(this.ShowInfo, this), -1, 1000, 1000);
        this._loop_func.Start();

        return null;
    }


    public await fun LoadROMFromPath(string path) : string
    {
        this.Reset();

        if (this._loop_frame != null)
        {
        	this._loop_frame.Stop();
            this._loop_frame = null;
        }

        if (this._loop_func != null)
        {
            this._loop_func.Stop();
            this._loop_func = null;
        }

        var nes_rom = new ALittle.LocalFile();
        if (!nes_rom.Load(path)) return "can't find rom:"..path;

        var error = this.ReloadROM(nes_rom);
        if (error != null) return error;

        this._loop_frame = new ALittle.LoopFrame(bind(this.UpdateFrame, this));
        this._loop_frame.Start();
        this._loop_func = new ALittle.LoopFunction(bind(this.ShowInfo, this), -1, 1000, 1000);
        this._loop_func.Start();

        return null;
    }


    // 处理按键
    public fun HandleKey(bool down, int mod, int sym, int scancode)
    {
        if (sym == ALittle.UIEnumTypes.KEY_A)
        {
            if (down)
            	this.ButtonDown(1, NesControlType.BUTTON_LEFT);
            else
            	this.ButtonUp(1, NesControlType.BUTTON_LEFT);
        }
        elseif (sym == ALittle.UIEnumTypes.KEY_S)
        {
            if (down)
            	this.ButtonDown(1, NesControlType.BUTTON_DOWN);
            else
            	this.ButtonUp(1, NesControlType.BUTTON_DOWN);
        }
        elseif (sym == ALittle.UIEnumTypes.KEY_D)
        {
            if (down)
            	this.ButtonDown(1, NesControlType.BUTTON_RIGHT);
            else
            	this.ButtonUp(1, NesControlType.BUTTON_RIGHT);
        }
        elseif (sym == ALittle.UIEnumTypes.KEY_W)
        {
            if (down)
            	this.ButtonDown(1, NesControlType.BUTTON_UP);
            else
            	this.ButtonUp(1, NesControlType.BUTTON_UP);
        }
        elseif (sym == ALittle.UIEnumTypes.KEY_G)
        {
            if (down)
            	this.ButtonDown(1, NesControlType.BUTTON_SELECT);
            else
            	this.ButtonUp(1, NesControlType.BUTTON_SELECT);
        }
        elseif (sym == ALittle.UIEnumTypes.KEY_H)
        {
            if (down)
            	this.ButtonDown(1, NesControlType.BUTTON_START);
            else
            	this.ButtonUp(1, NesControlType.BUTTON_START);
        }
        elseif (sym == ALittle.UIEnumTypes.KEY_K)
        {
            if (down)
            	this.ButtonDown(1, NesControlType.BUTTON_A);
            else
            	this.ButtonUp(1, NesControlType.BUTTON_A);
        }
        elseif (sym == ALittle.UIEnumTypes.KEY_J)
        {
            if (down)
            	this.ButtonDown(1, NesControlType.BUTTON_B);
            else
            	this.ButtonUp(1, NesControlType.BUTTON_B);
        }
    }

    // 图像输出，提供外部继承
    public fun OnFrame(Map<int, int> frame_buffer)
    {
        var len = SCREEN_WIDTH * SCREEN_HEIGHT;
        for (var i = 0; i < len; 1)
        	this._frame_buffer[i] = frame_buffer[i] | 0xFF000000;
        this._image.SetRangeColor(this._frame_buffer);
    }

    public fun ShowInfo()
    {
        // ALittle.Log(this.GetFPS());
    }

    public fun UpdateFrame(int frame_time)
    {
        // var time1  = ALittle.System_GetCurMSTime();
        var error = this.Frame();
        if (error != null)
        {
            ALittle.Log(error);
            if (this._loop_frame != null)
            	this._loop_frame.Stop();
            if (this._loop_func != null)
            	this._loop_func.Stop();
        }
            // var time2  = ALittle.System_GetCurMSTime();
            // ALittle.Log("UpdateFrame", time2 - time1);
    }

    public fun Shutdown()
    {
        if (this._loop_frame != null)
        	this._loop_frame.Stop();
        this._loop_frame = null;
        if (this._loop_func != null)
        	this._loop_func.Stop();
        this._loop_func = null;
    }
}

public var g_GNes = new GNes();