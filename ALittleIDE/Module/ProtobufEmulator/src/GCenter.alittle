
namespace ProtobufEmulator;

protected var g_GConfig:ALittle.IJsonConfig;

class GCenter
{
    public ALittle.DisplayLayout _main_layer;
    public ALittle.DisplayLayout _dialog_layer;

    // 设置界面
    private ALittle.Dialog _setting_dialog;
    private ALittle.DisplayObject _proto_root_input;
    private ALittle.DisplayObject _login_proto_input;
    private ALittle.DisplayObject _plugin_file_input;
    private ALittle.DisplayObject _blueprint_root_input;

    private ALittle.LoopFrame _frame_loop;

    // 标签页
    private ALittle.Tab _main_tab;

    public GClient _gclient;
    public GRobot _grobot;

    public fun Setup()
    {
        // 获取配置信息
        g_GConfig = ALittle.CreateConfigSystem(g_ModuleBasePath.."/User.cfg");
        // 生成随机数种子
        ALittle.Math_RandomSeed(ALittle.Time_GetCurTime());
        // 设置1个线程
        ALittle.System_SetThreadCount(1);

        // 创建主层
        this._main_layer = new ALittle.DisplayLayout(g_Control);
        this._main_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._main_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        g_LayerGroup.AddChild(this._main_layer, null);
        this._dialog_layer = new ALittle.DisplayLayout(g_Control);
        this._dialog_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._dialog_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        g_LayerGroup.AddChild(this._dialog_layer, null);

        // 创建主界面
        g_Control.CreateControl{ALittle.DisplayObject}("main_scene", this, this._main_layer);
        this._main_tab.DisableAllCloseButton();
        this._main_tab.tab_index = 1;
        
        // 设置界面
        this._setting_dialog = g_Control.CreateControl{ALittle.Dialog}("main_setting_dialog", this);
        A_LayerManager.AddToModal(this._setting_dialog);

        // 加载插件
        var plugin_path = g_GConfig.GetString("plugin_script", "");
        if (ALittle.File_GetFileExtByPathAndUpper(plugin_path) == "LUA")
        {
            var plugin_script = ALittle.File_ReadTextFromStdFile(plugin_path);
            if (plugin_script != null) alittle.RunScript(plugin_script, plugin_path);
            else this.HandleShowSettingDialog(null);
        }
        else this.HandleShowSettingDialog(null);

        // 协议列表
        var proto_root = g_GConfig.GetString("proto_root", "");
        if (proto_root != "" && ALittle.File_GetFileAttr(proto_root) != null)
        {
            var error = A_LuaProtobufSchedule.LoadProto(proto_root);
            if (error == null)
            {
                var func = cast<Map<string, Functor<()>>>(_G)["__PLUGIN_ProtoRefresh"];
                if (func != null)
                {
                    error = tcall(func);
                    if (error != null) ALittle.Log(error);
                }
            }
            else
            {
                this.HandleShowSettingDialog(null);
            }
        }

        this._gclient.Setup();
        this._grobot.Setup();

        // 每帧处理
        this._frame_loop = new ALittle.LoopFrame(bind(this.UpdateFrame, this));
        this._frame_loop.Start();

        A_UISystem.keydown_callback = bind(this.HandleKeyDown, this);
    }

    public fun UpdateFrame(int frame_time)
    {
        A_LuaProtobufSchedule.RunInFrame();
    }

    public fun HandleKeyDown(int mod, int sym, int scancode)
    {
        if (sym == ALittle.UIEnumTypes.KEY_S && mod & ALittle.UIEnumTypes.KMOD_CTRL != 0)
        {
            this._grobot.Save(true);
        }
    }

    // 显示设置对话框
    public fun HandleShowSettingDialog(ALittle.UIClickEvent event)
    {
        this._setting_dialog.visible = true;
        this._proto_root_input.text = g_GConfig.GetString("proto_root", "");
        this._login_proto_input.text = g_GConfig.GetString("login_proto", "");
        this._plugin_file_input.text = g_GConfig.GetString("plugin_script", "");
        this._blueprint_root_input.text = g_GConfig.GetString("blueprint_root", "");
    }

    // 显示版本对话框
    public fun HandleShowVersionDialog(ALittle.UIClickEvent event)
    {
        [Language(Lua)]
        g_VersionManager.ShowDialog();
    }

    // 选择协议跟路径
    private fun HandleSettingSelectProtoRootClick(ALittle.UISystemSelectDirectoryEvent event)
    {
        if (event.path == null) return;
        this._proto_root_input.text = event.path;
    }

    // 选择蓝图根路径
    private fun HandleSettingSelectBlueprintRootClick(ALittle.UISystemSelectDirectoryEvent event)
    {
        if (event.path == null) return;
        this._blueprint_root_input.text = event.path;
    }

    // 选择插件代码
    private fun HandleSettingSelectPluginScriptClick(ALittle.UISystemSelectFileEvent event)
    {
        if (event.path == null) return;
        this._plugin_file_input.text = event.path;
    }

    // 生成模板代码
    private fun HandleSettingGeneratePluginScriptClick(ALittle.UISystemSelectDirectoryEvent event)
    {
        if (event.path == null) return;
        this._plugin_file_input.text = event.path.."\\TemplatePlugin.lua";
        g_GConfig.SetConfig("plugin_script", this._plugin_file_input.text);

        ALittle.File_CopyFile(g_ModuleBasePath.."Other/TemplatePlugin.lua", this._plugin_file_input.text);
    }

    // 处理设置
    public fun HandleSettingConfirmClick(ALittle.UIClickEvent event)
    {
        var attr = ALittle.File_GetFileAttr(this._proto_root_input.text);
        if (attr == null || attr.directory != true)
        {
            g_AUITool.ShowNotice("错误", "文件夹不存在");
            return;
        }

        var error = A_LuaProtobufSchedule.LoadProto(this._proto_root_input.text);
        if (error != null)
        {
            g_AUITool.ShowNotice("错误", error);
            return;
        }

        // 清理接口，并重新加载
        if (ALittle.File_GetFileExtByPathAndUpper(this._plugin_file_input.text) == "LUA")
        {
            cast<Map<string, any>>(_G)["__PLUGIN_ProtoRefresh"] = null;
            cast<Map<string, any>>(_G)["__PLUGIN_StartLogin"] = null;
            cast<Map<string, any>>(_G)["__PLUGIN_RobotLogin"] = null;
            cast<Map<string, any>>(_G)["__SOCKET_ReadMessage"] = null;
            cast<Map<string, any>>(_G)["__SOCKET_WriteMessage"] = null;
            cast<Map<string, any>>(_G)["__SOCKET_HandleMessage"] = null;
            var plugin_script = ALittle.File_ReadTextFromStdFile(this._plugin_file_input.text);
            if (plugin_script != null) alittle.RunScript(plugin_script, this._plugin_file_input.text);
        }
        else
        {
            g_AUITool.ShowNotice("错误", "插件脚本必须是lua脚本");
            return;
        }

        this._setting_dialog.visible = false;
        g_GConfig.SetConfig("proto_root", this._proto_root_input.text);

        var func = cast<Map<string, Functor<()>>>(_G)["__PLUGIN_ProtoRefresh"];
        if (func != null)
        {
            error = tcall(func);
            if (error != null) ALittle.Log(error);
        }
        if (error != null)
        {
            g_AUITool.ShowNotice("错误", error);
            return;
        }

        // 保存配置
        g_GConfig.SetConfig("login_proto", this._login_proto_input.text);

        // 保存路径
        g_GConfig.SetConfig("plugin_script", this._plugin_file_input.text);
        g_GConfig.SetConfig("blueprint_root", this._blueprint_root_input.text);

        this._gclient.HandleSettingChanged();
        this._grobot.HandleSettingChanged();
    }

    // 处理设置
    public fun HandleSettingCancelClick(ALittle.UIClickEvent event)
    {
        this._setting_dialog.visible = false;
    }

    public fun Shutdown()
    {
        this._frame_loop.Stop();
    }
}

public var g_GCenter = new GCenter();