
namespace ProtobufEmulator;

protected var g_GProtoCache:ALittle.IJsonConfig;

protected struct DetailInfo
{
    IDETreeLogic tree;
    lua.protobuf_message message;
    lua.protobuf_reflection reflection;
    Lua.lua_socket_schedule_message_info info;
}

protected struct RootInfo
{
    DetailInfo detail_info;
    bool for_show;  // false表示可编辑
}

protected struct LogItemUserData
{
    lua.protobuf_message msg;
    Lua.lua_socket_schedule_message_info info;
    string upper_name;
    string json_content;
}

protected enum LoginStatus
{
    EMULATOR_IDLE = 0;
    EMULATOR_LOGINING = 1;
    EMULATOR_LOGINED = 2;
}

protected class GClient : ALittle.DisplayLayout
{
    private ALittle.Dialog _log_fliter_dialog;
    private ALittle.ImageEdit _log_fliter_edit;
    private Map<string, bool> _fliter_map;

    // 协议列表
    private ALittle.DisplayObject _proto_search_key;
    private ALittle.ScrollScreen _protobuf_scroll_screen;
    private Map<ALittle.TextRadioButton, bool> _proto_search_group;
    private Map<string, ALittle.TextRadioButton> _proto_search_item_pool;

    // 日志列表
    private ALittle.DisplayObject _log_search_key;
    private ALittle.ScrollScreen _log_scroll_screen;
    private Map<ALittle.TextRadioButton, bool> _log_search_group;
    private List<ALittle.TextRadioButton> _log_item_list;
    private int _log_item_count;

    // 协议内容
    private ALittle.ScrollScreen _detail_scroll_screen;
    private Map<string, DetailInfo> _detail_tree_item_pool;
    private ALittle.DisplayObject _send_button;

    // 详细信息
    private LogItemUserData _cur_item_user_data;
    private ALittle.DisplayObject _show_search_key;

    private ALittle.DisplayLayout _json_container;
    private AUIPlugin.AUICodeEdit _json_codeedit;

    private ALittle.Grid3 _right_grad3_ud;
    private ALittle.Grid3 _main_grid3_lr;

    // 登陆界面
    private ALittle.ScrollScreen _login_scroll_screen;
    private ALittle.DisplayObject _login_ip_input;
    private ALittle.DropDown _ip_dropdown;
    private ALittle.DisplayObject _login_port_input;
    private DetailInfo _login_detail_info;
    private ALittle.TextButton _login_button;
    private ALittle.TextButton _logout_button;

    // 登陆信息
    private int _login_status;
    private Lua.ISocket _client_socket;

    public ctor(ALittle.ControlSystem sys_ctrl)
    {
        this._proto_search_item_pool = new Map<string, ALittle.TextRadioButton>();
        this._proto_search_group = new Map<ALittle.TextRadioButton, bool>();

        this._detail_tree_item_pool = new Map<string, DetailInfo>();

        this._log_search_group = new Map<ALittle.TextRadioButton, bool>();
        this._log_item_list = new List<ALittle.TextRadioButton>();
        this._log_item_count = 0;

        this._login_status = LoginStatus.EMULATOR_IDLE;
    }

    public fun Setup()
    {
        // 获取配置信息
        g_GProtoCache = ALittle.CreateConfigSystem(g_ModuleBasePath.."/ProtoCache.cfg");

        // 过滤界面
        this._log_fliter_dialog = g_Control.CreateControl{ALittle.Dialog}("main_log_fliter_dialog", this);
        g_GCenter._dialog_layer.AddChild(this._log_fliter_dialog);
        this._log_fliter_dialog.visible = false;
        this._fliter_map = new Map<string, bool>();
        var fliter_list = g_GConfig.GetConfig("fliter_list", new List<string>());
        for (var index, fliter in fliter_list) this._fliter_map[fliter] = true;

        // 登陆部分
        var login_proto = g_GConfig.GetString("login_proto", "");
        var msg_info = A_LuaProtobufSchedule.GetMessageInfo(login_proto);
        if (msg_info != null)
        {
            this._login_detail_info = Utility_CreateTreeForEdit(msg_info);
            this._login_scroll_screen.container = this._login_detail_info.tree;
        }

        // 界面初始化
        this._login_button.visible = true;
        this._logout_button.visible = false;
        this._login_ip_input.text = g_GConfig.GetString("login_ip", "127.0.0.1");
        var data_list = g_GConfig.GetConfig("login_ip_list", new List<string>());
        if (ALittle.List_Find(data_list, this._login_ip_input.text) == null)
        	ALittle.List_Push(data_list, this._login_ip_input.text);
        this._ip_dropdown.data_list = data_list;
        this._ip_dropdown.text = "";
        this._login_port_input.text = ALittle.String_ToString(g_GConfig.GetInt("login_port", 0));

        this._right_grad3_ud.up_size = g_GConfig.GetDouble("right_grid3_up_size", this._right_grad3_ud.up_size);
        this._main_grid3_lr.down_size = g_GConfig.GetDouble("main_grid3_down_size", this._main_grid3_lr.down_size);
        this._send_button.disabled = true;

        // 创建一个CodeEdit
		this._json_codeedit = AUIPlugin.AUICodeEdit.Create();
        this._json_codeedit.editable = false;
        this._json_container.AddChild(this._json_codeedit);

        this.RefreshProtoList();
    }

    private fun HandleIpSelectChanged(ALittle.UISelectChangedEvent event)
    {
        this._login_ip_input.text = this._ip_dropdown.text;
        this._ip_dropdown.text = "";
    }

    public fun HandleSettingChanged()
    {
        // 协议列表
        this._protobuf_scroll_screen.RemoveAllChild();
        this._proto_search_item_pool = new Map<string, ALittle.TextRadioButton>();
        this._proto_search_group = new Map<ALittle.TextRadioButton, bool>();
        this.RefreshProtoList();

        // 协议内容
        this._detail_scroll_screen.container = null;
        this._detail_tree_item_pool = new Map<string, DetailInfo>();

        // 日志列表
        this._log_search_group = new Map<ALittle.TextRadioButton, bool>();
        this._log_item_list = new List<ALittle.TextRadioButton>();
        this._log_item_count = 0;
        this._log_scroll_screen.RemoveAllChild();
        this.RefreshLogList();

        // 登录界面
        this._login_detail_info = null;

        var msg_info = A_LuaProtobufSchedule.GetMessageInfo(g_GConfig.GetString("login_proto", ""));
        if (msg_info != null)
        {
            this._login_detail_info = Utility_CreateTreeForEdit(msg_info);
            this._login_scroll_screen.container = this._login_detail_info.tree;
        }
        else
            this._login_scroll_screen.container = null;
    }

    // 处理消息
    private fun HandleProtoSearchClick(ALittle.UIEvent event) { this.RefreshProtoList(); }

    // 处理
    private fun RefreshProtoList()
    {
        // 获取key
        var key = this._proto_search_key.text;
        key = ALittle.String_Upper(key);

        // 通过空格切割
        var key_list = ALittle.String_SplitSepList(key, [" ", "\t"]);
    
        // 清理
        for (var index, child in this._protobuf_scroll_screen.childs)
            child.group = null;
        this._protobuf_scroll_screen.RemoveAllChild();

        // 搜索
        var list:List<Lua.lua_socket_schedule_message_info>;
        if (ALittle.List_Len(key_list) == 0)
            list = A_LuaProtobufSchedule.FindMessageByUpperKey("");
        else
            list = A_LuaProtobufSchedule.FindMessageByUpperKeyList(key_list);
        for (var index, info in list)
        {
            var item = this._proto_search_item_pool[info.name];
            if (item == null)
            {
                item = g_Control.CreateControl{ALittle.TextRadioButton}("item_radiobutton");
                item.text = info.name;
                this._proto_search_item_pool[info.name] = item;
                item.drag_trans_target = this._protobuf_scroll_screen;
                item._user_data = info;
                item.AddEventListener(this, this.HandleProtoItemSelected);
                item.AddEventListener(this, this.HandleProtoItemRButtonDown);
            }
            var detail_info = this._detail_tree_item_pool[info.full_name];
            item.selected = detail_info != null && detail_info.tree == this._detail_scroll_screen.container;
            item.group = this._proto_search_group;
            this._protobuf_scroll_screen.AddChild(item);
        }

        this._protobuf_scroll_screen.AdjustScrollBar();
    }

    // 处理proto被选中
    private fun HandleProtoItemSelected(ALittle.UIChangedEvent event)
    {
        var info = cast<Lua.lua_socket_schedule_message_info>(event.target._user_data);

        var detail_info = this._detail_tree_item_pool[info.full_name];
        if (detail_info == null)
        {
            detail_info = Utility_CreateTreeForEdit(info);
            if (detail_info == null) return;
            this._detail_tree_item_pool[info.full_name] = detail_info;
        }
        this._detail_scroll_screen.container = detail_info.tree;
        this._detail_scroll_screen.AdjustScrollBar();
    }

    // 右键菜单
    private fun HandleProtoItemRButtonDown(ALittle.UIRButtonDownEvent event)
    {
        var info = cast<Lua.lua_socket_schedule_message_info>(event.target._user_data);

        var menu = new AUIPlugin.AUIRightMenu();
        menu.AddItem("复制名称", bind(ALittle.System_SetClipboardText, info.name));
        menu.AddItem("复制全称", bind(ALittle.System_SetClipboardText, info.full_name));
        menu.AddItem("过滤", bind(this.AddFliter, this, info.full_name));
        menu.Show();
    }

    // 处理消息
    private fun HandleLogSearchClick(ALittle.UIEvent event)
    {
        this.RefreshLogList();
    }

    // 清空消息
    private fun HandleLogClearClick(ALittle.UIEvent event)
    {
        this._log_search_key.text = "";
        this._log_item_list = new List<ALittle.TextRadioButton>();
        this._log_item_count = 0;
        this._log_scroll_screen.RemoveAllChild();
        this._cur_item_user_data = null;
        this._json_codeedit.OnClose();
    }

    // 过滤对话框
    private fun HandleLogFliterClick(ALittle.UIEvent event)
    {
        this._log_fliter_dialog.visible = true;
        var fliter_list = g_GConfig.GetConfig{List<string> }("fliter_list", new List<string>());
        this._log_fliter_edit.text = ALittle.String_Join(fliter_list, "\n");
        this._log_fliter_edit.DelayFocus();
    }

    // 取消设置过滤
    private fun HandleLogFliterCancelClick(ALittle.UIEvent event)
    {
        this._log_fliter_dialog.visible = false;
    }

    // 确定设置过滤
    private fun HandleLogFliterConfirmClick(ALittle.UIEvent event)
    {
        this._log_fliter_dialog.visible = false;
        var fliter_list = ALittle.String_SplitSepList(this._log_fliter_edit.text, ["\r","\n"]);
        g_GConfig.SetConfig("fliter_list", fliter_list);
        this._fliter_map = new Map<string, bool>();
        for (var index, fliter in fliter_list) this._fliter_map[fliter] = true;
    }

    // 处理
    private fun RefreshLogList()
    {
        // 获取key
        var key = this._log_search_key.text;
        key = ALittle.String_Upper(key);

        // 清理
        for (var index, child in this._log_scroll_screen.childs)
            child.group = null;
        this._log_scroll_screen.RemoveAllChild();

        // 搜索
        for (var index, button in this._log_item_list)
        {
            var user_data = cast<LogItemUserData>(button._user_data);
            if (ALittle.String_Find(user_data.upper_name, key) != null)
            {
                button.group = this._log_search_group;
                this._log_scroll_screen.AddChild(button);
            }
        }
        this._log_scroll_screen.AdjustScrollBar();
    }

    // 添加消息
    public fun AddLogMessage(PluginSocket socket, lua.protobuf_message msg)
    {
        if (this._client_socket != socket) return;

        var descriptor = lua.protobuf.message_getdescriptor(msg);
        var full_name = lua.protobuf.messagedescriptor_fullname(descriptor);
        // 过滤
        if (this._fliter_map[full_name] != null) return;

            // 如果数量太多，那么就移除
        if (this._log_item_count > 500)
        {
            var item = this._log_item_list[1];
            var user_data = cast<LogItemUserData>(item._user_data);
            if (this._cur_item_user_data == user_data)
                this._json_codeedit.OnClose();
            this._log_scroll_screen.RemoveChild(item);
            item.group = null;
            ALittle.List_Remove(this._log_item_list, 1);
        }

        var user_data = new LogItemUserData();
        user_data.info = A_LuaProtobufSchedule.GetMessageInfoByMessage(msg);
        user_data.msg = lua.protobuf.clonemessage(msg);
        user_data.upper_name = ALittle.String_Upper(user_data.info.name);

        // 添加新的
        var item = g_Control.CreateControl{ALittle.TextRadioButton}("item_radiobutton");
        item.text = user_data.info.name;
        item.drag_trans_target = this._log_scroll_screen;
        item._user_data = user_data;
        item.AddEventListener(this, this.HandleLogItemSelected);
        item.AddEventListener(this, this.HandleProtoLogRButtonDown);

        ++ this._log_item_count;
        this._log_item_list[this._log_item_count] = item;

        // 获取key
        var key = this._log_search_key.text;
        key = ALittle.String_Upper(key);
        if (ALittle.String_Find(user_data.upper_name, key) != null)
        {
            // 判断是否是底部
            var bottom = this._log_scroll_screen.right_scrollbar.offset_rate >= 0.95
                || this._log_scroll_screen.container.height < this._log_scroll_screen.view_height;

            item.group = this._log_search_group;
            this._log_scroll_screen.AddChild(item);

            if (bottom) this._log_scroll_screen.ScrollToBottom();
        }
    }

    private fun HandleLogItemSelected(ALittle.UIChangedEvent event)
    {
        this._show_search_key.text = "";
        this._cur_item_user_data = cast<LogItemUserData>(event.target._user_data);
        if (this._cur_item_user_data.json_content == null)
            this._cur_item_user_data.json_content = lua.protobuf.message_jsonencode(this._cur_item_user_data.msg, false, true);
        this._json_codeedit.OnClose();

        this._json_codeedit.Load("temp.json", this._cur_item_user_data.json_content, null);
    }

    // 右键菜单
    private fun HandleProtoLogRButtonDown(ALittle.UIRButtonDownEvent event)
    {
        var info = cast<LogItemUserData>(event.target._user_data);

        var menu = new AUIPlugin.AUIRightMenu();
        menu.AddItem("复制名称", bind(ALittle.System_SetClipboardText, info.info.name));
        menu.AddItem("复制全称", bind(ALittle.System_SetClipboardText, info.info.full_name));
        menu.AddItem("过滤", bind(this.AddFliter, this, info.info.full_name));
        menu.Show();
    }

    // 处理搜索
    private fun HandleShowSearchClick(ALittle.UIClickEvent event)
    {
        if (this._cur_item_user_data == null) return;

        var key = this._show_search_key.text;
        this._json_codeedit.FindNext(key);
    }

    // 过滤设置
    private fun AddFliter(string full_name)
    {
        this._fliter_map[full_name] = true;
        var list = new List<string>();
        for (var name, _ in this._fliter_map)
            ALittle.List_Push(list, name);
        g_GConfig.SetConfig("fliter_list", list);
    }

    // 处理断开连接
    public fun HandleClientSocketDisconnected(Lua.ISocket socket)
    {
        this._client_socket = null;
        this._send_button.disabled = true;
        this._login_button.visible = true;
        this._logout_button.visible = false;
        if (this._login_status == LoginStatus.EMULATOR_LOGINED)
        {
            var func = cast<Map<string, Functor<()>>>(_G)["__PLUGIN_HandleLogout"];
            if (func != null)
            {
                var error = tcall(func);
                if (error != null) ALittle.Log(error);
            }
        }
        this._login_status = LoginStatus.EMULATOR_IDLE;
    }

    // 发送消息包
    private fun HandleSendClick(ALittle.UIClickEvent event)
    {
        var tree = cast<IDETreeMessage>(this._detail_scroll_screen.container);
        if (tree == null) return;

        var detail_info = tree.GetDetailInfo();
        if (this._client_socket != null) this._client_socket.SendMessage(detail_info.message);
    }

    // 执行登陆
    private async fun HandleLoginClick(ALittle.UIClickEvent event)
    {
        var ip = this._login_ip_input.text;
        var port = ALittle.Math_ToInt(this._login_port_input.text);
        if (port == null || port <= 0)
        {
            g_AUITool.ShowNotice("提示", "请使用正确的端口");
            return;
        }

            // 获取协议msg
        if (this._login_detail_info == null)
        {
            g_AUITool.ShowNotice("提示", "请设置登陆协议");
            return;
        }

            // 如果正在登陆，那么就稍后
        if (this._login_status == LoginStatus.EMULATOR_LOGINING)
        {
            g_AUITool.ShowNotice("提示", "当前正在登陆，请先断开");
            return;
        }

        if (this._login_status == LoginStatus.EMULATOR_LOGINED)
        {
            g_AUITool.ShowNotice("提示", "当前已登录，请先断开");
            return;
        }

        g_GConfig.SetConfig("login_ip", ip);
        g_GConfig.SetConfig("login_port", port);
        var data_list = ALittle.List_Copy(g_GConfig.GetConfig("login_ip_list", new List<string>()));
        if (ALittle.List_Find(data_list, ip) == null)
        	ALittle.List_Push(data_list, ip);
        g_GConfig.SetConfig("login_ip_list", data_list);
        this._ip_dropdown.data_list = data_list;
        this._ip_dropdown.text = "";

        this._login_button.visible = false;
        this._logout_button.visible = true;

        // 标记为正在登陆
        this._login_status = LoginStatus.EMULATOR_LOGINING;

        // 开始登陆
        var error:string = null;

        // 先关闭所有连接
        if (this._client_socket != null)
        {
            this._client_socket.Close();
            this._client_socket = null;
        }

            // 开始重新登录
        var login_func = cast<Map<string, Functor<await(string, int, lua.protobuf_message):string,Lua.ISocket>>>(_G)["__PLUGIN_StartLogin"];
        if (login_func == null)
        {
            error = "还未加载插件";
        }
        else
        {
            var call_error:string = null;
            call_error, error, this._client_socket = tcall(login_func, ip, port, this._login_detail_info.message);
            if (call_error != null) error = call_error;
        }

        // 判断错误
        if (error == null)
        {
            if (this._client_socket != null)
            {
                // 设置断开的回调函数
                this._client_socket.disconnect_callback = bind(this.HandleClientSocketDisconnected, this);
                // 开始循环接收消息包
                this._client_socket.ReceiveMessage();
            }
            this._login_status = LoginStatus.EMULATOR_LOGINED;
            this._send_button.disabled = false;
        }
        else
        {
            g_AUITool.ShowNotice("提示", error);
            this._login_status = LoginStatus.EMULATOR_IDLE;

            this._login_button.visible = true;
            this._logout_button.visible = false;
        }
    }

    // 执行断开
    private fun HandleLogoutClick(ALittle.UIClickEvent event)
    {
        if (this._client_socket != null)
        {
            this._client_socket.Close();
            this._client_socket = null;
        }
        this._send_button.disabled = true;
        this._login_button.visible = true;
        this._logout_button.visible = false;
        if (this._login_status == LoginStatus.EMULATOR_LOGINED)
        {
            var func = cast<Map<string, Functor<()>>>(_G)["__PLUGIN_HandleLogout"];
            if (func != null)
            {
                var error = tcall(func);
                if (error != null) ALittle.Log(error);
            }
        }
        this._login_status = LoginStatus.EMULATOR_IDLE;
    }

    // 日志列表和详细列表之间的上下调整
    private fun HandleDragRightQuadUD(ALittle.UIButtonDragEvent event)
    {
        this._right_grad3_ud.up_size += event.delta_y;
    }
    private fun HandleDragEndRightQuadUD(ALittle.UIButtonDragEndEvent event)
    {
        g_GConfig.SetConfig("right_grid3_up_size", this._right_grad3_ud.up_size);
    }
    // 中间部分和右边部分之间的左右调整
    private fun HandleDragRightQuadLR(ALittle.UIButtonDragEvent event)
    {
        this._main_grid3_lr.down_size -= event.delta_x;
    }
    private fun HandleDragEndRightQuadLR(ALittle.UIButtonDragEndEvent event)
    {
        g_GConfig.SetConfig("main_grid3_down_size", this._main_grid3_lr.down_size);
    }

    // 移动光标
    private fun HandleSetVDragCursor(ALittle.UIMoveInEvent event)
    {
        ALittle.System_SetVDragCursor();
    }
    private fun HandleSetHDragCursor(ALittle.UIMoveInEvent event)
    {
        ALittle.System_SetHDragCursor();
    }

    // 普通光标
    private fun HandleSetNormalCursor(ALittle.UIMoveInEvent event)
    {
        ALittle.System_SetNormalCursor();
    }
}