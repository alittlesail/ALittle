
namespace Emulator;

struct PlayerInfo
{
    Lua.ISocket client;	// 连接
    RobotStepManager robot;
}

protected class GRobot : ALittle.DisplayLayout
{
    // 蓝图列表
	private AUIPlugin.AUIFileTreeLayout _blueprint_filetree;
    public GBlueprint _gblueprint;

    // 登陆界面
	private ALittle.ScrollScreen _log_scroll_screen;
	private ALittle.DropDown _ip_dropdown;
	private ALittle.ImageInput _login_port_input;
	private ALittle.ImageInput _min_player_id;
	private ALittle.ImageInput _max_player_id;
	private ALittle.TextButton _stop_button;
	private ALittle.TextButton _start_button;
	private ALittle.TextInput _login_ip_input;
	private ALittle.ScrollScreen _log_scroll_screen;

    // 所有玩家对象
    private Map<int, PlayerInfo> _player_map;
    private int _cur_create_count;
    private Map<Lua.ISocket, PlayerInfo> _socket_map;

    public fun Setup()
    {
        this._socket_map = new Map<Lua.ISocket, PlayerInfo>();

        // 界面初始化
        this._start_button.visible = true;
        this._stop_button.visible = false;
        this._login_ip_input.text = g_GConfig.GetString("login_ip", "127.0.0.1");
        var data_list = g_GConfig.GetConfig("login_ip_list", new List<string>());
        if (ALittle.List_Find(data_list, this._login_ip_input.text) == null)
        	ALittle.List_Push(data_list, this._login_ip_input.text);
        this._ip_dropdown.data_list = data_list;
        this._ip_dropdown.text = "";
        this._login_port_input.text = ALittle.String_ToString(g_GConfig.GetInt("login_port", 0));

        this._min_player_id.text = g_GConfig.GetInt("min_player_id", 1);
        this._max_player_id.text = g_GConfig.GetInt("max_player_id", 1);

        this._blueprint_filetree.SetRoot(g_GConfig.GetString("blueprint_root", ""), bind(this.HandleFileTreeRightMenu, this));
        this._blueprint_filetree.AddEventListener(this._gblueprint, this._gblueprint.HandleFileTreeSelectFile);
        this._blueprint_filetree.AddEventListener(this._gblueprint, this._gblueprint.HandleFileTreeDeleteFile);
        this._blueprint_filetree.AddEventListener(this._gblueprint, this._gblueprint.HandleFileTreeDeleteDir);
        this._blueprint_filetree.SetFold(1, true);

        this._gblueprint.Setup();
    }

    private fun ClearAllPlayer()
    {
        if (this._player_map != null)
        {
            for (var id, info in this._player_map)
            {
                if (info.client != null) info.client.Close();
                if (info.robot != null) info.robot.Clear();
            }
            this._player_map = null;
        }
        this._cur_create_count = 0;
        this._socket_map = new Map<Lua.ISocket, PlayerInfo>();
    }

    public fun AddLog(string log)
    {
        var at_bottom = this._log_scroll_screen.container_y <= this._log_scroll_screen.container.height - this._log_scroll_screen.view_height + 5;

        var item:ALittle.TextArea = null;
        if (this._log_scroll_screen.child_count > 500)
        {
            item = cast<ALittle.TextArea>(this._log_scroll_screen.childs[1]);
            this._log_scroll_screen.RemoveChild(item);
        }
        else
        {
            item = g_Control.CreateControl{ALittle.TextArea}("usual_textarea_left_top", null);
            item.width = this._log_scroll_screen.view_width;
        }

        item.text = log;
        item.height = item.real_height;
        this._log_scroll_screen.AddChild(item);
    
        if (at_bottom)
        	this._log_scroll_screen.ScrollToBottom();
    }

    private fun HandleIpSelectChanged(ALittle.UISelectChangedEvent event)
    {
        this._login_ip_input.text = this._ip_dropdown.text;
        this._ip_dropdown.text = "";
    }

    // 处理断开连接
    public fun HandleClientSocketDisconnected(int player_id, Lua.ISocket socket)
    {
        var info = this._player_map[player_id];
        if (info == null) return;
        this._socket_map[info.client] = null;

        this.AddLog("disconnected:"..player_id);
        info.client = null;
        this._player_map[player_id] = null;
    }

    private async fun CreatePlayer(string ip, int port, int total_count, int id
                                  , Functor<(int):lua.protobuf_message> robot_login
                                  , Functor<await(string, int, lua.protobuf_message):string,Lua.ISocket> login_func)
    {
        var msg = robot_login(id);
        var call_error, error, client = tcall(login_func, ip, port, msg);
        if (call_error != null) error = call_error;
        if (error != null)
        {
            this.AddLog(id..":"..error);
        }
        else
        {
            var info = new PlayerInfo();
            this._player_map[id] = info;
            this._socket_map[client] = info;
            info.client = client;
            // 设置断开的回调函数
            info.client.disconnect_callback = bind(this.HandleClientSocketDisconnected, this, id);
            info.robot = this._gblueprint.CreateRobotManager(id, info.client, total_count==1);
            info.robot.Start();
            // 开始循环接收消息包
            info.client.ReceiveMessage();
            this.AddLog(id..":login succeed");
        }

        this.HandleCreatePlayerEnd(total_count, id);
    }

    private fun HandleCreatePlayerEnd(int total_count, int id)
    {
        this._cur_create_count += 1;
        if (this._cur_create_count < total_count) return;

        this._start_button.disabled = false;
        this._start_button.visible = false;
        this._stop_button.visible = true;
    }

    private fun HandleStartClick(ALittle.UIClickEvent event)
    {
        if (this._gblueprint.step_file == null)
        {
            g_AUITool.ShowNotice("提示", "请先选择蓝图");
            return;
        }

        this.ClearAllPlayer();

        var ip = this._login_ip_input.text;
        var port = ALittle.Math_ToInt(this._login_port_input.text);
        if (port == null || port <= 0)
        {
            g_AUITool.ShowNotice("提示", "请使用正确的端口");
            return;
        }

        var min_player_id = ALittle.Math_ToInt(this._min_player_id.text);
        if (min_player_id == null || min_player_id <= 0)
        {
            g_AUITool.ShowNotice("提示", "玩家ID请填写正整数");
            return;
        }
        var max_player_id = ALittle.Math_ToInt(this._max_player_id.text);
        if (max_player_id == null || max_player_id <= 0)
        {
            g_AUITool.ShowNotice("提示", "玩家ID请填写正整数");
            return;
        }

        if (min_player_id > max_player_id)
        {
            var temp = min_player_id;
            min_player_id = max_player_id;
            max_player_id = temp;
        }

        var robot_login = cast<Map<string, Functor<(int):lua.protobuf_message>>>(_G)["__PLUGIN_RobotLogin"];
        if (robot_login == null)
        {
            g_AUITool.ShowNotice("提示", "插件代码中没有定义__PLUGIN_RobotLogin函数");
            return;
        }

        var login_func = cast<Map<string, Functor<await(string, int, lua.protobuf_message):string,Lua.ISocket>>>(_G)["__PLUGIN_StartLogin"];
        if (login_func == null)
        {
            g_AUITool.ShowNotice("提示", "插件代码中没有定义__PLUGIN_StartLogin函数");
            return;
        }

        this._start_button.disabled = true;
        this.AddLog("Started!");

        this._player_map = new Map<int, PlayerInfo>();

        // 开始创建玩家对象，间隔1毫秒创建
        var loop_list = new ALittle.LoopList();
        for (var id = min_player_id; id <= max_player_id; 1)
            loop_list.AddUpdater(new ALittle.LoopTimer(bind(this.CreatePlayer, this, ip, port, max_player_id - min_player_id + 1, id, robot_login, login_func), 50));
        loop_list.Start();

        g_GConfig.SetConfig("min_player_id", min_player_id);
        g_GConfig.SetConfig("max_player_id", max_player_id);
        g_GConfig.SetConfig("login_ip", ip);
        g_GConfig.SetConfig("login_port", port);
        var data_list = ALittle.List_Copy(g_GConfig.GetConfig("login_ip_list", new List<string>()));
        if (ALittle.List_Find(data_list, ip) == null)
        	ALittle.List_Push(data_list, ip);
        g_GConfig.SetConfig("login_ip_list", data_list);
        this._ip_dropdown.data_list = data_list;
        this._ip_dropdown.text = "";
    }

    private fun HandleStopClick(ALittle.UIClickEvent event)
    {
        this.ClearAllPlayer();

        this._stop_button.visible = false;
        this._start_button.visible = true;

        this.AddLog("Stoped!");
    }

    public fun Save(bool value)
    {
        this._gblueprint.Save(value);
    }

    private fun HandleFileTreeRightMenu(AUIPlugin.AUIFileTreeUserInfo user_info, AUIPlugin.AUIRightMenu menu)
    {
    }

    // 处理接收的数据
    public fun HandleMessage(PluginSocket socket, lua.protobuf_message msg)
    {
        var info = this._socket_map[socket];
        if (info == null) return;

        // 触发当前业务流程
        if (info.robot == null) return;
        info.robot.ReceiveMessage(msg);
    }

    public fun HandleSettingChanged()
    {
        // 协议列表
        this._blueprint_filetree.SetRoot(g_GConfig.GetString("blueprint_root", ""), bind(this.HandleFileTreeRightMenu, this));

        // 协议内容
        this._gblueprint.HandleSettingChanged();

        // 日志列表
        this._log_scroll_screen.RemoveAllChild();
    }
}
