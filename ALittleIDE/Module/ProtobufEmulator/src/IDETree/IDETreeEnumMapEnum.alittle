
namespace Emulator;

public class IDETreeEnumMapEnum : IDETreeLogic
{
	private IDETreeMap _parent;

	private ALittle.DropDown _key_dropdown;
	private ALittle.DropDown _value_dropdown;
	private ALittle.TextButton _insert_button;
	private ALittle.TextButton _delete_button;

	private lua.protobuf_message _msg;
	private lua.protobuf_reflection _rflct;
	private lua.protobuf_field_descriptor _key_field;
	private lua.protobuf_field_descriptor _value_field;
	
	private Map<string, int> _key_enum_value_map;
	private Map<string, int> _value_enum_value_map;

	public ctor(ALittle.ControlSystem ctrl_sys, RootInfo root, IDETreeMap parent, lua.protobuf_reflection rflct, lua.protobuf_message msg, lua.protobuf_field_descriptor key_field, lua.protobuf_field_descriptor value_field)
	{
		this._parent = parent;
		this._rflct = rflct;
		this._msg = msg;
		this._key_field = key_field;
		this._value_field = value_field;
		
		var key = lua.protobuf.reflection_getenumvalue(this._rflct, this._msg, this._key_field);
		var enum_descriptor = lua.protobuf.fielddescriptor_enumtype(this._key_field);
		var value_count = lua.protobuf.enumdescriptor_valuecount(enum_descriptor);
		var key_data_list = new List<string>();
		this._key_enum_value_map = new Map<string, int>();
		var key_string = "";
		for (var i = 0; i < value_count; 1)
		{
			var enum_value = lua.protobuf.enumdescriptor_value(enum_descriptor, i);
            key_data_list[i + 1] = lua.protobuf.enumvaluedescriptor_name(enum_value);
			var enum_number = lua.protobuf.enumvaluedescriptor_number(enum_value);
			this._key_enum_value_map[key_data_list[i + 1]] = enum_number;
			if (enum_number == key) key_string = key_data_list[i + 1];
        }

		var value = lua.protobuf.reflection_getenumvalue(this._rflct, this._msg, this._value_field);
		enum_descriptor = lua.protobuf.fielddescriptor_enumtype(this._value_field);
		value_count = lua.protobuf.enumdescriptor_valuecount(enum_descriptor);
		var value_data_list = new List<string>();
		this._key_enum_value_map = new Map<string, int>();
		var value_string = "";
		for (var i = 0; i < value_count; 1)
		{
			var enum_value = lua.protobuf.enumdescriptor_value(enum_descriptor, i);
            value_data_list[i + 1] = lua.protobuf.enumvaluedescriptor_name(enum_value);
			var enum_number = lua.protobuf.enumvaluedescriptor_number(enum_value);
			this._key_enum_value_map[value_data_list[i + 1]] = enum_number;
			if (enum_number == value) value_string = value_data_list[i + 1];
        }

		this._item = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_common_tree_enum_map_enum", this);
		this.AddChild(this._item);
		this.width = this._item.width;
		this.height = this._item.height;
		
		this._item_title.text = "["..lua.protobuf.fielddescriptor_cpptypename(key_field).." "..lua.protobuf.fielddescriptor_cpptypename(value_field).."] : ";
		this._key_dropdown.data_list = key_data_list;
		this._key_dropdown.text = key_string;
		this._value_dropdown.data_list = value_data_list;
		this._value_dropdown.text = value_string;

		this._key_dropdown.x = this._item_title.width + this._item_title.x + 1;
		this._value_dropdown.x = this._key_dropdown.width + this._key_dropdown.x + 1;
		this._insert_button.x = this._value_dropdown.x + this._value_dropdown.width + 1;
		this._delete_button.x = this._insert_button.x + this._insert_button.width + 1;
		this._item.width = this._delete_button.x + this._delete_button.width + 1;
		this.width = this._item.width;
		
		this.Init();
		this._key_dropdown.disabled = root.for_show;
		this._value_dropdown.disabled = root.for_show;
		this._insert_button.disabled = root.for_show;
		this._delete_button.disabled = root.for_show;
	}
	
	public fun HandleKeySelectChanegd(ALittle.UISelectChangedEvent event)
	{
		var value = this._key_enum_value_map[event.target.text];
		if (value == null) return;

		lua.protobuf.reflection_setenumvalue(this._rflct, this._msg, this._key_field, value);
		this.Save();
    }

	public fun HandleValueSelectChanegd(ALittle.UISelectChangedEvent event)
	{
		var value = this._value_enum_value_map[event.target.text];
		if (value == null) return;

		lua.protobuf.reflection_setenumvalue(this._rflct, this._msg, this._value_field, value);
		this.Save();
    }

	public fun HandleInsertClick(ALittle.UIClickEvent event)
	{
		this._parent.CreateOneBefore(this);
    }
	
	public fun HandleDeleteClick(ALittle.UIClickEvent event)
	{
		this._parent.Delete(this);
    }
}