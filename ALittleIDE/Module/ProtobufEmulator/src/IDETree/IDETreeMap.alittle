
namespace Emulator;

public class IDETreeMap : IDETree
{
	private ALittle.TextButton _add_button;

	private lua.protobuf_reflection _rflct;
	private lua.protobuf_message _msg;
	private lua.protobuf_field_descriptor _field;

    private lua.protobuf_field_descriptor _key_descriptor;
    private int _key_cpp_type;
    private int _value_cpp_type;
    private lua.protobuf_field_descriptor _value_descriptor;

	public ctor(ALittle.ControlSystem ctrl_sys, RootInfo root, string field_name, lua.protobuf_reflection rflct, lua.protobuf_message msg, lua.protobuf_field_descriptor field)
	{
		this._rflct = rflct;
		this._msg = msg;
		this._field = field;
                
        var map_descriptor = lua.protobuf.fielddescriptor_messagetype(field);
        this._key_descriptor = lua.protobuf.messagedescriptor_findfieldbyname(map_descriptor, "key");
        this._value_descriptor = lua.protobuf.messagedescriptor_findfieldbyname(map_descriptor, "value");
        this._key_cpp_type = lua.protobuf.fielddescriptor_cpptype(this._key_descriptor);
        this._value_cpp_type = lua.protobuf.fielddescriptor_cpptype(this._value_descriptor);
        
        var key_type_name = lua.protobuf.fielddescriptor_cpptypename(this._key_descriptor);
        var value_type_name = lua.protobuf.fielddescriptor_cpptypename(this._value_descriptor);
        if (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_MESSAGE)
        {
            var value_msg_descriptor = lua.protobuf.fielddescriptor_messagetype(this._value_descriptor);
            value_type_name = lua.protobuf.messagedescriptor_name(value_msg_descriptor);
        }

		// 对树的头部进行处理
		this._head = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_common_tree_map", this);
		ALittle.DisplayGroup.AddChild(this, this._head, 1);

        var msg_count = lua.protobuf.reflection_getrepeatedmessagecount(rflct, msg, field);
        for (var index = 0; index < msg_count; 1)
        {
            var sub_msg = lua.protobuf.reflection_getrepeatedmessage(rflct, msg, field, index);
            var sub_rflct = lua.protobuf.message_getreflection(sub_msg);
            
            if (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
            {
                if (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
                    this.AddChild(new IDETreeBoolMapBool(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
                elseif (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
                    this.AddChild(new IDETreeBoolMapEnum(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
                elseif (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_MESSAGE)
                    this.AddChild(UtilityCreateTreeBoolMapMessage(this._root, this, sub_msg, this._key_descriptor, this._value_descriptor));
                else
                    this.AddChild(new IDETreeBoolMapValue(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
            }
            elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
            {
                if (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
                    this.AddChild(new IDETreeEnumMapBool(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
                elseif (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
                    this.AddChild(new IDETreeEnumMapEnum(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
                elseif (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_MESSAGE)
                    this.AddChild(UtilityCreateTreeEnumMapMessage(this._root, this, sub_msg, this._key_descriptor, this._value_descriptor));
                else
                    this.AddChild(new IDETreeEnumMapValue(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
            }
            else
            {
                if (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
                    this.AddChild(new IDETreeValueMapBool(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
                elseif (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
                    this.AddChild(new IDETreeValueMapEnum(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
                elseif (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_MESSAGE)
                    this.AddChild(UtilityCreateTreeValueMapMessage(this._root, this, sub_msg, this._key_descriptor, this._value_descriptor));
                else
                    this.AddChild(new IDETreeValueMapValue(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
            }
        }


		this._item_title.text = "[map<"..key_type_name..","..value_type_name..">] "..field_name..": ";
		this._add_button.x = this._item_title.x + this._item_title.width;

		this._head.width = this._add_button.x + this._add_button.width + 2;
        
		this.Init();
        this._add_button.disabled = root.for_show;
	}

	private fun HandleAddClick(ALittle.UIClickEvent event)
	{
        this.AddLine(this.child_count);
        this.fold = true;
		this.Save();
    }

    public fun AddLine(int index)
    {
        var sub_msg = lua.protobuf.reflection_insertrepeatedmessage(this._rflct, this._msg, this._field, index);
        var sub_rflct = lua.protobuf.message_getreflection(sub_msg);
        if (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
        {
            if (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
                this.AddChild(new IDETreeBoolMapBool(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
            elseif (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
                this.AddChild(new IDETreeBoolMapEnum(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
            elseif (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_MESSAGE)
                this.AddChild(UtilityCreateTreeBoolMapMessage(this._root, this, sub_msg, this._key_descriptor, this._value_descriptor));
            else
                this.AddChild(new IDETreeBoolMapValue(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
        }
        elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
        {
            if (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
                this.AddChild(new IDETreeEnumMapBool(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
            elseif (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
                this.AddChild(new IDETreeEnumMapEnum(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
            elseif (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_MESSAGE)
                this.AddChild(UtilityCreateTreeEnumMapMessage(this._root, this, sub_msg, this._key_descriptor, this._value_descriptor));
            else
                this.AddChild(new IDETreeEnumMapValue(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
        }
        else
        {
            if (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
                this.AddChild(new IDETreeValueMapBool(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
            elseif (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
                this.AddChild(new IDETreeValueMapEnum(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
            elseif (this._value_cpp_type == lua.protobuf_cpptype.CPPTYPE_MESSAGE)
                this.AddChild(UtilityCreateTreeValueMapMessage(this._root, this, sub_msg, this._key_descriptor, this._value_descriptor));
            else
                this.AddChild(new IDETreeValueMapValue(g_Control, this._root, this, sub_rflct, sub_msg, this._key_descriptor, this._value_descriptor));
        }
    }

    public fun CreateOneBefore(ALittle.DisplayObject child)
    {
        var index = this.GetChildIndex(child) - 1;
        this.AddLine(index);
		this.Save();
    }

    public fun Delete(ALittle.DisplayObject child)
    {
        var index = this.GetChildIndex(child) - 1;
        this.RemoveChild(child);
        lua.protobuf.reflection_removerepeatedmessage(this._rflct, this._msg, this._field, index);
		this.Save();
    }
}
