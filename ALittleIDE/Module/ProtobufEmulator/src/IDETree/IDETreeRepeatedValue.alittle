
namespace Emulator;

public class IDETreeRepeatedValue : IDETreeLogic
{
	private IDETreeRepeated _parent;
	
	private int _cpp_type;
	private ALittle.ImageInput _value_input;
	private ALittle.TextButton _insert_button;
	private ALittle.TextButton _delete_button;

	private lua.protobuf_message _msg;
	private lua.protobuf_reflection _rflct;
	private lua.protobuf_field_descriptor _field;

	public ctor(ALittle.ControlSystem ctrl_sys, RootInfo root, IDETreeRepeated parent, lua.protobuf_reflection rflct, lua.protobuf_message msg, lua.protobuf_field_descriptor field, int index)
	{
		this._parent = parent;
		this._rflct = rflct;
		this._msg = msg;
		this._field = field;

		this._cpp_type = lua.protobuf.fielddescriptor_cpptype(field);
		var value = this.RefreshValue(index);

		this._item = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_common_tree_repeated_value", this);
		this.AddChild(this._item);
		this.width = this._item.width;
		this.height = this._item.height;
		
		this._item_title.text = "["..lua.protobuf.fielddescriptor_cpptypename(field).."] : ";
		this._value_input.text = ALittle.String_ToString(value);
		this._value_input.width = this.width - this._item_title.width - this._item_title.x - 2 - this._insert_button.width - this._delete_button.width - 1;
		this._value_input.x = this._item_title.width + this._item_title.x;
		this._insert_button.x = this._value_input.x + this._value_input.width + 1;
		this._delete_button.x = this._insert_button.x + this._insert_button.width + 1;
		
		this.Init();
		this._value_input.editable = !root.for_show;
		this._insert_button.disabled = root.for_show;
		this._delete_button.disabled = root.for_show;
	}
	
	private fun RefreshValue(int index) : any
	{
		if (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT32)
			return lua.protobuf.reflection_getrepeatedint32(this._rflct, this._msg, this._field, index);
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT32)
			return lua.protobuf.reflection_getrepeateduint32(this._rflct, this._msg, this._field, index);
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT64)
			return lua.protobuf.reflection_getrepeatedint64(this._rflct, this._msg, this._field, index);
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT64)
			return lua.protobuf.reflection_getrepeateduint64(this._rflct, this._msg, this._field, index);
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_DOUBLE)
			return lua.protobuf.reflection_getrepeateddouble(this._rflct, this._msg, this._field, index);
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_FLOAT)
			return lua.protobuf.reflection_getrepeatedfloat(this._rflct, this._msg, this._field, index);
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_STRING)
			return lua.protobuf.reflection_getrepeatedstring(this._rflct, this._msg, this._field, index);
		return null;
    }

	public fun HandleInputFocusOut(ALittle.UIFocusOutEvent event)
	{
        var text = this._value_input.text;
		var index = this._parent.GetChildIndex(this) - 1;
		
		if (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT32)
			lua.protobuf.reflection_setrepeatedint32(this._rflct, this._msg, this._field, index, ALittle.Math_ToIntOrZero(text));
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT32)
			lua.protobuf.reflection_setrepeateduint32(this._rflct, this._msg, this._field, index, ALittle.Math_ToIntOrZero(text));
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT64)
			lua.protobuf.reflection_setrepeatedint64(this._rflct, this._msg, this._field, index, ALittle.Math_ToIntOrZero(text));
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT64)
			lua.protobuf.reflection_setrepeateduint64(this._rflct, this._msg, this._field, index, ALittle.Math_ToIntOrZero(text));
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_DOUBLE)
			lua.protobuf.reflection_setrepeateddouble(this._rflct, this._msg, this._field, index, ALittle.Math_ToDoubleOrZero(text));
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_FLOAT)
			lua.protobuf.reflection_setrepeatedfloat(this._rflct, this._msg, this._field, index, ALittle.Math_ToDoubleOrZero(text));
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_STRING)
			lua.protobuf.reflection_setrepeatedstring(this._rflct, this._msg, this._field, index, text);
		
		var value = this.RefreshValue(index);
		this._value_input.text = ALittle.String_ToString(value);
		this.Save();
    }

	public fun HandleInsertClick(ALittle.UIClickEvent event)
	{
		this._parent.CreateOneBefore(this);
    }
	
	public fun HandleDeleteClick(ALittle.UIClickEvent event)
	{
		this._parent.Delete(this);
    }
}