
namespace Emulator;

public class IDETreeValue : IDETreeLogic
{
	private int _cpp_type;
	private ALittle.ImageInput _value_input;
	private lua.protobuf_message _msg;
	private lua.protobuf_reflection _rflct;
	private lua.protobuf_field_descriptor _field;

	public ctor(ALittle.ControlSystem ctrl_sys, RootInfo root, string field_name, lua.protobuf_reflection rflct, lua.protobuf_message msg, lua.protobuf_field_descriptor field)
	{
		this._rflct = rflct;
		this._msg = msg;
		this._field = field;

		this._cpp_type = lua.protobuf.fielddescriptor_cpptype(field);
		var value = this.RefreshValue();

		this._item = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_common_tree_value", this);
		this.AddChild(this._item);
		this.width = this._item.width;
		this.height = this._item.height;
		
		this._item_title.text = "["..lua.protobuf.fielddescriptor_cpptypename(field).."] "..field_name..": ";
		this._value_input.text = ALittle.String_ToString(value);
		this._value_input.width = this.width - this._item_title.width - this._item_title.x - 2;
		this._value_input.x = this._item_title.width + this._item_title.x;
		
		this.Init();
		this._value_input.editable = !root.for_show;
	}

	private fun RefreshValue() : any
	{
		if (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT32)
			return lua.protobuf.reflection_getint32(this._rflct, this._msg, this._field);
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT32)
			return lua.protobuf.reflection_getuint32(this._rflct, this._msg, this._field);
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT64)
			return lua.protobuf.reflection_getint64(this._rflct, this._msg, this._field);
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT64)
			return lua.protobuf.reflection_getuint64(this._rflct, this._msg, this._field);
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_DOUBLE)
			return lua.protobuf.reflection_getdouble(this._rflct, this._msg, this._field);
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_FLOAT)
			return lua.protobuf.reflection_getfloat(this._rflct, this._msg, this._field);
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_STRING)
			return lua.protobuf.reflection_getstring(this._rflct, this._msg, this._field);
		return null;
    }

	public fun HandleInputFocusOut(ALittle.UIFocusOutEvent event)
	{
        var text = this._value_input.text;
		
		if (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT32)
			lua.protobuf.reflection_setint32(this._rflct, this._msg, this._field, ALittle.Math_ToIntOrZero(text));
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT32)
			lua.protobuf.reflection_setuint32(this._rflct, this._msg, this._field, ALittle.Math_ToIntOrZero(text));
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT64)
			lua.protobuf.reflection_setint64(this._rflct, this._msg, this._field, ALittle.Math_ToIntOrZero(text));
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT64)
			lua.protobuf.reflection_setuint64(this._rflct, this._msg, this._field, ALittle.Math_ToIntOrZero(text));
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_DOUBLE)
			lua.protobuf.reflection_setdouble(this._rflct, this._msg, this._field, ALittle.Math_ToDoubleOrZero(text));
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_FLOAT)
			lua.protobuf.reflection_setfloat(this._rflct, this._msg, this._field, ALittle.Math_ToDoubleOrZero(text));
		elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_STRING)
			lua.protobuf.reflection_setstring(this._rflct, this._msg, this._field, text);
		
		var value = this.RefreshValue();
		this._value_input.text = ALittle.String_ToString(value);
		this.Save();
    }
}