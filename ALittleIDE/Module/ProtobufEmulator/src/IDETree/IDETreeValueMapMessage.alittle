
namespace Emulator;

public class IDETreeValueMapMessage : IDETree
{
	private IDETreeMap _parent;
	private DetailInfo _detail_info;
	
	private ALittle.ImageInput _key_input;
	private ALittle.TextButton _insert_button;
	private ALittle.TextButton _delete_button;

	private int _key_cpp_type;
	private lua.protobuf_message _msg;
	private lua.protobuf_reflection _rflct;
	private lua.protobuf_field_descriptor _key_field;

	public ctor(ALittle.ControlSystem ctrl_sys, RootInfo root, IDETreeMap parent, lua.protobuf_reflection rflct, lua.protobuf_message msg, lua.protobuf_field_descriptor key_field, DetailInfo detail_info)
	{
		this._detail_info = detail_info;
		
		this._parent = parent;
		this._rflct = rflct;
		this._msg = msg;
		this._key_field = key_field;
		
		this._key_cpp_type = lua.protobuf.fielddescriptor_cpptype(key_field);
		var key = this.RefreshValue();

		// 对树的头部进行处理
		this._head = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_common_tree_value_map_message", this);
		ALittle.DisplayGroup.AddChild(this, this._head, 1);
		
		this._item_title.text = "["..lua.protobuf.fielddescriptor_cpptypename(key_field).." "..detail_info.info.name.."] : ";
		
		this._key_input.text = ALittle.String_ToString(key);

		this._key_input.x = this._item_title.width + this._item_title.x + 1;
		this._insert_button.x = this._key_input.x + this._key_input.width + 1;
		this._delete_button.x = this._insert_button.x + this._insert_button.width + 1;
		this._head.width = this._delete_button.x + this._delete_button.width + 1;

		this.Init();
		this._key_input.editable = !root.for_show;
		this._insert_button.disabled = root.for_show;
		this._delete_button.disabled = root.for_show;
	}

	public fun GetDetailInfo() : DetailInfo { return this._detail_info; }
	

	private fun RefreshValue() : any
	{
		if (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_INT32)
			return lua.protobuf.reflection_getint32(this._rflct, this._msg, this._key_field);
		elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT32)
			return lua.protobuf.reflection_getuint32(this._rflct, this._msg, this._key_field);
		elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_INT64)
			return lua.protobuf.reflection_getint64(this._rflct, this._msg, this._key_field);
		elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT64)
			return lua.protobuf.reflection_getuint64(this._rflct, this._msg, this._key_field);
		elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_DOUBLE)
			return lua.protobuf.reflection_getdouble(this._rflct, this._msg, this._key_field);
		elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_FLOAT)
			return lua.protobuf.reflection_getfloat(this._rflct, this._msg, this._key_field);
		elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_STRING)
			return lua.protobuf.reflection_getstring(this._rflct, this._msg, this._key_field);
		return null;
    }

	public fun HandleKeyInputFocusOut(ALittle.UIFocusOutEvent event)
	{
        var text = this._key_input.text;
		
		if (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_INT32)
			lua.protobuf.reflection_setint32(this._rflct, this._msg, this._key_field, ALittle.Math_ToIntOrZero(text));
		elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT32)
			lua.protobuf.reflection_setuint32(this._rflct, this._msg, this._key_field, ALittle.Math_ToIntOrZero(text));
		elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_INT64)
			lua.protobuf.reflection_setint64(this._rflct, this._msg, this._key_field, ALittle.Math_ToIntOrZero(text));
		elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT64)
			lua.protobuf.reflection_setuint64(this._rflct, this._msg, this._key_field, ALittle.Math_ToIntOrZero(text));
		elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_DOUBLE)
			lua.protobuf.reflection_setdouble(this._rflct, this._msg, this._key_field, ALittle.Math_ToDoubleOrZero(text));
		elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_FLOAT)
			lua.protobuf.reflection_setfloat(this._rflct, this._msg, this._key_field, ALittle.Math_ToDoubleOrZero(text));
		elseif (this._key_cpp_type == lua.protobuf_cpptype.CPPTYPE_STRING)
			lua.protobuf.reflection_setstring(this._rflct, this._msg, this._key_field, text);
		
		var value = this.RefreshValue();
		this._key_input.text = ALittle.String_ToString(value);
		this.Save();
    }

	public fun HandleInsertClick(ALittle.UIClickEvent event)
	{
		this._parent.CreateOneBefore(this);
    }
	
	public fun HandleDeleteClick(ALittle.UIClickEvent event)
	{
		this._parent.Delete(this);
    }
}
