
namespace Emulator;

// 壳入口函数
public async static __Browser_Setup(ALittle.DisplayLayout layer_group
                              , ALittle.ControlSystem control
                              , string module_base_path, string script_base_path)
{
	// 创建窗口
	var window_width, window_height, flag, scale = ALittle.System_CalcLandscape(1200, 600, ALittle.UIEnumTypes.VIEW_RESIZABLE);
	ALittle.System_CreateView("Emulator", window_width, window_height, flag, scale);
	ALittle.System_SetViewIcon(module_base_path.."Other/ic_launcher.png");
    
	// 加载模块
	A_ModuleSystem.LoadModule(module_base_path, "Emulator");
}

// 壳处理添加模块，layer_group是模块的层组
// 返回false，或者nil，表示不处理，下面的层直接挂姐在壳下面
public static __Browser_AddModule(string module_name, ALittle.DisplayLayout layer_group, ALittle.ModuleInfo module_info)
{
}

// 壳结束函数
public static __Browser_Shutdown()
{
}

protected var g_Control:ALittle.ControlSystem;
protected var g_LayerGroup:ALittle.DisplayLayout;
protected var g_ModuleBasePath:string;

// UI库
protected var g_AUIPluinControl:ALittle.ControlSystem;
// 深度学习
protected var g_ADeeplearningControl:ALittle.ControlSystem;
// 版本管理器
protected var g_VersionManager:AUIPlugin.AUIVersionManager;

// 模块入口函数
public async static __Module_Setup(ALittle.DisplayLayout layer_group, ALittle.ControlSystem control
                                  , string module_base_path, string script_base_path, string debug)
{
	// 把resource, layer_group变量保存到全局，便于使用
	g_Control = control;
	g_LayerGroup = layer_group;
	g_ModuleBasePath = module_base_path;

	// 加载UI插件
    g_AUIPluinControl = A_ModuleSystem.LoadPlugin("AUIPlugin");

	[Language(Lua)]
	if (ALittle.System_GetPlatform() == "Windows")
	{
		package.cpath = package.cpath..";./"..module_base_path.."Other/?.dll";
        lua.require("memory");
        lua.require("protobuf");
        lua.require("socket");
    }

	alittle.Require(script_base_path, "GCenter");
	alittle.Require(script_base_path, "GClient");
	alittle.Require(script_base_path, "GRobot");
	alittle.Require(script_base_path, "GBlueprint");
	alittle.Require(script_base_path, "RobotStep");

	alittle.Require(script_base_path, "IDETree/IDETreeLogic");
	alittle.Require(script_base_path, "IDETree/IDETree");
	alittle.Require(script_base_path, "IDETree/IDETreeValue");
	alittle.Require(script_base_path, "IDETree/IDETreeEnum");
	alittle.Require(script_base_path, "IDETree/IDETreeBool");
	alittle.Require(script_base_path, "IDETree/IDETreeRepeatedValue");
	alittle.Require(script_base_path, "IDETree/IDETreeRepeatedEnum");
	alittle.Require(script_base_path, "IDETree/IDETreeRepeatedBool");
	alittle.Require(script_base_path, "IDETree/IDETreeRepeatedMessage");
	alittle.Require(script_base_path, "IDETree/IDETreeBoolMapBool");
	alittle.Require(script_base_path, "IDETree/IDETreeBoolMapEnum");
	alittle.Require(script_base_path, "IDETree/IDETreeBoolMapValue");
	alittle.Require(script_base_path, "IDETree/IDETreeBoolMapMessage");
	alittle.Require(script_base_path, "IDETree/IDETreeEnumMapBool");
	alittle.Require(script_base_path, "IDETree/IDETreeEnumMapEnum");
	alittle.Require(script_base_path, "IDETree/IDETreeEnumMapValue");
	alittle.Require(script_base_path, "IDETree/IDETreeEnumMapMessage");
	alittle.Require(script_base_path, "IDETree/IDETreeValueMapBool");
	alittle.Require(script_base_path, "IDETree/IDETreeValueMapEnum");
	alittle.Require(script_base_path, "IDETree/IDETreeValueMapValue");
	alittle.Require(script_base_path, "IDETree/IDETreeValueMapMessage");
	alittle.Require(script_base_path, "IDETree/IDETreeMessage");
	alittle.Require(script_base_path, "IDETree/IDETreeMap");
	alittle.Require(script_base_path, "IDETree/IDETreeRepeated");

	alittle.Require(script_base_path, "GUtility");
	alittle.Require(script_base_path, "PluginSocket");

	g_GCenter.Setup();

	[Language(Lua)]
    g_VersionManager = new AUIPlugin.AUIVersionManager("139.159.176.119", 1100, "alittle", "Emulator");

	[Language(Lua)]
	if (A_ModuleSystem.GetDebugInfo() != "debug") g_VersionManager.CheckVersionUpdate();
}

// 模块结束函数
public static __Module_Shutdown()
{
	[Language(Lua)]
	g_VersionManager.Shutdown();

	g_GCenter.Shutdown();
}

// 提供给壳的模块信息
public static __Module_GetInfo(ALittle.ControlSystem control, string module_base_path, string script_base_path) : ALittle.ModuleShortInfo
{
	var info = new ALittle.ModuleShortInfo();
	info.title = "Emulator";
	info.icon = null;
	info.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
	info.width_value = 0;
	info.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
	info.height_value = 0;
	return info;
}