
namespace ProtobufEmulator;

protected class RobotStep
{
    private RobotStepManager _manager;
    private RobotStepInfo _info;

    public ctor(RobotStepManager manager, RobotStepInfo info)
    {
        this._manager = manager;
        this._info = info;
    }

    public fun ReceiveMessage(lua.protobuf_message msg)
    {
    }

    public fun GetMessage() : lua.protobuf_message { return null; }

    public fun Execute() : bool { return true; }

    public fun Trace()
    {
        var ref = reflect(this);
        g_GCenter._grobot.AddLog(ref.__name);
    }

    public get info() : RobotStepInfo { return this._info; }

    public fun Clear() {}
}

protected class RobotStepStart : RobotStep
{
    public fun Execute() : bool { return true; }

    public fun Trace()
    {
        g_GCenter._grobot.AddLog("开始");
    }
}

protected class RobotStepReceiveMessage : RobotStep
{
    private lua.protobuf_message _message;

    public fun ReceiveMessage(lua.protobuf_message msg)
    {
        var descriptor = lua.protobuf.message_getdescriptor(msg);
        if (descriptor == null) return;

        var full_name = lua.protobuf.messagedescriptor_fullname(descriptor);
        if (full_name != this._info.full_name) return;

        this._message = msg;

        // 拷贝消息
        var dst_json = lua.protobuf.message_jsonencode(this._message, true, true);
        var error, dst_info:Map<string, any> = tcall(ALittle.String_JsonDecode, dst_json);
        if (error != null)
        {
            g_GCenter._grobot.AddLog(error);
        }
        else
        {
            for (var index, log in this._info.receive_log_list)
            {
                var dst_field_list = ALittle.String_Split(log.dst_field, ".");
                var dst_field_len = ALittle.List_Len(dst_field_list);
                var dst_temp = dst_info;
                for (var i = 1; i <= dst_field_len; 1)
                {
                    var field_name = dst_field_list[i];
                    dst_temp = dst_temp[field_name];
                    if (dst_temp == null)
                    {
                        g_GCenter._grobot.AddLog("unique id:"..this._info.full_name.." can't find "..log.dst_field..", error field:"..field_name);
                        break;
                    }
                }
                if (dst_temp != null)
                {
                    if (lua.type(dst_temp) == "table")
                        g_GCenter._grobot.AddLog(this._manager.player_id..":["..log.dst_field.."]"..ALittle.String_JsonEncode(dst_temp));
                    else
                        g_GCenter._grobot.AddLog(this._manager.player_id..":["..log.dst_field.."]"..ALittle.String_ToString(dst_temp));
                }
            }
        }

        this._manager.NextStep();
    }

    public fun Trace()
    {
        g_GCenter._grobot.AddLog("等待消息:"..this._info.full_name);
    }

    public fun GetMessage() : lua.protobuf_message { return this._message; }

    public fun Execute() : bool { return false; }
}

protected class RobotStepLog : RobotStep
{
    public fun Execute() : bool
    {
        if (this._info.log != null)
        	g_GCenter._grobot.AddLog(this._manager.player_id..":"..this._info.log);
        return true;
    }

    public fun Trace()
    {
    }
}

protected class RobotStepSendMessage : RobotStep
{
    private lua.protobuf_message _message;

    public ctor(RobotStepManager manager, RobotStepInfo info)
    {
        this._message = A_LuaProtobufSchedule.CreateMessageByJson(info.full_name, info.message_json);
    }

    public fun Execute() : bool
    {
        if (this._info.cmd_list[1] == null)
        {
            this._manager.socket.SendMessage(this._message);
            return true;
        }

        // 拷贝消息
        var dst_json = lua.protobuf.message_jsonencode(this._message, true, false);
        var error, dst_info:Map<string, any> = tcall(ALittle.String_JsonDecode, dst_json);
        if (error != null)
        {
            g_GCenter._grobot.AddLog(error);
            return false;
        }

        var src_map = new Map<string, Map<string, any>>();

        // 根据指令来设置message的值
        for (var index, cmd in this._info.cmd_list)
        {
            if (cmd.src_id == null)
            {
                g_GCenter._grobot.AddLog("unique id in cmd is null");
                return false;
            }

            var src_info =  src_map[cmd.src_id];
            if (src_info == null)
            {
                var src_msg = this._manager.GetMessage(cmd.src_id);
                if (src_msg == null)
                {
                    g_GCenter._grobot.AddLog("can't find message by unique id:"..cmd.src_id);
                    return false;
                }

                var src_json = lua.protobuf.message_jsonencode(src_msg, true, false);
                error, src_info = tcall(ALittle.String_JsonDecode, src_json);
                if (error != null)
                {
                    g_GCenter._grobot.AddLog(error);
                    return false;
                }

                src_map[cmd.src_id] = src_info;
            }

            var src_field_list = ALittle.String_Split(cmd.src_field, ".");
            var src_field:any = null;
            for (var _, field_name in src_field_list)
            {

                src_info = src_info[field_name];
                if (src_info == null)
                {
                    g_GCenter._grobot.AddLog("unique id:"..cmd.src_id.." can't find "..cmd.src_field..", error field:"..field_name);
                    return false;
                }
            }

            var dst_field_list = ALittle.String_Split(cmd.dst_field, ".");
            var dst_field_len = ALittle.List_Len(dst_field_list);
            var dst_temp = dst_info;
            for (var i = 1; i <= dst_field_len; 1)
            {
                var field_name = dst_field_list[i];
                if (dst_temp[field_name] == null)
                {
                    g_GCenter._grobot.AddLog("unique id:"..this._info.full_name.." can't find "..cmd.dst_field..", error field:"..field_name);
                    return false;
                }
                if (i < dst_field_len)
                	dst_temp = dst_temp[field_name];
            }
            dst_temp[dst_field_list[dst_field_len]] = src_info;
        }
        var new_message = A_LuaProtobufSchedule.CreateMessageByStruct(this._info.full_name, dst_info);
        if (new_message == null) return false;
        this._manager.socket.SendMessage(new_message);
        return true;
    }

    public fun Trace()
    {
        g_GCenter._grobot.AddLog("发送消息:"..this._info.full_name);
    }

    public fun GetMessage() : lua.protobuf_message { return this._message; }
}

protected class RobotStepDelay : RobotStep
{
    private ALittle.LoopTimer _loop;

    public fun Execute() : bool
    {
        this.Clear();

        this._loop = new ALittle.LoopTimer(bind(this._manager.NextStep, this._manager), this._info.delay_ms);
        this._loop.Start();
        return false;
    }

    public fun Trace()
    {
        g_GCenter._grobot.AddLog("延迟:"..this._info.delay_ms);
    }

    public fun Clear()
    {
        if (this._loop != null)
        {
            this._loop.Stop();
            this._loop = null;
        }
    }
}

protected class RobotStepManager
{
    private Map<int, RobotStep> _step_map;
    private Lua.ISocket _socket;

    private Map<string, RobotStep> _unique_map;

    private RobotStep _cur_step;
    private ALittle.LoopTimer _timer;
    private int _player_id;
    private bool _trace;

    public ctor(int player_id, Lua.ISocket socket, RobotStepFile file, bool trace)
    {
        this._trace = trace;
        this._player_id = player_id;
        this._socket = socket;
        this._step_map = new Map<int, RobotStep>();
        this._unique_map = new Map<string, RobotStep>();

        {
            var step = new RobotStepStart(this, file.start_step);
            this._step_map[file.start_step.id] = step;
            this._cur_step = step;
        }

        for (var id, info in file.step_map)
        {
            var step:RobotStep = null;
            if (info.type == RobotStepType.RST_RECEIVE_MESSAGE)
            {
                step = new RobotStepReceiveMessage(this, info);
            }
            elseif (info.type == RobotStepType.RST_SEND_MESSAGE)
            {
                step = new RobotStepSendMessage(this, info);
            }
            elseif (info.type == RobotStepType.RST_DELAY)
            {
                step = new RobotStepDelay(this, info);
            }
            elseif (info.type == RobotStepType.RST_START)
            {
                step = new RobotStepStart(this, info);
                this._cur_step = step;
            }
            elseif (info.type == RobotStepType.RST_LOG)
            {
                step = new RobotStepLog(this, info);
            }

            if (step != null)
            {
                this._step_map[id] = step;
                if (info.unique_id != null)
                    this._unique_map[info.unique_id] = step;
            }
        }
    }

    public get player_id() : int { return this._player_id; }
    public get trace() : bool { return this._trace; }

    public fun GetMessage(string unique_id) : lua.protobuf_message
    {
        if (unique_id == null) return null;
        var step = this._unique_map[unique_id];
        if (step == null) return null;
        return step.GetMessage();
    }

    public fun Start()
    {
        // 直接跳过开始节点，直接进入第二节点
        // 如果第二个节点是等待消息，会因为执行开始节点而错过消息
        this.NextStep();
    }

    public fun Clear()
    {
        if (this._timer != null)
        {
            this._timer.Stop();
            this._timer = null;
        }

        for (var id, step in this._step_map)
            step.Clear();
        this._step_map = new Map<int, RobotStep>();
    }

    public get socket() : Lua.ISocket { return this._socket; }

    public fun NextStep()
    {
        if (this._timer != null)
        {
            this._timer.Stop();
            this._timer = null;
        }

        if (this._cur_step == null) return;
        var next_id = this._cur_step.info.next_id;
        if (next_id == null) return;
        this._cur_step = this._step_map[next_id];
        if (this._cur_step == null) return;
        if (this._trace) this._cur_step.Trace();
        if (!this._cur_step.Execute()) return;

        this._timer = new ALittle.LoopTimer(bind(this.NextStep, this), 1);
        this._timer.Start();
    }

    public fun ReceiveMessage(lua.protobuf_message msg)
    {
        if (this._cur_step == null) return;
        this._cur_step.ReceiveMessage(msg);
    }
}